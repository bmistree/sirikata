/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//EmersonTree.g
 *     -                            On : 2011-08-02 18:53:10
 *     -           for the tree parser : EmersonTreeTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */


    #include <stdlib.h>
    #include <string.h>
    #include <antlr3.h>
    #include "Util.h"
    
    #define APP(s) \
        { \
            const char* str = s; \
            int len = strlen(str); \
            int numNewlines = 0; \
            for (int i = 0; i < len; i++) \
                if (str[i] == '\n') \
                    numNewlines++; \
            program_string->append(program_string, str); \
            current_line += numNewlines; \
            strcat(retval.genText,s);\
        }

    #define LINE_DEBUG 0
    
    #define LINE(num) \
        { \
            if (lineIndex >= linesSize) { \
                linesSize *= 2; \
                emersonLines = (int*)realloc(emersonLines, linesSize * sizeof(int)); \
                jsLines = (int*)realloc(jsLines, linesSize * sizeof(int)); \
            } \
            if (LINE_DEBUG) { \
                char buffer[128]; \
                sprintf(buffer, "/* em line %d, js line %d */", num, current_line); \
                program_string->append(program_string, buffer); \
            } \
            emersonLines[lineIndex] = num; \
            jsLines[lineIndex] = current_line; \
            lineIndex++; \
        }
        
    #define CHECK_RESOURCES()                 \
    {                                         \
    APP("\nif ( ! __checkResources8_8_3_1__() )\n");  \
    APP("{ \nthrow new Error('__resource_error__'); \n}\n");   \
    }


    #define CHECK_KILL()\
    { \
    APP("\nif ( system.__isKilling() )\n");  \
    APP("{ \nthrow new Error('__killing__'); \n}\n");   \
    }

    
    #ifndef __SIRIKATA_INSIDE_WHEN_PRED__
    #define __SIRIKATA_INSIDE_WHEN_PRED__
    static bool insideWhenPred = false;
    #endif

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonTree.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonTree_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonTree_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonTree_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpression scope set 
 */
static pEmersonTree_assignmentExpression_SCOPE   pEmersonTree_assignmentExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpression_SCOPE
pEmersonTree_assignmentExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionStack->size(ctx->pEmersonTree_assignmentExpressionStack) > ctx->pEmersonTree_assignmentExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE)ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionStack->push(ctx->pEmersonTree_assignmentExpressionStack, newAttributes, (void (*)(void *))assignmentExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpressionNoIn scope set 
 */
static pEmersonTree_assignmentExpressionNoIn_SCOPE   pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpressionNoIn_SCOPE
pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionNoInStack->size(ctx->pEmersonTree_assignmentExpressionNoInStack) > ctx->pEmersonTree_assignmentExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE)ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionNoInStack->push(ctx->pEmersonTree_assignmentExpressionNoInStack, newAttributes, (void (*)(void *))assignmentExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpression scope set 
 */
static pEmersonTree_relationalExpression_SCOPE   pEmersonTree_relationalExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpression_SCOPE
pEmersonTree_relationalExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionStack->size(ctx->pEmersonTree_relationalExpressionStack) > ctx->pEmersonTree_relationalExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE)ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionStack->push(ctx->pEmersonTree_relationalExpressionStack, newAttributes, (void (*)(void *))relationalExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpressionNoIn scope set 
 */
static pEmersonTree_relationalExpressionNoIn_SCOPE   pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpressionNoIn_SCOPE
pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionNoInStack->size(ctx->pEmersonTree_relationalExpressionNoInStack) > ctx->pEmersonTree_relationalExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE)ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionNoInStack->push(ctx->pEmersonTree_relationalExpressionNoInStack, newAttributes, (void (*)(void *))relationalExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonTreeTokenNames[209+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "QUATERNION",
        (pANTLR3_UINT8) "QUATERNION_AXISANGLE",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_BLOCK",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "TERNARYOP_NO_IN",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "PATTERN_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "BLANK_NAME_VAL_PROT",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "EXPR",
        (pANTLR3_UINT8) "EXPR_NO_IN",
        (pANTLR3_UINT8) "VERBATIM",
        (pANTLR3_UINT8) "SEND_CONSTRUCT",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT",
        (pANTLR3_UINT8) "SEND_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "VerbatimStringCharacter",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'#'",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionStack
 */
void
pEmersonTree_assignmentExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpression)->free != NULL)
	{
        SCOPE_TOP(assignmentExpression)->free(SCOPE_TOP(assignmentExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit--;
    SCOPE_TOP(assignmentExpression) = (pEmersonTree_assignmentExpression_SCOPE)(ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionNoInStack
 */
void
pEmersonTree_assignmentExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(assignmentExpressionNoIn)->free(SCOPE_TOP(assignmentExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit--;
    SCOPE_TOP(assignmentExpressionNoIn) = (pEmersonTree_assignmentExpressionNoIn_SCOPE)(ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionStack
 */
void
pEmersonTree_relationalExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpression)->free != NULL)
	{
        SCOPE_TOP(relationalExpression)->free(SCOPE_TOP(relationalExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionStack_limit--;
    SCOPE_TOP(relationalExpression) = (pEmersonTree_relationalExpression_SCOPE)(ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionNoInStack
 */
void
pEmersonTree_relationalExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(relationalExpressionNoIn)->free(SCOPE_TOP(relationalExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit--;
    SCOPE_TOP(relationalExpressionNoIn) = (pEmersonTree_relationalExpressionNoIn_SCOPE)(ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit - 1));
}


// Forward declare the locally static matching functions we have generated.
//
static EmersonTree_program_return	program    (pEmersonTree ctx);
static void	sourceElements    (pEmersonTree ctx);
static void	sourceElement    (pEmersonTree ctx);
static void	functionDeclaration    (pEmersonTree ctx);
static void	functionExpression    (pEmersonTree ctx);
static void	formalParameterList    (pEmersonTree ctx);
static void	functionBody    (pEmersonTree ctx);
static void	statement    (pEmersonTree ctx);
static void	noOpStatement    (pEmersonTree ctx);
static void	statementBlock    (pEmersonTree ctx);
static void	statementList    (pEmersonTree ctx);
static void	variableStatement    (pEmersonTree ctx);
static void	variableDeclarationList    (pEmersonTree ctx);
static void	variableDeclarationListNoIn    (pEmersonTree ctx);
static void	variableDeclaration    (pEmersonTree ctx);
static void	variableDeclarationNoIn    (pEmersonTree ctx);
static void	initialiser    (pEmersonTree ctx);
static void	initialiserNoIn    (pEmersonTree ctx);
static void	expressionStatement    (pEmersonTree ctx);
static void	ifStatement    (pEmersonTree ctx);
static void	iterationStatement    (pEmersonTree ctx);
static void	doWhileStatement    (pEmersonTree ctx);
static void	whileStatement    (pEmersonTree ctx);
static void	forStatement    (pEmersonTree ctx);
static void	forStatementInitialiserPart    (pEmersonTree ctx);
static void	forInStatement    (pEmersonTree ctx);
static void	forInStatementInitialiserPart    (pEmersonTree ctx);
static void	continueStatement    (pEmersonTree ctx);
static void	breakStatement    (pEmersonTree ctx);
static void	returnStatement    (pEmersonTree ctx);
static void	withStatement    (pEmersonTree ctx);
static void	switchStatement    (pEmersonTree ctx);
static void	caseBlock    (pEmersonTree ctx);
static void	caseClause    (pEmersonTree ctx);
static void	caseClauseSeenDefault    (pEmersonTree ctx);
static void	defaultClause    (pEmersonTree ctx);
static void	throwStatement    (pEmersonTree ctx);
static void	tryStatement    (pEmersonTree ctx);
static void	catchFinallyBlock    (pEmersonTree ctx);
static void	catchBlock    (pEmersonTree ctx);
static void	finallyBlock    (pEmersonTree ctx);
static void	memAndCallExpression    (pEmersonTree ctx);
static void	catchClause    (pEmersonTree ctx);
static void	finallyClause    (pEmersonTree ctx);
static void	expression    (pEmersonTree ctx);
static void	expressionNoIn    (pEmersonTree ctx);
static void	assignmentExpression    (pEmersonTree ctx);
static void	assignmentExpressionNoIn    (pEmersonTree ctx);
static EmersonTree_leftHandSideExpression_return	leftHandSideExpression    (pEmersonTree ctx);
static const char*	newExpression    (pEmersonTree ctx);
static const char*	propertyReferenceSuffix1    (pEmersonTree ctx);
static const char*	indexSuffix1    (pEmersonTree ctx);
static const char*	memberExpression    (pEmersonTree ctx);
static const char*	memberExpressionSuffix    (pEmersonTree ctx);
static const char*	callExpression    (pEmersonTree ctx);
static const char*	callExpressionSuffix    (pEmersonTree ctx);
static const char*	arguments    (pEmersonTree ctx);
static const char*	indexSuffix    (pEmersonTree ctx);
static void	propertyReferenceSuffix    (pEmersonTree ctx);
static void	assignmentOperator    (pEmersonTree ctx);
static void	conditionalExpressionNoIn    (pEmersonTree ctx);
static void	conditionalExpression    (pEmersonTree ctx);
static void	msgRecvConstruct    (pEmersonTree ctx);
static void	msgConstruct    (pEmersonTree ctx);
static void	msgSenderConstruct    (pEmersonTree ctx);
static void	ternaryExpression    (pEmersonTree ctx);
static void	msgRecvConstructNoIn    (pEmersonTree ctx);
static void	msgConstructNoIn    (pEmersonTree ctx);
static void	msgSenderConstructNoIn    (pEmersonTree ctx);
static void	ternaryExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpression    (pEmersonTree ctx);
static void	logicalORExpression    (pEmersonTree ctx);
static void	logicalORExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseORExpression    (pEmersonTree ctx);
static void	bitwiseORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseXORExpression    (pEmersonTree ctx);
static void	bitwiseXORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseANDExpression    (pEmersonTree ctx);
static void	bitwiseANDExpressionNoIn    (pEmersonTree ctx);
static void	equalityExpression    (pEmersonTree ctx);
static void	equalityExpressionNoIn    (pEmersonTree ctx);
static void	relationalOps    (pEmersonTree ctx);
static void	relationalExpression    (pEmersonTree ctx);
static void	relationalOpsNoIn    (pEmersonTree ctx);
static void	relationalExpressionNoIn    (pEmersonTree ctx);
static void	additiveExpression    (pEmersonTree ctx);
static void	multiplicativeExpression    (pEmersonTree ctx);
static void	unaryOps    (pEmersonTree ctx);
static void	unaryExpression    (pEmersonTree ctx);
static void	postfixExpression    (pEmersonTree ctx);
static void	primaryExpression    (pEmersonTree ctx);
static void	vectorLiteral    (pEmersonTree ctx);
static void	quaternionLiteral    (pEmersonTree ctx);
static void	vectorLiteralField    (pEmersonTree ctx);
static void	dollarExpression    (pEmersonTree ctx);
static void	arrayLiteral    (pEmersonTree ctx);
static void	objectLiteral    (pEmersonTree ctx);
static void	patternLiteral    (pEmersonTree ctx);
static void	nameValueProto    (pEmersonTree ctx);
static void	propertyNameAndValue    (pEmersonTree ctx);
static void	propertyName    (pEmersonTree ctx);
static void	literal    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred26_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred43_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred51_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred70_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred71_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred74_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred78_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred83_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred84_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred146_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred167_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred168_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred169_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred170_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred171_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred172_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred174_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred175_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred177_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred178_EmersonTree    (pEmersonTree ctx);
static void	EmersonTreeFree(pEmersonTree ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//EmersonTree.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonTreeNewSSD(instream, NULL);
}

/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonTree ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonTree) ANTLR3_CALLOC(1, sizeof(EmersonTree));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonTree.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our EmersonTree interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->caseClauseSeenDefault	= caseClauseSeenDefault;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->msgRecvConstruct	= msgRecvConstruct;
    ctx->msgConstruct	= msgConstruct;
    ctx->msgSenderConstruct	= msgSenderConstruct;
    ctx->ternaryExpression	= ternaryExpression;
    ctx->msgRecvConstructNoIn	= msgRecvConstructNoIn;
    ctx->msgConstructNoIn	= msgConstructNoIn;
    ctx->msgSenderConstructNoIn	= msgSenderConstructNoIn;
    ctx->ternaryExpressionNoIn	= ternaryExpressionNoIn;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->additiveExpression	= additiveExpression;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->quaternionLiteral	= quaternionLiteral;
    ctx->vectorLiteralField	= vectorLiteralField;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->patternLiteral	= patternLiteral;
    ctx->nameValueProto	= nameValueProto;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred26_EmersonTree	= synpred26_EmersonTree;
    ctx->synpred43_EmersonTree	= synpred43_EmersonTree;
    ctx->synpred51_EmersonTree	= synpred51_EmersonTree;
    ctx->synpred70_EmersonTree	= synpred70_EmersonTree;
    ctx->synpred71_EmersonTree	= synpred71_EmersonTree;
    ctx->synpred74_EmersonTree	= synpred74_EmersonTree;
    ctx->synpred78_EmersonTree	= synpred78_EmersonTree;
    ctx->synpred83_EmersonTree	= synpred83_EmersonTree;
    ctx->synpred84_EmersonTree	= synpred84_EmersonTree;
    ctx->synpred146_EmersonTree	= synpred146_EmersonTree;
    ctx->synpred167_EmersonTree	= synpred167_EmersonTree;
    ctx->synpred168_EmersonTree	= synpred168_EmersonTree;
    ctx->synpred169_EmersonTree	= synpred169_EmersonTree;
    ctx->synpred170_EmersonTree	= synpred170_EmersonTree;
    ctx->synpred171_EmersonTree	= synpred171_EmersonTree;
    ctx->synpred172_EmersonTree	= synpred172_EmersonTree;
    ctx->synpred174_EmersonTree	= synpred174_EmersonTree;
    ctx->synpred175_EmersonTree	= synpred175_EmersonTree;
    ctx->synpred177_EmersonTree	= synpred177_EmersonTree;
    ctx->synpred178_EmersonTree	= synpred178_EmersonTree;
    ctx->free			= EmersonTreeFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionPush     = pEmersonTree_assignmentExpressionPush;
    ctx->pEmersonTree_assignmentExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInPush     = pEmersonTree_assignmentExpressionNoInPush;
    ctx->pEmersonTree_assignmentExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionNoInTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionPush     = pEmersonTree_relationalExpressionPush;
    ctx->pEmersonTree_relationalExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInPush     = pEmersonTree_relationalExpressionNoInPush;
    ctx->pEmersonTree_relationalExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionNoInTop      = NULL;


        
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonTreeTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonTreeFree(pEmersonTree ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionStack->free(ctx->pEmersonTree_assignmentExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInStack->free(ctx->pEmersonTree_assignmentExpressionNoInStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionStack->free(ctx->pEmersonTree_relationalExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInStack->free(ctx->pEmersonTree_relationalExpressionNoInStack);

    
        
	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonTreeTokenNames; 
}


        pANTLR3_STRING program_string;
        int current_line;
        int* emersonLines;
        int* jsLines;
        int linesSize;
        int lineIndex;
        extern pEmersonTree _treeParser;
        

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROG_in_program80  */
static	ANTLR3_BITWORD FOLLOW_PROG_in_program80_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROG_in_program80	= { FOLLOW_PROG_in_program80_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program125  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program125	= { FOLLOW_sourceElements_in_program125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements186  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements186_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE02), ANTLR3_UINT64_LIT(0x0000010000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements186	= { FOLLOW_sourceElement_in_sourceElements186_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement209  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement209	= { FOLLOW_functionDeclaration_in_sourceElement209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement217  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement217	= { FOLLOW_statement_in_sourceElement217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_DECL_in_functionDeclaration236  */
static	ANTLR3_BITWORD FOLLOW_FUNC_DECL_in_functionDeclaration236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_DECL_in_functionDeclaration236	= { FOLLOW_FUNC_DECL_in_functionDeclaration236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration268  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration268_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE00), ANTLR3_UINT64_LIT(0x0000010010C00000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration268	= { FOLLOW_Identifier_in_functionDeclaration268_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration302  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration302_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE00), ANTLR3_UINT64_LIT(0x0000010010C00000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration302	= { FOLLOW_formalParameterList_in_functionDeclaration302_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration367  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration367	= { FOLLOW_functionBody_in_functionDeclaration367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_EXPR_in_functionExpression411  */
static	ANTLR3_BITWORD FOLLOW_FUNC_EXPR_in_functionExpression411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_EXPR_in_functionExpression411	= { FOLLOW_FUNC_EXPR_in_functionExpression411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression455  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression455_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE00), ANTLR3_UINT64_LIT(0x0000010010C00000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression455	= { FOLLOW_Identifier_in_functionExpression455_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression522  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression522_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE00), ANTLR3_UINT64_LIT(0x0000010010C00000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression522	= { FOLLOW_formalParameterList_in_functionExpression522_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression583  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression583	= { FOLLOW_functionBody_in_functionExpression583_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_PARAMS_in_formalParameterList631  */
static	ANTLR3_BITWORD FOLLOW_FUNC_PARAMS_in_formalParameterList631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_PARAMS_in_formalParameterList631	= { FOLLOW_FUNC_PARAMS_in_formalParameterList631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList652  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList652	= { FOLLOW_Identifier_in_formalParameterList652_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList722  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList722	= { FOLLOW_Identifier_in_formalParameterList722_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody752  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody752	= { FOLLOW_sourceElements_in_functionBody752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EMPTY_FUNC_BODY_in_functionBody757  */
static	ANTLR3_BITWORD FOLLOW_EMPTY_FUNC_BODY_in_functionBody757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EMPTY_FUNC_BODY_in_functionBody757	= { FOLLOW_EMPTY_FUNC_BODY_in_functionBody757_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement773  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement773	= { FOLLOW_noOpStatement_in_statement773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement781  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement781	= { FOLLOW_switchStatement_in_statement781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement789  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement789	= { FOLLOW_statementBlock_in_statement789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement797  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement797	= { FOLLOW_variableStatement_in_statement797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement805  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement805	= { FOLLOW_expressionStatement_in_statement805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement813  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement813	= { FOLLOW_ifStatement_in_statement813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement821  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement821	= { FOLLOW_iterationStatement_in_statement821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement829  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement829	= { FOLLOW_continueStatement_in_statement829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement837  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement837	= { FOLLOW_breakStatement_in_statement837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement845  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement845	= { FOLLOW_returnStatement_in_statement845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement853  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement853	= { FOLLOW_withStatement_in_statement853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement861  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement861	= { FOLLOW_throwStatement_in_statement861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement869  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement869	= { FOLLOW_tryStatement_in_statement869_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOOP_in_noOpStatement894  */
static	ANTLR3_BITWORD FOLLOW_NOOP_in_noOpStatement894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOOP_in_noOpStatement894	= { FOLLOW_NOOP_in_noOpStatement894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock940  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock940	= { FOLLOW_statementList_in_statementBlock940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLIST_in_statementList969  */
static	ANTLR3_BITWORD FOLLOW_SLIST_in_statementList969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SLIST_in_statementList969	= { FOLLOW_SLIST_in_statementList969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList985  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList985_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000010000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList985	= { FOLLOW_statement_in_statementList985_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_variableStatement1051  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_variableStatement1051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_variableStatement1051	= { FOLLOW_VARLIST_in_variableStatement1051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1079  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1079	= { FOLLOW_variableDeclarationList_in_variableStatement1079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1099  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1099	= { FOLLOW_variableDeclaration_in_variableDeclarationList1099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1139  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1139	= { FOLLOW_variableDeclaration_in_variableDeclarationList1139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1162  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1162	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclaration1189  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclaration1189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclaration1189	= { FOLLOW_VAR_in_variableDeclaration1189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1203  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1203	= { FOLLOW_Identifier_in_variableDeclaration1203_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1281  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1281	= { FOLLOW_initialiser_in_variableDeclaration1281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclarationNoIn1341  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclarationNoIn1341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclarationNoIn1341	= { FOLLOW_VAR_in_variableDeclarationNoIn1341_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1360  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1360	= { FOLLOW_Identifier_in_variableDeclarationNoIn1360_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1438  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1438	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_initialiser1481  */
static	ANTLR3_BITWORD FOLLOW_expression_in_initialiser1481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_initialiser1481	= { FOLLOW_expression_in_initialiser1481_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_initialiserNoIn1494  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_initialiserNoIn1494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_initialiserNoIn1494	= { FOLLOW_expressionNoIn_in_initialiserNoIn1494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1508  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1508	= { FOLLOW_expression_in_expressionStatement1508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IF_in_ifStatement1521  */
static	ANTLR3_BITWORD FOLLOW_IF_in_ifStatement1521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IF_in_ifStatement1521	= { FOLLOW_IF_in_ifStatement1521_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1550  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000010000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1550	= { FOLLOW_expression_in_ifStatement1550_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1580  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1580_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000010000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1580	= { FOLLOW_statement_in_ifStatement1580_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1674  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1674	= { FOLLOW_statement_in_ifStatement1674_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1729  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1729	= { FOLLOW_doWhileStatement_in_iterationStatement1729_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1734  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1734	= { FOLLOW_whileStatement_in_iterationStatement1734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1739  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1739	= { FOLLOW_forStatement_in_iterationStatement1739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1744  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1744	= { FOLLOW_forInStatement_in_iterationStatement1744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DO_in_doWhileStatement1771  */
static	ANTLR3_BITWORD FOLLOW_DO_in_doWhileStatement1771_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DO_in_doWhileStatement1771	= { FOLLOW_DO_in_doWhileStatement1771_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1799  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1799_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1799	= { FOLLOW_statement_in_doWhileStatement1799_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1827  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1827	= { FOLLOW_expression_in_doWhileStatement1827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHILE_in_whileStatement1878  */
static	ANTLR3_BITWORD FOLLOW_WHILE_in_whileStatement1878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHILE_in_whileStatement1878	= { FOLLOW_WHILE_in_whileStatement1878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1906  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1906_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000010000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1906	= { FOLLOW_expression_in_whileStatement1906_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1935  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1935	= { FOLLOW_statement_in_whileStatement1935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FOR_in_forStatement1985  */
static	ANTLR3_BITWORD FOLLOW_FOR_in_forStatement1985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FOR_in_forStatement1985	= { FOLLOW_FOR_in_forStatement1985_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORINIT_in_forStatement2016  */
static	ANTLR3_BITWORD FOLLOW_FORINIT_in_forStatement2016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORINIT_in_forStatement2016	= { FOLLOW_FORINIT_in_forStatement2016_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement2018  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement2018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement2018	= { FOLLOW_forStatementInitialiserPart_in_forStatement2018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORCOND_in_forStatement2051  */
static	ANTLR3_BITWORD FOLLOW_FORCOND_in_forStatement2051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORCOND_in_forStatement2051	= { FOLLOW_FORCOND_in_forStatement2051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2053  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2053	= { FOLLOW_expression_in_forStatement2053_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORITER_in_forStatement2087  */
static	ANTLR3_BITWORD FOLLOW_FORITER_in_forStatement2087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORITER_in_forStatement2087	= { FOLLOW_FORITER_in_forStatement2087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2089  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2089	= { FOLLOW_expression_in_forStatement2089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement2122  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement2122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement2122	= { FOLLOW_statement_in_forStatement2122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart2161  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart2161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart2161	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart2161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_forStatementInitialiserPart2170  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_forStatementInitialiserPart2170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_forStatementInitialiserPart2170	= { FOLLOW_VARLIST_in_forStatementInitialiserPart2170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2172  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2172	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORIN_in_forInStatement2198  */
static	ANTLR3_BITWORD FOLLOW_FORIN_in_forInStatement2198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORIN_in_forInStatement2198	= { FOLLOW_FORIN_in_forInStatement2198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement2220  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement2220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement2220	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement2220_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement2241  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement2241_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000010000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement2241	= { FOLLOW_expression_in_forInStatement2241_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement2262  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement2262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement2262	= { FOLLOW_statement_in_forInStatement2262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2294  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2294	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_forInStatementInitialiserPart2300  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_forInStatementInitialiserPart2300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_forInStatementInitialiserPart2300	= { FOLLOW_VAR_in_forInStatementInitialiserPart2300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2302  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2302	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTINUE_in_continueStatement2327  */
static	ANTLR3_BITWORD FOLLOW_CONTINUE_in_continueStatement2327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTINUE_in_continueStatement2327	= { FOLLOW_CONTINUE_in_continueStatement2327_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2363  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2363	= { FOLLOW_Identifier_in_continueStatement2363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BREAK_in_breakStatement2420  */
static	ANTLR3_BITWORD FOLLOW_BREAK_in_breakStatement2420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BREAK_in_breakStatement2420	= { FOLLOW_BREAK_in_breakStatement2420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2454  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2454	= { FOLLOW_Identifier_in_breakStatement2454_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_returnStatement2514  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_returnStatement2514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_returnStatement2514	= { FOLLOW_RETURN_in_returnStatement2514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2551  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2551	= { FOLLOW_expression_in_returnStatement2551_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WITH_in_withStatement2587  */
static	ANTLR3_BITWORD FOLLOW_WITH_in_withStatement2587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WITH_in_withStatement2587	= { FOLLOW_WITH_in_withStatement2587_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2613  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2613_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000010000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2613	= { FOLLOW_expression_in_withStatement2613_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2649  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2649	= { FOLLOW_statement_in_withStatement2649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SWITCH_in_switchStatement2685  */
static	ANTLR3_BITWORD FOLLOW_SWITCH_in_switchStatement2685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SWITCH_in_switchStatement2685	= { FOLLOW_SWITCH_in_switchStatement2685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2706  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2706_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2706	= { FOLLOW_expression_in_switchStatement2706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2727  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2727	= { FOLLOW_caseBlock_in_switchStatement2727_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_BLOCK_in_caseBlock2763  */
static	ANTLR3_BITWORD FOLLOW_CASE_BLOCK_in_caseBlock2763_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_BLOCK_in_caseBlock2763	= { FOLLOW_CASE_BLOCK_in_caseBlock2763_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2773  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2773	= { FOLLOW_caseClause_in_caseBlock2773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_BLOCK_in_caseBlock2789  */
static	ANTLR3_BITWORD FOLLOW_CASE_BLOCK_in_caseBlock2789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_BLOCK_in_caseBlock2789	= { FOLLOW_CASE_BLOCK_in_caseBlock2789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2799  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2799_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2799	= { FOLLOW_defaultClause_in_caseBlock2799_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2828  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2828	= { FOLLOW_CASE_in_caseClause2828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2848  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2848_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2848	= { FOLLOW_ternaryExpression_in_caseClause2848_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2868  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2868_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2868	= { FOLLOW_statementList_in_caseClause2868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseClause2879  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseClause2879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseClause2879	= { FOLLOW_caseClause_in_caseClause2879_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2900  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2900	= { FOLLOW_CASE_in_caseClause2900_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2920  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2920_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2920	= { FOLLOW_ternaryExpression_in_caseClause2920_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2940  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2940_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2940	= { FOLLOW_statementList_in_caseClause2940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseClause2951  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseClause2951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseClause2951	= { FOLLOW_defaultClause_in_caseClause2951_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClauseSeenDefault2981  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClauseSeenDefault2981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClauseSeenDefault2981	= { FOLLOW_CASE_in_caseClauseSeenDefault2981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClauseSeenDefault3001  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClauseSeenDefault3001_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClauseSeenDefault3001	= { FOLLOW_ternaryExpression_in_caseClauseSeenDefault3001_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClauseSeenDefault3021  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClauseSeenDefault3021_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClauseSeenDefault3021	= { FOLLOW_statementList_in_caseClauseSeenDefault3021_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3032  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3032	= { FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3032_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DEFAULT_in_defaultClause3065  */
static	ANTLR3_BITWORD FOLLOW_DEFAULT_in_defaultClause3065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DEFAULT_in_defaultClause3065	= { FOLLOW_DEFAULT_in_defaultClause3065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause3085  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause3085_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause3085	= { FOLLOW_statementList_in_defaultClause3085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_defaultClause3096  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_defaultClause3096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_defaultClause3096	= { FOLLOW_caseClauseSeenDefault_in_defaultClause3096_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_THROW_in_throwStatement3129  */
static	ANTLR3_BITWORD FOLLOW_THROW_in_throwStatement3129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_THROW_in_throwStatement3129	= { FOLLOW_THROW_in_throwStatement3129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement3149  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement3149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement3149	= { FOLLOW_expression_in_throwStatement3149_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRY_in_tryStatement3191  */
static	ANTLR3_BITWORD FOLLOW_TRY_in_tryStatement3191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRY_in_tryStatement3191	= { FOLLOW_TRY_in_tryStatement3191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement3219  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement3219_bits[]	= { ANTLR3_UINT64_LIT(0x0000006000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement3219	= { FOLLOW_statementBlock_in_tryStatement3219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement3233  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement3233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement3233	= { FOLLOW_catchFinallyBlock_in_tryStatement3233_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock3271  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock3271_bits[]	= { ANTLR3_UINT64_LIT(0x0000006000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock3271	= { FOLLOW_catchBlock_in_catchFinallyBlock3271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3273  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3273	= { FOLLOW_finallyBlock_in_catchFinallyBlock3273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3286  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3286	= { FOLLOW_finallyBlock_in_catchFinallyBlock3286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchBlock3312  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchBlock3312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchBlock3312	= { FOLLOW_CATCH_in_catchBlock3312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock3340  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock3340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock3340	= { FOLLOW_Identifier_in_catchBlock3340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock3368  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock3368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock3368	= { FOLLOW_statementBlock_in_catchBlock3368_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyBlock3421  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyBlock3421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyBlock3421	= { FOLLOW_FINALLY_in_finallyBlock3421_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock3449  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock3449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock3449	= { FOLLOW_statementBlock_in_finallyBlock3449_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression3494  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression3494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression3494	= { FOLLOW_memberExpression_in_memAndCallExpression3494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression3498  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression3498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression3498	= { FOLLOW_callExpression_in_memAndCallExpression3498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchClause3511  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchClause3511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchClause3511	= { FOLLOW_CATCH_in_catchClause3511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause3526  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause3526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause3526	= { FOLLOW_Identifier_in_catchClause3526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause3547  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause3547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause3547	= { FOLLOW_statementBlock_in_catchClause3547_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyClause3567  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyClause3567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyClause3567	= { FOLLOW_FINALLY_in_finallyClause3567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause3580  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause3580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause3580	= { FOLLOW_statementBlock_in_finallyClause3580_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_in_expression3613  */
static	ANTLR3_BITWORD FOLLOW_EXPR_in_expression3613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_in_expression3613	= { FOLLOW_EXPR_in_expression3613_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression3615  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression3615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression3615	= { FOLLOW_assignmentExpression_in_expression3615_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_NO_IN_in_expressionNoIn3629  */
static	ANTLR3_BITWORD FOLLOW_EXPR_NO_IN_in_expressionNoIn3629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_NO_IN_in_expressionNoIn3629	= { FOLLOW_EXPR_NO_IN_in_expressionNoIn3629_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3632  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3632	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression3655  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression3655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression3655	= { FOLLOW_conditionalExpression_in_assignmentExpression3655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpression3701  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpression3701_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpression3701	= { FOLLOW_MULT_ASSIGN_in_assignmentExpression3701_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpression3731  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpression3731_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpression3731	= { FOLLOW_DIV_ASSIGN_in_assignmentExpression3731_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpression3762  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpression3762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpression3762	= { FOLLOW_MOD_ASSIGN_in_assignmentExpression3762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpression3793  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpression3793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpression3793	= { FOLLOW_ADD_ASSIGN_in_assignmentExpression3793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpression3825  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpression3825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpression3825	= { FOLLOW_SUB_ASSIGN_in_assignmentExpression3825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression3867  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression3867_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x00071807851FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression3867	= { FOLLOW_leftHandSideExpression_in_assignmentExpression3867_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression3896  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression3896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression3896	= { FOLLOW_assignmentExpression_in_assignmentExpression3896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpression3967  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpression3967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpression3967	= { FOLLOW_ASSIGN_in_assignmentExpression3967_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpression4004  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpression4004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpression4004	= { FOLLOW_AND_ASSIGN_in_assignmentExpression4004_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpression4035  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpression4035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpression4035	= { FOLLOW_EXP_ASSIGN_in_assignmentExpression4035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpression4066  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpression4066_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpression4066	= { FOLLOW_OR_ASSIGN_in_assignmentExpression4066_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression4108  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression4108_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x00071807851FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression4108	= { FOLLOW_leftHandSideExpression_in_assignmentExpression4108_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression4137  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression4137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression4137	= { FOLLOW_assignmentExpression_in_assignmentExpression4137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4193  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4193	= { FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4239  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4239	= { FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4239_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4269  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4269	= { FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4300  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4300	= { FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4331  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4331	= { FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4363  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4363	= { FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4405  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4405_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x00071807851FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4405	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4405_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4434  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4434	= { FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4434_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpressionNoIn4505  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpressionNoIn4505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpressionNoIn4505	= { FOLLOW_ASSIGN_in_assignmentExpressionNoIn4505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4542  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4542	= { FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4542_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4573  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4573	= { FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4573_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4604  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4604	= { FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4604_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4646  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4646_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x00071807851FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4646	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4646_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4675  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4675	= { FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression4725  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression4725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression4725	= { FOLLOW_callExpression_in_leftHandSideExpression4725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression4742  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression4742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression4742	= { FOLLOW_newExpression_in_leftHandSideExpression4742_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression4775  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression4775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression4775	= { FOLLOW_memberExpression_in_newExpression4775_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_newExpression4804  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_newExpression4804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_newExpression4804	= { FOLLOW_NEW_in_newExpression4804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression4818  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression4818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression4818	= { FOLLOW_newExpression_in_newExpression4818_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix14889  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix14889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix14889	= { FOLLOW_Identifier_in_propertyReferenceSuffix14889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix14929  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix14929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix14929	= { FOLLOW_expression_in_indexSuffix14929_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression4969  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression4969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression4969	= { FOLLOW_primaryExpression_in_memberExpression4969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression4993  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression4993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression4993	= { FOLLOW_functionExpression_in_memberExpression4993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression5031  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression5031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression5031	= { FOLLOW_DOT_in_memberExpression5031_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5045  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5045	= { FOLLOW_memberExpression_in_memberExpression5045_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression5073  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression5073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression5073	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression5073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_memberExpression5126  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_memberExpression5126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_memberExpression5126	= { FOLLOW_ARRAY_INDEX_in_memberExpression5126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5140  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5140	= { FOLLOW_memberExpression_in_memberExpression5140_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression5168  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression5168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression5168	= { FOLLOW_indexSuffix1_in_memberExpression5168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_memberExpression5220  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_memberExpression5220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_memberExpression5220	= { FOLLOW_NEW_in_memberExpression5220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5248  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5248	= { FOLLOW_memberExpression_in_memberExpression5248_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression5276  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression5276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression5276	= { FOLLOW_arguments_in_memberExpression5276_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression5326  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression5326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression5326	= { FOLLOW_DOT_in_memberExpression5326_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5354  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5354	= { FOLLOW_memberExpression_in_memberExpression5354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix5398  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix5398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix5398	= { FOLLOW_indexSuffix_in_memberExpressionSuffix5398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5415  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5415	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression5455  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression5455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression5455	= { FOLLOW_CALL_in_callExpression5455_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression5469  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression5469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression5469	= { FOLLOW_memberExpression_in_callExpression5469_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression5497  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression5497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression5497	= { FOLLOW_arguments_in_callExpression5497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_callExpression5538  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_callExpression5538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_callExpression5538	= { FOLLOW_ARRAY_INDEX_in_callExpression5538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5552  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5552	= { FOLLOW_callExpression_in_callExpression5552_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression5580  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression5580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression5580	= { FOLLOW_indexSuffix1_in_callExpression5580_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_callExpression5620  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_callExpression5620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_callExpression5620	= { FOLLOW_DOT_in_callExpression5620_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5634  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5634	= { FOLLOW_callExpression_in_callExpression5634_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression5662  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression5662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression5662	= { FOLLOW_propertyReferenceSuffix1_in_callExpression5662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression5702  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression5702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression5702	= { FOLLOW_CALL_in_callExpression5702_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5716  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5716	= { FOLLOW_callExpression_in_callExpression5716_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression5744  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression5744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression5744	= { FOLLOW_arguments_in_callExpression5744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix5792  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix5792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix5792	= { FOLLOW_arguments_in_callExpressionSuffix5792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix5809  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix5809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix5809	= { FOLLOW_indexSuffix_in_callExpressionSuffix5809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5826  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5826	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5826_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5860  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5860	= { FOLLOW_ARGLIST_in_arguments5860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5870  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5870	= { FOLLOW_ARGLIST_in_arguments5870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5899  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5899	= { FOLLOW_expression_in_arguments5899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5942  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5942	= { FOLLOW_ARGLIST_in_arguments5942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5958  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5958	= { FOLLOW_expression_in_arguments5958_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments5986  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments5986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments5986	= { FOLLOW_expression_in_arguments5986_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_indexSuffix6045  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_indexSuffix6045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_indexSuffix6045	= { FOLLOW_ARRAY_INDEX_in_indexSuffix6045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix6059  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix6059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix6059	= { FOLLOW_expression_in_indexSuffix6059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_propertyReferenceSuffix6100  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_propertyReferenceSuffix6100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_propertyReferenceSuffix6100	= { FOLLOW_DOT_in_propertyReferenceSuffix6100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix6102  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix6102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix6102	= { FOLLOW_Identifier_in_propertyReferenceSuffix6102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignmentOperator0  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignmentOperator0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignmentOperator0	= { FOLLOW_set_in_assignmentOperator0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn6154  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn6154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn6154	= { FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn6154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_conditionalExpression6179  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_conditionalExpression6179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_conditionalExpression6179	= { FOLLOW_msgRecvConstruct_in_conditionalExpression6179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct6212  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct6212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct6212	= { FOLLOW_msgConstruct_in_msgRecvConstruct6212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct6225  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct6225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct6225	= { FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct6225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_msgRecvConstruct6253  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_msgRecvConstruct6253_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00071806051FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_msgRecvConstruct6253	= { FOLLOW_msgRecvConstruct_in_msgRecvConstruct6253_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct6281  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct6281_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00071806051FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct6281	= { FOLLOW_msgConstruct_in_msgRecvConstruct6281_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct6309  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct6309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct6309	= { FOLLOW_msgConstruct_in_msgRecvConstruct6309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct6349  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct6349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct6349	= { FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct6349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_msgRecvConstruct6377  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_msgRecvConstruct6377_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00071806051FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_msgRecvConstruct6377	= { FOLLOW_msgRecvConstruct_in_msgRecvConstruct6377_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct6405  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct6405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct6405	= { FOLLOW_msgConstruct_in_msgRecvConstruct6405_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct6458  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct6458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct6458	= { FOLLOW_msgSenderConstruct_in_msgConstruct6458_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEND_CONSTRUCT_in_msgConstruct6471  */
static	ANTLR3_BITWORD FOLLOW_SEND_CONSTRUCT_in_msgConstruct6471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SEND_CONSTRUCT_in_msgConstruct6471	= { FOLLOW_SEND_CONSTRUCT_in_msgConstruct6471_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgConstruct6499  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgConstruct6499_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00071006051FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgConstruct6499	= { FOLLOW_msgConstruct_in_msgConstruct6499_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct6527  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct6527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct6527	= { FOLLOW_msgSenderConstruct_in_msgConstruct6527_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct6590  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct6590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct6590	= { FOLLOW_ternaryExpression_in_msgSenderConstruct6590_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct6603  */
static	ANTLR3_BITWORD FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct6603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct6603	= { FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct6603_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgSenderConstruct6631  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgSenderConstruct6631_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00070006051FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgSenderConstruct6631	= { FOLLOW_msgSenderConstruct_in_msgSenderConstruct6631_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct6659  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct6659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct6659	= { FOLLOW_ternaryExpression_in_msgSenderConstruct6659_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_ternaryExpression6721  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_ternaryExpression6721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_ternaryExpression6721	= { FOLLOW_logicalORExpression_in_ternaryExpression6721_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_in_ternaryExpression6734  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_in_ternaryExpression6734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_in_ternaryExpression6734	= { FOLLOW_TERNARYOP_in_ternaryExpression6734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_ternaryExpression6762  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_ternaryExpression6762_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x00071807851FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_ternaryExpression6762	= { FOLLOW_ternaryExpression_in_ternaryExpression6762_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression6803  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression6803_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x00071807851FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression6803	= { FOLLOW_assignmentExpression_in_ternaryExpression6803_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression6844  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression6844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression6844	= { FOLLOW_assignmentExpression_in_ternaryExpression6844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6906  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6906	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6919  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6919	= { FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6947  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6947_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00076006091FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6947	= { FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6947_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6975  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6975_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00076006091FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6975	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6975_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7003  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7003	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7003_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn7043  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn7043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn7043	= { FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn7043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn7071  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn7071_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00076006091FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn7071	= { FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn7071_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7099  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7099	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7153  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7153	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn7166  */
static	ANTLR3_BITWORD FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn7166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn7166	= { FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn7166_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgConstructNoIn7194  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgConstructNoIn7194_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00074006091FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgConstructNoIn7194	= { FOLLOW_msgConstructNoIn_in_msgConstructNoIn7194_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7222  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7222	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7285  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7285	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7285_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn7298  */
static	ANTLR3_BITWORD FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn7298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn7298	= { FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn7298_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn7326  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn7326_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x00070006091FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn7326	= { FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn7326_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7354  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7354	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn7407  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn7407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn7407	= { FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn7407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn7420  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn7420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn7420	= { FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn7420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn7448  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn7448_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x00071807851FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn7448	= { FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn7448_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7476  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7476_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x00071807851FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7476	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7476_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7504  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7504	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7504_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression7552  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression7552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression7552	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression7552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpression7557  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpression7557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpression7557	= { FOLLOW_AND_in_logicalANDExpression7557_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalANDExpression7559  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalANDExpression7559_bits[]	= { ANTLR3_UINT64_LIT(0xFF800005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalANDExpression7559	= { FOLLOW_logicalANDExpression_in_logicalANDExpression7559_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression7563  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression7563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression7563	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression7563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression7576  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression7576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression7576	= { FOLLOW_logicalANDExpression_in_logicalORExpression7576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpression7581  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpression7581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpression7581	= { FOLLOW_OR_in_logicalORExpression7581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_logicalORExpression7583  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_logicalORExpression7583_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_logicalORExpression7583	= { FOLLOW_logicalORExpression_in_logicalORExpression7583_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression7587  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression7587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression7587	= { FOLLOW_logicalANDExpression_in_logicalORExpression7587_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7600  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7600	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7600_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpressionNoIn7605  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpressionNoIn7605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpressionNoIn7605	= { FOLLOW_OR_in_logicalORExpressionNoIn7605_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn7607  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn7607_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn7607	= { FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn7607_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7609  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7609	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7624  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7624	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7624_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpressionNoIn7630  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpressionNoIn7630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpressionNoIn7630	= { FOLLOW_AND_in_logicalANDExpressionNoIn7630_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn7632  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn7632_bits[]	= { ANTLR3_UINT64_LIT(0xFF800005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn7632	= { FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn7632_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7636  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7636	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7650  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7650	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpression7656  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpression7656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpression7656	= { FOLLOW_BIT_OR_in_bitwiseORExpression7656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_bitwiseORExpression7658  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_bitwiseORExpression7658_bits[]	= { ANTLR3_UINT64_LIT(0xFF000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_bitwiseORExpression7658	= { FOLLOW_bitwiseORExpression_in_bitwiseORExpression7658_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7662  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7662	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7675  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7675	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn7682  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn7682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn7682	= { FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn7682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn7684  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn7684_bits[]	= { ANTLR3_UINT64_LIT(0xFF000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn7684	= { FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn7684_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7688  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7688_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7688	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7688_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7700  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7700	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpression7707  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpression7707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpression7707	= { FOLLOW_EXP_in_bitwiseXORExpression7707_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression7711  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression7711_bits[]	= { ANTLR3_UINT64_LIT(0xFE000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression7711	= { FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression7711_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7715  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7715	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7715_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7727  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7727	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7727_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpressionNoIn7733  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpressionNoIn7733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpressionNoIn7733	= { FOLLOW_EXP_in_bitwiseXORExpressionNoIn7733_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn7737  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn7737_bits[]	= { ANTLR3_UINT64_LIT(0xFE000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn7737	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn7737_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7740  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7740	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7740_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression7754  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression7754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression7754	= { FOLLOW_equalityExpression_in_bitwiseANDExpression7754_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpression7760  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpression7760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpression7760	= { FOLLOW_BIT_AND_in_bitwiseANDExpression7760_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7764  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7764_bits[]	= { ANTLR3_UINT64_LIT(0xFC000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7764	= { FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7764_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression7768  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression7768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression7768	= { FOLLOW_equalityExpression_in_bitwiseANDExpression7768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7782  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7782_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7782	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7782_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7789  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7789	= { FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7793  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7793_bits[]	= { ANTLR3_UINT64_LIT(0xFC000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7793	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7793_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7797  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7797	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression7810  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression7810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression7810	= { FOLLOW_relationalExpression_in_equalityExpression7810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpression7823  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpression7823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpression7823	= { FOLLOW_EQUALS_in_equalityExpression7823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression7853  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression7853_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression7853	= { FOLLOW_equalityExpression_in_equalityExpression7853_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression7881  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression7881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression7881	= { FOLLOW_relationalExpression_in_equalityExpression7881_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpression7914  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpression7914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpression7914	= { FOLLOW_NOT_EQUALS_in_equalityExpression7914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression7944  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression7944_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression7944	= { FOLLOW_equalityExpression_in_equalityExpression7944_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression7972  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression7972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression7972	= { FOLLOW_relationalExpression_in_equalityExpression7972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpression8005  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpression8005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpression8005	= { FOLLOW_IDENT_in_equalityExpression8005_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression8035  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression8035_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression8035	= { FOLLOW_equalityExpression_in_equalityExpression8035_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression8063  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression8063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression8063	= { FOLLOW_relationalExpression_in_equalityExpression8063_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpression8096  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpression8096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpression8096	= { FOLLOW_NOT_IDENT_in_equalityExpression8096_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression8126  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression8126_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression8126	= { FOLLOW_equalityExpression_in_equalityExpression8126_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression8154  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression8154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression8154	= { FOLLOW_relationalExpression_in_equalityExpression8154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8190  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8190_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8190	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpressionNoIn8197  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpressionNoIn8197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpressionNoIn8197	= { FOLLOW_EQUALS_in_equalityExpressionNoIn8197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8213  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8213_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8213	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8213_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8229  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8229	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn8251  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn8251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn8251	= { FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn8251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8267  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8267_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8267	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8267_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8283  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8283	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpressionNoIn8305  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpressionNoIn8305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpressionNoIn8305	= { FOLLOW_IDENT_in_equalityExpressionNoIn8305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8321  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8321_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8321	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8321_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8337  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8337_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8337	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8337_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpressionNoIn8359  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpressionNoIn8359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpressionNoIn8359	= { FOLLOW_NOT_IDENT_in_equalityExpressionNoIn8359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8375  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8375_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8375	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8375_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8391  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8391	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOps8417  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOps8417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOps8417	= { FOLLOW_LESS_THAN_in_relationalOps8417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOps8423  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOps8423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOps8423	= { FOLLOW_GREATER_THAN_in_relationalOps8423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOps8429  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOps8429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOps8429	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOps8429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOps8436  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOps8436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOps8436	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOps8436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOps8442  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOps8442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOps8442	= { FOLLOW_INSTANCE_OF_in_relationalOps8442_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IN_in_relationalOps8448  */
static	ANTLR3_BITWORD FOLLOW_IN_in_relationalOps8448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IN_in_relationalOps8448	= { FOLLOW_IN_in_relationalOps8448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression8466  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression8466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression8466	= { FOLLOW_additiveExpression_in_relationalExpression8466_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression8480  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression8480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression8480	= { FOLLOW_relationalOps_in_relationalExpression8480_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_relationalExpression8489  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_relationalExpression8489_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_relationalExpression8489	= { FOLLOW_relationalExpression_in_relationalExpression8489_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression8501  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression8501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression8501	= { FOLLOW_additiveExpression_in_relationalExpression8501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOpsNoIn8517  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOpsNoIn8517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOpsNoIn8517	= { FOLLOW_LESS_THAN_in_relationalOpsNoIn8517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOpsNoIn8523  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOpsNoIn8523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOpsNoIn8523	= { FOLLOW_GREATER_THAN_in_relationalOpsNoIn8523_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn8529  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn8529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn8529	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn8529_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn8535  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn8535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn8535	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn8535_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOpsNoIn8541  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOpsNoIn8541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOpsNoIn8541	= { FOLLOW_INSTANCE_OF_in_relationalOpsNoIn8541_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn8561  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn8561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn8561	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn8561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn8576  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn8576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn8576	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn8576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn8584  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn8584_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn8584	= { FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn8584_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn8600  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn8600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn8600	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn8600_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression8632  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression8632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression8632	= { FOLLOW_multiplicativeExpression_in_additiveExpression8632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_OP_in_additiveExpression8645  */
static	ANTLR3_BITWORD FOLLOW_ADD_OP_in_additiveExpression8645_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_OP_in_additiveExpression8645	= { FOLLOW_ADD_OP_in_additiveExpression8645_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression8678  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression8678_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7C0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression8678	= { FOLLOW_additiveExpression_in_additiveExpression8678_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression8708  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression8708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression8708	= { FOLLOW_multiplicativeExpression_in_additiveExpression8708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_in_additiveExpression8751  */
static	ANTLR3_BITWORD FOLLOW_SUB_in_additiveExpression8751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_in_additiveExpression8751	= { FOLLOW_SUB_in_additiveExpression8751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression8782  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression8782_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7C0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression8782	= { FOLLOW_additiveExpression_in_additiveExpression8782_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression8813  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression8813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression8813	= { FOLLOW_multiplicativeExpression_in_additiveExpression8813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression8862  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression8862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression8862	= { FOLLOW_unaryExpression_in_multiplicativeExpression8862_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_in_multiplicativeExpression8876  */
static	ANTLR3_BITWORD FOLLOW_MULT_in_multiplicativeExpression8876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_in_multiplicativeExpression8876	= { FOLLOW_MULT_in_multiplicativeExpression8876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression8907  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression8907_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF600), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression8907	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression8907_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression8938  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression8938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression8938	= { FOLLOW_unaryExpression_in_multiplicativeExpression8938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_in_multiplicativeExpression8981  */
static	ANTLR3_BITWORD FOLLOW_DIV_in_multiplicativeExpression8981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_in_multiplicativeExpression8981	= { FOLLOW_DIV_in_multiplicativeExpression8981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression9009  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression9009_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF600), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression9009	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression9009_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression9037  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression9037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression9037	= { FOLLOW_unaryExpression_in_multiplicativeExpression9037_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_in_multiplicativeExpression9078  */
static	ANTLR3_BITWORD FOLLOW_MOD_in_multiplicativeExpression9078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_in_multiplicativeExpression9078	= { FOLLOW_MOD_in_multiplicativeExpression9078_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression9106  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression9106_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF600), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression9106	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression9106_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression9134  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression9134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression9134	= { FOLLOW_unaryExpression_in_multiplicativeExpression9134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unaryOps0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unaryOps0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unaryOps0	= { FOLLOW_set_in_unaryOps0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression9229  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression9229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression9229	= { FOLLOW_postfixExpression_in_unaryExpression9229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_OP_in_unaryExpression9253  */
static	ANTLR3_BITWORD FOLLOW_DELETE_OP_in_unaryExpression9253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_OP_in_unaryExpression9253	= { FOLLOW_DELETE_OP_in_unaryExpression9253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VOID_in_unaryExpression9275  */
static	ANTLR3_BITWORD FOLLOW_VOID_in_unaryExpression9275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VOID_in_unaryExpression9275	= { FOLLOW_VOID_in_unaryExpression9275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TYPEOF_in_unaryExpression9297  */
static	ANTLR3_BITWORD FOLLOW_TYPEOF_in_unaryExpression9297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TYPEOF_in_unaryExpression9297	= { FOLLOW_TYPEOF_in_unaryExpression9297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_unaryExpression9317  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_unaryExpression9317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_unaryExpression9317	= { FOLLOW_PLUSPLUS_in_unaryExpression9317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_unaryExpression9335  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_unaryExpression9335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_unaryExpression9335	= { FOLLOW_MINUSMINUS_in_unaryExpression9335_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_PLUS_in_unaryExpression9351  */
static	ANTLR3_BITWORD FOLLOW_UNARY_PLUS_in_unaryExpression9351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_PLUS_in_unaryExpression9351	= { FOLLOW_UNARY_PLUS_in_unaryExpression9351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_MINUS_in_unaryExpression9367  */
static	ANTLR3_BITWORD FOLLOW_UNARY_MINUS_in_unaryExpression9367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_MINUS_in_unaryExpression9367	= { FOLLOW_UNARY_MINUS_in_unaryExpression9367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMPLEMENT_in_unaryExpression9382  */
static	ANTLR3_BITWORD FOLLOW_COMPLEMENT_in_unaryExpression9382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COMPLEMENT_in_unaryExpression9382	= { FOLLOW_COMPLEMENT_in_unaryExpression9382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_unaryExpression9398  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_unaryExpression9398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_unaryExpression9398	= { FOLLOW_NOT_in_unaryExpression9398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression9427  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression9427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression9427	= { FOLLOW_unaryExpression_in_unaryExpression9427_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression9452  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression9452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression9452	= { FOLLOW_leftHandSideExpression_in_postfixExpression9452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_postfixExpression9465  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_postfixExpression9465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_postfixExpression9465	= { FOLLOW_MINUSMINUS_in_postfixExpression9465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression9467  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression9467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression9467	= { FOLLOW_leftHandSideExpression_in_postfixExpression9467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_postfixExpression9476  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_postfixExpression9476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_postfixExpression9476	= { FOLLOW_PLUSPLUS_in_postfixExpression9476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression9478  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression9478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression9478	= { FOLLOW_leftHandSideExpression_in_postfixExpression9478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_208_in_primaryExpression9499  */
static	ANTLR3_BITWORD FOLLOW_208_in_primaryExpression9499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_208_in_primaryExpression9499	= { FOLLOW_208_in_primaryExpression9499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression9506  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression9506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression9506	= { FOLLOW_Identifier_in_primaryExpression9506_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression9524  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression9524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression9524	= { FOLLOW_dollarExpression_in_primaryExpression9524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression9529  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression9529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression9529	= { FOLLOW_literal_in_primaryExpression9529_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression9534  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression9534_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression9534	= { FOLLOW_arrayLiteral_in_primaryExpression9534_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression9539  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression9539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression9539	= { FOLLOW_objectLiteral_in_primaryExpression9539_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_primaryExpression9551  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_primaryExpression9551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_primaryExpression9551	= { FOLLOW_patternLiteral_in_primaryExpression9551_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_in_primaryExpression9557  */
static	ANTLR3_BITWORD FOLLOW_PAREN_in_primaryExpression9557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_in_primaryExpression9557	= { FOLLOW_PAREN_in_primaryExpression9557_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression9561  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression9561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression9561	= { FOLLOW_expression_in_primaryExpression9561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression9576  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression9576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression9576	= { FOLLOW_vectorLiteral_in_primaryExpression9576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_quaternionLiteral_in_primaryExpression9588  */
static	ANTLR3_BITWORD FOLLOW_quaternionLiteral_in_primaryExpression9588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_quaternionLiteral_in_primaryExpression9588	= { FOLLOW_quaternionLiteral_in_primaryExpression9588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR_in_vectorLiteral9609  */
static	ANTLR3_BITWORD FOLLOW_VECTOR_in_vectorLiteral9609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR_in_vectorLiteral9609	= { FOLLOW_VECTOR_in_vectorLiteral9609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral9640  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral9640_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral9640	= { FOLLOW_vectorLiteralField_in_vectorLiteral9640_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral9687  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral9687_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral9687	= { FOLLOW_vectorLiteralField_in_vectorLiteral9687_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral9734  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral9734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral9734	= { FOLLOW_vectorLiteralField_in_vectorLiteral9734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_in_quaternionLiteral9812  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_in_quaternionLiteral9812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_in_quaternionLiteral9812	= { FOLLOW_QUATERNION_in_quaternionLiteral9812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9843  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9843_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9843	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9843_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9890  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9890_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9890	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9890_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9937  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9937_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9937	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9937_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9984  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9984	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9984_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10040  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10040	= { FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral10071  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral10071_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral10071	= { FOLLOW_vectorLiteralField_in_quaternionLiteral10071_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral10118  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral10118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral10118	= { FOLLOW_vectorLiteralField_in_quaternionLiteral10118_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10174  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10174	= { FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral10205  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral10205_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral10205	= { FOLLOW_vectorLiteralField_in_quaternionLiteral10205_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral10252  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral10252_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral10252	= { FOLLOW_vectorLiteralField_in_quaternionLiteral10252_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral10299  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral10299_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral10299	= { FOLLOW_vectorLiteralField_in_quaternionLiteral10299_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral10346  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral10346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral10346	= { FOLLOW_vectorLiteralField_in_quaternionLiteral10346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_vectorLiteralField10440  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_vectorLiteralField10440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_vectorLiteralField10440	= { FOLLOW_additiveExpression_in_vectorLiteralField10440_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_vectorLiteralField10453  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_vectorLiteralField10453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_vectorLiteralField10453	= { FOLLOW_NumericLiteral_in_vectorLiteralField10453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_vectorLiteralField10467  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_vectorLiteralField10467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_vectorLiteralField10467	= { FOLLOW_callExpression_in_vectorLiteralField10467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_vectorLiteralField10479  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_vectorLiteralField10479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_vectorLiteralField10479	= { FOLLOW_memberExpression_in_vectorLiteralField10479_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression10514  */
static	ANTLR3_BITWORD FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression10514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression10514	= { FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression10514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression10542  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression10542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression10542	= { FOLLOW_Identifier_in_dollarExpression10542_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral10607  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral10607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral10607	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral10607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral10617  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral10617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral10617	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral10617_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral10636  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral10636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral10636	= { FOLLOW_expression_in_arrayLiteral10636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral10659  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral10659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral10659	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral10659_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral10673  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral10673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral10673	= { FOLLOW_expression_in_arrayLiteral10673_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral10702  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral10702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral10702	= { FOLLOW_expression_in_arrayLiteral10702_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral10739  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral10739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral10739	= { FOLLOW_OBJ_LITERAL_in_objectLiteral10739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral10749  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral10749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral10749	= { FOLLOW_OBJ_LITERAL_in_objectLiteral10749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral10786  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral10786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral10786	= { FOLLOW_propertyNameAndValue_in_objectLiteral10786_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral10812  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral10812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral10812	= { FOLLOW_OBJ_LITERAL_in_objectLiteral10812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral10830  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral10830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral10830	= { FOLLOW_propertyNameAndValue_in_objectLiteral10830_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral10859  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral10859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral10859	= { FOLLOW_propertyNameAndValue_in_objectLiteral10859_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral10902  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral10902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral10902	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral10902_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral10912  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral10912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral10912	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral10912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral10921  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral10921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral10921	= { FOLLOW_nameValueProto_in_patternLiteral10921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral10933  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral10933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral10933	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral10933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral10953  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral10953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral10953	= { FOLLOW_nameValueProto_in_patternLiteral10953_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral10982  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral10982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral10982	= { FOLLOW_nameValueProto_in_patternLiteral10982_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_VALUE_PROTO_in_nameValueProto11047  */
static	ANTLR3_BITWORD FOLLOW_NAME_VALUE_PROTO_in_nameValueProto11047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_VALUE_PROTO_in_nameValueProto11047	= { FOLLOW_NAME_VALUE_PROTO_in_nameValueProto11047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_in_nameValueProto11070  */
static	ANTLR3_BITWORD FOLLOW_NAME_in_nameValueProto11070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_in_nameValueProto11070	= { FOLLOW_NAME_in_nameValueProto11070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_nameValueProto11082  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_nameValueProto11082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_nameValueProto11082	= { FOLLOW_propertyName_in_nameValueProto11082_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_nameValueProto11125  */
static	ANTLR3_BITWORD FOLLOW_VALUE_in_nameValueProto11125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_nameValueProto11125	= { FOLLOW_VALUE_in_nameValueProto11125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_nameValueProto11154  */
static	ANTLR3_BITWORD FOLLOW_expression_in_nameValueProto11154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_nameValueProto11154	= { FOLLOW_expression_in_nameValueProto11154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROTO_in_nameValueProto11203  */
static	ANTLR3_BITWORD FOLLOW_PROTO_in_nameValueProto11203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROTO_in_nameValueProto11203	= { FOLLOW_PROTO_in_nameValueProto11203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_nameValueProto11231  */
static	ANTLR3_BITWORD FOLLOW_expression_in_nameValueProto11231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_nameValueProto11231	= { FOLLOW_expression_in_nameValueProto11231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto11272  */
static	ANTLR3_BITWORD FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto11272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto11272	= { FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto11272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_VALUE_in_propertyNameAndValue11302  */
static	ANTLR3_BITWORD FOLLOW_NAME_VALUE_in_propertyNameAndValue11302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_VALUE_in_propertyNameAndValue11302	= { FOLLOW_NAME_VALUE_in_propertyNameAndValue11302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue11315  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue11315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue11315	= { FOLLOW_propertyName_in_propertyNameAndValue11315_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_propertyNameAndValue11334  */
static	ANTLR3_BITWORD FOLLOW_expression_in_propertyNameAndValue11334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_propertyNameAndValue11334	= { FOLLOW_expression_in_propertyNameAndValue11334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyName11346  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyName11346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyName11346	= { FOLLOW_Identifier_in_propertyName11346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_propertyName11353  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_propertyName11353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_propertyName11353	= { FOLLOW_StringLiteral_in_propertyName11353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_propertyName11370  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_propertyName11370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_propertyName11370	= { FOLLOW_NumericLiteral_in_propertyName11370_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_210_in_literal11394  */
static	ANTLR3_BITWORD FOLLOW_210_in_literal11394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_210_in_literal11394	= { FOLLOW_210_in_literal11394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_211_in_literal11401  */
static	ANTLR3_BITWORD FOLLOW_211_in_literal11401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_211_in_literal11401	= { FOLLOW_211_in_literal11401_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_212_in_literal11408  */
static	ANTLR3_BITWORD FOLLOW_212_in_literal11408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_212_in_literal11408	= { FOLLOW_212_in_literal11408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_literal11414  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_literal11414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_literal11414	= { FOLLOW_StringLiteral_in_literal11414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_literal11431  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_literal11431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_literal11431	= { FOLLOW_NumericLiteral_in_literal11431_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred26_EmersonTree1580  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred26_EmersonTree1580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred26_EmersonTree1580	= { FOLLOW_statement_in_synpred26_EmersonTree1580_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_synpred43_EmersonTree2828  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_synpred43_EmersonTree2828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_synpred43_EmersonTree2828	= { FOLLOW_CASE_in_synpred43_EmersonTree2828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_synpred43_EmersonTree2848  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_synpred43_EmersonTree2848_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_synpred43_EmersonTree2848	= { FOLLOW_ternaryExpression_in_synpred43_EmersonTree2848_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_synpred43_EmersonTree2868  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_synpred43_EmersonTree2868_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_synpred43_EmersonTree2868	= { FOLLOW_statementList_in_synpred43_EmersonTree2868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_synpred43_EmersonTree2879  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_synpred43_EmersonTree2879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_synpred43_EmersonTree2879	= { FOLLOW_caseClause_in_synpred43_EmersonTree2879_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred51_EmersonTree3494  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred51_EmersonTree3494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred51_EmersonTree3494	= { FOLLOW_memberExpression_in_synpred51_EmersonTree3494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred70_EmersonTree4725  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred70_EmersonTree4725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred70_EmersonTree4725	= { FOLLOW_callExpression_in_synpred70_EmersonTree4725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred71_EmersonTree4775  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred71_EmersonTree4775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred71_EmersonTree4775	= { FOLLOW_memberExpression_in_synpred71_EmersonTree4775_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_synpred74_EmersonTree5031  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_synpred74_EmersonTree5031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_synpred74_EmersonTree5031	= { FOLLOW_DOT_in_synpred74_EmersonTree5031_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred74_EmersonTree5045  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred74_EmersonTree5045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred74_EmersonTree5045	= { FOLLOW_memberExpression_in_synpred74_EmersonTree5045_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred74_EmersonTree5073  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred74_EmersonTree5073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred74_EmersonTree5073	= { FOLLOW_propertyReferenceSuffix1_in_synpred74_EmersonTree5073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_synpred78_EmersonTree5455  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_synpred78_EmersonTree5455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_synpred78_EmersonTree5455	= { FOLLOW_CALL_in_synpred78_EmersonTree5455_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred78_EmersonTree5469  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred78_EmersonTree5469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred78_EmersonTree5469	= { FOLLOW_memberExpression_in_synpred78_EmersonTree5469_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred78_EmersonTree5497  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred78_EmersonTree5497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred78_EmersonTree5497	= { FOLLOW_arguments_in_synpred78_EmersonTree5497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred83_EmersonTree5860  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred83_EmersonTree5860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred83_EmersonTree5860	= { FOLLOW_ARGLIST_in_synpred83_EmersonTree5860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred84_EmersonTree5870  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred84_EmersonTree5870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred84_EmersonTree5870	= { FOLLOW_ARGLIST_in_synpred84_EmersonTree5870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred84_EmersonTree5899  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred84_EmersonTree5899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred84_EmersonTree5899	= { FOLLOW_expression_in_synpred84_EmersonTree5899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_synpred146_EmersonTree9229  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_synpred146_EmersonTree9229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_synpred146_EmersonTree9229	= { FOLLOW_postfixExpression_in_synpred146_EmersonTree9229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_AXISANGLE_in_synpred167_EmersonTree10040  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_AXISANGLE_in_synpred167_EmersonTree10040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_AXISANGLE_in_synpred167_EmersonTree10040	= { FOLLOW_QUATERNION_AXISANGLE_in_synpred167_EmersonTree10040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10071  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10071_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x00070006011FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001D0000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10071	= { FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10071_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10118  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10118	= { FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10118_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred168_EmersonTree10440  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred168_EmersonTree10440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred168_EmersonTree10440	= { FOLLOW_additiveExpression_in_synpred168_EmersonTree10440_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_synpred169_EmersonTree10453  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_synpred169_EmersonTree10453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_synpred169_EmersonTree10453	= { FOLLOW_NumericLiteral_in_synpred169_EmersonTree10453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred170_EmersonTree10467  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred170_EmersonTree10467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred170_EmersonTree10467	= { FOLLOW_callExpression_in_synpred170_EmersonTree10467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree10607  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree10607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree10607	= { FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree10607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree10617  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree10617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree10617	= { FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree10617_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred172_EmersonTree10636  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred172_EmersonTree10636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred172_EmersonTree10636	= { FOLLOW_expression_in_synpred172_EmersonTree10636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree10739  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree10739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree10739	= { FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree10739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree10749  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree10749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree10749	= { FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree10749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree10786  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree10786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree10786	= { FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree10786_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree10902  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree10902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree10902	= { FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree10902_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree10912  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree10912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree10912	= { FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree10912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_synpred178_EmersonTree10921  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_synpred178_EmersonTree10921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_synpred178_EmersonTree10921	= { FOLLOW_nameValueProto_in_synpred178_EmersonTree10921_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    306:13: ( statement )?
 */
static const ANTLR3_INT32 dfa15_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa15_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa15_min[19] =
    {
	3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa15_max[19] =
    {
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa15_accept[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	1
    };
static const ANTLR3_INT32 dfa15_special[19] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa15_T_empty	    NULL

static const ANTLR3_INT32 dfa15_T0[] =
    {
	17, -1, -1, -1, -1, -1, 3, 6, 4, -1, -1, 7, 8, 9, -1, -1, -1, 10, 12, 11, 
	13, 14, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 16, 15, -1, -1, -1, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 5
    };static const ANTLR3_INT32 dfa15_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa15_transitions[] =
{
    dfa15_T0, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, 
    dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T1, 
    dfa15_T1, dfa15_T1, dfa15_T1, dfa15_T_empty, dfa15_T_empty	
};

static ANTLR3_INT32 dfa15_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA15_1;

    	    ANTLR3_MARKER index15_1;


    		LA15_1 = LA(1);

    	 
    	    index15_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA15_2;

    	    ANTLR3_MARKER index15_2;


    		LA15_2 = LA(1);

    	 
    	    index15_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA15_3;

    	    ANTLR3_MARKER index15_3;


    		LA15_3 = LA(1);

    	 
    	    index15_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA15_4;

    	    ANTLR3_MARKER index15_4;


    		LA15_4 = LA(1);

    	 
    	    index15_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA15_5;

    	    ANTLR3_MARKER index15_5;


    		LA15_5 = LA(1);

    	 
    	    index15_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA15_6;

    	    ANTLR3_MARKER index15_6;


    		LA15_6 = LA(1);

    	 
    	    index15_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA15_7;

    	    ANTLR3_MARKER index15_7;


    		LA15_7 = LA(1);

    	 
    	    index15_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA15_8;

    	    ANTLR3_MARKER index15_8;


    		LA15_8 = LA(1);

    	 
    	    index15_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA15_9;

    	    ANTLR3_MARKER index15_9;


    		LA15_9 = LA(1);

    	 
    	    index15_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA15_10;

    	    ANTLR3_MARKER index15_10;


    		LA15_10 = LA(1);

    	 
    	    index15_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA15_11;

    	    ANTLR3_MARKER index15_11;


    		LA15_11 = LA(1);

    	 
    	    index15_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA15_12;

    	    ANTLR3_MARKER index15_12;


    		LA15_12 = LA(1);

    	 
    	    index15_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA15_13;

    	    ANTLR3_MARKER index15_13;


    		LA15_13 = LA(1);

    	 
    	    index15_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA15_14;

    	    ANTLR3_MARKER index15_14;


    		LA15_14 = LA(1);

    	 
    	    index15_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA15_15;

    	    ANTLR3_MARKER index15_15;


    		LA15_15 = LA(1);

    	 
    	    index15_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA15_16;

    	    ANTLR3_MARKER index15_16;


    		LA15_16 = LA(1);

    	 
    	    index15_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index15_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"306:13: ( statement )?";
    EXCEPTION->decisionNum  = 15;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 15
 */
static
ANTLR3_CYCLIC_DFA cdfa15
    =	{
	    15,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"306:13: ( statement )?",	
	    (CDFA_SPECIAL_FUNC) dfa15_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa15_eot,	    /* EOT table			    */
	    dfa15_eof,	    /* EOF table			    */
	    dfa15_min,	    /* Minimum tokens for each state    */
	    dfa15_max,	    /* Maximum tokens for each state    */
	    dfa15_accept,	/* Accept table			    */
	    dfa15_special,	/* Special transition states	    */
	    dfa15_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 15
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    659:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static const ANTLR3_INT32 dfa38_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa38_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa38_min[21] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 
	-1, -1
    };
static const ANTLR3_INT32 dfa38_max[21] =
    {
	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	0, -1, -1
    };
static const ANTLR3_INT32 dfa38_accept[21] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa38_special[21] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa38_T_empty	    NULL

static const ANTLR3_INT32 dfa38_T0[] =
    {
	20, 18, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa38_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa38_transitions[] =
{
    dfa38_T0, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T1, dfa38_T1, dfa38_T_empty, dfa38_T_empty	
};

static ANTLR3_INT32 dfa38_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA38_17;

    	    ANTLR3_MARKER index38_17;


    		LA38_17 = LA(1);

    	 
    	    index38_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred51_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index38_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA38_18;

    	    ANTLR3_MARKER index38_18;


    		LA38_18 = LA(1);

    	 
    	    index38_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred51_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index38_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"659:1: memAndCallExpression : ( memberExpression | callExpression );";
    EXCEPTION->decisionNum  = 38;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 38
 */
static
ANTLR3_CYCLIC_DFA cdfa38
    =	{
	    38,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"659:1: memAndCallExpression : ( memberExpression | callExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa38_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa38_eot,	    /* EOT table			    */
	    dfa38_eof,	    /* EOF table			    */
	    dfa38_min,	    /* Minimum tokens for each state    */
	    dfa38_max,	    /* Maximum tokens for each state    */
	    dfa38_accept,	/* Accept table			    */
	    dfa38_special,	/* Special transition states	    */
	    dfa38_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 38
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    797:1: leftHandSideExpression returns [const char* genText] : ( callExpression | newExpression );
 */
static const ANTLR3_INT32 dfa45_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa45_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa45_min[21] =
    {
	5, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa45_max[21] =
    {
	212, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa45_accept[21] =
    {
	-1, 1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa45_special[21] =
    {	
	-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa45_T_empty	    NULL

static const ANTLR3_INT32 dfa45_T0[] =
    {
	1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 4, -1, -1, -1, -1, 4, 4, 4, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, 4, 4, 4
    };static const ANTLR3_INT32 dfa45_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa45_transitions[] =
{
    dfa45_T0, dfa45_T_empty, dfa45_T1, dfa45_T1, dfa45_T_empty, dfa45_T_empty, 
    dfa45_T_empty, dfa45_T_empty, dfa45_T_empty, dfa45_T_empty, dfa45_T_empty, 
    dfa45_T_empty, dfa45_T_empty, dfa45_T_empty, dfa45_T_empty, dfa45_T_empty, 
    dfa45_T_empty, dfa45_T_empty, dfa45_T_empty, dfa45_T_empty, dfa45_T_empty	
};

static ANTLR3_INT32 dfa45_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA45_2;

    	    ANTLR3_MARKER index45_2;


    		LA45_2 = LA(1);

    	 
    	    index45_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred70_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index45_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA45_3;

    	    ANTLR3_MARKER index45_3;


    		LA45_3 = LA(1);

    	 
    	    index45_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred70_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index45_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"797:1: leftHandSideExpression returns [const char* genText] : ( callExpression | newExpression );";
    EXCEPTION->decisionNum  = 45;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 45
 */
static
ANTLR3_CYCLIC_DFA cdfa45
    =	{
	    45,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"797:1: leftHandSideExpression returns [const char* genText] : ( callExpression | newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa45_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa45_eot,	    /* EOT table			    */
	    dfa45_eof,	    /* EOF table			    */
	    dfa45_min,	    /* Minimum tokens for each state    */
	    dfa45_max,	    /* Maximum tokens for each state    */
	    dfa45_accept,	/* Accept table			    */
	    dfa45_special,	/* Special transition states	    */
	    dfa45_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 45
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    812:1: newExpression returns [const char* genText] : ( memberExpression | ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa46_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa46_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa46_min[21] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1
    };
static const ANTLR3_INT32 dfa46_max[21] =
    {
	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1
    };
static const ANTLR3_INT32 dfa46_accept[21] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa46_special[21] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa46_T_empty	    NULL

static const ANTLR3_INT32 dfa46_T0[] =
    {
	1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	19, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	-1, 1, 1, 1
    };static const ANTLR3_INT32 dfa46_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa46_transitions[] =
{
    dfa46_T0, dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, 
    dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, 
    dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, 
    dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, dfa46_T_empty, dfa46_T1, 
    dfa46_T_empty	
};

static ANTLR3_INT32 dfa46_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA46_19;

    	    ANTLR3_MARKER index46_19;


    		LA46_19 = LA(1);

    	 
    	    index46_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred71_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index46_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"812:1: newExpression returns [const char* genText] : ( memberExpression | ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 46;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 46
 */
static
ANTLR3_CYCLIC_DFA cdfa46
    =	{
	    46,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"812:1: newExpression returns [const char* genText] : ( memberExpression | ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa46_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa46_eot,	    /* EOT table			    */
	    dfa46_eof,	    /* EOF table			    */
	    dfa46_min,	    /* Minimum tokens for each state    */
	    dfa46_max,	    /* Maximum tokens for each state    */
	    dfa46_accept,	/* Accept table			    */
	    dfa46_special,	/* Special transition states	    */
	    dfa46_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 46
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    857:1: memberExpression returns [const char* genText] : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static const ANTLR3_INT32 dfa47_eot[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa47_eof[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa47_min[22] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa47_max[22] =
    {
	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa47_accept[22] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 4, 
	5, 3, 6
    };
static const ANTLR3_INT32 dfa47_special[22] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa47_T_empty	    NULL

static const ANTLR3_INT32 dfa47_T0[] =
    {
	18, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 19, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa47_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa47_transitions[] =
{
    dfa47_T0, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, 
    dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, 
    dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, 
    dfa47_T_empty, dfa47_T_empty, dfa47_T1, dfa47_T_empty, dfa47_T_empty, 
    dfa47_T_empty, dfa47_T_empty	
};

static ANTLR3_INT32 dfa47_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA47_17;

    	    ANTLR3_MARKER index47_17;


    		LA47_17 = LA(1);

    	 
    	    index47_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred74_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index47_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"857:1: memberExpression returns [const char* genText] : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );";
    EXCEPTION->decisionNum  = 47;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 47
 */
static
ANTLR3_CYCLIC_DFA cdfa47
    =	{
	    47,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"857:1: memberExpression returns [const char* genText] : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa47_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa47_eot,	    /* EOT table			    */
	    dfa47_eof,	    /* EOF table			    */
	    dfa47_min,	    /* Minimum tokens for each state    */
	    dfa47_max,	    /* Maximum tokens for each state    */
	    dfa47_accept,	/* Accept table			    */
	    dfa47_special,	/* Special transition states	    */
	    dfa47_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 47
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1582:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );
 */
static const ANTLR3_INT32 dfa80_eot[30] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_eof[30] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_min[30] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_max[30] =
    {
	212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_accept[30] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa80_special[30] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa80_T_empty	    NULL

static const ANTLR3_INT32 dfa80_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 23, 23, 23, 22, 
	21, 23, 23, 23, 23, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa80_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa80_transitions[] =
{
    dfa80_T0, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, 
    dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, 
    dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, 
    dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, 
    dfa80_T_empty, dfa80_T1, dfa80_T1, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, 
    dfa80_T_empty, dfa80_T_empty, dfa80_T_empty, dfa80_T_empty	
};

static ANTLR3_INT32 dfa80_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA80_21;

    	    ANTLR3_MARKER index80_21;


    		LA80_21 = LA(1);

    	 
    	    index80_21 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred146_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index80_21);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA80_22;

    	    ANTLR3_MARKER index80_22;


    		LA80_22 = LA(1);

    	 
    	    index80_22 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred146_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index80_22);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1582:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );";
    EXCEPTION->decisionNum  = 80;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 80
 */
static
ANTLR3_CYCLIC_DFA cdfa80
    =	{
	    80,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1582:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa80_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa80_eot,	    /* EOT table			    */
	    dfa80_eof,	    /* EOF table			    */
	    dfa80_min,	    /* Minimum tokens for each state    */
	    dfa80_max,	    /* Maximum tokens for each state    */
	    dfa80_accept,	/* Accept table			    */
	    dfa80_special,	/* Special transition states	    */
	    dfa80_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 80
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1729:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static const ANTLR3_INT32 dfa84_eot[38] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa84_eof[38] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa84_min[38] =
    {
	5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_max[38] =
    {
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_accept[38] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 
	2
    };
static const ANTLR3_INT32 dfa84_special[38] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa84_T_empty	    NULL

static const ANTLR3_INT32 dfa84_T0[] =
    {
	1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 20, -1, -1, -1, -1, 16, 17, 18, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 21, 21, 21, 21, 21, 12, 13, -1, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, 
	-1, 15, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 11, 
	10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 4, -1, 7, 8, 9
    };static const ANTLR3_INT32 dfa84_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa84_transitions[] =
{
    dfa84_T0, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, 
    dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, 
    dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, dfa84_T1, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty	
};

static ANTLR3_INT32 dfa84_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA84_1;

    	    ANTLR3_MARKER index84_1;


    		LA84_1 = LA(1);

    	 
    	    index84_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (synpred170_EmersonTree(ctx)) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index84_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA84_2;

    	    ANTLR3_MARKER index84_2;


    		LA84_2 = LA(1);

    	 
    	    index84_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (synpred170_EmersonTree(ctx)) )
    	    {
    	        s = 35;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA84_3;

    	    ANTLR3_MARKER index84_3;


    		LA84_3 = LA(1);

    	 
    	    index84_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (synpred170_EmersonTree(ctx)) )
    	    {
    	        s = 35;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA84_4;

    	    ANTLR3_MARKER index84_4;


    		LA84_4 = LA(1);

    	 
    	    index84_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA84_5;

    	    ANTLR3_MARKER index84_5;


    		LA84_5 = LA(1);

    	 
    	    index84_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA84_6;

    	    ANTLR3_MARKER index84_6;


    		LA84_6 = LA(1);

    	 
    	    index84_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA84_7;

    	    ANTLR3_MARKER index84_7;


    		LA84_7 = LA(1);

    	 
    	    index84_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA84_8;

    	    ANTLR3_MARKER index84_8;


    		LA84_8 = LA(1);

    	 
    	    index84_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA84_9;

    	    ANTLR3_MARKER index84_9;


    		LA84_9 = LA(1);

    	 
    	    index84_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA84_10;

    	    ANTLR3_MARKER index84_10;


    		LA84_10 = LA(1);

    	 
    	    index84_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA84_11;

    	    ANTLR3_MARKER index84_11;


    		LA84_11 = LA(1);

    	 
    	    index84_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (synpred169_EmersonTree(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA84_12;

    	    ANTLR3_MARKER index84_12;


    		LA84_12 = LA(1);

    	 
    	    index84_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA84_13;

    	    ANTLR3_MARKER index84_13;


    		LA84_13 = LA(1);

    	 
    	    index84_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA84_14;

    	    ANTLR3_MARKER index84_14;


    		LA84_14 = LA(1);

    	 
    	    index84_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA84_15;

    	    ANTLR3_MARKER index84_15;


    		LA84_15 = LA(1);

    	 
    	    index84_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA84_16;

    	    ANTLR3_MARKER index84_16;


    		LA84_16 = LA(1);

    	 
    	    index84_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA84_17;

    	    ANTLR3_MARKER index84_17;


    		LA84_17 = LA(1);

    	 
    	    index84_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA84_18;

    	    ANTLR3_MARKER index84_18;


    		LA84_18 = LA(1);

    	 
    	    index84_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA84_19;

    	    ANTLR3_MARKER index84_19;


    		LA84_19 = LA(1);

    	 
    	    index84_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 19:
        
    	{
    	    ANTLR3_UINT32 LA84_20;

    	    ANTLR3_MARKER index84_20;


    		LA84_20 = LA(1);

    	 
    	    index84_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index84_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1729:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );";
    EXCEPTION->decisionNum  = 84;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 84
 */
static
ANTLR3_CYCLIC_DFA cdfa84
    =	{
	    84,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1729:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa84_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa84_eot,	    /* EOT table			    */
	    dfa84_eof,	    /* EOF table			    */
	    dfa84_min,	    /* Minimum tokens for each state    */
	    dfa84_max,	    /* Maximum tokens for each state    */
	    dfa84_accept,	/* Accept table			    */
	    dfa84_special,	/* Special transition states	    */
	    dfa84_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 84
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//EmersonTree.g:61:1: program returns [pANTLR3_STRING return_str, int* emersonLines, int* jsLines, int numLines] : ^( PROG ( sourceElements )? ) ;
 */
static EmersonTree_program_return
program(pEmersonTree ctx)
{   
    EmersonTree_program_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        // .//EmersonTree.g:62:2: ( ^( PROG ( sourceElements )? ) )
        // .//EmersonTree.g:62:3: ^( PROG ( sourceElements )? )
        {
             MATCHT(PROG, &FOLLOW_PROG_in_program80); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) 
            {

                                pANTLR3_STRING_FACTORY factory = antlr3StringFactoryNew();
                                program_string = factory->newRaw(factory);
                                
                                linesSize = 40;
                                lineIndex = 0;
                                emersonLines = (int*)malloc(linesSize * sizeof(int));
                                jsLines = (int*)malloc(linesSize * sizeof(int));
                    
                                current_line = 1;
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                // .//EmersonTree.g:74:13: ( sourceElements )?
                {
                    int alt1=2;
                    {
                        int LA1_0 = LA(1);
                        if ( (((LA1_0 >= SLIST) && (LA1_0 <= VARLIST)) || ((LA1_0 >= DO) && (LA1_0 <= FOR)) || ((LA1_0 >= FORIN) && (LA1_0 <= WITH)) || LA1_0 == NOOP || ((LA1_0 >= TRY) && (LA1_0 <= THROW)) || LA1_0 == SWITCH || LA1_0 == FUNC_DECL || LA1_0 == EXPR) ) 
                        {
                            alt1=1;
                        }
                    }
                    switch (alt1) 
                    {
                	case 1:
                	    // .//EmersonTree.g:75:15: sourceElements
                	    {
                	        FOLLOWPUSH(FOLLOW_sourceElements_in_program125);
                	        sourceElements(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleprogramEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
            }
            if ( BACKTRACKING==0 ) 
            {

                            retval.return_str = program_string;
                            retval.emersonLines = emersonLines;
                            retval.jsLines = jsLines;
                            retval.numLines = lineIndex;
                         
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//EmersonTree.g:88:1: sourceElements : ( sourceElement )+ ;
 */
static void
sourceElements(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:89:5: ( ( sourceElement )+ )
        // .//EmersonTree.g:89:6: ( sourceElement )+
        {
            // .//EmersonTree.g:89:6: ( sourceElement )+
            {
                int cnt2=0;

                for (;;)
                {
                    int alt2=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA2_0 = LA(1);
            	    if ( (((LA2_0 >= SLIST) && (LA2_0 <= VARLIST)) || ((LA2_0 >= DO) && (LA2_0 <= FOR)) || ((LA2_0 >= FORIN) && (LA2_0 <= WITH)) || LA2_0 == NOOP || ((LA2_0 >= TRY) && (LA2_0 <= THROW)) || LA2_0 == SWITCH || LA2_0 == FUNC_DECL || LA2_0 == EXPR) ) 
            	    {
            	        alt2=1;
            	    }

            	}
            	switch (alt2) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:89:7: sourceElement
            	        {
            	            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements186);
            	            sourceElement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulesourceElementsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }
            	            if ( BACKTRACKING==0 ) 
            	            {
            	                APP("\n"); 
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt2 >= 1 )
            		{
            		    goto loop2;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulesourceElementsEx;
            	}
            	cnt2++;
                }
                loop2: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//EmersonTree.g:92:1: sourceElement : ( functionDeclaration | statement );
 */
static void
sourceElement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:93:5: ( functionDeclaration | statement )
            
            ANTLR3_UINT32 alt3;

            alt3=2;


            {
                int LA3_0 = LA(1);
                if ( (LA3_0 == FUNC_DECL) ) 
                {
                    alt3=1;
                }
                else if ( (((LA3_0 >= SLIST) && (LA3_0 <= VARLIST)) || ((LA3_0 >= DO) && (LA3_0 <= FOR)) || ((LA3_0 >= FORIN) && (LA3_0 <= WITH)) || LA3_0 == NOOP || ((LA3_0 >= TRY) && (LA3_0 <= THROW)) || LA3_0 == SWITCH || LA3_0 == EXPR) ) 
                {
                    alt3=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 3;
                    EXCEPTION->state        = 0;


                    goto rulesourceElementEx;
                }
            }
            switch (alt3) 
            {
        	case 1:
        	    // .//EmersonTree.g:93:7: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement209);
        	        functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:94:7: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement217);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(";"); 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//EmersonTree.g:98:1: functionDeclaration : ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static void
functionDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FUNC_DECL1;
    pANTLR3_BASE_TREE    Identifier2;

    /* Initialize rule variables
     */


    FUNC_DECL1       = NULL;
    Identifier2       = NULL;

    {
        // .//EmersonTree.g:99:2: ( ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:99:4: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
        {
            FUNC_DECL1 = (pANTLR3_BASE_TREE) MATCHT(FUNC_DECL, &FOLLOW_FUNC_DECL_in_functionDeclaration236); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((FUNC_DECL1->getLine(FUNC_DECL1)));
                                APP("function ");
                              
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration268); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier2->getText(Identifier2))->chars);
                                APP("( ");
                              
            }

            // .//EmersonTree.g:109:15: ( formalParameterList )?
            {
                int alt4=2;
                {
                    int LA4_0 = LA(1);
                    if ( (LA4_0 == FUNC_PARAMS) ) 
                    {
                        alt4=1;
                    }
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//EmersonTree.g:109:16: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration302);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" )");
                                APP("\n{\n");
                              
            }
            if ( BACKTRACKING==0 ) 
            {

                                 CHECK_RESOURCES();
                              
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration367);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}");
                              
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//EmersonTree.g:125:1: functionExpression : ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static void
functionExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FUNC_EXPR3;
    pANTLR3_BASE_TREE    Identifier4;

    /* Initialize rule variables
     */


    FUNC_EXPR3       = NULL;
    Identifier4       = NULL;

    {
        // .//EmersonTree.g:126:2: ( ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:126:4: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
        {
            FUNC_EXPR3 = (pANTLR3_BASE_TREE) MATCHT(FUNC_EXPR, &FOLLOW_FUNC_EXPR_in_functionExpression411); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                               LINE((FUNC_EXPR3->getLine(FUNC_EXPR3)));
                               APP("function ");
                             
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:131:14: ( Identifier )?
            {
                int alt5=2;
                {
                    int LA5_0 = LA(1);
                    if ( (LA5_0 == Identifier) ) 
                    {
                        alt5=1;
                    }
                }
                switch (alt5) 
                {
            	case 1:
            	    // .//EmersonTree.g:132:16: Identifier
            	    {
            	        Identifier4 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression455); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP((const char*)(Identifier4->getText(Identifier4))->chars);
            	                             
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("( ");
                             
            }

            // .//EmersonTree.g:140:14: ( formalParameterList )?
            {
                int alt6=2;
                {
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == FUNC_PARAMS) ) 
                    {
                        alt6=1;
                    }
                }
                switch (alt6) 
                {
            	case 1:
            	    // .//EmersonTree.g:140:15: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression522);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("  )");
                               APP("\n{\n");
                             
            }
            if ( BACKTRACKING==0 ) 
            {

                                 CHECK_RESOURCES();
                             
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression583);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("\n}");
                             
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//EmersonTree.g:156:1: formalParameterList : ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) ;
 */
static void
formalParameterList(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    id1;
    pANTLR3_BASE_TREE    id2;

    /* Initialize rule variables
     */


    id1       = NULL;
    id2       = NULL;

    {
        // .//EmersonTree.g:157:3: ( ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) )
        // .//EmersonTree.g:157:5: ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* )
        {
             MATCHT(FUNC_PARAMS, &FOLLOW_FUNC_PARAMS_in_formalParameterList631); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:158:17: (id1= Identifier )
            // .//EmersonTree.g:158:18: id1= Identifier
            {
                id1 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList652); 
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {
                     LINE((id1->getLine(id1))); APP((const char*)(id1->getText(id1))->chars); 
                }

            }


            // .//EmersonTree.g:160:9: (id2= Identifier )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == Identifier) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//EmersonTree.g:161:18: id2= Identifier
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP(", ");
            	                             
            	        }
            	        id2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList722); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             LINE((id2->getLine(id2))); APP((const char*)(id2->getText(id2))->chars);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//EmersonTree.g:171:1: functionBody : ( sourceElements | EMPTY_FUNC_BODY );
 */
static void
functionBody(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:172:2: ( sourceElements | EMPTY_FUNC_BODY )
            
            ANTLR3_UINT32 alt8;

            alt8=2;


            {
                int LA8_0 = LA(1);
                if ( (((LA8_0 >= SLIST) && (LA8_0 <= VARLIST)) || ((LA8_0 >= DO) && (LA8_0 <= FOR)) || ((LA8_0 >= FORIN) && (LA8_0 <= WITH)) || LA8_0 == NOOP || ((LA8_0 >= TRY) && (LA8_0 <= THROW)) || LA8_0 == SWITCH || LA8_0 == FUNC_DECL || LA8_0 == EXPR) ) 
                {
                    alt8=1;
                }
                else if ( (LA8_0 == EMPTY_FUNC_BODY) ) 
                {
                    alt8=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 8;
                    EXCEPTION->state        = 0;


                    goto rulefunctionBodyEx;
                }
            }
            switch (alt8) 
            {
        	case 1:
        	    // .//EmersonTree.g:172:4: sourceElements
        	    {
        	        FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody752);
        	        sourceElements(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:173:4: EMPTY_FUNC_BODY
        	    {
        	         MATCHT(EMPTY_FUNC_BODY, &FOLLOW_EMPTY_FUNC_BODY_in_functionBody757); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//EmersonTree.g:177:1: statement : ( noOpStatement | switchStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static void
statement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:178:5: ( noOpStatement | switchStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement )
            
            ANTLR3_UINT32 alt9;

            alt9=13;

            switch ( LA(1) ) 
            {
            case NOOP:
            	{
            		alt9=1;
            	}
                break;
            case SWITCH:
            	{
            		alt9=2;
            	}
                break;
            case SLIST:
            	{
            		alt9=3;
            	}
                break;
            case VARLIST:
            	{
            		alt9=4;
            	}
                break;
            case EXPR:
            	{
            		alt9=5;
            	}
                break;
            case IF:
            	{
            		alt9=6;
            	}
                break;
            case DO:
            case WHILE:
            case FOR:
            case FORIN:
            	{
            		alt9=7;
            	}
                break;
            case CONTINUE:
            	{
            		alt9=8;
            	}
                break;
            case BREAK:
            	{
            		alt9=9;
            	}
                break;
            case RETURN:
            	{
            		alt9=10;
            	}
                break;
            case WITH:
            	{
            		alt9=11;
            	}
                break;
            case THROW:
            	{
            		alt9=12;
            	}
                break;
            case TRY:
            	{
            		alt9=13;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // .//EmersonTree.g:178:7: noOpStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement773);
        	        noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:179:7: switchStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement781);
        	        switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:180:7: statementBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement789);
        	        statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:181:7: variableStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement797);
        	        variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:182:7: expressionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement805);
        	        expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:183:7: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement813);
        	        ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:184:7: iterationStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement821);
        	        iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:185:7: continueStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement829);
        	        continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:186:7: breakStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement837);
        	        breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 10:
        	    // .//EmersonTree.g:187:7: returnStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement845);
        	        returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 11:
        	    // .//EmersonTree.g:188:7: withStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement853);
        	        withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 12:
        	    // .//EmersonTree.g:189:7: throwStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement861);
        	        throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 13:
        	    // .//EmersonTree.g:190:7: tryStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement869);
        	        tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start noOpStatement
 * .//EmersonTree.g:193:1: noOpStatement : ^( NOOP ) ;
 */
static void
noOpStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:194:9: ( ^( NOOP ) )
        // .//EmersonTree.g:194:11: ^( NOOP )
        {
             MATCHT(NOOP, &FOLLOW_NOOP_in_noOpStatement894); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                          
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementBlock
 * .//EmersonTree.g:200:1: statementBlock : statementList ;
 */
static void
statementBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:201:2: ( statementList )
        // .//EmersonTree.g:201:4: statementList
        {
            if ( BACKTRACKING==0 ) 
            {
                APP(" {\n "); 
            }
            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock940);
            statementList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                  
                            APP(" }\n");
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//EmersonTree.g:206:1: statementList : ^( SLIST ( statement )* ) ;
 */
static void
statementList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:207:2: ( ^( SLIST ( statement )* ) )
        // .//EmersonTree.g:207:5: ^( SLIST ( statement )* )
        {
             MATCHT(SLIST, &FOLLOW_SLIST_in_statementList969); 
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:209:13: ( statement )*

                for (;;)
                {
                    int alt10=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA10_0 = LA(1);
                        if ( (((LA10_0 >= SLIST) && (LA10_0 <= VARLIST)) || ((LA10_0 >= DO) && (LA10_0 <= FOR)) || ((LA10_0 >= FORIN) && (LA10_0 <= WITH)) || LA10_0 == NOOP || ((LA10_0 >= TRY) && (LA10_0 <= THROW)) || LA10_0 == SWITCH || LA10_0 == EXPR) ) 
                        {
                            alt10=1;
                        }

                    }
                    switch (alt10) 
                    {
                	case 1:
                	    // .//EmersonTree.g:209:14: statement
                	    {
                	        FOLLOWPUSH(FOLLOW_statement_in_statementList985);
                	        statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulestatementListEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	            			        APP("; \n");					  
                	                            
                	        }

                	    }
                	    break;

                	default:
                	    goto loop10;	/* break out of the loop */
                	    break;
                    }
                }
                loop10: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//EmersonTree.g:216:1: variableStatement : ^( VARLIST variableDeclarationList ) ;
 */
static void
variableStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    VARLIST5;

    /* Initialize rule variables
     */


    VARLIST5       = NULL;

    {
        // .//EmersonTree.g:217:2: ( ^( VARLIST variableDeclarationList ) )
        // .//EmersonTree.g:217:5: ^( VARLIST variableDeclarationList )
        {
            VARLIST5 = (pANTLR3_BASE_TREE) MATCHT(VARLIST, &FOLLOW_VARLIST_in_variableStatement1051); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((VARLIST5->getLine(VARLIST5)));
                                APP("var ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1079);
            variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//EmersonTree.g:226:1: variableDeclarationList : variableDeclaration ( variableDeclaration )* ;
 */
static void
variableDeclarationList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:227:2: ( variableDeclaration ( variableDeclaration )* )
        // .//EmersonTree.g:227:4: variableDeclaration ( variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1099);
            variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:228:9: ( variableDeclaration )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == VAR) ) 
                    {
                        alt11=1;
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//EmersonTree.g:229:13: variableDeclaration
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(", ");
            	                        
            	        }
            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1139);
            	        variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//EmersonTree.g:236:1: variableDeclarationListNoIn : ( variableDeclarationNoIn )+ ;
 */
static void
variableDeclarationListNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:237:2: ( ( variableDeclarationNoIn )+ )
        // .//EmersonTree.g:237:4: ( variableDeclarationNoIn )+
        {
            // .//EmersonTree.g:237:4: ( variableDeclarationNoIn )+
            {
                int cnt12=0;

                for (;;)
                {
                    int alt12=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA12_0 = LA(1);
            	    if ( (LA12_0 == VAR) ) 
            	    {
            	        alt12=1;
            	    }

            	}
            	switch (alt12) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:0:0: variableDeclarationNoIn
            	        {
            	            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1162);
            	            variableDeclarationNoIn(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulevariableDeclarationListNoInEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt12 >= 1 )
            		{
            		    goto loop12;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulevariableDeclarationListNoInEx;
            	}
            	cnt12++;
                }
                loop12: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//EmersonTree.g:240:1: variableDeclaration : ^( VAR Identifier ( initialiser )? ) ;
 */
static void
variableDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier6;

    /* Initialize rule variables
     */


    Identifier6       = NULL;

    {
        // .//EmersonTree.g:241:2: ( ^( VAR Identifier ( initialiser )? ) )
        // .//EmersonTree.g:241:4: ^( VAR Identifier ( initialiser )? )
        {
             MATCHT(VAR, &FOLLOW_VAR_in_variableDeclaration1189); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier6 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1203); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                LINE((Identifier6->getLine(Identifier6)));
                                APP((const char*)(Identifier6->getText(Identifier6))->chars);
                            
            }

            // .//EmersonTree.g:249:13: ( initialiser )?
            {
                int alt13=2;
                {
                    int LA13_0 = LA(1);
                    if ( (LA13_0 == EXPR) ) 
                    {
                        alt13=1;
                    }
                }
                switch (alt13) 
                {
            	case 1:
            	    // .//EmersonTree.g:250:17: initialiser
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1281);
            	        initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//EmersonTree.g:258:1: variableDeclarationNoIn : ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static void
variableDeclarationNoIn(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    VAR7;
    pANTLR3_BASE_TREE    Identifier8;

    /* Initialize rule variables
     */


    VAR7       = NULL;
    Identifier8       = NULL;

    {
        // .//EmersonTree.g:259:2: ( ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//EmersonTree.g:260:9: ^( VAR Identifier ( initialiserNoIn )? )
        {
            VAR7 = (pANTLR3_BASE_TREE) MATCHT(VAR, &FOLLOW_VAR_in_variableDeclarationNoIn1341); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((VAR7->getLine(VAR7)));
                                APP("var ");
                			
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier8 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1360); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                LINE((Identifier8->getLine(Identifier8)));
                                APP((const char*)(Identifier8->getText(Identifier8))->chars);
                            
            }

            // .//EmersonTree.g:272:13: ( initialiserNoIn )?
            {
                int alt14=2;
                {
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == EXPR_NO_IN) ) 
                    {
                        alt14=1;
                    }
                }
                switch (alt14) 
                {
            	case 1:
            	    // .//EmersonTree.g:273:17: initialiserNoIn
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1438);
            	        initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//EmersonTree.g:282:1: initialiser : expression ;
 */
static void
initialiser(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:283:2: ( expression )
        // .//EmersonTree.g:283:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_initialiser1481);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//EmersonTree.g:286:1: initialiserNoIn : expressionNoIn ;
 */
static void
initialiserNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:287:2: ( expressionNoIn )
        // .//EmersonTree.g:287:4: expressionNoIn
        {
            FOLLOWPUSH(FOLLOW_expressionNoIn_in_initialiserNoIn1494);
            expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start expressionStatement
 * .//EmersonTree.g:291:1: expressionStatement : expression ;
 */
static void
expressionStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:292:2: ( expression )
        // .//EmersonTree.g:292:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1508);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//EmersonTree.g:295:1: ifStatement : ^( IF expression ( statement )? ( statement )? ) ;
 */
static void
ifStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    IF9;

    /* Initialize rule variables
     */


    IF9       = NULL;

    {
        // .//EmersonTree.g:296:2: ( ^( IF expression ( statement )? ( statement )? ) )
        // .//EmersonTree.g:296:4: ^( IF expression ( statement )? ( statement )? )
        {
            IF9 = (pANTLR3_BASE_TREE) MATCHT(IF, &FOLLOW_IF_in_ifStatement1521); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((IF9->getLine(IF9)));
                                APP(" if ");
                                APP(" ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1550);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) \n{");
                            
            }

            // .//EmersonTree.g:306:13: ( statement )?
            {
                int alt15=2;
                alt15 = cdfa15.predict(ctx, RECOGNIZER, ISTREAM, &cdfa15);
                if  (HASEXCEPTION())
                {
                    goto ruleifStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//EmersonTree.g:306:14: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1580);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(" \n");
            	                        
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            // .//EmersonTree.g:314:13: ( statement )?
            {
                int alt16=2;
                {
                    int LA16_0 = LA(1);
                    if ( (((LA16_0 >= SLIST) && (LA16_0 <= VARLIST)) || ((LA16_0 >= DO) && (LA16_0 <= FOR)) || ((LA16_0 >= FORIN) && (LA16_0 <= WITH)) || LA16_0 == NOOP || ((LA16_0 >= TRY) && (LA16_0 <= THROW)) || LA16_0 == SWITCH || LA16_0 == EXPR) ) 
                    {
                        alt16=1;
                    }
                }
                switch (alt16) 
                {
            	case 1:
            	    // .//EmersonTree.g:315:17: statement
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP("else \n{");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1674);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP("\n}");
            	                            
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//EmersonTree.g:326:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static void
iterationStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:327:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt17;

            alt17=4;

            switch ( LA(1) ) 
            {
            case DO:
            	{
            		alt17=1;
            	}
                break;
            case WHILE:
            	{
            		alt17=2;
            	}
                break;
            case FOR:
            	{
            		alt17=3;
            	}
                break;
            case FORIN:
            	{
            		alt17=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 17;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt17) 
            {
        	case 1:
        	    // .//EmersonTree.g:327:4: doWhileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1729);
        	        doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:328:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1734);
        	        whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:329:4: forStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1739);
        	        forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:330:4: forInStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1744);
        	        forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//EmersonTree.g:333:1: doWhileStatement : ^( DO statement expression ) ;
 */
static void
doWhileStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    DO10;

    /* Initialize rule variables
     */


    DO10       = NULL;

    {
        // .//EmersonTree.g:334:2: ( ^( DO statement expression ) )
        // .//EmersonTree.g:334:4: ^( DO statement expression )
        {
            DO10 = (pANTLR3_BASE_TREE) MATCHT(DO, &FOLLOW_DO_in_doWhileStatement1771); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((DO10->getLine(DO10))); 
                                APP(" do ");  						  
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1799);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                                APP("while ( " );      
                            
            }
            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1827);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) ");  
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//EmersonTree.g:355:1: whileStatement : ^( WHILE expression statement ) ;
 */
static void
whileStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    WHILE11;

    /* Initialize rule variables
     */


    WHILE11       = NULL;

    {
        // .//EmersonTree.g:356:2: ( ^( WHILE expression statement ) )
        // .//EmersonTree.g:356:4: ^( WHILE expression statement )
        {
            WHILE11 = (pANTLR3_BASE_TREE) MATCHT(WHILE, &FOLLOW_WHILE_in_whileStatement1878); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((WHILE11->getLine(WHILE11))); 
                                APP(" while ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1906);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) "); 
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1935);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//EmersonTree.g:376:1: forStatement : ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) ;
 */
static void
forStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FOR12;

    /* Initialize rule variables
     */


    FOR12       = NULL;

    {
        // .//EmersonTree.g:377:2: ( ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) )
        // .//EmersonTree.g:377:4: ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement )
        {
            FOR12 = (pANTLR3_BASE_TREE) MATCHT(FOR, &FOLLOW_FOR_in_forStatement1985); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((FOR12->getLine(FOR12))); 
                                APP(" for ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:383:13: ( ^( FORINIT forStatementInitialiserPart ) )?
            {
                int alt18=2;
                {
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == FORINIT) ) 
                    {
                        alt18=1;
                    }
                }
                switch (alt18) 
                {
            	case 1:
            	    // .//EmersonTree.g:383:14: ^( FORINIT forStatementInitialiserPart )
            	    {
            	         MATCHT(FORINIT, &FOLLOW_FORINIT_in_forStatement2016); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement2018);
            	        forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ; ");
                            
            }

            // .//EmersonTree.g:387:13: ( ^( FORCOND expression ) )?
            {
                int alt19=2;
                {
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == FORCOND) ) 
                    {
                        alt19=1;
                    }
                }
                switch (alt19) 
                {
            	case 1:
            	    // .//EmersonTree.g:387:14: ^( FORCOND expression )
            	    {
            	         MATCHT(FORCOND, &FOLLOW_FORCOND_in_forStatement2051); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2053);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ; ");
                            
            }

            // .//EmersonTree.g:391:13: ( ^( FORITER expression ) )?
            {
                int alt20=2;
                {
                    int LA20_0 = LA(1);
                    if ( (LA20_0 == FORITER) ) 
                    {
                        alt20=1;
                    }
                }
                switch (alt20) 
                {
            	case 1:
            	    // .//EmersonTree.g:391:14: ^( FORITER expression )
            	    {
            	         MATCHT(FORITER, &FOLLOW_FORITER_in_forStatement2087); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2089);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) ");
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_forStatement2122);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//EmersonTree.g:405:1: forStatementInitialiserPart : ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) );
 */
static void
forStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:406:5: ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt21;

            alt21=2;


            {
                int LA21_0 = LA(1);
                if ( (LA21_0 == EXPR_NO_IN) ) 
                {
                    alt21=1;
                }
                else if ( (LA21_0 == VARLIST) ) 
                {
                    alt21=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 21;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt21) 
            {
        	case 1:
        	    // .//EmersonTree.g:406:7: expressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart2161);
        	        expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:407:7: ^( VARLIST variableDeclarationListNoIn )
        	    {
        	         MATCHT(VARLIST, &FOLLOW_VARLIST_in_forStatementInitialiserPart2170); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2172);
        	        variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//EmersonTree.g:410:1: forInStatement : ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static void
forInStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FORIN13;

    /* Initialize rule variables
     */


    FORIN13       = NULL;

    {
        // .//EmersonTree.g:411:2: ( ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//EmersonTree.g:411:4: ^( FORIN forInStatementInitialiserPart expression statement )
        {
            FORIN13 = (pANTLR3_BASE_TREE) MATCHT(FORIN, &FOLLOW_FORIN_in_forInStatement2198); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((FORIN13->getLine(FORIN13)));
                            APP(" for ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement2220);
            forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" in ");
                        
            }
            FOLLOWPUSH(FOLLOW_expression_in_forInStatement2241);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) ");
                            //resource checking
                            APP("{\n");
                            CHECK_RESOURCES();
                        
            }
            FOLLOWPUSH(FOLLOW_statement_in_forInStatement2262);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("\n}\n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//EmersonTree.g:436:1: forInStatementInitialiserPart : ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) );
 */
static void
forInStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:437:2: ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt22;

            alt22=2;


            {
                int LA22_0 = LA(1);
                if ( (((LA22_0 >= CALL) && (LA22_0 <= DOT)) || LA22_0 == NEW || ((LA22_0 >= VECTOR) && (LA22_0 <= QUATERNION_AXISANGLE)) || LA22_0 == DOLLAR_EXPRESSION || ((LA22_0 >= ARRAY_LITERAL) && (LA22_0 <= OBJ_LITERAL)) || LA22_0 == FUNC_EXPR || ((LA22_0 >= PAREN) && (LA22_0 <= PATTERN_LITERAL)) || ((LA22_0 >= Identifier) && (LA22_0 <= StringLiteral)) || LA22_0 == 208 || ((LA22_0 >= 210) && (LA22_0 <= 212))) ) 
                {
                    alt22=1;
                }
                else if ( (LA22_0 == VAR) ) 
                {
                    alt22=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 22;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//EmersonTree.g:437:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2294);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:438:4: ^( VAR variableDeclarationNoIn )
        	    {
        	         MATCHT(VAR, &FOLLOW_VAR_in_forInStatementInitialiserPart2300); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2302);
        	        variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//EmersonTree.g:441:1: continueStatement : ^( CONTINUE ( Identifier )? ) ;
 */
static void
continueStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier14;

    /* Initialize rule variables
     */


    Identifier14       = NULL;

    {
        // .//EmersonTree.g:442:5: ( ^( CONTINUE ( Identifier )? ) )
        // .//EmersonTree.g:442:7: ^( CONTINUE ( Identifier )? )
        {
             MATCHT(CONTINUE, &FOLLOW_CONTINUE_in_continueStatement2327); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("continue ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:447:9: ( Identifier )?
                {
                    int alt23=2;
                    {
                        int LA23_0 = LA(1);
                        if ( (LA23_0 == Identifier) ) 
                        {
                            alt23=1;
                        }
                    }
                    switch (alt23) 
                    {
                	case 1:
                	    // .//EmersonTree.g:448:13: Identifier
                	    {
                	        Identifier14 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2363); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecontinueStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            LINE((Identifier14->getLine(Identifier14)));
                	                            APP((const char*)(Identifier14->getText(Identifier14))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//EmersonTree.g:457:1: breakStatement : ^( BREAK ( Identifier )? ) ;
 */
static void
breakStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    BREAK15;
    pANTLR3_BASE_TREE    Identifier16;

    /* Initialize rule variables
     */


    BREAK15       = NULL;
    Identifier16       = NULL;

    {
        // .//EmersonTree.g:458:5: ( ^( BREAK ( Identifier )? ) )
        // .//EmersonTree.g:458:7: ^( BREAK ( Identifier )? )
        {
            BREAK15 = (pANTLR3_BASE_TREE) MATCHT(BREAK, &FOLLOW_BREAK_in_breakStatement2420); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((BREAK15->getLine(BREAK15)));
                            APP("break ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:464:9: ( Identifier )?
                {
                    int alt24=2;
                    {
                        int LA24_0 = LA(1);
                        if ( (LA24_0 == Identifier) ) 
                        {
                            alt24=1;
                        }
                    }
                    switch (alt24) 
                    {
                	case 1:
                	    // .//EmersonTree.g:465:13: Identifier
                	    {
                	        Identifier16 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2454); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulebreakStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            LINE((Identifier16->getLine(Identifier16)));
                	                            APP((const char*)(Identifier16->getText(Identifier16))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//EmersonTree.g:475:1: returnStatement : ^( RETURN ( expression )? ) ;
 */
static void
returnStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    RETURN17;

    /* Initialize rule variables
     */


    RETURN17       = NULL;

    {
        // .//EmersonTree.g:476:5: ( ^( RETURN ( expression )? ) )
        // .//EmersonTree.g:476:7: ^( RETURN ( expression )? )
        {
            RETURN17 = (pANTLR3_BASE_TREE) MATCHT(RETURN, &FOLLOW_RETURN_in_returnStatement2514); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((RETURN17->getLine(RETURN17)));
                            APP("return ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:482:9: ( expression )?
                {
                    int alt25=2;
                    {
                        int LA25_0 = LA(1);
                        if ( (LA25_0 == EXPR) ) 
                        {
                            alt25=1;
                        }
                    }
                    switch (alt25) 
                    {
                	case 1:
                	    // .//EmersonTree.g:483:13: expression
                	    {
                	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2551);
                	        expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulereturnStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//EmersonTree.g:488:1: withStatement : ^( WITH expression statement ) ;
 */
static void
withStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    WITH18;

    /* Initialize rule variables
     */


    WITH18       = NULL;

    {
        // .//EmersonTree.g:489:5: ( ^( WITH expression statement ) )
        // .//EmersonTree.g:489:7: ^( WITH expression statement )
        {
            WITH18 = (pANTLR3_BASE_TREE) MATCHT(WITH, &FOLLOW_WITH_in_withStatement2587); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {
                LINE((WITH18->getLine(WITH18))); APP("with ( ");
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_withStatement2613);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                APP(" )");
            }
            FOLLOWPUSH(FOLLOW_statement_in_withStatement2649);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start switchStatement
 * .//EmersonTree.g:501:1: switchStatement : ^( SWITCH expression caseBlock ) ;
 */
static void
switchStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    SWITCH19;

    /* Initialize rule variables
     */


    SWITCH19       = NULL;

    {
        // .//EmersonTree.g:502:5: ( ^( SWITCH expression caseBlock ) )
        // .//EmersonTree.g:502:7: ^( SWITCH expression caseBlock )
        {
            SWITCH19 = (pANTLR3_BASE_TREE) MATCHT(SWITCH, &FOLLOW_SWITCH_in_switchStatement2685); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((SWITCH19->getLine(SWITCH19))); 
                            APP(" switch ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2706);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) \n");
                            APP("{ \n");
                        
            }
            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2727);
            caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("} \n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//EmersonTree.g:521:1: caseBlock : ( ^( CASE_BLOCK ( caseClause )? ) | ^( CASE_BLOCK defaultClause ) );
 */
static void
caseBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:522:5: ( ^( CASE_BLOCK ( caseClause )? ) | ^( CASE_BLOCK defaultClause ) )
            
            ANTLR3_UINT32 alt27;

            alt27=2;


            {
                int LA27_0 = LA(1);
                if ( (LA27_0 == CASE_BLOCK) ) 
                {

                    {
                        int LA27_1 = LA(2);
                        if ( (LA27_1 == DOWN) ) 
                        {

                            {
                                int LA27_2 = LA(3);
                                if ( (LA27_2 == DEFAULT) ) 
                                {
                                    alt27=2;
                                }
                                else if ( (LA27_2 == UP || LA27_2 == CASE) ) 
                                {
                                    alt27=1;
                                }
                                else 
                                {
                                    if (BACKTRACKING>0)
                                    {
                                        FAILEDFLAG = ANTLR3_TRUE; 
                                        return ;
                                    }
                                
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                    EXCEPTION->message      = (void *)"";
                                    EXCEPTION->decisionNum  = 27;
                                    EXCEPTION->state        = 2;


                                    goto rulecaseBlockEx;
                                }
                            }
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 27;
                            EXCEPTION->state        = 1;


                            goto rulecaseBlockEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 27;
                    EXCEPTION->state        = 0;


                    goto rulecaseBlockEx;
                }
            }
            switch (alt27) 
            {
        	case 1:
        	    // .//EmersonTree.g:522:7: ^( CASE_BLOCK ( caseClause )? )
        	    {
        	         MATCHT(CASE_BLOCK, &FOLLOW_CASE_BLOCK_in_caseBlock2763); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	            // .//EmersonTree.g:523:9: ( caseClause )?
        	            {
        	                int alt26=2;
        	                {
        	                    int LA26_0 = LA(1);
        	                    if ( (LA26_0 == CASE) ) 
        	                    {
        	                        alt26=1;
        	                    }
        	                }
        	                switch (alt26) 
        	                {
        	            	case 1:
        	            	    // .//EmersonTree.g:0:0: caseClause
        	            	    {
        	            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2773);
        	            	        caseClause(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulecaseBlockEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }

        	            	    }
        	            	    break;

        	                }
        	            }

        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:525:7: ^( CASE_BLOCK defaultClause )
        	    {
        	         MATCHT(CASE_BLOCK, &FOLLOW_CASE_BLOCK_in_caseBlock2789); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2799);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//EmersonTree.g:532:1: caseClause : ( ^( CASE ternaryExpression ( statementList )? ( caseClause )? ) | ^( CASE ternaryExpression ( statementList )? defaultClause ) );
 */
static void
caseClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:533:5: ( ^( CASE ternaryExpression ( statementList )? ( caseClause )? ) | ^( CASE ternaryExpression ( statementList )? defaultClause ) )
            
            ANTLR3_UINT32 alt31;

            alt31=2;


            {
                int LA31_0 = LA(1);
                if ( (LA31_0 == CASE) ) 
                {

                    {
                        int LA31_1 = LA(2);
                        if ( (synpred43_EmersonTree(ctx)) ) 
                        {
                            alt31=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt31=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 31;
                            EXCEPTION->state        = 1;


                            goto rulecaseClauseEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 31;
                    EXCEPTION->state        = 0;


                    goto rulecaseClauseEx;
                }
            }
            switch (alt31) 
            {
        	case 1:
        	    // .//EmersonTree.g:533:7: ^( CASE ternaryExpression ( statementList )? ( caseClause )? )
        	    {
        	         MATCHT(CASE, &FOLLOW_CASE_in_caseClause2828); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("case ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2848);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(":");
        	                    
        	        }

        	        // .//EmersonTree.g:541:9: ( statementList )?
        	        {
        	            int alt28=2;
        	            {
        	                int LA28_0 = LA(1);
        	                if ( (LA28_0 == SLIST) ) 
        	                {
        	                    alt28=1;
        	                }
        	            }
        	            switch (alt28) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2868);
        	        	        statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//EmersonTree.g:542:9: ( caseClause )?
        	        {
        	            int alt29=2;
        	            {
        	                int LA29_0 = LA(1);
        	                if ( (LA29_0 == CASE) ) 
        	                {
        	                    alt29=1;
        	                }
        	            }
        	            switch (alt29) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseClause2879);
        	        	        caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:544:7: ^( CASE ternaryExpression ( statementList )? defaultClause )
        	    {
        	         MATCHT(CASE, &FOLLOW_CASE_in_caseClause2900); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("case ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2920);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(":");
        	                    
        	        }

        	        // .//EmersonTree.g:552:9: ( statementList )?
        	        {
        	            int alt30=2;
        	            {
        	                int LA30_0 = LA(1);
        	                if ( (LA30_0 == SLIST) ) 
        	                {
        	                    alt30=1;
        	                }
        	            }
        	            switch (alt30) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2940);
        	        	        statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseClause2951);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start caseClauseSeenDefault
 * .//EmersonTree.g:559:1: caseClauseSeenDefault : ^( CASE ternaryExpression ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static void
caseClauseSeenDefault(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:560:5: ( ^( CASE ternaryExpression ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//EmersonTree.g:560:7: ^( CASE ternaryExpression ( statementList )? ( caseClauseSeenDefault )? )
        {
             MATCHT(CASE, &FOLLOW_CASE_in_caseClauseSeenDefault2981); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("case ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClauseSeenDefault3001);
            ternaryExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(":");
                        
            }

            // .//EmersonTree.g:568:9: ( statementList )?
            {
                int alt32=2;
                {
                    int LA32_0 = LA(1);
                    if ( (LA32_0 == SLIST) ) 
                    {
                        alt32=1;
                    }
                }
                switch (alt32) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClauseSeenDefault3021);
            	        statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            // .//EmersonTree.g:569:9: ( caseClauseSeenDefault )?
            {
                int alt33=2;
                {
                    int LA33_0 = LA(1);
                    if ( (LA33_0 == CASE) ) 
                    {
                        alt33=1;
                    }
                }
                switch (alt33) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3032);
            	        caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseSeenDefaultEx; /* Prevent compiler warnings */
    rulecaseClauseSeenDefaultEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClauseSeenDefault */

/** 
 * $ANTLR start defaultClause
 * .//EmersonTree.g:574:1: defaultClause : ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static void
defaultClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    DEFAULT20;

    /* Initialize rule variables
     */


    DEFAULT20       = NULL;

    {
        // .//EmersonTree.g:575:5: ( ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//EmersonTree.g:575:6: ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
        {
            DEFAULT20 = (pANTLR3_BASE_TREE) MATCHT(DEFAULT, &FOLLOW_DEFAULT_in_defaultClause3065); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((DEFAULT20->getLine(DEFAULT20))); 
                            APP("default: ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:580:9: ( statementList )?
                {
                    int alt34=2;
                    {
                        int LA34_0 = LA(1);
                        if ( (LA34_0 == SLIST) ) 
                        {
                            alt34=1;
                        }
                    }
                    switch (alt34) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: statementList
                	    {
                	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause3085);
                	        statementList(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                // .//EmersonTree.g:581:9: ( caseClauseSeenDefault )?
                {
                    int alt35=2;
                    {
                        int LA35_0 = LA(1);
                        if ( (LA35_0 == CASE) ) 
                        {
                            alt35=1;
                        }
                    }
                    switch (alt35) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: caseClauseSeenDefault
                	    {
                	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_defaultClause3096);
                	        caseClauseSeenDefault(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//EmersonTree.g:587:1: throwStatement : ^( THROW expression ) ;
 */
static void
throwStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    THROW21;

    /* Initialize rule variables
     */


    THROW21       = NULL;

    {
        // .//EmersonTree.g:588:5: ( ^( THROW expression ) )
        // .//EmersonTree.g:588:7: ^( THROW expression )
        {
            THROW21 = (pANTLR3_BASE_TREE) MATCHT(THROW, &FOLLOW_THROW_in_throwStatement3129); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((THROW21->getLine(THROW21))); 
                            APP("throw ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_throwStatement3149);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//EmersonTree.g:600:1: tryStatement : ^( TRY statementBlock catchFinallyBlock ) ;
 */
static void
tryStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    TRY22;

    /* Initialize rule variables
     */


    TRY22       = NULL;

    {
        // .//EmersonTree.g:601:9: ( ^( TRY statementBlock catchFinallyBlock ) )
        // .//EmersonTree.g:601:11: ^( TRY statementBlock catchFinallyBlock )
        {
            TRY22 = (pANTLR3_BASE_TREE) MATCHT(TRY, &FOLLOW_TRY_in_tryStatement3191); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((TRY22->getLine(TRY22))); 
                                APP("try\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement3219);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement3233);
            catchFinallyBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//EmersonTree.g:611:1: catchFinallyBlock : ( catchBlock ( finallyBlock )? | finallyBlock );
 */
static void
catchFinallyBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:612:9: ( catchBlock ( finallyBlock )? | finallyBlock )
            
            ANTLR3_UINT32 alt37;

            alt37=2;


            {
                int LA37_0 = LA(1);
                if ( (LA37_0 == CATCH) ) 
                {
                    alt37=1;
                }
                else if ( (LA37_0 == FINALLY) ) 
                {
                    alt37=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 37;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt37) 
            {
        	case 1:
        	    // .//EmersonTree.g:612:11: catchBlock ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock3271);
        	        catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:612:22: ( finallyBlock )?
        	        {
        	            int alt36=2;
        	            {
        	                int LA36_0 = LA(1);
        	                if ( (LA36_0 == FINALLY) ) 
        	                {
        	                    alt36=1;
        	                }
        	            }
        	            switch (alt36) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3273);
        	        	        finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:613:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3286);
        	        finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//EmersonTree.g:616:1: catchBlock : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchBlock(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    CATCH23;
    pANTLR3_BASE_TREE    Identifier24;

    /* Initialize rule variables
     */


    CATCH23       = NULL;
    Identifier24       = NULL;

    {
        // .//EmersonTree.g:617:9: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:617:11: ^( CATCH Identifier statementBlock )
        {
            CATCH23 = (pANTLR3_BASE_TREE) MATCHT(CATCH, &FOLLOW_CATCH_in_catchBlock3312); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((CATCH23->getLine(CATCH23))); 
                                APP("catch (");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier24 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock3340); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                LINE((Identifier24->getLine(Identifier24)));
                                APP((const char*)(Identifier24->getText(Identifier24))->chars);
                                APP( ")\n");
                                APP(" {  \n");
                                APP(" if ( system.__isResetting() ) \n { \n");
                                APP("throw new Error('__resetting__');\n}\n");
                                CHECK_RESOURCES();
                                CHECK_KILL();
                            
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock3368);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("  } \n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//EmersonTree.g:640:1: finallyBlock : ^( FINALLY statementBlock ) ;
 */
static void
finallyBlock(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FINALLY25;

    /* Initialize rule variables
     */


    FINALLY25       = NULL;

    {
        // .//EmersonTree.g:641:9: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:641:11: ^( FINALLY statementBlock )
        {
            FINALLY25 = (pANTLR3_BASE_TREE) MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyBlock3421); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((FINALLY25->getLine(FINALLY25))); 
                                APP("finally \n");
                                APP(" {  \n");  
                                APP(" if ( system.__isResetting() ) \n { \n");
                                APP("throw new Error('__resetting__');\n}\n");
                                CHECK_RESOURCES();
                                CHECK_KILL();
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock3449);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start memAndCallExpression
 * .//EmersonTree.g:659:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static void
memAndCallExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:660:1: ( memberExpression | callExpression )
            
            ANTLR3_UINT32 alt38;

            alt38=2;

            alt38 = cdfa38.predict(ctx, RECOGNIZER, ISTREAM, &cdfa38);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt38) 
            {
        	case 1:
        	    // .//EmersonTree.g:660:3: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression3494);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:661:3: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression3498);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start catchClause
 * .//EmersonTree.g:665:1: catchClause : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    CATCH26;
    pANTLR3_BASE_TREE    Identifier27;

    /* Initialize rule variables
     */


    CATCH26       = NULL;
    Identifier27       = NULL;

    {
        // .//EmersonTree.g:666:2: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:666:4: ^( CATCH Identifier statementBlock )
        {
            CATCH26 = (pANTLR3_BASE_TREE) MATCHT(CATCH, &FOLLOW_CATCH_in_catchClause3511); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                      LINE((CATCH26->getLine(CATCH26))); 
                					  APP(" catch ( ");
                					
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier27 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause3526); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                					  APP((const char*)(Identifier27->getText(Identifier27))->chars);
                					  APP(" ) ");

                					
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause3547);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//EmersonTree.g:682:1: finallyClause : ^( FINALLY statementBlock ) ;
 */
static void
finallyClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FINALLY28;

    /* Initialize rule variables
     */


    FINALLY28       = NULL;

    {
        // .//EmersonTree.g:683:2: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:683:4: ^( FINALLY statementBlock )
        {
            FINALLY28 = (pANTLR3_BASE_TREE) MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyClause3567); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                  LINE((FINALLY28->getLine(FINALLY28))); 
                				  APP(" finally ");

                				
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause3580);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start expression
 * .//EmersonTree.g:696:1: expression : ^( EXPR assignmentExpression ) ;
 */
static void
expression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:697:9: ( ^( EXPR assignmentExpression ) )
        // .//EmersonTree.g:697:11: ^( EXPR assignmentExpression )
        {
             MATCHT(EXPR, &FOLLOW_EXPR_in_expression3613); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression3615);
            assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//EmersonTree.g:700:1: expressionNoIn : ^( EXPR_NO_IN assignmentExpressionNoIn ) ;
 */
static void
expressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:701:2: ( ^( EXPR_NO_IN assignmentExpressionNoIn ) )
        // .//EmersonTree.g:701:4: ^( EXPR_NO_IN assignmentExpressionNoIn )
        {
             MATCHT(EXPR_NO_IN, &FOLLOW_EXPR_NO_IN_in_expressionNoIn3629); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3632);
            assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//EmersonTree.g:704:1: assignmentExpression : ( conditionalExpression | ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression ) | ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) );
 */
static void
assignmentExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    MULT_ASSIGN29;
    pANTLR3_BASE_TREE    DIV_ASSIGN30;
    pANTLR3_BASE_TREE    MOD_ASSIGN31;
    pANTLR3_BASE_TREE    ADD_ASSIGN32;
    pANTLR3_BASE_TREE    SUB_ASSIGN33;
    pANTLR3_BASE_TREE    ASSIGN34;
    pANTLR3_BASE_TREE    AND_ASSIGN35;
    pANTLR3_BASE_TREE    EXP_ASSIGN36;
    pANTLR3_BASE_TREE    OR_ASSIGN37;
    EmersonTree_leftHandSideExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonTree_leftHandSideExpression_return

    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionTop = pEmersonTree_assignmentExpressionPush(ctx);
    MULT_ASSIGN29       = NULL;
    DIV_ASSIGN30       = NULL;
    MOD_ASSIGN31       = NULL;
    ADD_ASSIGN32       = NULL;
    SUB_ASSIGN33       = NULL;
    ASSIGN34       = NULL;
    AND_ASSIGN35       = NULL;
    EXP_ASSIGN36       = NULL;
    OR_ASSIGN37       = NULL;

    {
        {
            //  .//EmersonTree.g:709:9: ( conditionalExpression | ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression ) | ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt41;

            alt41=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case TERNARYOP:
            case MESSAGE_RECV_NO_SENDER:
            case MESSAGE_RECV_AND_SENDER:
            case PAREN:
            case PATTERN_LITERAL:
            case SEND_CONSTRUCT:
            case SENDER_CONSTRUCT:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt41=1;
            	}
                break;
            case MULT_ASSIGN:
            case DIV_ASSIGN:
            case MOD_ASSIGN:
            case ADD_ASSIGN:
            case SUB_ASSIGN:
            	{
            		alt41=2;
            	}
                break;
            case ASSIGN:
            case AND_ASSIGN:
            case EXP_ASSIGN:
            case OR_ASSIGN:
            	{
            		alt41=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    pEmersonTree_assignmentExpressionPop(ctx);

                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 41;
                EXCEPTION->state        = 0;


                goto ruleassignmentExpressionEx;
            }

            switch (alt41) 
            {
        	case 1:
        	    // .//EmersonTree.g:709:11: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression3655);
        	        conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:710:11: ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:711:13: ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN )
        	        {
        	            int alt39=5;
        	            switch ( LA(1) ) 
        	            {
        	            case MULT_ASSIGN:
        	            	{
        	            		alt39=1;
        	            	}
        	                break;
        	            case DIV_ASSIGN:
        	            	{
        	            		alt39=2;
        	            	}
        	                break;
        	            case MOD_ASSIGN:
        	            	{
        	            		alt39=3;
        	            	}
        	                break;
        	            case ADD_ASSIGN:
        	            	{
        	            		alt39=4;
        	            	}
        	                break;
        	            case SUB_ASSIGN:
        	            	{
        	            		alt39=5;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 39;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionEx;
        	            }

        	            switch (alt39) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:712:19: MULT_ASSIGN
        	        	    {
        	        	        MULT_ASSIGN29 = (pANTLR3_BASE_TREE) MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpression3701); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((MULT_ASSIGN29->getLine(MULT_ASSIGN29))); 	(SCOPE_TOP(assignmentExpression))->op= " util.mul ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:713:19: DIV_ASSIGN
        	        	    {
        	        	        DIV_ASSIGN30 = (pANTLR3_BASE_TREE) MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpression3731); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((DIV_ASSIGN30->getLine(DIV_ASSIGN30))); 	(SCOPE_TOP(assignmentExpression))->op= " util.div ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:714:19: MOD_ASSIGN
        	        	    {
        	        	        MOD_ASSIGN31 = (pANTLR3_BASE_TREE) MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpression3762); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((MOD_ASSIGN31->getLine(MOD_ASSIGN31))); 	(SCOPE_TOP(assignmentExpression))->op= " util.mod ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:715:19: ADD_ASSIGN
        	        	    {
        	        	        ADD_ASSIGN32 = (pANTLR3_BASE_TREE) MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpression3793); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((ADD_ASSIGN32->getLine(ADD_ASSIGN32))); 	(SCOPE_TOP(assignmentExpression))->op= " util.plus ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:716:19: SUB_ASSIGN
        	        	    {
        	        	        SUB_ASSIGN33 = (pANTLR3_BASE_TREE) MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpression3825); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((SUB_ASSIGN33->getLine(SUB_ASSIGN33))); 	(SCOPE_TOP(assignmentExpression))->op= " util.sub ";  
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression3867);
        	        e1=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" = ");
        	                            APP(	(SCOPE_TOP(assignmentExpression))->op);
        	                            APP(" ( ");
        	                            APP((const char*)(STRSTREAM->toStringSS(STRSTREAM, e1.start, e1.start))->chars);
        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression3896);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:731:11: ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:732:13: ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        	        {
        	            int alt40=4;
        	            switch ( LA(1) ) 
        	            {
        	            case ASSIGN:
        	            	{
        	            		alt40=1;
        	            	}
        	                break;
        	            case AND_ASSIGN:
        	            	{
        	            		alt40=2;
        	            	}
        	                break;
        	            case EXP_ASSIGN:
        	            	{
        	            		alt40=3;
        	            	}
        	                break;
        	            case OR_ASSIGN:
        	            	{
        	            		alt40=4;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 40;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionEx;
        	            }

        	            switch (alt40) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:733:17: ASSIGN
        	        	    {
        	        	        ASSIGN34 = (pANTLR3_BASE_TREE) MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpression3967); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((ASSIGN34->getLine(ASSIGN34))); 	(SCOPE_TOP(assignmentExpression))->op= " = ";    
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:734:19: AND_ASSIGN
        	        	    {
        	        	        AND_ASSIGN35 = (pANTLR3_BASE_TREE) MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpression4004); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((AND_ASSIGN35->getLine(AND_ASSIGN35))); 	(SCOPE_TOP(assignmentExpression))->op= " &= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:735:19: EXP_ASSIGN
        	        	    {
        	        	        EXP_ASSIGN36 = (pANTLR3_BASE_TREE) MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpression4035); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((EXP_ASSIGN36->getLine(EXP_ASSIGN36))); 	(SCOPE_TOP(assignmentExpression))->op= " ^= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:736:19: OR_ASSIGN
        	        	    {
        	        	        OR_ASSIGN37 = (pANTLR3_BASE_TREE) MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpression4066); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((OR_ASSIGN37->getLine(OR_ASSIGN37))); 	(SCOPE_TOP(assignmentExpression))->op= " |= "; 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression4108);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ");
        	                            APP(	(SCOPE_TOP(assignmentExpression))->op);
        	                            APP(" ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression4137);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    pEmersonTree_assignmentExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//EmersonTree.g:751:1: assignmentExpressionNoIn : ( conditionalExpression | ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression ) | ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) );
 */
static void
assignmentExpressionNoIn(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    MULT_ASSIGN38;
    pANTLR3_BASE_TREE    DIV_ASSIGN39;
    pANTLR3_BASE_TREE    MOD_ASSIGN40;
    pANTLR3_BASE_TREE    ADD_ASSIGN41;
    pANTLR3_BASE_TREE    SUB_ASSIGN42;
    pANTLR3_BASE_TREE    ASSIGN43;
    pANTLR3_BASE_TREE    AND_ASSIGN44;
    pANTLR3_BASE_TREE    EXP_ASSIGN45;
    pANTLR3_BASE_TREE    OR_ASSIGN46;
    EmersonTree_leftHandSideExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonTree_leftHandSideExpression_return

    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionNoInTop = pEmersonTree_assignmentExpressionNoInPush(ctx);
    MULT_ASSIGN38       = NULL;
    DIV_ASSIGN39       = NULL;
    MOD_ASSIGN40       = NULL;
    ADD_ASSIGN41       = NULL;
    SUB_ASSIGN42       = NULL;
    ASSIGN43       = NULL;
    AND_ASSIGN44       = NULL;
    EXP_ASSIGN45       = NULL;
    OR_ASSIGN46       = NULL;

    {
        {
            //  .//EmersonTree.g:756:9: ( conditionalExpression | ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression ) | ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt44;

            alt44=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case TERNARYOP:
            case MESSAGE_RECV_NO_SENDER:
            case MESSAGE_RECV_AND_SENDER:
            case PAREN:
            case PATTERN_LITERAL:
            case SEND_CONSTRUCT:
            case SENDER_CONSTRUCT:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt44=1;
            	}
                break;
            case MULT_ASSIGN:
            case DIV_ASSIGN:
            case MOD_ASSIGN:
            case ADD_ASSIGN:
            case SUB_ASSIGN:
            	{
            		alt44=2;
            	}
                break;
            case ASSIGN:
            case AND_ASSIGN:
            case EXP_ASSIGN:
            case OR_ASSIGN:
            	{
            		alt44=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    pEmersonTree_assignmentExpressionNoInPop(ctx);

                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 44;
                EXCEPTION->state        = 0;


                goto ruleassignmentExpressionNoInEx;
            }

            switch (alt44) 
            {
        	case 1:
        	    // .//EmersonTree.g:756:11: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4193);
        	        conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:757:11: ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:758:13: ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN )
        	        {
        	            int alt42=5;
        	            switch ( LA(1) ) 
        	            {
        	            case MULT_ASSIGN:
        	            	{
        	            		alt42=1;
        	            	}
        	                break;
        	            case DIV_ASSIGN:
        	            	{
        	            		alt42=2;
        	            	}
        	                break;
        	            case MOD_ASSIGN:
        	            	{
        	            		alt42=3;
        	            	}
        	                break;
        	            case ADD_ASSIGN:
        	            	{
        	            		alt42=4;
        	            	}
        	                break;
        	            case SUB_ASSIGN:
        	            	{
        	            		alt42=5;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionNoInPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 42;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionNoInEx;
        	            }

        	            switch (alt42) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:759:19: MULT_ASSIGN
        	        	    {
        	        	        MULT_ASSIGN38 = (pANTLR3_BASE_TREE) MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4239); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((MULT_ASSIGN38->getLine(MULT_ASSIGN38))); 	(SCOPE_TOP(assignmentExpression))->op= " util.mul ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:760:19: DIV_ASSIGN
        	        	    {
        	        	        DIV_ASSIGN39 = (pANTLR3_BASE_TREE) MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4269); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((DIV_ASSIGN39->getLine(DIV_ASSIGN39))); 	(SCOPE_TOP(assignmentExpression))->op= " util.div ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:761:19: MOD_ASSIGN
        	        	    {
        	        	        MOD_ASSIGN40 = (pANTLR3_BASE_TREE) MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4300); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((MOD_ASSIGN40->getLine(MOD_ASSIGN40))); 	(SCOPE_TOP(assignmentExpression))->op= " util.mod ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:762:19: ADD_ASSIGN
        	        	    {
        	        	        ADD_ASSIGN41 = (pANTLR3_BASE_TREE) MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4331); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((ADD_ASSIGN41->getLine(ADD_ASSIGN41))); 	(SCOPE_TOP(assignmentExpression))->op= " util.plus ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:763:19: SUB_ASSIGN
        	        	    {
        	        	        SUB_ASSIGN42 = (pANTLR3_BASE_TREE) MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4363); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((SUB_ASSIGN42->getLine(SUB_ASSIGN42))); 	(SCOPE_TOP(assignmentExpression))->op= " util.sub ";  
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4405);
        	        e1=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" = ");
        	                            APP(	(SCOPE_TOP(assignmentExpression))->op);
        	                            APP(" ( ");
        	                            APP((const char*)(STRSTREAM->toStringSS(STRSTREAM, e1.start, e1.start))->chars);
        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4434);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:778:11: ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:779:13: ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        	        {
        	            int alt43=4;
        	            switch ( LA(1) ) 
        	            {
        	            case ASSIGN:
        	            	{
        	            		alt43=1;
        	            	}
        	                break;
        	            case AND_ASSIGN:
        	            	{
        	            		alt43=2;
        	            	}
        	                break;
        	            case EXP_ASSIGN:
        	            	{
        	            		alt43=3;
        	            	}
        	                break;
        	            case OR_ASSIGN:
        	            	{
        	            		alt43=4;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionNoInPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 43;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionNoInEx;
        	            }

        	            switch (alt43) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:780:17: ASSIGN
        	        	    {
        	        	        ASSIGN43 = (pANTLR3_BASE_TREE) MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpressionNoIn4505); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((ASSIGN43->getLine(ASSIGN43))); 	(SCOPE_TOP(assignmentExpression))->op= " = ";    
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:781:19: AND_ASSIGN
        	        	    {
        	        	        AND_ASSIGN44 = (pANTLR3_BASE_TREE) MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4542); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((AND_ASSIGN44->getLine(AND_ASSIGN44))); 	(SCOPE_TOP(assignmentExpression))->op= " &= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:782:19: EXP_ASSIGN
        	        	    {
        	        	        EXP_ASSIGN45 = (pANTLR3_BASE_TREE) MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4573); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((EXP_ASSIGN45->getLine(EXP_ASSIGN45))); 	(SCOPE_TOP(assignmentExpression))->op= " ^= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:783:19: OR_ASSIGN
        	        	    {
        	        	        OR_ASSIGN46 = (pANTLR3_BASE_TREE) MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4604); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((OR_ASSIGN46->getLine(OR_ASSIGN46))); 	(SCOPE_TOP(assignmentExpression))->op= " |= "; 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4646);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ");
        	                            APP(	(SCOPE_TOP(assignmentExpression))->op);
        	                            APP(" ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4675);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    pEmersonTree_assignmentExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//EmersonTree.g:797:1: leftHandSideExpression returns [const char* genText] : ( callExpression | newExpression );
 */
static EmersonTree_leftHandSideExpression_return
leftHandSideExpression(pEmersonTree ctx)
{   
    EmersonTree_leftHandSideExpression_return retval;

    const char* callExpression47;
    #undef	RETURN_TYPE_callExpression47
    #define	RETURN_TYPE_callExpression47 const char*

    const char* newExpression48;
    #undef	RETURN_TYPE_newExpression48
    #define	RETURN_TYPE_newExpression48 const char*

    /* Initialize rule variables
     */



            retval.genText= "";

    callExpression47 = NULL;
    newExpression48 = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    {
        {
            //  .//EmersonTree.g:802:2: ( callExpression | newExpression )
            
            ANTLR3_UINT32 alt45;

            alt45=2;

            alt45 = cdfa45.predict(ctx, RECOGNIZER, ISTREAM, &cdfa45);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt45) 
            {
        	case 1:
        	    // .//EmersonTree.g:802:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression4725);
        	        callExpression47=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         strcat(retval.genText, callExpression47);
        	                      
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:806:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression4742);
        	        newExpression48=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         strcat(retval.genText, newExpression48);
        	                      
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//EmersonTree.g:812:1: newExpression returns [const char* genText] : ( memberExpression | ^( NEW newExpression ) );
 */
static const char*
newExpression(pEmersonTree ctx)
{   
    const char* genText = NULL;

    const char* memberExpression49;
    #undef	RETURN_TYPE_memberExpression49
    #define	RETURN_TYPE_memberExpression49 const char*

    /* Initialize rule variables
     */



            genText= "";

    memberExpression49 = NULL;

    {
        {
            //  .//EmersonTree.g:817:2: ( memberExpression | ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt46;

            alt46=2;

            alt46 = cdfa46.predict(ctx, RECOGNIZER, ISTREAM, &cdfa46);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return genText;
            }
            switch (alt46) 
            {
        	case 1:
        	    // .//EmersonTree.g:817:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression4775);
        	        memberExpression49=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        strcat(genText,memberExpression49);
        	                    
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:821:4: ^( NEW newExpression )
        	    {
        	         MATCHT(NEW, &FOLLOW_NEW_in_newExpression4804); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression4818);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,genText);
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//EmersonTree.g:831:1: propertyReferenceSuffix1 returns [const char* genText] : Identifier ;
 */
static const char*
propertyReferenceSuffix1(pEmersonTree ctx)
{   
    const char* genText = NULL;

    pANTLR3_BASE_TREE    Identifier50;

    /* Initialize rule variables
     */



            genText= "";

    Identifier50       = NULL;

    {
        // .//EmersonTree.g:836:9: ( Identifier )
        // .//EmersonTree.g:836:11: Identifier
        {
            Identifier50 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix14889); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return genText;
            }
            if ( BACKTRACKING==0 ) 
            {

                            LINE((Identifier50->getLine(Identifier50)));
                            APP((const char*)(Identifier50->getText(Identifier50))->chars);
                          
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start indexSuffix1
 * .//EmersonTree.g:844:1: indexSuffix1 returns [const char* genText] : expression ;
 */
static const char*
indexSuffix1(pEmersonTree ctx)
{   
    const char* genText = NULL;

    /* Initialize rule variables
     */



            genText= "";

    {
        // .//EmersonTree.g:849:9: ( expression )
        // .//EmersonTree.g:849:11: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix14929);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return genText;
            }
            if ( BACKTRACKING==0 ) 
            {

                            strcat(genText,$expression.genText);
                          
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//EmersonTree.g:857:1: memberExpression returns [const char* genText] : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static const char*
memberExpression(pEmersonTree ctx)
{   
    const char* genText = NULL;

    pANTLR3_BASE_TREE    DOT51;
    pANTLR3_BASE_TREE    ARRAY_INDEX53;
    pANTLR3_BASE_TREE    NEW55;
    pANTLR3_BASE_TREE    DOT57;
    const char* propertyReferenceSuffix152;
    #undef	RETURN_TYPE_propertyReferenceSuffix152
    #define	RETURN_TYPE_propertyReferenceSuffix152 const char*

    const char* indexSuffix154;
    #undef	RETURN_TYPE_indexSuffix154
    #define	RETURN_TYPE_indexSuffix154 const char*

    const char* arguments56;
    #undef	RETURN_TYPE_arguments56
    #define	RETURN_TYPE_arguments56 const char*

    /* Initialize rule variables
     */



            genText= "";

    DOT51       = NULL;
    ARRAY_INDEX53       = NULL;
    NEW55       = NULL;
    DOT57       = NULL;
    propertyReferenceSuffix152 = NULL;
    indexSuffix154 = NULL;
    arguments56 = NULL;

    {
        {
            //  .//EmersonTree.g:862:9: ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) )
            
            ANTLR3_UINT32 alt47;

            alt47=6;

            alt47 = cdfa47.predict(ctx, RECOGNIZER, ISTREAM, &cdfa47);
            if  (HASEXCEPTION())
            {
                goto rulememberExpressionEx;
            }
            if (HASFAILED())
            {
                return genText;
            }
            switch (alt47) 
            {
        	case 1:
        	    // .//EmersonTree.g:862:11: primaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression4969);
        	        primaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        strcat(genText,$primaryExpression.genText);
        	                      
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:866:11: functionExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression4993);
        	        functionExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        strcat(genText,$functionExpression.genText);
        	                      
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:870:11: ^( DOT memberExpression propertyReferenceSuffix1 )
        	    {
        	        DOT51 = (pANTLR3_BASE_TREE) MATCHT(DOT, &FOLLOW_DOT_in_memberExpression5031); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5045);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,genText);
        	                            LINE((DOT51->getLine(DOT51)));
        	                            APP(".");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression5073);
        	        propertyReferenceSuffix152=propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,propertyReferenceSuffix152);
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:883:11: ^( ARRAY_INDEX memberExpression indexSuffix1 )
        	    {
        	        ARRAY_INDEX53 = (pANTLR3_BASE_TREE) MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_memberExpression5126); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5140);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,genText);
        	                            LINE((ARRAY_INDEX53->getLine(ARRAY_INDEX53)));
        	                            APP("[ ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression5168);
        	        indexSuffix154=indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,indexSuffix154);
        	                            APP(" ] ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:897:10: ^( NEW memberExpression arguments )
        	    {
        	        NEW55 = (pANTLR3_BASE_TREE) MATCHT(NEW, &FOLLOW_NEW_in_memberExpression5220); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            LINE((NEW55->getLine(NEW55)));
        	                            APP("new ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5248);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,genText);
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_memberExpression5276);
        	        arguments56=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,arguments56);
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:912:9: ^( DOT memberExpression )
        	    {
        	        DOT57 = (pANTLR3_BASE_TREE) MATCHT(DOT, &FOLLOW_DOT_in_memberExpression5326); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            LINE((DOT57->getLine(DOT57)));
        	                            APP(".");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5354);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,genText);
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//EmersonTree.g:925:1: memberExpressionSuffix returns [const char* genText] : ( indexSuffix | propertyReferenceSuffix );
 */
static const char*
memberExpressionSuffix(pEmersonTree ctx)
{   
    const char* genText = NULL;

    const char* indexSuffix58;
    #undef	RETURN_TYPE_indexSuffix58
    #define	RETURN_TYPE_indexSuffix58 const char*

    /* Initialize rule variables
     */



            genText= "";

    indexSuffix58 = NULL;

    {
        {
            //  .//EmersonTree.g:930:2: ( indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt48;

            alt48=2;


            {
                int LA48_0 = LA(1);
                if ( (LA48_0 == ARRAY_INDEX) ) 
                {
                    alt48=1;
                }
                else if ( (LA48_0 == DOT) ) 
                {
                    alt48=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return genText;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 48;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt48) 
            {
        	case 1:
        	    // .//EmersonTree.g:930:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix5398);
        	        indexSuffix58=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        strcat(genText,indexSuffix58);
        	                      
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:934:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5415);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        strcat(genText,$propertyReferenceSuffix);
        	                      
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//EmersonTree.g:940:1: callExpression returns [const char* genText] : ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) );
 */
static const char*
callExpression(pEmersonTree ctx)
{   
    const char* genText = NULL;

    pANTLR3_BASE_TREE    ARRAY_INDEX61;
    pANTLR3_BASE_TREE    DOT63;
    const char* memberExpression59;
    #undef	RETURN_TYPE_memberExpression59
    #define	RETURN_TYPE_memberExpression59 const char*

    const char* arguments60;
    #undef	RETURN_TYPE_arguments60
    #define	RETURN_TYPE_arguments60 const char*

    const char* indexSuffix162;
    #undef	RETURN_TYPE_indexSuffix162
    #define	RETURN_TYPE_indexSuffix162 const char*

    const char* propertyReferenceSuffix164;
    #undef	RETURN_TYPE_propertyReferenceSuffix164
    #define	RETURN_TYPE_propertyReferenceSuffix164 const char*

    const char* arguments65;
    #undef	RETURN_TYPE_arguments65
    #define	RETURN_TYPE_arguments65 const char*

    /* Initialize rule variables
     */



            genText= "";

    ARRAY_INDEX61       = NULL;
    DOT63       = NULL;
    memberExpression59 = NULL;
    arguments60 = NULL;
    indexSuffix162 = NULL;
    propertyReferenceSuffix164 = NULL;
    arguments65 = NULL;

    {
        {
            //  .//EmersonTree.g:945:9: ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) )
            
            ANTLR3_UINT32 alt49;

            alt49=4;

            switch ( LA(1) ) 
            {
            case CALL:
            	{

            		{
            		    int LA49_1 = LA(2);
            		    if ( (synpred78_EmersonTree(ctx)) ) 
            		    {
            		        alt49=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt49=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return genText;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 49;
            		        EXCEPTION->state        = 1;


            		        goto rulecallExpressionEx;
            		    }
            		}
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt49=2;
            	}
                break;
            case DOT:
            	{
            		alt49=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return genText;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 49;
                EXCEPTION->state        = 0;


                goto rulecallExpressionEx;
            }

            switch (alt49) 
            {
        	case 1:
        	    // .//EmersonTree.g:945:11: ^( CALL memberExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression5455); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression5469);
        	        memberExpression59=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,memberExpression59);
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression5497);
        	        arguments60=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,arguments60);
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:955:11: ^( ARRAY_INDEX callExpression indexSuffix1 )
        	    {
        	        ARRAY_INDEX61 = (pANTLR3_BASE_TREE) MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_callExpression5538); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5552);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,genText);
        	                            LINE((ARRAY_INDEX61->getLine(ARRAY_INDEX61)));
        	                            APP("[ ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression5580);
        	        indexSuffix162=indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,indexSuffix162);
        	                            APP(" ]");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:968:11: ^( DOT callExpression propertyReferenceSuffix1 )
        	    {
        	        DOT63 = (pANTLR3_BASE_TREE) MATCHT(DOT, &FOLLOW_DOT_in_callExpression5620); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5634);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,genText);
        	                            LINE((DOT63->getLine(DOT63)));
        	                            APP(".");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression5662);
        	        propertyReferenceSuffix164=propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,propertyReferenceSuffix164);
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:980:11: ^( CALL callExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression5702); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5716);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,genText);
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression5744);
        	        arguments65=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            strcat(genText,arguments65);
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//EmersonTree.g:994:1: callExpressionSuffix returns [const char* genText] : ( arguments | indexSuffix | propertyReferenceSuffix );
 */
static const char*
callExpressionSuffix(pEmersonTree ctx)
{   
    const char* genText = NULL;

    const char* arguments66;
    #undef	RETURN_TYPE_arguments66
    #define	RETURN_TYPE_arguments66 const char*

    const char* indexSuffix67;
    #undef	RETURN_TYPE_indexSuffix67
    #define	RETURN_TYPE_indexSuffix67 const char*

    /* Initialize rule variables
     */



            genText= "";

    arguments66 = NULL;
    indexSuffix67 = NULL;

    {
        {
            //  .//EmersonTree.g:999:2: ( arguments | indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt50;

            alt50=3;

            switch ( LA(1) ) 
            {
            case ARGLIST:
            	{
            		alt50=1;
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt50=2;
            	}
                break;
            case DOT:
            	{
            		alt50=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return genText;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 50;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt50) 
            {
        	case 1:
        	    // .//EmersonTree.g:999:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix5792);
        	        arguments66=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         strcat(genText,arguments66);
        	                      
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1003:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix5809);
        	        indexSuffix67=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         strcat(genText,indexSuffix67);
        	                      
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1007:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5826);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         strcat(genText,$propertyReferenceSuffix.genText);
        	                      
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//EmersonTree.g:1013:1: arguments returns [const char* genText] : ( ^( ARGLIST ) | ^( ARGLIST ( expression ) ) | ^( ARGLIST expression ( expression )* ) );
 */
static const char*
arguments(pEmersonTree ctx)
{   
    const char* genText = NULL;

    pANTLR3_BASE_TREE    ARGLIST68;
    pANTLR3_BASE_TREE    ARGLIST69;

    /* Initialize rule variables
     */



            genText= "";

    ARGLIST68       = NULL;
    ARGLIST69       = NULL;

    {
        {
            //  .//EmersonTree.g:1018:3: ( ^( ARGLIST ) | ^( ARGLIST ( expression ) ) | ^( ARGLIST expression ( expression )* ) )
            
            ANTLR3_UINT32 alt52;

            alt52=3;


            {
                int LA52_0 = LA(1);
                if ( (LA52_0 == ARGLIST) ) 
                {

                    {
                        int LA52_1 = LA(2);
                        if ( (synpred83_EmersonTree(ctx)) ) 
                        {
                            alt52=1;
                        }
                        else if ( (synpred84_EmersonTree(ctx)) ) 
                        {
                            alt52=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt52=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return genText;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 52;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return genText;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 52;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt52) 
            {
        	case 1:
        	    // .//EmersonTree.g:1018:5: ^( ARGLIST )
        	    {
        	        ARGLIST68 = (pANTLR3_BASE_TREE) MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5860); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((ARGLIST68->getLine(ARGLIST68)));  APP("( )"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return genText;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return genText;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1019:5: ^( ARGLIST ( expression ) )
        	    {
        	        ARGLIST69 = (pANTLR3_BASE_TREE) MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5870); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((ARGLIST69->getLine(ARGLIST69))); APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        // .//EmersonTree.g:1021:8: ( expression )
        	        // .//EmersonTree.g:1022:9: expression
        	        {
        	            FOLLOWPUSH(FOLLOW_expression_in_arguments5899);
        	            expression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return genText;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                             strcat(genText,$expression.genText);
        	                        
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1030:5: ^( ARGLIST expression ( expression )* )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5942); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP("( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_arguments5958);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	        // .//EmersonTree.g:1035:7: ( expression )*

        	        for (;;)
        	        {
        	            int alt51=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA51_0 = LA(1);
        	                if ( (LA51_0 == EXPR) ) 
        	                {
        	                    alt51=1;
        	                }

        	            }
        	            switch (alt51) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1036:9: expression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                        strcat(genText,$expression.genText);    
        	        	                        APP(", ");
        	        	                    
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arguments5986);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return genText;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                        strcat(genText,$expression.genText);
        	        	                    
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop51;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop51: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(" ) ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return genText;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//EmersonTree.g:1052:1: indexSuffix returns [const char* genText] : ^( ARRAY_INDEX expression ) ;
 */
static const char*
indexSuffix(pEmersonTree ctx)
{   
    const char* genText = NULL;

    /* Initialize rule variables
     */



            genText= "";

    {
        // .//EmersonTree.g:1057:2: ( ^( ARRAY_INDEX expression ) )
        // .//EmersonTree.g:1057:4: ^( ARRAY_INDEX expression )
        {
             MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_indexSuffix6045); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return genText;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return genText;
            }
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix6059);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return genText;
            }
            if ( BACKTRACKING==0 ) 
            {

                                strcat(genText,$expression.genText);
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return genText;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return genText;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//EmersonTree.g:1065:1: propertyReferenceSuffix : ^( DOT Identifier ) ;
 */
static void
propertyReferenceSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1066:2: ( ^( DOT Identifier ) )
        // .//EmersonTree.g:1066:4: ^( DOT Identifier )
        {
             MATCHT(DOT, &FOLLOW_DOT_in_propertyReferenceSuffix6100); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix6102); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//EmersonTree.g:1069:1: assignmentOperator : ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN );
 */
static void
assignmentOperator(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1070:2: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= ASSIGN) && (LA(1) <= OR_ASSIGN)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_assignmentOperator0);    goto ruleassignmentOperatorEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//EmersonTree.g:1073:1: conditionalExpressionNoIn : msgRecvConstructNoIn ;
 */
static void
conditionalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1074:9: ( msgRecvConstructNoIn )
        // .//EmersonTree.g:1074:11: msgRecvConstructNoIn
        {
            FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn6154);
            msgRecvConstructNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start conditionalExpression
 * .//EmersonTree.g:1077:1: conditionalExpression : msgRecvConstruct ;
 */
static void
conditionalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1078:9: ( msgRecvConstruct )
        // .//EmersonTree.g:1078:11: msgRecvConstruct
        {
            FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_conditionalExpression6179);
            msgRecvConstruct(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start msgRecvConstruct
 * .//EmersonTree.g:1081:1: msgRecvConstruct : ( msgConstruct | ^( MESSAGE_RECV_AND_SENDER msgRecvConstruct msgConstruct msgConstruct ) | ^( MESSAGE_RECV_NO_SENDER msgRecvConstruct msgConstruct ) );
 */
static void
msgRecvConstruct(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1082:9: ( msgConstruct | ^( MESSAGE_RECV_AND_SENDER msgRecvConstruct msgConstruct msgConstruct ) | ^( MESSAGE_RECV_NO_SENDER msgRecvConstruct msgConstruct ) )
            
            ANTLR3_UINT32 alt53;

            alt53=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case TERNARYOP:
            case PAREN:
            case PATTERN_LITERAL:
            case SEND_CONSTRUCT:
            case SENDER_CONSTRUCT:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt53=1;
            	}
                break;
            case MESSAGE_RECV_AND_SENDER:
            	{
            		alt53=2;
            	}
                break;
            case MESSAGE_RECV_NO_SENDER:
            	{
            		alt53=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 53;
                EXCEPTION->state        = 0;


                goto rulemsgRecvConstructEx;
            }

            switch (alt53) 
            {
        	case 1:
        	    // .//EmersonTree.g:1082:11: msgConstruct
        	    {
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct6212);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1083:11: ^( MESSAGE_RECV_AND_SENDER msgRecvConstruct msgConstruct msgConstruct )
        	    {
        	         MATCHT(MESSAGE_RECV_AND_SENDER, &FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct6225); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                           APP("system.registerHandler( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_msgRecvConstruct6253);
        	        msgRecvConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct6281);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct6309);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1100:11: ^( MESSAGE_RECV_NO_SENDER msgRecvConstruct msgConstruct )
        	    {
        	         MATCHT(MESSAGE_RECV_NO_SENDER, &FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct6349); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                           APP("system.registerHandler( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_msgRecvConstruct6377);
        	        msgRecvConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct6405);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(", null)");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructEx; /* Prevent compiler warnings */
    rulemsgRecvConstructEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgRecvConstruct */

/** 
 * $ANTLR start msgConstruct
 * .//EmersonTree.g:1115:1: msgConstruct : ( msgSenderConstruct | ^( SEND_CONSTRUCT msgConstruct msgSenderConstruct ) );
 */
static void
msgConstruct(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1116:9: ( msgSenderConstruct | ^( SEND_CONSTRUCT msgConstruct msgSenderConstruct ) )
            
            ANTLR3_UINT32 alt54;

            alt54=2;


            {
                int LA54_0 = LA(1);
                if ( (((LA54_0 >= CALL) && (LA54_0 <= DOT)) || LA54_0 == NEW || ((LA54_0 >= VECTOR) && (LA54_0 <= QUATERNION_AXISANGLE)) || LA54_0 == DOLLAR_EXPRESSION || ((LA54_0 >= OR) && (LA54_0 <= OBJ_LITERAL)) || ((LA54_0 >= DELETE_OP) && (LA54_0 <= NOT)) || LA54_0 == FUNC_EXPR || LA54_0 == TERNARYOP || ((LA54_0 >= PAREN) && (LA54_0 <= PATTERN_LITERAL)) || LA54_0 == SENDER_CONSTRUCT || ((LA54_0 >= Identifier) && (LA54_0 <= StringLiteral)) || LA54_0 == 208 || ((LA54_0 >= 210) && (LA54_0 <= 212))) ) 
                {
                    alt54=1;
                }
                else if ( (LA54_0 == SEND_CONSTRUCT) ) 
                {
                    alt54=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 54;
                    EXCEPTION->state        = 0;


                    goto rulemsgConstructEx;
                }
            }
            switch (alt54) 
            {
        	case 1:
        	    // .//EmersonTree.g:1116:11: msgSenderConstruct
        	    {
        	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct6458);
        	        msgSenderConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1117:11: ^( SEND_CONSTRUCT msgConstruct msgSenderConstruct )
        	    {
        	         MATCHT(SEND_CONSTRUCT, &FOLLOW_SEND_CONSTRUCT_in_msgConstruct6471); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("std.messaging.sendSyntax(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgConstruct6499);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct6527);
        	        msgSenderConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructEx; /* Prevent compiler warnings */
    rulemsgConstructEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgConstruct */

/** 
 * $ANTLR start msgSenderConstruct
 * .//EmersonTree.g:1133:1: msgSenderConstruct : ( ternaryExpression | ^( SENDER_CONSTRUCT msgSenderConstruct ternaryExpression ) );
 */
static void
msgSenderConstruct(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1134:9: ( ternaryExpression | ^( SENDER_CONSTRUCT msgSenderConstruct ternaryExpression ) )
            
            ANTLR3_UINT32 alt55;

            alt55=2;


            {
                int LA55_0 = LA(1);
                if ( (((LA55_0 >= CALL) && (LA55_0 <= DOT)) || LA55_0 == NEW || ((LA55_0 >= VECTOR) && (LA55_0 <= QUATERNION_AXISANGLE)) || LA55_0 == DOLLAR_EXPRESSION || ((LA55_0 >= OR) && (LA55_0 <= OBJ_LITERAL)) || ((LA55_0 >= DELETE_OP) && (LA55_0 <= NOT)) || LA55_0 == FUNC_EXPR || LA55_0 == TERNARYOP || ((LA55_0 >= PAREN) && (LA55_0 <= PATTERN_LITERAL)) || ((LA55_0 >= Identifier) && (LA55_0 <= StringLiteral)) || LA55_0 == 208 || ((LA55_0 >= 210) && (LA55_0 <= 212))) ) 
                {
                    alt55=1;
                }
                else if ( (LA55_0 == SENDER_CONSTRUCT) ) 
                {
                    alt55=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 55;
                    EXCEPTION->state        = 0;


                    goto rulemsgSenderConstructEx;
                }
            }
            switch (alt55) 
            {
        	case 1:
        	    // .//EmersonTree.g:1134:12: ternaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct6590);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1135:11: ^( SENDER_CONSTRUCT msgSenderConstruct ternaryExpression )
        	    {
        	         MATCHT(SENDER_CONSTRUCT, &FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct6603); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("std.messaging.SenderMessagePair(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgSenderConstruct6631);
        	        msgSenderConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct6659);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructEx; /* Prevent compiler warnings */
    rulemsgSenderConstructEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgSenderConstruct */

/** 
 * $ANTLR start ternaryExpression
 * .//EmersonTree.g:1151:1: ternaryExpression : ( logicalORExpression | ^( TERNARYOP ternaryExpression assignmentExpression assignmentExpression ) );
 */
static void
ternaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1152:9: ( logicalORExpression | ^( TERNARYOP ternaryExpression assignmentExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt56;

            alt56=2;


            {
                int LA56_0 = LA(1);
                if ( (((LA56_0 >= CALL) && (LA56_0 <= DOT)) || LA56_0 == NEW || ((LA56_0 >= VECTOR) && (LA56_0 <= QUATERNION_AXISANGLE)) || LA56_0 == DOLLAR_EXPRESSION || ((LA56_0 >= OR) && (LA56_0 <= OBJ_LITERAL)) || ((LA56_0 >= DELETE_OP) && (LA56_0 <= NOT)) || LA56_0 == FUNC_EXPR || ((LA56_0 >= PAREN) && (LA56_0 <= PATTERN_LITERAL)) || ((LA56_0 >= Identifier) && (LA56_0 <= StringLiteral)) || LA56_0 == 208 || ((LA56_0 >= 210) && (LA56_0 <= 212))) ) 
                {
                    alt56=1;
                }
                else if ( (LA56_0 == TERNARYOP) ) 
                {
                    alt56=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 56;
                    EXCEPTION->state        = 0;


                    goto ruleternaryExpressionEx;
                }
            }
            switch (alt56) 
            {
        	case 1:
        	    // .//EmersonTree.g:1152:11: logicalORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_ternaryExpression6721);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1153:11: ^( TERNARYOP ternaryExpression assignmentExpression assignmentExpression )
        	    {
        	         MATCHT(TERNARYOP, &FOLLOW_TERNARYOP_in_ternaryExpression6734); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_ternaryExpression6762);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ? ( ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression6803);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) : ( ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression6844);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionEx; /* Prevent compiler warnings */
    ruleternaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ternaryExpression */

/** 
 * $ANTLR start msgRecvConstructNoIn
 * .//EmersonTree.g:1175:1: msgRecvConstructNoIn : ( msgConstructNoIn | ^( MESSAGE_RECV_AND_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn msgConstructNoIn ) | ^( MESSAGE_RECV_NO_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn ) );
 */
static void
msgRecvConstructNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1176:9: ( msgConstructNoIn | ^( MESSAGE_RECV_AND_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn msgConstructNoIn ) | ^( MESSAGE_RECV_NO_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn ) )
            
            ANTLR3_UINT32 alt57;

            alt57=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case TERNARYOP_NO_IN:
            case PAREN:
            case PATTERN_LITERAL:
            case SEND_CONSTRUCT_NO_IN:
            case SENDER_CONSTRUCT_NO_IN:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt57=1;
            	}
                break;
            case MESSAGE_RECV_AND_SENDER_NO_IN:
            	{
            		alt57=2;
            	}
                break;
            case MESSAGE_RECV_NO_SENDER_NO_IN:
            	{
            		alt57=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 57;
                EXCEPTION->state        = 0;


                goto rulemsgRecvConstructNoInEx;
            }

            switch (alt57) 
            {
        	case 1:
        	    // .//EmersonTree.g:1176:11: msgConstructNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6906);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1177:11: ^( MESSAGE_RECV_AND_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn msgConstructNoIn )
        	    {
        	         MATCHT(MESSAGE_RECV_AND_SENDER_NO_IN, &FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6919); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                           APP("system.registerHandler( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6947);
        	        msgRecvConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6975);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7003);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1194:11: ^( MESSAGE_RECV_NO_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn )
        	    {
        	         MATCHT(MESSAGE_RECV_NO_SENDER_NO_IN, &FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn7043); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                           APP("system.registerHandler( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn7071);
        	        msgRecvConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn7099);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(", null)");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructNoInEx; /* Prevent compiler warnings */
    rulemsgRecvConstructNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgRecvConstructNoIn */

/** 
 * $ANTLR start msgConstructNoIn
 * .//EmersonTree.g:1210:1: msgConstructNoIn : ( msgSenderConstructNoIn | ^( SEND_CONSTRUCT_NO_IN msgConstructNoIn msgSenderConstructNoIn ) );
 */
static void
msgConstructNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1211:9: ( msgSenderConstructNoIn | ^( SEND_CONSTRUCT_NO_IN msgConstructNoIn msgSenderConstructNoIn ) )
            
            ANTLR3_UINT32 alt58;

            alt58=2;


            {
                int LA58_0 = LA(1);
                if ( (((LA58_0 >= CALL) && (LA58_0 <= DOT)) || LA58_0 == NEW || ((LA58_0 >= VECTOR) && (LA58_0 <= QUATERNION_AXISANGLE)) || LA58_0 == DOLLAR_EXPRESSION || ((LA58_0 >= OR) && (LA58_0 <= INSTANCE_OF)) || ((LA58_0 >= ADD_OP) && (LA58_0 <= OBJ_LITERAL)) || ((LA58_0 >= DELETE_OP) && (LA58_0 <= NOT)) || LA58_0 == FUNC_EXPR || LA58_0 == TERNARYOP_NO_IN || ((LA58_0 >= PAREN) && (LA58_0 <= PATTERN_LITERAL)) || LA58_0 == SENDER_CONSTRUCT_NO_IN || ((LA58_0 >= Identifier) && (LA58_0 <= StringLiteral)) || LA58_0 == 208 || ((LA58_0 >= 210) && (LA58_0 <= 212))) ) 
                {
                    alt58=1;
                }
                else if ( (LA58_0 == SEND_CONSTRUCT_NO_IN) ) 
                {
                    alt58=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 58;
                    EXCEPTION->state        = 0;


                    goto rulemsgConstructNoInEx;
                }
            }
            switch (alt58) 
            {
        	case 1:
        	    // .//EmersonTree.g:1211:11: msgSenderConstructNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7153);
        	        msgSenderConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1212:11: ^( SEND_CONSTRUCT_NO_IN msgConstructNoIn msgSenderConstructNoIn )
        	    {
        	         MATCHT(SEND_CONSTRUCT_NO_IN, &FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn7166); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("std.messaging.sendSyntax(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgConstructNoIn7194);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn7222);
        	        msgSenderConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructNoInEx; /* Prevent compiler warnings */
    rulemsgConstructNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgConstructNoIn */

/** 
 * $ANTLR start msgSenderConstructNoIn
 * .//EmersonTree.g:1228:1: msgSenderConstructNoIn : ( ternaryExpressionNoIn | ^( SENDER_CONSTRUCT_NO_IN msgSenderConstructNoIn ternaryExpressionNoIn ) );
 */
static void
msgSenderConstructNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1229:9: ( ternaryExpressionNoIn | ^( SENDER_CONSTRUCT_NO_IN msgSenderConstructNoIn ternaryExpressionNoIn ) )
            
            ANTLR3_UINT32 alt59;

            alt59=2;


            {
                int LA59_0 = LA(1);
                if ( (((LA59_0 >= CALL) && (LA59_0 <= DOT)) || LA59_0 == NEW || ((LA59_0 >= VECTOR) && (LA59_0 <= QUATERNION_AXISANGLE)) || LA59_0 == DOLLAR_EXPRESSION || ((LA59_0 >= OR) && (LA59_0 <= INSTANCE_OF)) || ((LA59_0 >= ADD_OP) && (LA59_0 <= OBJ_LITERAL)) || ((LA59_0 >= DELETE_OP) && (LA59_0 <= NOT)) || LA59_0 == FUNC_EXPR || LA59_0 == TERNARYOP_NO_IN || ((LA59_0 >= PAREN) && (LA59_0 <= PATTERN_LITERAL)) || ((LA59_0 >= Identifier) && (LA59_0 <= StringLiteral)) || LA59_0 == 208 || ((LA59_0 >= 210) && (LA59_0 <= 212))) ) 
                {
                    alt59=1;
                }
                else if ( (LA59_0 == SENDER_CONSTRUCT_NO_IN) ) 
                {
                    alt59=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 59;
                    EXCEPTION->state        = 0;


                    goto rulemsgSenderConstructNoInEx;
                }
            }
            switch (alt59) 
            {
        	case 1:
        	    // .//EmersonTree.g:1229:12: ternaryExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7285);
        	        ternaryExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1230:11: ^( SENDER_CONSTRUCT_NO_IN msgSenderConstructNoIn ternaryExpressionNoIn )
        	    {
        	         MATCHT(SENDER_CONSTRUCT_NO_IN, &FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn7298); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("std.messaging.SenderMessagePair(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn7326);
        	        msgSenderConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn7354);
        	        ternaryExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructNoInEx; /* Prevent compiler warnings */
    rulemsgSenderConstructNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgSenderConstructNoIn */

/** 
 * $ANTLR start ternaryExpressionNoIn
 * .//EmersonTree.g:1246:1: ternaryExpressionNoIn : ( logicalORExpressionNoIn | ^( TERNARYOP_NO_IN ternaryExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn ) );
 */
static void
ternaryExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1247:9: ( logicalORExpressionNoIn | ^( TERNARYOP_NO_IN ternaryExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt60;

            alt60=2;


            {
                int LA60_0 = LA(1);
                if ( (((LA60_0 >= CALL) && (LA60_0 <= DOT)) || LA60_0 == NEW || ((LA60_0 >= VECTOR) && (LA60_0 <= QUATERNION_AXISANGLE)) || LA60_0 == DOLLAR_EXPRESSION || ((LA60_0 >= OR) && (LA60_0 <= INSTANCE_OF)) || ((LA60_0 >= ADD_OP) && (LA60_0 <= OBJ_LITERAL)) || ((LA60_0 >= DELETE_OP) && (LA60_0 <= NOT)) || LA60_0 == FUNC_EXPR || ((LA60_0 >= PAREN) && (LA60_0 <= PATTERN_LITERAL)) || ((LA60_0 >= Identifier) && (LA60_0 <= StringLiteral)) || LA60_0 == 208 || ((LA60_0 >= 210) && (LA60_0 <= 212))) ) 
                {
                    alt60=1;
                }
                else if ( (LA60_0 == TERNARYOP_NO_IN) ) 
                {
                    alt60=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 60;
                    EXCEPTION->state        = 0;


                    goto ruleternaryExpressionNoInEx;
                }
            }
            switch (alt60) 
            {
        	case 1:
        	    // .//EmersonTree.g:1247:11: logicalORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn7407);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1248:11: ^( TERNARYOP_NO_IN ternaryExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn )
        	    {
        	         MATCHT(TERNARYOP_NO_IN, &FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn7420); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn7448);
        	        ternaryExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ? ( ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7476);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) : ( ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn7504);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionNoInEx; /* Prevent compiler warnings */
    ruleternaryExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ternaryExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpression
 * .//EmersonTree.g:1270:1: logicalANDExpression : ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) );
 */
static void
logicalANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1271:2: ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) )
            
            ANTLR3_UINT32 alt61;

            alt61=2;


            {
                int LA61_0 = LA(1);
                if ( (((LA61_0 >= CALL) && (LA61_0 <= DOT)) || LA61_0 == NEW || ((LA61_0 >= VECTOR) && (LA61_0 <= QUATERNION_AXISANGLE)) || LA61_0 == DOLLAR_EXPRESSION || ((LA61_0 >= BIT_OR) && (LA61_0 <= OBJ_LITERAL)) || ((LA61_0 >= DELETE_OP) && (LA61_0 <= NOT)) || LA61_0 == FUNC_EXPR || ((LA61_0 >= PAREN) && (LA61_0 <= PATTERN_LITERAL)) || ((LA61_0 >= Identifier) && (LA61_0 <= StringLiteral)) || LA61_0 == 208 || ((LA61_0 >= 210) && (LA61_0 <= 212))) ) 
                {
                    alt61=1;
                }
                else if ( (LA61_0 == AND) ) 
                {
                    alt61=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 61;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionEx;
                }
            }
            switch (alt61) 
            {
        	case 1:
        	    // .//EmersonTree.g:1271:4: bitwiseORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression7552);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1272:3: ^( AND logicalANDExpression bitwiseORExpression )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpression7557); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalANDExpression7559);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression7563);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpression
 * .//EmersonTree.g:1276:1: logicalORExpression : ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) );
 */
static void
logicalORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1277:2: ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) )
            
            ANTLR3_UINT32 alt62;

            alt62=2;


            {
                int LA62_0 = LA(1);
                if ( (((LA62_0 >= CALL) && (LA62_0 <= DOT)) || LA62_0 == NEW || ((LA62_0 >= VECTOR) && (LA62_0 <= QUATERNION_AXISANGLE)) || LA62_0 == DOLLAR_EXPRESSION || ((LA62_0 >= AND) && (LA62_0 <= OBJ_LITERAL)) || ((LA62_0 >= DELETE_OP) && (LA62_0 <= NOT)) || LA62_0 == FUNC_EXPR || ((LA62_0 >= PAREN) && (LA62_0 <= PATTERN_LITERAL)) || ((LA62_0 >= Identifier) && (LA62_0 <= StringLiteral)) || LA62_0 == 208 || ((LA62_0 >= 210) && (LA62_0 <= 212))) ) 
                {
                    alt62=1;
                }
                else if ( (LA62_0 == OR) ) 
                {
                    alt62=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 62;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionEx;
                }
            }
            switch (alt62) 
            {
        	case 1:
        	    // .//EmersonTree.g:1277:4: logicalANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression7576);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1278:3: ^( OR logicalORExpression logicalANDExpression )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpression7581); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_logicalORExpression7583);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression7587);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//EmersonTree.g:1281:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) );
 */
static void
logicalORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1282:2: ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt63;

            alt63=2;


            {
                int LA63_0 = LA(1);
                if ( (((LA63_0 >= CALL) && (LA63_0 <= DOT)) || LA63_0 == NEW || ((LA63_0 >= VECTOR) && (LA63_0 <= QUATERNION_AXISANGLE)) || LA63_0 == DOLLAR_EXPRESSION || ((LA63_0 >= AND) && (LA63_0 <= INSTANCE_OF)) || ((LA63_0 >= ADD_OP) && (LA63_0 <= OBJ_LITERAL)) || ((LA63_0 >= DELETE_OP) && (LA63_0 <= NOT)) || LA63_0 == FUNC_EXPR || ((LA63_0 >= PAREN) && (LA63_0 <= PATTERN_LITERAL)) || ((LA63_0 >= Identifier) && (LA63_0 <= StringLiteral)) || LA63_0 == 208 || ((LA63_0 >= 210) && (LA63_0 <= 212))) ) 
                {
                    alt63=1;
                }
                else if ( (LA63_0 == OR) ) 
                {
                    alt63=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 63;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionNoInEx;
                }
            }
            switch (alt63) 
            {
        	case 1:
        	    // .//EmersonTree.g:1282:4: logicalANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7600);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1283:3: ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpressionNoIn7605); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn7607);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || ");
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn7609);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//EmersonTree.g:1287:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) );
 */
static void
logicalANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1288:2: ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt64;

            alt64=2;


            {
                int LA64_0 = LA(1);
                if ( (((LA64_0 >= CALL) && (LA64_0 <= DOT)) || LA64_0 == NEW || ((LA64_0 >= VECTOR) && (LA64_0 <= QUATERNION_AXISANGLE)) || LA64_0 == DOLLAR_EXPRESSION || ((LA64_0 >= BIT_OR) && (LA64_0 <= INSTANCE_OF)) || ((LA64_0 >= ADD_OP) && (LA64_0 <= OBJ_LITERAL)) || ((LA64_0 >= DELETE_OP) && (LA64_0 <= NOT)) || LA64_0 == FUNC_EXPR || ((LA64_0 >= PAREN) && (LA64_0 <= PATTERN_LITERAL)) || ((LA64_0 >= Identifier) && (LA64_0 <= StringLiteral)) || LA64_0 == 208 || ((LA64_0 >= 210) && (LA64_0 <= 212))) ) 
                {
                    alt64=1;
                }
                else if ( (LA64_0 == AND) ) 
                {
                    alt64=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 64;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionNoInEx;
                }
            }
            switch (alt64) 
            {
        	case 1:
        	    // .//EmersonTree.g:1288:4: bitwiseORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7624);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1289:3: ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpressionNoIn7630); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn7632);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn7636);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//EmersonTree.g:1292:1: bitwiseORExpression : ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) );
 */
static void
bitwiseORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1293:2: ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) )
            
            ANTLR3_UINT32 alt65;

            alt65=2;


            {
                int LA65_0 = LA(1);
                if ( (((LA65_0 >= CALL) && (LA65_0 <= DOT)) || LA65_0 == NEW || ((LA65_0 >= VECTOR) && (LA65_0 <= QUATERNION_AXISANGLE)) || LA65_0 == DOLLAR_EXPRESSION || ((LA65_0 >= EXP) && (LA65_0 <= OBJ_LITERAL)) || ((LA65_0 >= DELETE_OP) && (LA65_0 <= NOT)) || LA65_0 == FUNC_EXPR || ((LA65_0 >= PAREN) && (LA65_0 <= PATTERN_LITERAL)) || ((LA65_0 >= Identifier) && (LA65_0 <= StringLiteral)) || LA65_0 == 208 || ((LA65_0 >= 210) && (LA65_0 <= 212))) ) 
                {
                    alt65=1;
                }
                else if ( (LA65_0 == BIT_OR) ) 
                {
                    alt65=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 65;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionEx;
                }
            }
            switch (alt65) 
            {
        	case 1:
        	    // .//EmersonTree.g:1293:4: bitwiseXORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7650);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1294:3: ^( BIT_OR bitwiseORExpression bitwiseXORExpression )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpression7656); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_bitwiseORExpression7658);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" | "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression7662);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//EmersonTree.g:1297:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) );
 */
static void
bitwiseORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1298:2: ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt66;

            alt66=2;


            {
                int LA66_0 = LA(1);
                if ( (((LA66_0 >= CALL) && (LA66_0 <= DOT)) || LA66_0 == NEW || ((LA66_0 >= VECTOR) && (LA66_0 <= QUATERNION_AXISANGLE)) || LA66_0 == DOLLAR_EXPRESSION || ((LA66_0 >= EXP) && (LA66_0 <= INSTANCE_OF)) || ((LA66_0 >= ADD_OP) && (LA66_0 <= OBJ_LITERAL)) || ((LA66_0 >= DELETE_OP) && (LA66_0 <= NOT)) || LA66_0 == FUNC_EXPR || ((LA66_0 >= PAREN) && (LA66_0 <= PATTERN_LITERAL)) || ((LA66_0 >= Identifier) && (LA66_0 <= StringLiteral)) || LA66_0 == 208 || ((LA66_0 >= 210) && (LA66_0 <= 212))) ) 
                {
                    alt66=1;
                }
                else if ( (LA66_0 == BIT_OR) ) 
                {
                    alt66=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 66;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionNoInEx;
                }
            }
            switch (alt66) 
            {
        	case 1:
        	    // .//EmersonTree.g:1298:4: bitwiseXORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7675);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1299:3: ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn7682); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn7684);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" | ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn7688);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//EmersonTree.g:1302:1: bitwiseXORExpression : ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) );
 */
static void
bitwiseXORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1303:1: ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) )
            
            ANTLR3_UINT32 alt67;

            alt67=2;


            {
                int LA67_0 = LA(1);
                if ( (((LA67_0 >= CALL) && (LA67_0 <= DOT)) || LA67_0 == NEW || ((LA67_0 >= VECTOR) && (LA67_0 <= QUATERNION_AXISANGLE)) || LA67_0 == DOLLAR_EXPRESSION || ((LA67_0 >= BIT_AND) && (LA67_0 <= OBJ_LITERAL)) || ((LA67_0 >= DELETE_OP) && (LA67_0 <= NOT)) || LA67_0 == FUNC_EXPR || ((LA67_0 >= PAREN) && (LA67_0 <= PATTERN_LITERAL)) || ((LA67_0 >= Identifier) && (LA67_0 <= StringLiteral)) || LA67_0 == 208 || ((LA67_0 >= 210) && (LA67_0 <= 212))) ) 
                {
                    alt67=1;
                }
                else if ( (LA67_0 == EXP) ) 
                {
                    alt67=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 67;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionEx;
                }
            }
            switch (alt67) 
            {
        	case 1:
        	    // .//EmersonTree.g:1303:3: bitwiseANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7700);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1304:3: ^( EXP e= bitwiseXORExpression bitwiseANDExpression )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpression7707); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression7711);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression7715);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//EmersonTree.g:1307:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) );
 */
static void
bitwiseXORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1308:2: ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt68;

            alt68=2;


            {
                int LA68_0 = LA(1);
                if ( (((LA68_0 >= CALL) && (LA68_0 <= DOT)) || LA68_0 == NEW || ((LA68_0 >= VECTOR) && (LA68_0 <= QUATERNION_AXISANGLE)) || LA68_0 == DOLLAR_EXPRESSION || ((LA68_0 >= BIT_AND) && (LA68_0 <= INSTANCE_OF)) || ((LA68_0 >= ADD_OP) && (LA68_0 <= OBJ_LITERAL)) || ((LA68_0 >= DELETE_OP) && (LA68_0 <= NOT)) || LA68_0 == FUNC_EXPR || ((LA68_0 >= PAREN) && (LA68_0 <= PATTERN_LITERAL)) || ((LA68_0 >= Identifier) && (LA68_0 <= StringLiteral)) || LA68_0 == 208 || ((LA68_0 >= 210) && (LA68_0 <= 212))) ) 
                {
                    alt68=1;
                }
                else if ( (LA68_0 == EXP) ) 
                {
                    alt68=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 68;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionNoInEx;
                }
            }
            switch (alt68) 
            {
        	case 1:
        	    // .//EmersonTree.g:1308:4: bitwiseANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7727);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1309:3: ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpressionNoIn7733); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn7737);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7740);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//EmersonTree.g:1312:1: bitwiseANDExpression : ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) );
 */
static void
bitwiseANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1313:2: ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) )
            
            ANTLR3_UINT32 alt69;

            alt69=2;


            {
                int LA69_0 = LA(1);
                if ( (((LA69_0 >= CALL) && (LA69_0 <= DOT)) || LA69_0 == NEW || ((LA69_0 >= VECTOR) && (LA69_0 <= QUATERNION_AXISANGLE)) || LA69_0 == DOLLAR_EXPRESSION || ((LA69_0 >= EQUALS) && (LA69_0 <= OBJ_LITERAL)) || ((LA69_0 >= DELETE_OP) && (LA69_0 <= NOT)) || LA69_0 == FUNC_EXPR || ((LA69_0 >= PAREN) && (LA69_0 <= PATTERN_LITERAL)) || ((LA69_0 >= Identifier) && (LA69_0 <= StringLiteral)) || LA69_0 == 208 || ((LA69_0 >= 210) && (LA69_0 <= 212))) ) 
                {
                    alt69=1;
                }
                else if ( (LA69_0 == BIT_AND) ) 
                {
                    alt69=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 69;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionEx;
                }
            }
            switch (alt69) 
            {
        	case 1:
        	    // .//EmersonTree.g:1313:4: equalityExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression7754);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1314:4: ^( BIT_AND e= bitwiseANDExpression equalityExpression )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpression7760); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7764);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression7768);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//EmersonTree.g:1317:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) );
 */
static void
bitwiseANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1318:2: ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) )
            
            ANTLR3_UINT32 alt70;

            alt70=2;


            {
                int LA70_0 = LA(1);
                if ( (((LA70_0 >= CALL) && (LA70_0 <= DOT)) || LA70_0 == NEW || ((LA70_0 >= VECTOR) && (LA70_0 <= QUATERNION_AXISANGLE)) || LA70_0 == DOLLAR_EXPRESSION || ((LA70_0 >= EQUALS) && (LA70_0 <= INSTANCE_OF)) || ((LA70_0 >= ADD_OP) && (LA70_0 <= OBJ_LITERAL)) || ((LA70_0 >= DELETE_OP) && (LA70_0 <= NOT)) || LA70_0 == FUNC_EXPR || ((LA70_0 >= PAREN) && (LA70_0 <= PATTERN_LITERAL)) || ((LA70_0 >= Identifier) && (LA70_0 <= StringLiteral)) || LA70_0 == 208 || ((LA70_0 >= 210) && (LA70_0 <= 212))) ) 
                {
                    alt70=1;
                }
                else if ( (LA70_0 == BIT_AND) ) 
                {
                    alt70=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 70;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionNoInEx;
                }
            }
            switch (alt70) 
            {
        	case 1:
        	    // .//EmersonTree.g:1318:4: equalityExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7782);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1319:4: ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7789); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7793);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7797);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//EmersonTree.g:1322:1: equalityExpression : ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) );
 */
static void
equalityExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1323:2: ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) )
            
            ANTLR3_UINT32 alt71;

            alt71=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt71=1;
            	}
                break;
            case EQUALS:
            	{
            		alt71=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt71=3;
            	}
                break;
            case IDENT:
            	{
            		alt71=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt71=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 71;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionEx;
            }

            switch (alt71) 
            {
        	case 1:
        	    // .//EmersonTree.g:1323:4: relationalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression7810);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1324:11: ^( EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpression7823); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.equal( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression7853);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression7881);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1337:4: ^( NOT_EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpression7914); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.notEqual( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression7944);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression7972);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1350:4: ^( IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpression8005); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.identical( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression8035);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression8063);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1363:4: ^( NOT_IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpression8096); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.notIdentical( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression8126);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression8154);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//EmersonTree.g:1378:1: equalityExpressionNoIn : ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) );
 */
static void
equalityExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1379:1: ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt72;

            alt72=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt72=1;
            	}
                break;
            case EQUALS:
            	{
            		alt72=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt72=3;
            	}
                break;
            case IDENT:
            	{
            		alt72=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt72=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 72;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionNoInEx;
            }

            switch (alt72) 
            {
        	case 1:
        	    // .//EmersonTree.g:1379:3: relationalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8190);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1380:5: ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpressionNoIn8197); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(" util.equal( ");        
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8213);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(" , ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8229);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(")");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1393:5: ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn8251); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP("util.notEqual(");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8267);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(" != ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8283);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(")");      
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1406:5: ^( IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpressionNoIn8305); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP("util.identical( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8321);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(" , ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8337);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(")");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1419:5: ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpressionNoIn8359); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP("util.notIdentical (");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn8375);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP(" , ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn8391);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP(" )");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//EmersonTree.g:1435:1: relationalOps : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN );
 */
static void
relationalOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1436:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN )
            
            ANTLR3_UINT32 alt73;

            alt73=6;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt73=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt73=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt73=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt73=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt73=5;
            	}
                break;
            case IN:
            	{
            		alt73=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 73;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt73) 
            {
        	case 1:
        	    // .//EmersonTree.g:1436:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOps8417); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               	(SCOPE_TOP(relationalExpression))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1437:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOps8423); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">" ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1438:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOps8429); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "<=" ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1439:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOps8436); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1440:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOps8442); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "instanceOf" ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1441:3: IN
        	    {
        	         MATCHT(IN, &FOLLOW_IN_in_relationalOps8448); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "in" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//EmersonTree.g:1444:1: relationalExpression : ( additiveExpression | ^( relationalOps e= relationalExpression additiveExpression ) );
 */
static void
relationalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionTop = pEmersonTree_relationalExpressionPush(ctx);
    {
        {
            //  .//EmersonTree.g:1450:2: ( additiveExpression | ^( relationalOps e= relationalExpression additiveExpression ) )
            
            ANTLR3_UINT32 alt74;

            alt74=2;


            {
                int LA74_0 = LA(1);
                if ( (((LA74_0 >= CALL) && (LA74_0 <= DOT)) || LA74_0 == NEW || ((LA74_0 >= VECTOR) && (LA74_0 <= QUATERNION_AXISANGLE)) || LA74_0 == DOLLAR_EXPRESSION || ((LA74_0 >= ADD_OP) && (LA74_0 <= OBJ_LITERAL)) || ((LA74_0 >= DELETE_OP) && (LA74_0 <= NOT)) || LA74_0 == FUNC_EXPR || ((LA74_0 >= PAREN) && (LA74_0 <= PATTERN_LITERAL)) || ((LA74_0 >= Identifier) && (LA74_0 <= StringLiteral)) || LA74_0 == 208 || ((LA74_0 >= 210) && (LA74_0 <= 212))) ) 
                {
                    alt74=1;
                }
                else if ( (((LA74_0 >= LESS_THAN) && (LA74_0 <= IN))) ) 
                {
                    alt74=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 74;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionEx;
                }
            }
            switch (alt74) 
            {
        	case 1:
        	    // .//EmersonTree.g:1450:4: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression8466);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1452:2: ^( relationalOps e= relationalExpression additiveExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression8480);
        	        relationalOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_relationalExpression8489);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            				  APP(" ");
        	            				  APP(	(SCOPE_TOP(relationalExpression))->op );
        	            				  APP(" ");
        	            				
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression8501);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    pEmersonTree_relationalExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//EmersonTree.g:1464:1: relationalOpsNoIn : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF );
 */
static void
relationalOpsNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1465:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF )
            
            ANTLR3_UINT32 alt75;

            alt75=5;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt75=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt75=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt75=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt75=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt75=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 75;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt75) 
            {
        	case 1:
        	    // .//EmersonTree.g:1465:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOpsNoIn8517); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              	(SCOPE_TOP(relationalExpressionNoIn))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1466:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOpsNoIn8523); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">"; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1467:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn8529); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "<= " ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1468:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn8535); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1469:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOpsNoIn8541); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "instanceOf" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//EmersonTree.g:1472:1: relationalExpressionNoIn : ( additiveExpression | ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression ) );
 */
static void
relationalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionNoInTop = pEmersonTree_relationalExpressionNoInPush(ctx);
    {
        {
            //  .//EmersonTree.g:1478:2: ( additiveExpression | ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression ) )
            
            ANTLR3_UINT32 alt76;

            alt76=2;


            {
                int LA76_0 = LA(1);
                if ( (((LA76_0 >= CALL) && (LA76_0 <= DOT)) || LA76_0 == NEW || ((LA76_0 >= VECTOR) && (LA76_0 <= QUATERNION_AXISANGLE)) || LA76_0 == DOLLAR_EXPRESSION || ((LA76_0 >= ADD_OP) && (LA76_0 <= OBJ_LITERAL)) || ((LA76_0 >= DELETE_OP) && (LA76_0 <= NOT)) || LA76_0 == FUNC_EXPR || ((LA76_0 >= PAREN) && (LA76_0 <= PATTERN_LITERAL)) || ((LA76_0 >= Identifier) && (LA76_0 <= StringLiteral)) || LA76_0 == 208 || ((LA76_0 >= 210) && (LA76_0 <= 212))) ) 
                {
                    alt76=1;
                }
                else if ( (((LA76_0 >= LESS_THAN) && (LA76_0 <= INSTANCE_OF))) ) 
                {
                    alt76=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionNoInPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 76;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionNoInEx;
                }
            }
            switch (alt76) 
            {
        	case 1:
        	    // .//EmersonTree.g:1478:4: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn8561);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1479:5: ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn8576);
        	        relationalOpsNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn8584);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ");
        	            						  APP(	(SCOPE_TOP(relationalExpressionNoIn))->op);
        	            						  APP(" ");
        	            						
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn8600);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    pEmersonTree_relationalExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start additiveExpression
 * .//EmersonTree.g:1495:1: additiveExpression : ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) );
 */
static void
additiveExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1496:9: ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) )
            
            ANTLR3_UINT32 alt77;

            alt77=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt77=1;
            	}
                break;
            case ADD_OP:
            	{
            		alt77=2;
            	}
                break;
            case SUB:
            	{
            		alt77=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 77;
                EXCEPTION->state        = 0;


                goto ruleadditiveExpressionEx;
            }

            switch (alt77) 
            {
        	case 1:
        	    // .//EmersonTree.g:1496:11: multiplicativeExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression8632);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1497:11: ^( ADD_OP e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(ADD_OP, &FOLLOW_ADD_OP_in_additiveExpression8645); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.plus( " );
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression8678);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression8708);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1510:11: ^( SUB e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(SUB, &FOLLOW_SUB_in_additiveExpression8751); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.sub( " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression8782);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression8813);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multiplicativeExpression
 * .//EmersonTree.g:1526:1: multiplicativeExpression : ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) );
 */
static void
multiplicativeExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1527:9: ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) )
            
            ANTLR3_UINT32 alt78;

            alt78=4;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt78=1;
            	}
                break;
            case MULT:
            	{
            		alt78=2;
            	}
                break;
            case DIV:
            	{
            		alt78=3;
            	}
                break;
            case MOD:
            	{
            		alt78=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 78;
                EXCEPTION->state        = 0;


                goto rulemultiplicativeExpressionEx;
            }

            switch (alt78) 
            {
        	case 1:
        	    // .//EmersonTree.g:1527:11: unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression8862);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1528:11: ^( MULT multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MULT, &FOLLOW_MULT_in_multiplicativeExpression8876); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.mul( ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression8907);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression8938);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1541:11: ^( DIV multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(DIV, &FOLLOW_DIV_in_multiplicativeExpression8981); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.div( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression9009);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression9037);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1554:11: ^( MOD multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MOD, &FOLLOW_MOD_in_multiplicativeExpression9078); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	                   
        	                            APP(" util.mod( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression9106);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression9134);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start unaryOps
 * .//EmersonTree.g:1569:1: unaryOps : ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT );
 */
static void
unaryOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1570:1: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= DELETE_OP) && (LA(1) <= NOT)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unaryOps0);    goto ruleunaryOpsEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//EmersonTree.g:1582:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );
 */
static void
unaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1583:9: ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) )
            
            ANTLR3_UINT32 alt80;

            alt80=2;

            alt80 = cdfa80.predict(ctx, RECOGNIZER, ISTREAM, &cdfa80);
            if  (HASEXCEPTION())
            {
                goto ruleunaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt80) 
            {
        	case 1:
        	    // .//EmersonTree.g:1583:11: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression9229);
        	        postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1584:4: ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression )
        	    {

        	        // .//EmersonTree.g:1586:6: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT )
        	        {
        	            int alt79=9;
        	            switch ( LA(1) ) 
        	            {
        	            case DELETE_OP:
        	            	{
        	            		alt79=1;
        	            	}
        	                break;
        	            case VOID:
        	            	{
        	            		alt79=2;
        	            	}
        	                break;
        	            case TYPEOF:
        	            	{
        	            		alt79=3;
        	            	}
        	                break;
        	            case PLUSPLUS:
        	            	{
        	            		alt79=4;
        	            	}
        	                break;
        	            case MINUSMINUS:
        	            	{
        	            		alt79=5;
        	            	}
        	                break;
        	            case UNARY_PLUS:
        	            	{
        	            		alt79=6;
        	            	}
        	                break;
        	            case UNARY_MINUS:
        	            	{
        	            		alt79=7;
        	            	}
        	                break;
        	            case COMPLEMENT:
        	            	{
        	            		alt79=8;
        	            	}
        	                break;
        	            case NOT:
        	            	{
        	            		alt79=9;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 79;
        	                EXCEPTION->state        = 0;


        	                goto ruleunaryExpressionEx;
        	            }

        	            switch (alt79) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1587:8: DELETE_OP
        	        	    {
        	        	         MATCHT(DELETE_OP, &FOLLOW_DELETE_OP_in_unaryExpression9253); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("delete ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:1588:10: VOID
        	        	    {
        	        	         MATCHT(VOID, &FOLLOW_VOID_in_unaryExpression9275); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	               APP("void");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:1589:10: TYPEOF
        	        	    {
        	        	         MATCHT(TYPEOF, &FOLLOW_TYPEOF_in_unaryExpression9297); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("typeof ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:1590:10: PLUSPLUS
        	        	    {
        	        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_unaryExpression9317); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("++");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:1591:10: MINUSMINUS
        	        	    {
        	        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_unaryExpression9335); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("--");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:1592:10: UNARY_PLUS
        	        	    {
        	        	         MATCHT(UNARY_PLUS, &FOLLOW_UNARY_PLUS_in_unaryExpression9351); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("+");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:1593:10: UNARY_MINUS
        	        	    {
        	        	         MATCHT(UNARY_MINUS, &FOLLOW_UNARY_MINUS_in_unaryExpression9367); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("-");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:1594:10: COMPLEMENT
        	        	    {
        	        	         MATCHT(COMPLEMENT, &FOLLOW_COMPLEMENT_in_unaryExpression9382); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("~");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:1595:10: NOT
        	        	    {
        	        	         MATCHT(NOT, &FOLLOW_NOT_in_unaryExpression9398); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("!");
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression9427);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start postfixExpression
 * .//EmersonTree.g:1604:1: postfixExpression : ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) );
 */
static void
postfixExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1605:9: ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) )
            
            ANTLR3_UINT32 alt81;

            alt81=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 208:
            case 210:
            case 211:
            case 212:
            	{
            		alt81=1;
            	}
                break;
            case MINUSMINUS:
            	{
            		alt81=2;
            	}
                break;
            case PLUSPLUS:
            	{
            		alt81=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 81;
                EXCEPTION->state        = 0;


                goto rulepostfixExpressionEx;
            }

            switch (alt81) 
            {
        	case 1:
        	    // .//EmersonTree.g:1605:10: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression9452);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1606:11: ^( MINUSMINUS leftHandSideExpression )
        	    {
        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_postfixExpression9465); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression9467);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("--");
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1607:4: ^( PLUSPLUS leftHandSideExpression )
        	    {
        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_postfixExpression9476); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression9478);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("++");
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start primaryExpression
 * .//EmersonTree.g:1610:1: primaryExpression : ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | ^( PAREN expression ) | vectorLiteral | quaternionLiteral );
 */
static void
primaryExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier70;

    /* Initialize rule variables
     */


    Identifier70       = NULL;

    {
        {
            //  .//EmersonTree.g:1611:2: ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | ^( PAREN expression ) | vectorLiteral | quaternionLiteral )
            
            ANTLR3_UINT32 alt82;

            alt82=10;

            switch ( LA(1) ) 
            {
            case 208:
            	{
            		alt82=1;
            	}
                break;
            case Identifier:
            	{
            		alt82=2;
            	}
                break;
            case DOLLAR_EXPRESSION:
            	{
            		alt82=3;
            	}
                break;
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 211:
            case 212:
            	{
            		alt82=4;
            	}
                break;
            case ARRAY_LITERAL:
            	{
            		alt82=5;
            	}
                break;
            case OBJ_LITERAL:
            	{
            		alt82=6;
            	}
                break;
            case PATTERN_LITERAL:
            	{
            		alt82=7;
            	}
                break;
            case PAREN:
            	{
            		alt82=8;
            	}
                break;
            case VECTOR:
            	{
            		alt82=9;
            	}
                break;
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            	{
            		alt82=10;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 82;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt82) 
            {
        	case 1:
        	    // .//EmersonTree.g:1611:4: 'this'
        	    {
        	         MATCHT(208, &FOLLOW_208_in_primaryExpression9499); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("this");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1612:4: Identifier
        	    {
        	        Identifier70 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression9506); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        LINE((Identifier70->getLine(Identifier70)));
        	                        APP((const char*)(Identifier70->getText(Identifier70))->chars);
        	            	  
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1617:11: dollarExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression9524);
        	        dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1618:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression9529);
        	        literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1619:4: arrayLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression9534);
        	        arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1620:4: objectLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression9539);
        	        objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:1621:11: patternLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_patternLiteral_in_primaryExpression9551);
        	        patternLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:1622:4: ^( PAREN expression )
        	    {
        	         MATCHT(PAREN, &FOLLOW_PAREN_in_primaryExpression9557); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression9561);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )");
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:1623:11: vectorLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression9576);
        	        vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 10:
        	    // .//EmersonTree.g:1624:11: quaternionLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_quaternionLiteral_in_primaryExpression9588);
        	        quaternionLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//EmersonTree.g:1629:1: vectorLiteral : ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) ) ;
 */
static void
vectorLiteral(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    VECTOR71;

    /* Initialize rule variables
     */


    VECTOR71       = NULL;

    {
        // .//EmersonTree.g:1630:9: ( ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) ) )
        // .//EmersonTree.g:1630:11: ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) )
        {
            VECTOR71 = (pANTLR3_BASE_TREE) MATCHT(VECTOR, &FOLLOW_VECTOR_in_vectorLiteral9609); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((VECTOR71->getLine(VECTOR71)));
                                APP("( new util.Vec3(");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:1635:13: (exp1= vectorLiteralField )
            // .//EmersonTree.g:1635:14: exp1= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral9640);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1640:13: (exp2= vectorLiteralField )
            // .//EmersonTree.g:1640:14: exp2= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral9687);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1645:13: (exp3= vectorLiteralField )
            // .//EmersonTree.g:1645:14: exp3= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral9734);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(") )");
                                  
                }

            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start quaternionLiteral
 * .//EmersonTree.g:1655:1: quaternionLiteral : ( ^( QUATERNION (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) ) | ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) ) | ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) ) );
 */
static void
quaternionLiteral(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    QUATERNION72;
    pANTLR3_BASE_TREE    QUATERNION_AXISANGLE73;
    pANTLR3_BASE_TREE    QUATERNION_AXISANGLE74;

    /* Initialize rule variables
     */


    QUATERNION72       = NULL;
    QUATERNION_AXISANGLE73       = NULL;
    QUATERNION_AXISANGLE74       = NULL;

    {
        {
            //  .//EmersonTree.g:1656:9: ( ^( QUATERNION (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) ) | ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) ) | ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) ) )
            
            ANTLR3_UINT32 alt83;

            alt83=3;


            {
                int LA83_0 = LA(1);
                if ( (LA83_0 == QUATERNION) ) 
                {
                    alt83=1;
                }
                else if ( (LA83_0 == QUATERNION_AXISANGLE) ) 
                {

                    {
                        int LA83_2 = LA(2);
                        if ( (synpred167_EmersonTree(ctx)) ) 
                        {
                            alt83=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt83=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 83;
                            EXCEPTION->state        = 2;


                            goto rulequaternionLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 83;
                    EXCEPTION->state        = 0;


                    goto rulequaternionLiteralEx;
                }
            }
            switch (alt83) 
            {
        	case 1:
        	    // .//EmersonTree.g:1656:11: ^( QUATERNION (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) )
        	    {
        	        QUATERNION72 = (pANTLR3_BASE_TREE) MATCHT(QUATERNION, &FOLLOW_QUATERNION_in_quaternionLiteral9812); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            LINE((QUATERNION72->getLine(QUATERNION72)));
        	                            APP("( new util.Quaternion(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1661:13: (exp1= vectorLiteralField )
        	        // .//EmersonTree.g:1661:14: exp1= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9843);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1666:13: (exp2= vectorLiteralField )
        	        // .//EmersonTree.g:1666:14: exp2= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9890);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1671:13: (exp3= vectorLiteralField )
        	        // .//EmersonTree.g:1671:14: exp3= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9937);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1676:13: (exp4= vectorLiteralField )
        	        // .//EmersonTree.g:1676:14: exp4= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9984);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(") )");
        	                              
        	            }

        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1682:11: ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) )
        	    {
        	        QUATERNION_AXISANGLE73 = (pANTLR3_BASE_TREE) MATCHT(QUATERNION_AXISANGLE, &FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10040); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            LINE((QUATERNION_AXISANGLE73->getLine(QUATERNION_AXISANGLE73)));
        	                            APP("( new util.Quaternion(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1687:13: (exp1= vectorLiteralField )
        	        // .//EmersonTree.g:1687:14: exp1= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral10071);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1692:13: (exp2= vectorLiteralField )
        	        // .//EmersonTree.g:1692:14: exp2= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral10118);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(") )");
        	                              
        	            }

        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1698:11: ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) )
        	    {
        	        QUATERNION_AXISANGLE74 = (pANTLR3_BASE_TREE) MATCHT(QUATERNION_AXISANGLE, &FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral10174); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            LINE((QUATERNION_AXISANGLE74->getLine(QUATERNION_AXISANGLE74)));
        	                            APP("( new util.Quaternion(new util.Vec3(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1703:13: (exp1= vectorLiteralField )
        	        // .//EmersonTree.g:1703:14: exp1= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral10205);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1708:13: (exp2= vectorLiteralField )
        	        // .//EmersonTree.g:1708:14: exp2= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral10252);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1713:13: (exp3= vectorLiteralField )
        	        // .//EmersonTree.g:1713:14: exp3= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral10299);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP("),");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1718:13: (exp4= vectorLiteralField )
        	        // .//EmersonTree.g:1718:14: exp4= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral10346);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(") )");
        	                              
        	            }

        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulequaternionLiteralEx; /* Prevent compiler warnings */
    rulequaternionLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end quaternionLiteral */

/** 
 * $ANTLR start vectorLiteralField
 * .//EmersonTree.g:1729:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static void
vectorLiteralField(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    NumericLiteral75;

    /* Initialize rule variables
     */


    NumericLiteral75       = NULL;

    {
        {
            //  .//EmersonTree.g:1730:9: ( additiveExpression | NumericLiteral | callExpression | memberExpression )
            
            ANTLR3_UINT32 alt84;

            alt84=4;

            alt84 = cdfa84.predict(ctx, RECOGNIZER, ISTREAM, &cdfa84);
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralFieldEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt84) 
            {
        	case 1:
        	    // .//EmersonTree.g:1730:11: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_vectorLiteralField10440);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1732:11: NumericLiteral
        	    {
        	        NumericLiteral75 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_vectorLiteralField10453); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((NumericLiteral75->getLine(NumericLiteral75))); APP((const char*)(NumericLiteral75->getText(NumericLiteral75))->chars);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1733:11: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_vectorLiteralField10467);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1734:11: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_vectorLiteralField10479);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralFieldEx; /* Prevent compiler warnings */
    rulevectorLiteralFieldEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteralField */

/** 
 * $ANTLR start dollarExpression
 * .//EmersonTree.g:1738:1: dollarExpression : ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static void
dollarExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier76;

    /* Initialize rule variables
     */


    Identifier76       = NULL;

    {
        // .//EmersonTree.g:1739:9: ( ^( DOLLAR_EXPRESSION Identifier ) )
        // .//EmersonTree.g:1739:11: ^( DOLLAR_EXPRESSION Identifier )
        {
             MATCHT(DOLLAR_EXPRESSION, &FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression10514); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                if (insideWhenPred)
                                    APP("'),");

                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier76 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression10542); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier76->getText(Identifier76))->chars);

                                if (insideWhenPred)
                                   APP(",util.create_quoted('");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//EmersonTree.g:1758:1: arrayLiteral : ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( expression ) ) | ^( ARRAY_LITERAL expression ( expression )* ) );
 */
static void
arrayLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1759:3: ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( expression ) ) | ^( ARRAY_LITERAL expression ( expression )* ) )
            
            ANTLR3_UINT32 alt86;

            alt86=3;


            {
                int LA86_0 = LA(1);
                if ( (LA86_0 == ARRAY_LITERAL) ) 
                {

                    {
                        int LA86_1 = LA(2);
                        if ( (synpred171_EmersonTree(ctx)) ) 
                        {
                            alt86=1;
                        }
                        else if ( (synpred172_EmersonTree(ctx)) ) 
                        {
                            alt86=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt86=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 86;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 86;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt86) 
            {
        	case 1:
        	    // .//EmersonTree.g:1759:5: ^( ARRAY_LITERAL )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral10607); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("[ ]"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1760:5: ^( ARRAY_LITERAL ( expression ) )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral10617); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1762:8: ( expression )
        	        // .//EmersonTree.g:1762:9: expression
        	        {
        	            FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral10636);
        	            expression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1765:5: ^( ARRAY_LITERAL expression ( expression )* )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral10659); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("[ ");
        	                 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral10673);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1771:6: ( expression )*

        	        for (;;)
        	        {
        	            int alt85=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA85_0 = LA(1);
        	                if ( (LA85_0 == EXPR) ) 
        	                {
        	                    alt85=1;
        	                }

        	            }
        	            switch (alt85) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1772:7: expression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                     APP(", ");
        	        	                  
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral10702);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop85;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop85: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP(" ] ");
        	                 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//EmersonTree.g:1784:1: objectLiteral : ( ^( OBJ_LITERAL ) | ^( OBJ_LITERAL ( propertyNameAndValue ) ) | ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static void
objectLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1785:3: ( ^( OBJ_LITERAL ) | ^( OBJ_LITERAL ( propertyNameAndValue ) ) | ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt88;

            alt88=3;


            {
                int LA88_0 = LA(1);
                if ( (LA88_0 == OBJ_LITERAL) ) 
                {

                    {
                        int LA88_1 = LA(2);
                        if ( (synpred174_EmersonTree(ctx)) ) 
                        {
                            alt88=1;
                        }
                        else if ( (synpred175_EmersonTree(ctx)) ) 
                        {
                            alt88=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt88=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 88;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 88;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt88) 
            {
        	case 1:
        	    // .//EmersonTree.g:1785:4: ^( OBJ_LITERAL )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral10739); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("{ }");
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1786:4: ^( OBJ_LITERAL ( propertyNameAndValue ) )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral10749); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("{ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1789:13: ( propertyNameAndValue )
        	        // .//EmersonTree.g:1789:14: propertyNameAndValue
        	        {
        	            FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral10786);
        	            propertyNameAndValue(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" }"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1793:3: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral10812); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("{ ");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral10830);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1797:5: ( propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt87=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA87_0 = LA(1);
        	                if ( (LA87_0 == NAME_VALUE) ) 
        	                {
        	                    alt87=1;
        	                }

        	            }
        	            switch (alt87) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1798:7: propertyNameAndValue
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             
        	        	            					  APP(", "); 
        	        	            					
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral10859);
        	        	        propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop87;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop87: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	            				  APP(" } "); 
        	            				
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start patternLiteral
 * .//EmersonTree.g:1815:1: patternLiteral : ( ^( PATTERN_LITERAL ) | ^( PATTERN_LITERAL nameValueProto ) | ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) );
 */
static void
patternLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1817:3: ( ^( PATTERN_LITERAL ) | ^( PATTERN_LITERAL nameValueProto ) | ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) )
            
            ANTLR3_UINT32 alt90;

            alt90=3;


            {
                int LA90_0 = LA(1);
                if ( (LA90_0 == PATTERN_LITERAL) ) 
                {

                    {
                        int LA90_1 = LA(2);
                        if ( (synpred177_EmersonTree(ctx)) ) 
                        {
                            alt90=1;
                        }
                        else if ( (synpred178_EmersonTree(ctx)) ) 
                        {
                            alt90=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt90=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 90;
                            EXCEPTION->state        = 1;


                            goto rulepatternLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 90;
                    EXCEPTION->state        = 0;


                    goto rulepatternLiteralEx;
                }
            }
            switch (alt90) 
            {
        	case 1:
        	    // .//EmersonTree.g:1817:4: ^( PATTERN_LITERAL )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral10902); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("new util.Pattern()");
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1818:4: ^( PATTERN_LITERAL nameValueProto )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral10912); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral10921);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1821:4: ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral10933); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ ");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral10953);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1825:5: ( nameValueProto )*

        	        for (;;)
        	        {
        	            int alt89=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA89_0 = LA(1);
        	                if ( (((LA89_0 >= NAME_VALUE_PROTO) && (LA89_0 <= BLANK_NAME_VAL_PROT))) ) 
        	                {
        	                    alt89=1;
        	                }

        	            }
        	            switch (alt89) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1826:7: nameValueProto
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             
        	        	            					  APP(", "); 
        	        	            					
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral10982);
        	        	        nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop89;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop89: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	            				  APP(" ] "); 
        	            				
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralEx; /* Prevent compiler warnings */
    rulepatternLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end patternLiteral */

/** 
 * $ANTLR start nameValueProto
 * .//EmersonTree.g:1843:1: nameValueProto : ( ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? ) | ^( BLANK_NAME_VAL_PROT ) );
 */
static void
nameValueProto(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1844:3: ( ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? ) | ^( BLANK_NAME_VAL_PROT ) )
            
            ANTLR3_UINT32 alt93;

            alt93=2;


            {
                int LA93_0 = LA(1);
                if ( (LA93_0 == NAME_VALUE_PROTO) ) 
                {
                    alt93=1;
                }
                else if ( (LA93_0 == BLANK_NAME_VAL_PROT) ) 
                {
                    alt93=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 93;
                    EXCEPTION->state        = 0;


                    goto rulenameValueProtoEx;
                }
            }
            switch (alt93) 
            {
        	case 1:
        	    // .//EmersonTree.g:1844:5: ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE expression ) )? ( ^( PROTO expression ) )? )
        	    {
        	         MATCHT(NAME_VALUE_PROTO, &FOLLOW_NAME_VALUE_PROTO_in_nameValueProto11047); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("new util.Pattern( ");
        	                      
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(NAME, &FOLLOW_NAME_in_nameValueProto11070); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyName_in_nameValueProto11082);
        	        propertyName(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1852:10: ( ^( VALUE expression ) )?
        	        {
        	            int alt91=2;
        	            {
        	                int LA91_0 = LA(1);
        	                if ( (LA91_0 == VALUE) ) 
        	                {
        	                    alt91=1;
        	                }
        	            }
        	            switch (alt91) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1853:10: ^( VALUE expression )
        	        	    {
        	        	         MATCHT(VALUE, &FOLLOW_VALUE_in_nameValueProto11125); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                          APP(", ");
        	        	                        
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_nameValueProto11154);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//EmersonTree.g:1861:10: ( ^( PROTO expression ) )?
        	        {
        	            int alt92=2;
        	            {
        	                int LA92_0 = LA(1);
        	                if ( (LA92_0 == PROTO) ) 
        	                {
        	                    alt92=1;
        	                }
        	            }
        	            switch (alt92) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1863:10: ^( PROTO expression )
        	        	    {
        	        	         MATCHT(PROTO, &FOLLOW_PROTO_in_nameValueProto11203); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                          APP(", ");
        	        	                        
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_nameValueProto11231);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" )");
        	                     
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1874:5: ^( BLANK_NAME_VAL_PROT )
        	    {
        	         MATCHT(BLANK_NAME_VAL_PROT, &FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto11272); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("new util.Pattern()");
        	                    
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenameValueProtoEx; /* Prevent compiler warnings */
    rulenameValueProtoEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end nameValueProto */

/** 
 * $ANTLR start propertyNameAndValue
 * .//EmersonTree.g:1881:1: propertyNameAndValue : ^( NAME_VALUE propertyName expression ) ;
 */
static void
propertyNameAndValue(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    NAME_VALUE77;

    /* Initialize rule variables
     */


    NAME_VALUE77       = NULL;

    {
        // .//EmersonTree.g:1882:2: ( ^( NAME_VALUE propertyName expression ) )
        // .//EmersonTree.g:1882:4: ^( NAME_VALUE propertyName expression )
        {
            NAME_VALUE77 = (pANTLR3_BASE_TREE) MATCHT(NAME_VALUE, &FOLLOW_NAME_VALUE_in_propertyNameAndValue11302); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue11315);
            propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                 LINE((NAME_VALUE77->getLine(NAME_VALUE77))); APP(" : ");
            }
            FOLLOWPUSH(FOLLOW_expression_in_propertyNameAndValue11334);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//EmersonTree.g:1888:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static void
propertyName(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier78;
    pANTLR3_BASE_TREE    StringLiteral79;
    pANTLR3_BASE_TREE    NumericLiteral80;

    /* Initialize rule variables
     */


    Identifier78       = NULL;
    StringLiteral79       = NULL;
    NumericLiteral80       = NULL;

    {
        {
            //  .//EmersonTree.g:1889:2: ( Identifier | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt94;

            alt94=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            	{
            		alt94=1;
            	}
                break;
            case StringLiteral:
            	{
            		alt94=2;
            	}
                break;
            case NumericLiteral:
            	{
            		alt94=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 94;
                EXCEPTION->state        = 0;


                goto rulepropertyNameEx;
            }

            switch (alt94) 
            {
        	case 1:
        	    // .//EmersonTree.g:1889:4: Identifier
        	    {
        	        Identifier78 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyName11346); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((Identifier78->getLine(Identifier78))); APP((const char*)(Identifier78->getText(Identifier78))->chars); 
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1890:4: StringLiteral
        	    {
        	        StringLiteral79 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_propertyName11353); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         LINE((StringLiteral79->getLine(StringLiteral79)));
        	                         APP((const char*)(StringLiteral79->getText(StringLiteral79))->chars);  
        	                      
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1895:4: NumericLiteral
        	    {
        	        NumericLiteral80 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_propertyName11370); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         LINE((NumericLiteral80->getLine(NumericLiteral80)));
        	                         APP((const char*)(NumericLiteral80->getText(NumericLiteral80))->chars);
        	                      
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//EmersonTree.g:1903:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static void
literal(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    StringLiteral81;
    pANTLR3_BASE_TREE    NumericLiteral82;

    /* Initialize rule variables
     */


    StringLiteral81       = NULL;
    NumericLiteral82       = NULL;

    {
        {
            //  .//EmersonTree.g:1904:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt95;

            alt95=5;

            switch ( LA(1) ) 
            {
            case 210:
            	{
            		alt95=1;
            	}
                break;
            case 211:
            	{
            		alt95=2;
            	}
                break;
            case 212:
            	{
            		alt95=3;
            	}
                break;
            case StringLiteral:
            	{
            		alt95=4;
            	}
                break;
            case NumericLiteral:
            	{
            		alt95=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 95;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;
            }

            switch (alt95) 
            {
        	case 1:
        	    // .//EmersonTree.g:1904:4: 'null'
        	    {
        	         MATCHT(210, &FOLLOW_210_in_literal11394); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("null");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1905:4: 'true'
        	    {
        	         MATCHT(211, &FOLLOW_211_in_literal11401); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("true"); 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1906:4: 'false'
        	    {
        	         MATCHT(212, &FOLLOW_212_in_literal11408); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP("false");
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1907:4: StringLiteral
        	    {
        	        StringLiteral81 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_literal11414); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                          const char* input = (const char*)(StringLiteral81->getText(StringLiteral81))->chars;
        	                          int len = (StringLiteral81->getText(StringLiteral81))->len;
        	                          char firstChar = *input;
        	                          if(firstChar == '@')
        	                          {
        	                            std::string str_input(input,len);
        	                            str_input = str_input.substr(1, str_input.size() -2);
        	                            std::string escaped = emerson_escapeMultiline(str_input.c_str());
        	                            APP("\"");
        	                            APP(escaped.c_str());
        	                            APP("\"");
        	                          }
        	                          else APP((const char*)(StringLiteral81->getText(StringLiteral81))->chars);
        	                    
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1923:4: NumericLiteral
        	    {
        	        NumericLiteral82 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_literal11431); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((NumericLiteral82->getLine(NumericLiteral82))); APP((const char*)(NumericLiteral82->getText(NumericLiteral82))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end literal */

// $ANTLR start synpred26_EmersonTree
static void synpred26_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:306:14: ( statement )
    // .//EmersonTree.g:306:14: statement
    {
        FOLLOWPUSH(FOLLOW_statement_in_synpred26_EmersonTree1580);
        statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred26_EmersonTreeEx: ;

}
// $ANTLR end synpred26_EmersonTree

// $ANTLR start synpred43_EmersonTree
static void synpred43_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:533:7: ( ^( CASE ternaryExpression ( statementList )? ( caseClause )? ) )
    // .//EmersonTree.g:533:7: ^( CASE ternaryExpression ( statementList )? ( caseClause )? )
    {
         MATCHT(CASE, &FOLLOW_CASE_in_synpred43_EmersonTree2828); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ternaryExpression_in_synpred43_EmersonTree2848);
        ternaryExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//EmersonTree.g:541:9: ( statementList )?
        {
            int alt97=2;
            {
                int LA97_0 = LA(1);
                if ( (LA97_0 == SLIST) ) 
                {
                    alt97=1;
                }
            }
            switch (alt97) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: statementList
        	    {
        	        FOLLOWPUSH(FOLLOW_statementList_in_synpred43_EmersonTree2868);
        	        statementList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred43_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//EmersonTree.g:542:9: ( caseClause )?
        {
            int alt98=2;
            {
                int LA98_0 = LA(1);
                if ( (LA98_0 == CASE) ) 
                {
                    alt98=1;
                }
            }
            switch (alt98) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: caseClause
        	    {
        	        FOLLOWPUSH(FOLLOW_caseClause_in_synpred43_EmersonTree2879);
        	        caseClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred43_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred43_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred43_EmersonTreeEx: ;

}
// $ANTLR end synpred43_EmersonTree

// $ANTLR start synpred51_EmersonTree
static void synpred51_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:660:3: ( memberExpression )
    // .//EmersonTree.g:660:3: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred51_EmersonTree3494);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred51_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred51_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred51_EmersonTreeEx: ;

}
// $ANTLR end synpred51_EmersonTree

// $ANTLR start synpred70_EmersonTree
static void synpred70_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:802:4: ( callExpression )
    // .//EmersonTree.g:802:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred70_EmersonTree4725);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred70_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred70_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred70_EmersonTreeEx: ;

}
// $ANTLR end synpred70_EmersonTree

// $ANTLR start synpred71_EmersonTree
static void synpred71_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:817:4: ( memberExpression )
    // .//EmersonTree.g:817:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred71_EmersonTree4775);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred71_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred71_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred71_EmersonTreeEx: ;

}
// $ANTLR end synpred71_EmersonTree

// $ANTLR start synpred74_EmersonTree
static void synpred74_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:870:11: ( ^( DOT memberExpression propertyReferenceSuffix1 ) )
    // .//EmersonTree.g:870:11: ^( DOT memberExpression propertyReferenceSuffix1 )
    {
         MATCHT(DOT, &FOLLOW_DOT_in_synpred74_EmersonTree5031); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred74_EmersonTree5045);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred74_EmersonTree5073);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred74_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred74_EmersonTreeEx: ;

}
// $ANTLR end synpred74_EmersonTree

// $ANTLR start synpred78_EmersonTree
static void synpred78_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:945:11: ( ^( CALL memberExpression arguments ) )
    // .//EmersonTree.g:945:11: ^( CALL memberExpression arguments )
    {
         MATCHT(CALL, &FOLLOW_CALL_in_synpred78_EmersonTree5455); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred78_EmersonTree5469);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_arguments_in_synpred78_EmersonTree5497);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred78_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred78_EmersonTreeEx: ;

}
// $ANTLR end synpred78_EmersonTree

// $ANTLR start synpred83_EmersonTree
static void synpred83_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1018:5: ( ^( ARGLIST ) )
    // .//EmersonTree.g:1018:5: ^( ARGLIST )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred83_EmersonTree5860); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred83_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred83_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred83_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred83_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred83_EmersonTreeEx: ;

}
// $ANTLR end synpred83_EmersonTree

// $ANTLR start synpred84_EmersonTree
static void synpred84_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1019:5: ( ^( ARGLIST ( expression ) ) )
    // .//EmersonTree.g:1019:5: ^( ARGLIST ( expression ) )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred84_EmersonTree5870); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred84_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred84_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1021:8: ( expression )
        // .//EmersonTree.g:1022:9: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_synpred84_EmersonTree5899);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred84_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred84_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred84_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred84_EmersonTreeEx: ;

}
// $ANTLR end synpred84_EmersonTree

// $ANTLR start synpred146_EmersonTree
static void synpred146_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1583:11: ( postfixExpression )
    // .//EmersonTree.g:1583:11: postfixExpression
    {
        FOLLOWPUSH(FOLLOW_postfixExpression_in_synpred146_EmersonTree9229);
        postfixExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred146_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred146_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred146_EmersonTreeEx: ;

}
// $ANTLR end synpred146_EmersonTree

// $ANTLR start synpred167_EmersonTree
static void synpred167_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1682:11: ( ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) ) )
    // .//EmersonTree.g:1682:11: ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) )
    {
         MATCHT(QUATERNION_AXISANGLE, &FOLLOW_QUATERNION_AXISANGLE_in_synpred167_EmersonTree10040); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred167_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred167_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1687:13: (exp1= vectorLiteralField )
        // .//EmersonTree.g:1687:14: exp1= vectorLiteralField
        {
            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10071);
            vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred167_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

        // .//EmersonTree.g:1692:13: (exp2= vectorLiteralField )
        // .//EmersonTree.g:1692:14: exp2= vectorLiteralField
        {
            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred167_EmersonTree10118);
            vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred167_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred167_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred167_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred167_EmersonTreeEx: ;

}
// $ANTLR end synpred167_EmersonTree

// $ANTLR start synpred168_EmersonTree
static void synpred168_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1730:11: ( additiveExpression )
    // .//EmersonTree.g:1730:11: additiveExpression
    {
        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred168_EmersonTree10440);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred168_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred168_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred168_EmersonTreeEx: ;

}
// $ANTLR end synpred168_EmersonTree

// $ANTLR start synpred169_EmersonTree
static void synpred169_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1732:11: ( NumericLiteral )
    // .//EmersonTree.g:1732:11: NumericLiteral
    {
         MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_synpred169_EmersonTree10453); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred169_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred169_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred169_EmersonTreeEx: ;

}
// $ANTLR end synpred169_EmersonTree

// $ANTLR start synpred170_EmersonTree
static void synpred170_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1733:11: ( callExpression )
    // .//EmersonTree.g:1733:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred170_EmersonTree10467);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred170_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred170_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred170_EmersonTreeEx: ;

}
// $ANTLR end synpred170_EmersonTree

// $ANTLR start synpred171_EmersonTree
static void synpred171_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1759:5: ( ^( ARRAY_LITERAL ) )
    // .//EmersonTree.g:1759:5: ^( ARRAY_LITERAL )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred171_EmersonTree10607); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred171_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred171_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred171_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred171_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred171_EmersonTreeEx: ;

}
// $ANTLR end synpred171_EmersonTree

// $ANTLR start synpred172_EmersonTree
static void synpred172_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1760:5: ( ^( ARRAY_LITERAL ( expression ) ) )
    // .//EmersonTree.g:1760:5: ^( ARRAY_LITERAL ( expression ) )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred172_EmersonTree10617); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1762:8: ( expression )
        // .//EmersonTree.g:1762:9: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_synpred172_EmersonTree10636);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred172_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred172_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred172_EmersonTreeEx: ;

}
// $ANTLR end synpred172_EmersonTree

// $ANTLR start synpred174_EmersonTree
static void synpred174_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1785:4: ( ^( OBJ_LITERAL ) )
    // .//EmersonTree.g:1785:4: ^( OBJ_LITERAL )
    {
         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_synpred174_EmersonTree10739); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred174_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred174_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred174_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred174_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred174_EmersonTreeEx: ;

}
// $ANTLR end synpred174_EmersonTree

// $ANTLR start synpred175_EmersonTree
static void synpred175_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1786:4: ( ^( OBJ_LITERAL ( propertyNameAndValue ) ) )
    // .//EmersonTree.g:1786:4: ^( OBJ_LITERAL ( propertyNameAndValue ) )
    {
         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_synpred175_EmersonTree10749); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1789:13: ( propertyNameAndValue )
        // .//EmersonTree.g:1789:14: propertyNameAndValue
        {
            FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred175_EmersonTree10786);
            propertyNameAndValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred175_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred175_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred175_EmersonTreeEx: ;

}
// $ANTLR end synpred175_EmersonTree

// $ANTLR start synpred177_EmersonTree
static void synpred177_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1817:4: ( ^( PATTERN_LITERAL ) )
    // .//EmersonTree.g:1817:4: ^( PATTERN_LITERAL )
    {
         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_synpred177_EmersonTree10902); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred177_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred177_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred177_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred177_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred177_EmersonTreeEx: ;

}
// $ANTLR end synpred177_EmersonTree

// $ANTLR start synpred178_EmersonTree
static void synpred178_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1818:4: ( ^( PATTERN_LITERAL nameValueProto ) )
    // .//EmersonTree.g:1818:4: ^( PATTERN_LITERAL nameValueProto )
    {
         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_synpred178_EmersonTree10912); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_nameValueProto_in_synpred178_EmersonTree10921);
        nameValueProto(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred178_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred178_EmersonTreeEx: ;

}
// $ANTLR end synpred178_EmersonTree
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred78_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred78_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred51_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred51_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred170_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred170_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred74_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred74_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred178_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred178_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred174_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred174_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred43_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred43_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred71_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred71_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred177_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred177_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred169_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred169_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred167_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred167_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred172_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred172_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred84_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred84_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred70_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred70_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred26_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred171_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred171_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred83_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred83_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred146_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred146_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred175_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred175_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred168_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred168_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */

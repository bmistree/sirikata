/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//EmersonTree.g
 *     -                            On : 2011-08-29 14:41:19
 *     -           for the tree parser : EmersonTreeTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */


    #include <stdlib.h>
    #include <string.h>
    #include <antlr3.h>
    #include "Util.h"
    
    #define APP(s) \
        { \
            const char* str = s; \
            int len = strlen(str); \
            int numNewlines = 0; \
            for (int i = 0; i < len; i++) \
                if (str[i] == '\n') \
                    numNewlines++; \
            program_string->append(program_string, str); \
            if (capture) \
                capture_string->append(capture_string, str); \
            current_line += numNewlines; \
        }

    #define START_CAPTURE() \
        capture_string->set(capture_string, ""); \
        capture = true;

    #define STOP_CAPTURE() capture = false;
    
    #define LINE_DEBUG 0
    
    #define LINE(num) \
        { \
            if (lineIndex >= linesSize) { \
                linesSize *= 2; \
                emersonLines = (int*)realloc(emersonLines, linesSize * sizeof(int)); \
                jsLines = (int*)realloc(jsLines, linesSize * sizeof(int)); \
            } \
            if (LINE_DEBUG) { \
                char buffer[128]; \
                sprintf(buffer, "/* em line %d, js line %d */", num, current_line); \
                program_string->append(program_string, buffer); \
            } \
            emersonLines[lineIndex] = num; \
            jsLines[lineIndex] = current_line; \
            lineIndex++; \
        }
        
    #define CHECK_RESOURCES()                 \
    {                                         \
    APP("\nif ( ! __checkResources8_8_3_1__() )\n");  \
    APP("{ \nthrow new Error('__resource_error__'); \n}\n");   \
    }


    #define CHECK_KILL()\
    { \
    APP("\nif ( system.__isKilling() )\n");  \
    APP("{ \nthrow new Error('__killing__'); \n}\n");   \
    }


    
    #ifndef __SIRIKATA_INSIDE_WHEN_PRED__
    #define __SIRIKATA_INSIDE_WHEN_PRED__
    static bool insideWhenPred = false;
    #endif

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonTree.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonTree_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonTree_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonTree_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpression scope set 
 */
static pEmersonTree_assignmentExpression_SCOPE   pEmersonTree_assignmentExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpression_SCOPE
pEmersonTree_assignmentExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionStack->size(ctx->pEmersonTree_assignmentExpressionStack) > ctx->pEmersonTree_assignmentExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE)ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionStack->push(ctx->pEmersonTree_assignmentExpressionStack, newAttributes, (void (*)(void *))assignmentExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpressionNoIn scope set 
 */
static pEmersonTree_assignmentExpressionNoIn_SCOPE   pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpressionNoIn_SCOPE
pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionNoInStack->size(ctx->pEmersonTree_assignmentExpressionNoInStack) > ctx->pEmersonTree_assignmentExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE)ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionNoInStack->push(ctx->pEmersonTree_assignmentExpressionNoInStack, newAttributes, (void (*)(void *))assignmentExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpression scope set 
 */
static pEmersonTree_relationalExpression_SCOPE   pEmersonTree_relationalExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpression_SCOPE
pEmersonTree_relationalExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionStack->size(ctx->pEmersonTree_relationalExpressionStack) > ctx->pEmersonTree_relationalExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE)ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionStack->push(ctx->pEmersonTree_relationalExpressionStack, newAttributes, (void (*)(void *))relationalExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpressionNoIn scope set 
 */
static pEmersonTree_relationalExpressionNoIn_SCOPE   pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpressionNoIn_SCOPE
pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionNoInStack->size(ctx->pEmersonTree_relationalExpressionNoInStack) > ctx->pEmersonTree_relationalExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE)ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionNoInStack->push(ctx->pEmersonTree_relationalExpressionNoInStack, newAttributes, (void (*)(void *))relationalExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonTreeTokenNames[211+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "QUATERNION",
        (pANTLR3_UINT8) "QUATERNION_AXISANGLE",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_BLOCK",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "EVAL",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "TERNARYOP_NO_IN",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "PATTERN_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "BLANK_NAME_VAL_PROT",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "EXPR",
        (pANTLR3_UINT8) "EXPR_NO_IN",
        (pANTLR3_UINT8) "VERBATIM",
        (pANTLR3_UINT8) "SEND_CONSTRUCT",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT",
        (pANTLR3_UINT8) "SEND_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "VerbatimStringCharacter",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'#'",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'eval'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionStack
 */
void
pEmersonTree_assignmentExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpression)->free != NULL)
	{
        SCOPE_TOP(assignmentExpression)->free(SCOPE_TOP(assignmentExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit--;
    SCOPE_TOP(assignmentExpression) = (pEmersonTree_assignmentExpression_SCOPE)(ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionNoInStack
 */
void
pEmersonTree_assignmentExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(assignmentExpressionNoIn)->free(SCOPE_TOP(assignmentExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit--;
    SCOPE_TOP(assignmentExpressionNoIn) = (pEmersonTree_assignmentExpressionNoIn_SCOPE)(ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionStack
 */
void
pEmersonTree_relationalExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpression)->free != NULL)
	{
        SCOPE_TOP(relationalExpression)->free(SCOPE_TOP(relationalExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionStack_limit--;
    SCOPE_TOP(relationalExpression) = (pEmersonTree_relationalExpression_SCOPE)(ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionNoInStack
 */
void
pEmersonTree_relationalExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(relationalExpressionNoIn)->free(SCOPE_TOP(relationalExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit--;
    SCOPE_TOP(relationalExpressionNoIn) = (pEmersonTree_relationalExpressionNoIn_SCOPE)(ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit - 1));
}


// Forward declare the locally static matching functions we have generated.
//
static EmersonTree_program_return	program    (pEmersonTree ctx);
static void	sourceElements    (pEmersonTree ctx);
static void	sourceElement    (pEmersonTree ctx);
static void	functionDeclaration    (pEmersonTree ctx);
static void	functionExpression    (pEmersonTree ctx);
static void	formalParameterList    (pEmersonTree ctx);
static void	functionBody    (pEmersonTree ctx);
static void	statement    (pEmersonTree ctx);
static void	noOpStatement    (pEmersonTree ctx);
static void	statementBlock    (pEmersonTree ctx);
static void	statementList    (pEmersonTree ctx);
static void	variableStatement    (pEmersonTree ctx);
static void	variableDeclarationList    (pEmersonTree ctx);
static void	variableDeclarationListNoIn    (pEmersonTree ctx);
static void	variableDeclaration    (pEmersonTree ctx);
static void	variableDeclarationNoIn    (pEmersonTree ctx);
static void	initialiser    (pEmersonTree ctx);
static void	initialiserNoIn    (pEmersonTree ctx);
static void	expressionStatement    (pEmersonTree ctx);
static void	ifStatement    (pEmersonTree ctx);
static void	iterationStatement    (pEmersonTree ctx);
static void	doWhileStatement    (pEmersonTree ctx);
static void	whileStatement    (pEmersonTree ctx);
static void	forStatement    (pEmersonTree ctx);
static void	forStatementInitialiserPart    (pEmersonTree ctx);
static void	forInStatement    (pEmersonTree ctx);
static void	forInStatementInitialiserPart    (pEmersonTree ctx);
static void	continueStatement    (pEmersonTree ctx);
static void	breakStatement    (pEmersonTree ctx);
static void	returnStatement    (pEmersonTree ctx);
static void	withStatement    (pEmersonTree ctx);
static void	switchStatement    (pEmersonTree ctx);
static void	caseBlock    (pEmersonTree ctx);
static void	caseClause    (pEmersonTree ctx);
static void	caseClauseSeenDefault    (pEmersonTree ctx);
static void	defaultClause    (pEmersonTree ctx);
static void	throwStatement    (pEmersonTree ctx);
static void	tryStatement    (pEmersonTree ctx);
static void	catchFinallyBlock    (pEmersonTree ctx);
static void	catchBlock    (pEmersonTree ctx);
static void	finallyBlock    (pEmersonTree ctx);
static void	memAndCallExpression    (pEmersonTree ctx);
static void	catchClause    (pEmersonTree ctx);
static void	finallyClause    (pEmersonTree ctx);
static void	expression    (pEmersonTree ctx);
static void	expressionNoIn    (pEmersonTree ctx);
static void	assignmentExpression    (pEmersonTree ctx);
static void	assignmentExpressionNoIn    (pEmersonTree ctx);
static void	leftHandSideExpression    (pEmersonTree ctx);
static void	newExpression    (pEmersonTree ctx);
static void	propertyReferenceSuffix1    (pEmersonTree ctx);
static void	indexSuffix1    (pEmersonTree ctx);
static void	memberExpression    (pEmersonTree ctx);
static void	memberExpressionSuffix    (pEmersonTree ctx);
static void	callExpression    (pEmersonTree ctx);
static void	callExpressionSuffix    (pEmersonTree ctx);
static void	arguments    (pEmersonTree ctx);
static void	indexSuffix    (pEmersonTree ctx);
static void	propertyReferenceSuffix    (pEmersonTree ctx);
static void	assignmentOperator    (pEmersonTree ctx);
static void	conditionalExpressionNoIn    (pEmersonTree ctx);
static void	conditionalExpression    (pEmersonTree ctx);
static void	msgRecvConstruct    (pEmersonTree ctx);
static void	msgConstruct    (pEmersonTree ctx);
static void	msgSenderConstruct    (pEmersonTree ctx);
static void	ternaryExpression    (pEmersonTree ctx);
static void	msgRecvConstructNoIn    (pEmersonTree ctx);
static void	msgConstructNoIn    (pEmersonTree ctx);
static void	msgSenderConstructNoIn    (pEmersonTree ctx);
static void	ternaryExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpression    (pEmersonTree ctx);
static void	logicalORExpression    (pEmersonTree ctx);
static void	logicalORExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseORExpression    (pEmersonTree ctx);
static void	bitwiseORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseXORExpression    (pEmersonTree ctx);
static void	bitwiseXORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseANDExpression    (pEmersonTree ctx);
static void	bitwiseANDExpressionNoIn    (pEmersonTree ctx);
static void	equalityExpression    (pEmersonTree ctx);
static void	equalityExpressionNoIn    (pEmersonTree ctx);
static void	relationalOps    (pEmersonTree ctx);
static void	relationalExpression    (pEmersonTree ctx);
static void	relationalOpsNoIn    (pEmersonTree ctx);
static void	relationalExpressionNoIn    (pEmersonTree ctx);
static void	additiveExpression    (pEmersonTree ctx);
static void	multiplicativeExpression    (pEmersonTree ctx);
static void	unaryOps    (pEmersonTree ctx);
static void	unaryExpression    (pEmersonTree ctx);
static void	postfixExpression    (pEmersonTree ctx);
static void	primaryExpression    (pEmersonTree ctx);
static void	vectorLiteral    (pEmersonTree ctx);
static void	quaternionLiteral    (pEmersonTree ctx);
static void	vectorLiteralField    (pEmersonTree ctx);
static void	dollarExpression    (pEmersonTree ctx);
static void	arrayLiteral    (pEmersonTree ctx);
static void	objectLiteral    (pEmersonTree ctx);
static void	patternLiteral    (pEmersonTree ctx);
static void	nameValueProto    (pEmersonTree ctx);
static void	propertyNameAndValue    (pEmersonTree ctx);
static void	propertyName    (pEmersonTree ctx);
static void	literal    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred1_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred2_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred3_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred9_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred10_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred11_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred12_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred13_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred14_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred15_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred16_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred17_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred18_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred19_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred20_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred21_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred22_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred27_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred28_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred44_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred52_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred73_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred74_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred77_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred81_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred86_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred87_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred150_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred172_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred173_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred174_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred175_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred176_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred177_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred179_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred180_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred182_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred183_EmersonTree    (pEmersonTree ctx);
static void	EmersonTreeFree(pEmersonTree ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//EmersonTree.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonTreeNewSSD(instream, NULL);
}

/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonTree ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonTree) ANTLR3_CALLOC(1, sizeof(EmersonTree));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonTree.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our EmersonTree interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->caseClauseSeenDefault	= caseClauseSeenDefault;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->msgRecvConstruct	= msgRecvConstruct;
    ctx->msgConstruct	= msgConstruct;
    ctx->msgSenderConstruct	= msgSenderConstruct;
    ctx->ternaryExpression	= ternaryExpression;
    ctx->msgRecvConstructNoIn	= msgRecvConstructNoIn;
    ctx->msgConstructNoIn	= msgConstructNoIn;
    ctx->msgSenderConstructNoIn	= msgSenderConstructNoIn;
    ctx->ternaryExpressionNoIn	= ternaryExpressionNoIn;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->additiveExpression	= additiveExpression;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->quaternionLiteral	= quaternionLiteral;
    ctx->vectorLiteralField	= vectorLiteralField;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->patternLiteral	= patternLiteral;
    ctx->nameValueProto	= nameValueProto;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred1_EmersonTree	= synpred1_EmersonTree;
    ctx->synpred2_EmersonTree	= synpred2_EmersonTree;
    ctx->synpred3_EmersonTree	= synpred3_EmersonTree;
    ctx->synpred9_EmersonTree	= synpred9_EmersonTree;
    ctx->synpred10_EmersonTree	= synpred10_EmersonTree;
    ctx->synpred11_EmersonTree	= synpred11_EmersonTree;
    ctx->synpred12_EmersonTree	= synpred12_EmersonTree;
    ctx->synpred13_EmersonTree	= synpred13_EmersonTree;
    ctx->synpred14_EmersonTree	= synpred14_EmersonTree;
    ctx->synpred15_EmersonTree	= synpred15_EmersonTree;
    ctx->synpred16_EmersonTree	= synpred16_EmersonTree;
    ctx->synpred17_EmersonTree	= synpred17_EmersonTree;
    ctx->synpred18_EmersonTree	= synpred18_EmersonTree;
    ctx->synpred19_EmersonTree	= synpred19_EmersonTree;
    ctx->synpred20_EmersonTree	= synpred20_EmersonTree;
    ctx->synpred21_EmersonTree	= synpred21_EmersonTree;
    ctx->synpred22_EmersonTree	= synpred22_EmersonTree;
    ctx->synpred27_EmersonTree	= synpred27_EmersonTree;
    ctx->synpred28_EmersonTree	= synpred28_EmersonTree;
    ctx->synpred44_EmersonTree	= synpred44_EmersonTree;
    ctx->synpred52_EmersonTree	= synpred52_EmersonTree;
    ctx->synpred73_EmersonTree	= synpred73_EmersonTree;
    ctx->synpred74_EmersonTree	= synpred74_EmersonTree;
    ctx->synpred77_EmersonTree	= synpred77_EmersonTree;
    ctx->synpred81_EmersonTree	= synpred81_EmersonTree;
    ctx->synpred86_EmersonTree	= synpred86_EmersonTree;
    ctx->synpred87_EmersonTree	= synpred87_EmersonTree;
    ctx->synpred150_EmersonTree	= synpred150_EmersonTree;
    ctx->synpred172_EmersonTree	= synpred172_EmersonTree;
    ctx->synpred173_EmersonTree	= synpred173_EmersonTree;
    ctx->synpred174_EmersonTree	= synpred174_EmersonTree;
    ctx->synpred175_EmersonTree	= synpred175_EmersonTree;
    ctx->synpred176_EmersonTree	= synpred176_EmersonTree;
    ctx->synpred177_EmersonTree	= synpred177_EmersonTree;
    ctx->synpred179_EmersonTree	= synpred179_EmersonTree;
    ctx->synpred180_EmersonTree	= synpred180_EmersonTree;
    ctx->synpred182_EmersonTree	= synpred182_EmersonTree;
    ctx->synpred183_EmersonTree	= synpred183_EmersonTree;
    ctx->free			= EmersonTreeFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionPush     = pEmersonTree_assignmentExpressionPush;
    ctx->pEmersonTree_assignmentExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInPush     = pEmersonTree_assignmentExpressionNoInPush;
    ctx->pEmersonTree_assignmentExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionNoInTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionPush     = pEmersonTree_relationalExpressionPush;
    ctx->pEmersonTree_relationalExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInPush     = pEmersonTree_relationalExpressionNoInPush;
    ctx->pEmersonTree_relationalExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionNoInTop      = NULL;


        
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonTreeTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonTreeFree(pEmersonTree ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionStack->free(ctx->pEmersonTree_assignmentExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInStack->free(ctx->pEmersonTree_assignmentExpressionNoInStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionStack->free(ctx->pEmersonTree_relationalExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInStack->free(ctx->pEmersonTree_relationalExpressionNoInStack);

    
        
	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonTreeTokenNames; 
}


        pANTLR3_STRING program_string;
        pANTLR3_STRING capture_string;
        int current_line;
        int* emersonLines;
        int* jsLines;
        int linesSize;
        int lineIndex;
        bool capture;
        extern pEmersonTree _treeParser;
        

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROG_in_program80  */
static	ANTLR3_BITWORD FOLLOW_PROG_in_program80_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROG_in_program80	= { FOLLOW_PROG_in_program80_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program125  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program125	= { FOLLOW_sourceElements_in_program125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements186  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements186_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE02), ANTLR3_UINT64_LIT(0x0000020001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements186	= { FOLLOW_sourceElement_in_sourceElements186_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement209  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement209	= { FOLLOW_functionDeclaration_in_sourceElement209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement217  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement217	= { FOLLOW_statement_in_sourceElement217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_DECL_in_functionDeclaration236  */
static	ANTLR3_BITWORD FOLLOW_FUNC_DECL_in_functionDeclaration236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_DECL_in_functionDeclaration236	= { FOLLOW_FUNC_DECL_in_functionDeclaration236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration268  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration268_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE00), ANTLR3_UINT64_LIT(0x0000020021800000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration268	= { FOLLOW_Identifier_in_functionDeclaration268_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration302  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration302_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE00), ANTLR3_UINT64_LIT(0x0000020021800000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration302	= { FOLLOW_formalParameterList_in_functionDeclaration302_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration367  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration367	= { FOLLOW_functionBody_in_functionDeclaration367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_EXPR_in_functionExpression411  */
static	ANTLR3_BITWORD FOLLOW_FUNC_EXPR_in_functionExpression411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_EXPR_in_functionExpression411	= { FOLLOW_FUNC_EXPR_in_functionExpression411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression455  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression455_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE00), ANTLR3_UINT64_LIT(0x0000020021800000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression455	= { FOLLOW_Identifier_in_functionExpression455_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression522  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression522_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE00), ANTLR3_UINT64_LIT(0x0000020021800000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression522	= { FOLLOW_formalParameterList_in_functionExpression522_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression583  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression583	= { FOLLOW_functionBody_in_functionExpression583_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_PARAMS_in_formalParameterList631  */
static	ANTLR3_BITWORD FOLLOW_FUNC_PARAMS_in_formalParameterList631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_PARAMS_in_formalParameterList631	= { FOLLOW_FUNC_PARAMS_in_formalParameterList631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList652  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList652	= { FOLLOW_Identifier_in_formalParameterList652_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList722  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList722	= { FOLLOW_Identifier_in_formalParameterList722_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody752  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody752	= { FOLLOW_sourceElements_in_functionBody752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EMPTY_FUNC_BODY_in_functionBody757  */
static	ANTLR3_BITWORD FOLLOW_EMPTY_FUNC_BODY_in_functionBody757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EMPTY_FUNC_BODY_in_functionBody757	= { FOLLOW_EMPTY_FUNC_BODY_in_functionBody757_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement773  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement773	= { FOLLOW_noOpStatement_in_statement773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement781  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement781	= { FOLLOW_switchStatement_in_statement781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement789  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement789	= { FOLLOW_statementBlock_in_statement789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement797  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement797	= { FOLLOW_variableStatement_in_statement797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement805  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement805	= { FOLLOW_expressionStatement_in_statement805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement813  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement813	= { FOLLOW_ifStatement_in_statement813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement821  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement821	= { FOLLOW_iterationStatement_in_statement821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement829  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement829	= { FOLLOW_continueStatement_in_statement829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement837  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement837	= { FOLLOW_breakStatement_in_statement837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement845  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement845	= { FOLLOW_returnStatement_in_statement845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement853  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement853	= { FOLLOW_withStatement_in_statement853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement861  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement861	= { FOLLOW_throwStatement_in_statement861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement869  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement869	= { FOLLOW_tryStatement_in_statement869_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOOP_in_noOpStatement894  */
static	ANTLR3_BITWORD FOLLOW_NOOP_in_noOpStatement894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOOP_in_noOpStatement894	= { FOLLOW_NOOP_in_noOpStatement894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock950  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock950	= { FOLLOW_statementList_in_statementBlock950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLIST_in_statementList989  */
static	ANTLR3_BITWORD FOLLOW_SLIST_in_statementList989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SLIST_in_statementList989	= { FOLLOW_SLIST_in_statementList989_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1004  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1004_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000020001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1004	= { FOLLOW_statement_in_statementList1004_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1050  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1050_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000020001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1050	= { FOLLOW_statement_in_statementList1050_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_variableStatement1125  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_variableStatement1125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_variableStatement1125	= { FOLLOW_VARLIST_in_variableStatement1125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1153  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1153	= { FOLLOW_variableDeclarationList_in_variableStatement1153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1173  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1173	= { FOLLOW_variableDeclaration_in_variableDeclarationList1173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1213  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1213	= { FOLLOW_variableDeclaration_in_variableDeclarationList1213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1236  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1236	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclaration1263  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclaration1263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclaration1263	= { FOLLOW_VAR_in_variableDeclaration1263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1277  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1277	= { FOLLOW_Identifier_in_variableDeclaration1277_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1355  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1355	= { FOLLOW_initialiser_in_variableDeclaration1355_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclarationNoIn1415  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclarationNoIn1415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclarationNoIn1415	= { FOLLOW_VAR_in_variableDeclarationNoIn1415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1434  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1434	= { FOLLOW_Identifier_in_variableDeclarationNoIn1434_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1512  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1512	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_initialiser1555  */
static	ANTLR3_BITWORD FOLLOW_expression_in_initialiser1555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_initialiser1555	= { FOLLOW_expression_in_initialiser1555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_initialiserNoIn1568  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_initialiserNoIn1568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_initialiserNoIn1568	= { FOLLOW_expressionNoIn_in_initialiserNoIn1568_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1582  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1582	= { FOLLOW_expression_in_expressionStatement1582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IF_in_ifStatement1595  */
static	ANTLR3_BITWORD FOLLOW_IF_in_ifStatement1595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IF_in_ifStatement1595	= { FOLLOW_IF_in_ifStatement1595_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1624  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1624_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000020001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1624	= { FOLLOW_expression_in_ifStatement1624_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1654  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1654_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000020001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1654	= { FOLLOW_statement_in_ifStatement1654_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1748  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1748_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1748	= { FOLLOW_statement_in_ifStatement1748_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1803  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1803	= { FOLLOW_doWhileStatement_in_iterationStatement1803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1808  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1808	= { FOLLOW_whileStatement_in_iterationStatement1808_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1813  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1813	= { FOLLOW_forStatement_in_iterationStatement1813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1818  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1818	= { FOLLOW_forInStatement_in_iterationStatement1818_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DO_in_doWhileStatement1845  */
static	ANTLR3_BITWORD FOLLOW_DO_in_doWhileStatement1845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DO_in_doWhileStatement1845	= { FOLLOW_DO_in_doWhileStatement1845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1873  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1873	= { FOLLOW_statement_in_doWhileStatement1873_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1901  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1901	= { FOLLOW_expression_in_doWhileStatement1901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHILE_in_whileStatement1952  */
static	ANTLR3_BITWORD FOLLOW_WHILE_in_whileStatement1952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHILE_in_whileStatement1952	= { FOLLOW_WHILE_in_whileStatement1952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1980  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1980_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000020001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1980	= { FOLLOW_expression_in_whileStatement1980_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement2009  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement2009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement2009	= { FOLLOW_statement_in_whileStatement2009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FOR_in_forStatement2059  */
static	ANTLR3_BITWORD FOLLOW_FOR_in_forStatement2059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FOR_in_forStatement2059	= { FOLLOW_FOR_in_forStatement2059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORINIT_in_forStatement2090  */
static	ANTLR3_BITWORD FOLLOW_FORINIT_in_forStatement2090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORINIT_in_forStatement2090	= { FOLLOW_FORINIT_in_forStatement2090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement2092  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement2092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement2092	= { FOLLOW_forStatementInitialiserPart_in_forStatement2092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORCOND_in_forStatement2125  */
static	ANTLR3_BITWORD FOLLOW_FORCOND_in_forStatement2125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORCOND_in_forStatement2125	= { FOLLOW_FORCOND_in_forStatement2125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2127  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2127	= { FOLLOW_expression_in_forStatement2127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORITER_in_forStatement2161  */
static	ANTLR3_BITWORD FOLLOW_FORITER_in_forStatement2161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORITER_in_forStatement2161	= { FOLLOW_FORITER_in_forStatement2161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2163  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2163	= { FOLLOW_expression_in_forStatement2163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement2196  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement2196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement2196	= { FOLLOW_statement_in_forStatement2196_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart2235  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart2235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart2235	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart2235_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_forStatementInitialiserPart2244  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_forStatementInitialiserPart2244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_forStatementInitialiserPart2244	= { FOLLOW_VARLIST_in_forStatementInitialiserPart2244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2246  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2246	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORIN_in_forInStatement2272  */
static	ANTLR3_BITWORD FOLLOW_FORIN_in_forInStatement2272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORIN_in_forInStatement2272	= { FOLLOW_FORIN_in_forInStatement2272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement2294  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement2294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement2294	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement2294_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement2315  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement2315_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000020001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement2315	= { FOLLOW_expression_in_forInStatement2315_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement2336  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement2336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement2336	= { FOLLOW_statement_in_forInStatement2336_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2368  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2368	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2368_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_forInStatementInitialiserPart2374  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_forInStatementInitialiserPart2374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_forInStatementInitialiserPart2374	= { FOLLOW_VAR_in_forInStatementInitialiserPart2374_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2376  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2376	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTINUE_in_continueStatement2401  */
static	ANTLR3_BITWORD FOLLOW_CONTINUE_in_continueStatement2401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTINUE_in_continueStatement2401	= { FOLLOW_CONTINUE_in_continueStatement2401_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2437  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2437	= { FOLLOW_Identifier_in_continueStatement2437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BREAK_in_breakStatement2494  */
static	ANTLR3_BITWORD FOLLOW_BREAK_in_breakStatement2494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BREAK_in_breakStatement2494	= { FOLLOW_BREAK_in_breakStatement2494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2528  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2528	= { FOLLOW_Identifier_in_breakStatement2528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_returnStatement2588  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_returnStatement2588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_returnStatement2588	= { FOLLOW_RETURN_in_returnStatement2588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2625  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2625	= { FOLLOW_expression_in_returnStatement2625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WITH_in_withStatement2661  */
static	ANTLR3_BITWORD FOLLOW_WITH_in_withStatement2661_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WITH_in_withStatement2661	= { FOLLOW_WITH_in_withStatement2661_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2687  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2687_bits[]	= { ANTLR3_UINT64_LIT(0x0000011A01F1CE08), ANTLR3_UINT64_LIT(0x0000020001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2687	= { FOLLOW_expression_in_withStatement2687_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2723  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2723_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2723	= { FOLLOW_statement_in_withStatement2723_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SWITCH_in_switchStatement2759  */
static	ANTLR3_BITWORD FOLLOW_SWITCH_in_switchStatement2759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SWITCH_in_switchStatement2759	= { FOLLOW_SWITCH_in_switchStatement2759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2780  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2780_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2780	= { FOLLOW_expression_in_switchStatement2780_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2801  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2801	= { FOLLOW_caseBlock_in_switchStatement2801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_BLOCK_in_caseBlock2837  */
static	ANTLR3_BITWORD FOLLOW_CASE_BLOCK_in_caseBlock2837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_BLOCK_in_caseBlock2837	= { FOLLOW_CASE_BLOCK_in_caseBlock2837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2847  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2847	= { FOLLOW_caseClause_in_caseBlock2847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_BLOCK_in_caseBlock2863  */
static	ANTLR3_BITWORD FOLLOW_CASE_BLOCK_in_caseBlock2863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_BLOCK_in_caseBlock2863	= { FOLLOW_CASE_BLOCK_in_caseBlock2863_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2873  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2873	= { FOLLOW_defaultClause_in_caseBlock2873_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2904  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2904	= { FOLLOW_CASE_in_caseClause2904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2924  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2924	= { FOLLOW_ternaryExpression_in_caseClause2924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2944  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2944_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2944	= { FOLLOW_statementList_in_caseClause2944_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseClause2955  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseClause2955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseClause2955	= { FOLLOW_caseClause_in_caseClause2955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2976  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2976	= { FOLLOW_CASE_in_caseClause2976_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2996  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2996_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2996	= { FOLLOW_ternaryExpression_in_caseClause2996_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause3016  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause3016_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause3016	= { FOLLOW_statementList_in_caseClause3016_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseClause3027  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseClause3027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseClause3027	= { FOLLOW_defaultClause_in_caseClause3027_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClauseSeenDefault3057  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClauseSeenDefault3057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClauseSeenDefault3057	= { FOLLOW_CASE_in_caseClauseSeenDefault3057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClauseSeenDefault3077  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClauseSeenDefault3077_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClauseSeenDefault3077	= { FOLLOW_ternaryExpression_in_caseClauseSeenDefault3077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClauseSeenDefault3097  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClauseSeenDefault3097_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClauseSeenDefault3097	= { FOLLOW_statementList_in_caseClauseSeenDefault3097_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3108  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3108	= { FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DEFAULT_in_defaultClause3141  */
static	ANTLR3_BITWORD FOLLOW_DEFAULT_in_defaultClause3141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DEFAULT_in_defaultClause3141	= { FOLLOW_DEFAULT_in_defaultClause3141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause3161  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause3161_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause3161	= { FOLLOW_statementList_in_defaultClause3161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_defaultClause3172  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_defaultClause3172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_defaultClause3172	= { FOLLOW_caseClauseSeenDefault_in_defaultClause3172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_THROW_in_throwStatement3205  */
static	ANTLR3_BITWORD FOLLOW_THROW_in_throwStatement3205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_THROW_in_throwStatement3205	= { FOLLOW_THROW_in_throwStatement3205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement3225  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement3225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement3225	= { FOLLOW_expression_in_throwStatement3225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRY_in_tryStatement3267  */
static	ANTLR3_BITWORD FOLLOW_TRY_in_tryStatement3267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRY_in_tryStatement3267	= { FOLLOW_TRY_in_tryStatement3267_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement3295  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement3295_bits[]	= { ANTLR3_UINT64_LIT(0x0000006000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement3295	= { FOLLOW_statementBlock_in_tryStatement3295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement3309  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement3309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement3309	= { FOLLOW_catchFinallyBlock_in_tryStatement3309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock3347  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock3347_bits[]	= { ANTLR3_UINT64_LIT(0x0000006000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock3347	= { FOLLOW_catchBlock_in_catchFinallyBlock3347_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3349  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3349	= { FOLLOW_finallyBlock_in_catchFinallyBlock3349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3362  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3362	= { FOLLOW_finallyBlock_in_catchFinallyBlock3362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchBlock3388  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchBlock3388_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchBlock3388	= { FOLLOW_CATCH_in_catchBlock3388_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock3416  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock3416_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock3416	= { FOLLOW_Identifier_in_catchBlock3416_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock3444  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock3444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock3444	= { FOLLOW_statementBlock_in_catchBlock3444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyBlock3497  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyBlock3497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyBlock3497	= { FOLLOW_FINALLY_in_finallyBlock3497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock3525  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock3525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock3525	= { FOLLOW_statementBlock_in_finallyBlock3525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression3570  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression3570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression3570	= { FOLLOW_memberExpression_in_memAndCallExpression3570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression3574  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression3574_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression3574	= { FOLLOW_callExpression_in_memAndCallExpression3574_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchClause3587  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchClause3587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchClause3587	= { FOLLOW_CATCH_in_catchClause3587_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause3602  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause3602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause3602	= { FOLLOW_Identifier_in_catchClause3602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause3623  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause3623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause3623	= { FOLLOW_statementBlock_in_catchClause3623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyClause3643  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyClause3643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyClause3643	= { FOLLOW_FINALLY_in_finallyClause3643_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause3656  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause3656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause3656	= { FOLLOW_statementBlock_in_finallyClause3656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_in_expression3689  */
static	ANTLR3_BITWORD FOLLOW_EXPR_in_expression3689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_in_expression3689	= { FOLLOW_EXPR_in_expression3689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression3703  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression3703_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E8), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression3703	= { FOLLOW_assignmentExpression_in_expression3703_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression3753  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression3753_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E8), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression3753	= { FOLLOW_assignmentExpression_in_expression3753_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_NO_IN_in_expressionNoIn3794  */
static	ANTLR3_BITWORD FOLLOW_EXPR_NO_IN_in_expressionNoIn3794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_NO_IN_in_expressionNoIn3794	= { FOLLOW_EXPR_NO_IN_in_expressionNoIn3794_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3808  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3808_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E8), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3808	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3808_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3858  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3858_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E8), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3858	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3858_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression3908  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression3908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression3908	= { FOLLOW_conditionalExpression_in_assignmentExpression3908_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpression3954  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpression3954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpression3954	= { FOLLOW_MULT_ASSIGN_in_assignmentExpression3954_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpression3984  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpression3984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpression3984	= { FOLLOW_DIV_ASSIGN_in_assignmentExpression3984_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpression4015  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpression4015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpression4015	= { FOLLOW_MOD_ASSIGN_in_assignmentExpression4015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpression4046  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpression4046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpression4046	= { FOLLOW_ADD_ASSIGN_in_assignmentExpression4046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpression4078  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpression4078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpression4078	= { FOLLOW_SUB_ASSIGN_in_assignmentExpression4078_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression4120  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression4120_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression4120	= { FOLLOW_leftHandSideExpression_in_assignmentExpression4120_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression4149  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression4149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression4149	= { FOLLOW_assignmentExpression_in_assignmentExpression4149_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpression4220  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpression4220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpression4220	= { FOLLOW_ASSIGN_in_assignmentExpression4220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpression4257  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpression4257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpression4257	= { FOLLOW_AND_ASSIGN_in_assignmentExpression4257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpression4288  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpression4288_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpression4288	= { FOLLOW_EXP_ASSIGN_in_assignmentExpression4288_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpression4319  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpression4319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpression4319	= { FOLLOW_OR_ASSIGN_in_assignmentExpression4319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression4361  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression4361_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression4361	= { FOLLOW_leftHandSideExpression_in_assignmentExpression4361_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression4390  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression4390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression4390	= { FOLLOW_assignmentExpression_in_assignmentExpression4390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4446  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4446	= { FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4446_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4492  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4492	= { FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4522  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4522	= { FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4522_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4553  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4553	= { FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4584  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4584	= { FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4584_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4616  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4616	= { FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4658  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4658_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4658	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4658_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4687  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4687	= { FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpressionNoIn4757  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpressionNoIn4757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpressionNoIn4757	= { FOLLOW_ASSIGN_in_assignmentExpressionNoIn4757_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4794  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4794	= { FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4794_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4825  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4825	= { FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4856  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4856	= { FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4898  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4898_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4898	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4898_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4927  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4927_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4927	= { FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4927_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression4968  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression4968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression4968	= { FOLLOW_callExpression_in_leftHandSideExpression4968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression4973  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression4973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression4973	= { FOLLOW_newExpression_in_leftHandSideExpression4973_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression4985  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression4985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression4985	= { FOLLOW_memberExpression_in_newExpression4985_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_newExpression4992  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_newExpression4992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_newExpression4992	= { FOLLOW_NEW_in_newExpression4992_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression4994  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression4994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression4994	= { FOLLOW_newExpression_in_newExpression4994_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix15022  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix15022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix15022	= { FOLLOW_Identifier_in_propertyReferenceSuffix15022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix15034  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix15034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix15034	= { FOLLOW_expression_in_indexSuffix15034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression5043  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression5043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression5043	= { FOLLOW_primaryExpression_in_memberExpression5043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression5046  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression5046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression5046	= { FOLLOW_functionExpression_in_memberExpression5046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression5051  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression5051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression5051	= { FOLLOW_DOT_in_memberExpression5051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5053  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5053	= { FOLLOW_memberExpression_in_memberExpression5053_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression5057  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression5057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression5057	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression5057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_memberExpression5064  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_memberExpression5064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_memberExpression5064	= { FOLLOW_ARRAY_INDEX_in_memberExpression5064_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5066  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5066_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5066	= { FOLLOW_memberExpression_in_memberExpression5066_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression5070  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression5070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression5070	= { FOLLOW_indexSuffix1_in_memberExpression5070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_memberExpression5078  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_memberExpression5078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_memberExpression5078	= { FOLLOW_NEW_in_memberExpression5078_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5082  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5082	= { FOLLOW_memberExpression_in_memberExpression5082_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression5084  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression5084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression5084	= { FOLLOW_arguments_in_memberExpression5084_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression5090  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression5090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression5090	= { FOLLOW_DOT_in_memberExpression5090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression5094  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression5094_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression5094	= { FOLLOW_memberExpression_in_memberExpression5094_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix5105  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix5105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix5105	= { FOLLOW_indexSuffix_in_memberExpressionSuffix5105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5110  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5110	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression5123  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression5123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression5123	= { FOLLOW_CALL_in_callExpression5123_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression5125  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression5125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression5125	= { FOLLOW_memberExpression_in_callExpression5125_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression5127  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression5127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression5127	= { FOLLOW_arguments_in_callExpression5127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_callExpression5135  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_callExpression5135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_callExpression5135	= { FOLLOW_ARRAY_INDEX_in_callExpression5135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5137  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5137	= { FOLLOW_callExpression_in_callExpression5137_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression5141  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression5141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression5141	= { FOLLOW_indexSuffix1_in_callExpression5141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_callExpression5150  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_callExpression5150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_callExpression5150	= { FOLLOW_DOT_in_callExpression5150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5152  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5152	= { FOLLOW_callExpression_in_callExpression5152_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression5156  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression5156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression5156	= { FOLLOW_propertyReferenceSuffix1_in_callExpression5156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression5163  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression5163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression5163	= { FOLLOW_CALL_in_callExpression5163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression5165  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression5165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression5165	= { FOLLOW_callExpression_in_callExpression5165_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression5167  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression5167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression5167	= { FOLLOW_arguments_in_callExpression5167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix5181  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix5181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix5181	= { FOLLOW_arguments_in_callExpressionSuffix5181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix5186  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix5186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix5186	= { FOLLOW_indexSuffix_in_callExpressionSuffix5186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5191  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5191	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5204  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5204	= { FOLLOW_ARGLIST_in_arguments5204_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5214  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5214	= { FOLLOW_ARGLIST_in_arguments5214_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments5234  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments5234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments5234	= { FOLLOW_assignmentExpression_in_arguments5234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments5259  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments5259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments5259	= { FOLLOW_ARGLIST_in_arguments5259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments5275  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments5275_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E8), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments5275	= { FOLLOW_assignmentExpression_in_arguments5275_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments5303  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments5303_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E8), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments5303	= { FOLLOW_assignmentExpression_in_arguments5303_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_indexSuffix5343  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_indexSuffix5343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_indexSuffix5343	= { FOLLOW_ARRAY_INDEX_in_indexSuffix5343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix5345  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix5345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix5345	= { FOLLOW_expression_in_indexSuffix5345_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_propertyReferenceSuffix5360  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_propertyReferenceSuffix5360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_propertyReferenceSuffix5360	= { FOLLOW_DOT_in_propertyReferenceSuffix5360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix5362  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix5362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix5362	= { FOLLOW_Identifier_in_propertyReferenceSuffix5362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignmentOperator0  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignmentOperator0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignmentOperator0	= { FOLLOW_set_in_assignmentOperator0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn5414  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn5414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn5414	= { FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn5414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_conditionalExpression5439  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_conditionalExpression5439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_conditionalExpression5439	= { FOLLOW_msgRecvConstruct_in_conditionalExpression5439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct5472  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct5472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct5472	= { FOLLOW_msgConstruct_in_msgRecvConstruct5472_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct5485  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct5485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct5485	= { FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct5485_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_msgRecvConstruct5513  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_msgRecvConstruct5513_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000E300C0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_msgRecvConstruct5513	= { FOLLOW_msgRecvConstruct_in_msgRecvConstruct5513_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct5541  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct5541_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000E300C0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct5541	= { FOLLOW_msgConstruct_in_msgRecvConstruct5541_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct5569  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct5569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct5569	= { FOLLOW_msgConstruct_in_msgRecvConstruct5569_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct5609  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct5609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct5609	= { FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct5609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_msgRecvConstruct5637  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_msgRecvConstruct5637_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000E300C0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_msgRecvConstruct5637	= { FOLLOW_msgRecvConstruct_in_msgRecvConstruct5637_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct5665  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct5665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct5665	= { FOLLOW_msgConstruct_in_msgRecvConstruct5665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct5718  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct5718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct5718	= { FOLLOW_msgSenderConstruct_in_msgConstruct5718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEND_CONSTRUCT_in_msgConstruct5731  */
static	ANTLR3_BITWORD FOLLOW_SEND_CONSTRUCT_in_msgConstruct5731_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SEND_CONSTRUCT_in_msgConstruct5731	= { FOLLOW_SEND_CONSTRUCT_in_msgConstruct5731_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgConstruct5759  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgConstruct5759_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000E200C0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgConstruct5759	= { FOLLOW_msgConstruct_in_msgConstruct5759_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct5787  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct5787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct5787	= { FOLLOW_msgSenderConstruct_in_msgConstruct5787_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct5850  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct5850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct5850	= { FOLLOW_ternaryExpression_in_msgSenderConstruct5850_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct5863  */
static	ANTLR3_BITWORD FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct5863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct5863	= { FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct5863_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgSenderConstruct5891  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgSenderConstruct5891_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000E000C0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgSenderConstruct5891	= { FOLLOW_msgSenderConstruct_in_msgSenderConstruct5891_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct5919  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct5919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct5919	= { FOLLOW_ternaryExpression_in_msgSenderConstruct5919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_ternaryExpression5981  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_ternaryExpression5981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_ternaryExpression5981	= { FOLLOW_logicalORExpression_in_ternaryExpression5981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_in_ternaryExpression5994  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_in_ternaryExpression5994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_in_ternaryExpression5994	= { FOLLOW_TERNARYOP_in_ternaryExpression5994_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_ternaryExpression6022  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_ternaryExpression6022_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_ternaryExpression6022	= { FOLLOW_ternaryExpression_in_ternaryExpression6022_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression6063  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression6063_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression6063	= { FOLLOW_assignmentExpression_in_ternaryExpression6063_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression6104  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression6104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression6104	= { FOLLOW_assignmentExpression_in_ternaryExpression6104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6166  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6166	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6166_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6179  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6179	= { FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6207  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6207_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000EC00C123FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6207	= { FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6207_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6235  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6235_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000EC00C123FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6235	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6235_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6263  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6263	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn6303  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn6303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn6303	= { FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn6303_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6331  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6331_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000EC00C123FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6331	= { FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6331_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6359  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6359	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6413  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6413	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6413_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn6426  */
static	ANTLR3_BITWORD FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn6426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn6426	= { FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn6426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgConstructNoIn6454  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgConstructNoIn6454_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000E800C123FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgConstructNoIn6454	= { FOLLOW_msgConstructNoIn_in_msgConstructNoIn6454_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6482  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6482	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6545  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6545	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn6558  */
static	ANTLR3_BITWORD FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn6558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn6558	= { FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn6558_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn6586  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn6586_bits[]	= { ANTLR3_UINT64_LIT(0xFFE00005C20000E0), ANTLR3_UINT64_LIT(0x000E000C123FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn6586	= { FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn6586_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6614  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6614	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6667  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6667	= { FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6667_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn6680  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn6680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn6680	= { FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn6680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn6708  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn6708_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn6708	= { FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn6708_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6736  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6736_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6736	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6736_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6764  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6764	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6764_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression6812  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression6812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression6812	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression6812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpression6817  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpression6817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpression6817	= { FOLLOW_AND_in_logicalANDExpression6817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalANDExpression6819  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalANDExpression6819_bits[]	= { ANTLR3_UINT64_LIT(0xFF800005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalANDExpression6819	= { FOLLOW_logicalANDExpression_in_logicalANDExpression6819_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression6823  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression6823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression6823	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression6823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression6836  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression6836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression6836	= { FOLLOW_logicalANDExpression_in_logicalORExpression6836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpression6841  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpression6841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpression6841	= { FOLLOW_OR_in_logicalORExpression6841_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_logicalORExpression6843  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_logicalORExpression6843_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_logicalORExpression6843	= { FOLLOW_logicalORExpression_in_logicalORExpression6843_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression6847  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression6847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression6847	= { FOLLOW_logicalANDExpression_in_logicalORExpression6847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6860  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6860	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpressionNoIn6865  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpressionNoIn6865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpressionNoIn6865	= { FOLLOW_OR_in_logicalORExpressionNoIn6865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6867  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6867_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6867	= { FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6867_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6869  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6869	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6869_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6884  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6884	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpressionNoIn6890  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpressionNoIn6890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpressionNoIn6890	= { FOLLOW_AND_in_logicalANDExpressionNoIn6890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6892  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6892_bits[]	= { ANTLR3_UINT64_LIT(0xFF800005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6892	= { FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6892_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6896  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6896	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6910  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6910	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6910_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpression6916  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpression6916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpression6916	= { FOLLOW_BIT_OR_in_bitwiseORExpression6916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_bitwiseORExpression6918  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_bitwiseORExpression6918_bits[]	= { ANTLR3_UINT64_LIT(0xFF000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_bitwiseORExpression6918	= { FOLLOW_bitwiseORExpression_in_bitwiseORExpression6918_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6922  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6922	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6922_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6935  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6935	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6942  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6942	= { FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6944  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6944_bits[]	= { ANTLR3_UINT64_LIT(0xFF000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6944	= { FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6944_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6948  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6948	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6960  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6960	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpression6967  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpression6967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpression6967	= { FOLLOW_EXP_in_bitwiseXORExpression6967_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6971  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6971_bits[]	= { ANTLR3_UINT64_LIT(0xFE000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6971	= { FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6971_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6975  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6975	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6975_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6987  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6987	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6987_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpressionNoIn6993  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpressionNoIn6993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpressionNoIn6993	= { FOLLOW_EXP_in_bitwiseXORExpressionNoIn6993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6997  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6997_bits[]	= { ANTLR3_UINT64_LIT(0xFE000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6997	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6997_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7000  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7000_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7000	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7000_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression7014  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression7014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression7014	= { FOLLOW_equalityExpression_in_bitwiseANDExpression7014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpression7020  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpression7020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpression7020	= { FOLLOW_BIT_AND_in_bitwiseANDExpression7020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7024  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7024_bits[]	= { ANTLR3_UINT64_LIT(0xFC000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7024	= { FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7024_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression7028  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression7028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression7028	= { FOLLOW_equalityExpression_in_bitwiseANDExpression7028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7042  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7042	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7049  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7049	= { FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7053  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7053_bits[]	= { ANTLR3_UINT64_LIT(0xFC000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7053	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7053_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7057  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7057	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression7070  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression7070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression7070	= { FOLLOW_relationalExpression_in_equalityExpression7070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpression7083  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpression7083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpression7083	= { FOLLOW_EQUALS_in_equalityExpression7083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression7113  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression7113_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression7113	= { FOLLOW_equalityExpression_in_equalityExpression7113_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression7141  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression7141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression7141	= { FOLLOW_relationalExpression_in_equalityExpression7141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpression7174  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpression7174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpression7174	= { FOLLOW_NOT_EQUALS_in_equalityExpression7174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression7204  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression7204_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression7204	= { FOLLOW_equalityExpression_in_equalityExpression7204_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression7232  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression7232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression7232	= { FOLLOW_relationalExpression_in_equalityExpression7232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpression7265  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpression7265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpression7265	= { FOLLOW_IDENT_in_equalityExpression7265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression7295  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression7295_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression7295	= { FOLLOW_equalityExpression_in_equalityExpression7295_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression7323  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression7323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression7323	= { FOLLOW_relationalExpression_in_equalityExpression7323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpression7356  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpression7356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpression7356	= { FOLLOW_NOT_IDENT_in_equalityExpression7356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression7386  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression7386_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression7386	= { FOLLOW_equalityExpression_in_equalityExpression7386_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression7414  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression7414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression7414	= { FOLLOW_relationalExpression_in_equalityExpression7414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7450  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7450	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7450_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpressionNoIn7457  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpressionNoIn7457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpressionNoIn7457	= { FOLLOW_EQUALS_in_equalityExpressionNoIn7457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7473  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7473_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7473	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7473_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7489  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7489_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7489	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7489_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn7511  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn7511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn7511	= { FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn7511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7527  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7527_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7527	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7527_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7543  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7543	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpressionNoIn7565  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpressionNoIn7565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpressionNoIn7565	= { FOLLOW_IDENT_in_equalityExpressionNoIn7565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7581  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7581_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7581	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7581_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7597  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7597	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpressionNoIn7619  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpressionNoIn7619_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpressionNoIn7619	= { FOLLOW_NOT_IDENT_in_equalityExpressionNoIn7619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7635  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7635_bits[]	= { ANTLR3_UINT64_LIT(0xC0000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7635	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7635_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7651  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7651	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7651_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOps7677  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOps7677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOps7677	= { FOLLOW_LESS_THAN_in_relationalOps7677_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOps7683  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOps7683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOps7683	= { FOLLOW_GREATER_THAN_in_relationalOps7683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOps7689  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOps7689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOps7689	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOps7689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOps7696  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOps7696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOps7696	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOps7696_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOps7702  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOps7702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOps7702	= { FOLLOW_INSTANCE_OF_in_relationalOps7702_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IN_in_relationalOps7708  */
static	ANTLR3_BITWORD FOLLOW_IN_in_relationalOps7708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IN_in_relationalOps7708	= { FOLLOW_IN_in_relationalOps7708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression7726  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression7726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression7726	= { FOLLOW_additiveExpression_in_relationalExpression7726_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression7740  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression7740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression7740	= { FOLLOW_relationalOps_in_relationalExpression7740_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_relationalExpression7749  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_relationalExpression7749_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_relationalExpression7749	= { FOLLOW_relationalExpression_in_relationalExpression7749_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression7761  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression7761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression7761	= { FOLLOW_additiveExpression_in_relationalExpression7761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOpsNoIn7777  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOpsNoIn7777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOpsNoIn7777	= { FOLLOW_LESS_THAN_in_relationalOpsNoIn7777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOpsNoIn7783  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOpsNoIn7783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOpsNoIn7783	= { FOLLOW_GREATER_THAN_in_relationalOpsNoIn7783_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn7789  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn7789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn7789	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn7789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn7795  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn7795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn7795	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn7795_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOpsNoIn7801  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOpsNoIn7801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOpsNoIn7801	= { FOLLOW_INSTANCE_OF_in_relationalOpsNoIn7801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn7821  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn7821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn7821	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn7821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn7836  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn7836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn7836	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn7836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn7844  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn7844_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn7844	= { FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn7844_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn7860  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn7860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn7860	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn7860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression7892  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression7892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression7892	= { FOLLOW_multiplicativeExpression_in_additiveExpression7892_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_OP_in_additiveExpression7905  */
static	ANTLR3_BITWORD FOLLOW_ADD_OP_in_additiveExpression7905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_OP_in_additiveExpression7905	= { FOLLOW_ADD_OP_in_additiveExpression7905_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression7938  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression7938_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7C0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression7938	= { FOLLOW_additiveExpression_in_additiveExpression7938_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression7968  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression7968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression7968	= { FOLLOW_multiplicativeExpression_in_additiveExpression7968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_in_additiveExpression8011  */
static	ANTLR3_BITWORD FOLLOW_SUB_in_additiveExpression8011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_in_additiveExpression8011	= { FOLLOW_SUB_in_additiveExpression8011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression8042  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression8042_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7C0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression8042	= { FOLLOW_additiveExpression_in_additiveExpression8042_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression8073  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression8073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression8073	= { FOLLOW_multiplicativeExpression_in_additiveExpression8073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression8122  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression8122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression8122	= { FOLLOW_unaryExpression_in_multiplicativeExpression8122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_in_multiplicativeExpression8136  */
static	ANTLR3_BITWORD FOLLOW_MULT_in_multiplicativeExpression8136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_in_multiplicativeExpression8136	= { FOLLOW_MULT_in_multiplicativeExpression8136_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression8167  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression8167_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF600), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression8167	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression8167_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression8198  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression8198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression8198	= { FOLLOW_unaryExpression_in_multiplicativeExpression8198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_in_multiplicativeExpression8241  */
static	ANTLR3_BITWORD FOLLOW_DIV_in_multiplicativeExpression8241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_in_multiplicativeExpression8241	= { FOLLOW_DIV_in_multiplicativeExpression8241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression8269  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression8269_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF600), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression8269	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression8269_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression8297  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression8297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression8297	= { FOLLOW_unaryExpression_in_multiplicativeExpression8297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_in_multiplicativeExpression8338  */
static	ANTLR3_BITWORD FOLLOW_MOD_in_multiplicativeExpression8338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_in_multiplicativeExpression8338	= { FOLLOW_MOD_in_multiplicativeExpression8338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression8366  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression8366_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF600), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression8366	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression8366_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression8394  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression8394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression8394	= { FOLLOW_unaryExpression_in_multiplicativeExpression8394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unaryOps0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unaryOps0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unaryOps0	= { FOLLOW_set_in_unaryOps0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression8498  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression8498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression8498	= { FOLLOW_postfixExpression_in_unaryExpression8498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_OP_in_unaryExpression8542  */
static	ANTLR3_BITWORD FOLLOW_DELETE_OP_in_unaryExpression8542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_OP_in_unaryExpression8542	= { FOLLOW_DELETE_OP_in_unaryExpression8542_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VOID_in_unaryExpression8565  */
static	ANTLR3_BITWORD FOLLOW_VOID_in_unaryExpression8565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VOID_in_unaryExpression8565	= { FOLLOW_VOID_in_unaryExpression8565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TYPEOF_in_unaryExpression8593  */
static	ANTLR3_BITWORD FOLLOW_TYPEOF_in_unaryExpression8593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TYPEOF_in_unaryExpression8593	= { FOLLOW_TYPEOF_in_unaryExpression8593_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_unaryExpression8619  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_unaryExpression8619_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_unaryExpression8619	= { FOLLOW_PLUSPLUS_in_unaryExpression8619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_unaryExpression8643  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_unaryExpression8643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_unaryExpression8643	= { FOLLOW_MINUSMINUS_in_unaryExpression8643_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_PLUS_in_unaryExpression8665  */
static	ANTLR3_BITWORD FOLLOW_UNARY_PLUS_in_unaryExpression8665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_PLUS_in_unaryExpression8665	= { FOLLOW_UNARY_PLUS_in_unaryExpression8665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_MINUS_in_unaryExpression8687  */
static	ANTLR3_BITWORD FOLLOW_UNARY_MINUS_in_unaryExpression8687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_MINUS_in_unaryExpression8687	= { FOLLOW_UNARY_MINUS_in_unaryExpression8687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMPLEMENT_in_unaryExpression8708  */
static	ANTLR3_BITWORD FOLLOW_COMPLEMENT_in_unaryExpression8708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COMPLEMENT_in_unaryExpression8708	= { FOLLOW_COMPLEMENT_in_unaryExpression8708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_unaryExpression8730  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_unaryExpression8730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_unaryExpression8730	= { FOLLOW_NOT_in_unaryExpression8730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EVAL_in_unaryExpression8759  */
static	ANTLR3_BITWORD FOLLOW_EVAL_in_unaryExpression8759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EVAL_in_unaryExpression8759	= { FOLLOW_EVAL_in_unaryExpression8759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression8797  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression8797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression8797	= { FOLLOW_unaryExpression_in_unaryExpression8797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression8844  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression8844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression8844	= { FOLLOW_leftHandSideExpression_in_postfixExpression8844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_postfixExpression8857  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_postfixExpression8857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_postfixExpression8857	= { FOLLOW_MINUSMINUS_in_postfixExpression8857_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression8859  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression8859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression8859	= { FOLLOW_leftHandSideExpression_in_postfixExpression8859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_postfixExpression8868  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_postfixExpression8868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_postfixExpression8868	= { FOLLOW_PLUSPLUS_in_postfixExpression8868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression8870  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression8870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression8870	= { FOLLOW_leftHandSideExpression_in_postfixExpression8870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_210_in_primaryExpression8891  */
static	ANTLR3_BITWORD FOLLOW_210_in_primaryExpression8891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_210_in_primaryExpression8891	= { FOLLOW_210_in_primaryExpression8891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression8898  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression8898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression8898	= { FOLLOW_Identifier_in_primaryExpression8898_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression8916  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression8916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression8916	= { FOLLOW_dollarExpression_in_primaryExpression8916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression8921  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression8921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression8921	= { FOLLOW_literal_in_primaryExpression8921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression8926  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression8926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression8926	= { FOLLOW_arrayLiteral_in_primaryExpression8926_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression8931  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression8931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression8931	= { FOLLOW_objectLiteral_in_primaryExpression8931_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_primaryExpression8943  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_primaryExpression8943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_primaryExpression8943	= { FOLLOW_patternLiteral_in_primaryExpression8943_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_in_primaryExpression8949  */
static	ANTLR3_BITWORD FOLLOW_PAREN_in_primaryExpression8949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_in_primaryExpression8949	= { FOLLOW_PAREN_in_primaryExpression8949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression8953  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression8953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression8953	= { FOLLOW_expression_in_primaryExpression8953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression8968  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression8968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression8968	= { FOLLOW_vectorLiteral_in_primaryExpression8968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_quaternionLiteral_in_primaryExpression8980  */
static	ANTLR3_BITWORD FOLLOW_quaternionLiteral_in_primaryExpression8980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_quaternionLiteral_in_primaryExpression8980	= { FOLLOW_quaternionLiteral_in_primaryExpression8980_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR_in_vectorLiteral9001  */
static	ANTLR3_BITWORD FOLLOW_VECTOR_in_vectorLiteral9001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR_in_vectorLiteral9001	= { FOLLOW_VECTOR_in_vectorLiteral9001_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral9032  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral9032_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral9032	= { FOLLOW_vectorLiteralField_in_vectorLiteral9032_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral9079  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral9079_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral9079	= { FOLLOW_vectorLiteralField_in_vectorLiteral9079_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral9126  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral9126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral9126	= { FOLLOW_vectorLiteralField_in_vectorLiteral9126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_in_quaternionLiteral9204  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_in_quaternionLiteral9204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_in_quaternionLiteral9204	= { FOLLOW_QUATERNION_in_quaternionLiteral9204_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9235  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9235_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9235	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9235_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9282  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9282_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9282	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9282_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9329  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9329_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9329	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9329_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9376  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9376	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9432  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9432	= { FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9463  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9463_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9463	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9463_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9510  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9510	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9510_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9566  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9566_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9566	= { FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9566_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9597  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9597_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9597	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9597_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9644  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9644_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9644	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9644_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9691  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9691_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9691	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9691_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral9738  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral9738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral9738	= { FOLLOW_vectorLiteralField_in_quaternionLiteral9738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_vectorLiteralField9832  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_vectorLiteralField9832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_vectorLiteralField9832	= { FOLLOW_additiveExpression_in_vectorLiteralField9832_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_vectorLiteralField9845  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_vectorLiteralField9845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_vectorLiteralField9845	= { FOLLOW_NumericLiteral_in_vectorLiteralField9845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_vectorLiteralField9859  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_vectorLiteralField9859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_vectorLiteralField9859	= { FOLLOW_callExpression_in_vectorLiteralField9859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_vectorLiteralField9871  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_vectorLiteralField9871_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_vectorLiteralField9871	= { FOLLOW_memberExpression_in_vectorLiteralField9871_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression9906  */
static	ANTLR3_BITWORD FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression9906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression9906	= { FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression9906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression9934  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression9934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression9934	= { FOLLOW_Identifier_in_dollarExpression9934_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral9999  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral9999_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral9999	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral9999_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral10009  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral10009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral10009	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral10009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral10028  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral10028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral10028	= { FOLLOW_expression_in_arrayLiteral10028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral10051  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral10051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral10051	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral10051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral10065  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral10065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral10065	= { FOLLOW_expression_in_arrayLiteral10065_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral10094  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral10094_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral10094	= { FOLLOW_expression_in_arrayLiteral10094_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral10131  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral10131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral10131	= { FOLLOW_OBJ_LITERAL_in_objectLiteral10131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral10141  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral10141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral10141	= { FOLLOW_OBJ_LITERAL_in_objectLiteral10141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral10178  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral10178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral10178	= { FOLLOW_propertyNameAndValue_in_objectLiteral10178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_objectLiteral10204  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_objectLiteral10204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_objectLiteral10204	= { FOLLOW_OBJ_LITERAL_in_objectLiteral10204_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral10222  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral10222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral10222	= { FOLLOW_propertyNameAndValue_in_objectLiteral10222_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral10251  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral10251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral10251	= { FOLLOW_propertyNameAndValue_in_objectLiteral10251_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral10294  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral10294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral10294	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral10294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral10304  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral10304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral10304	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral10304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral10313  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral10313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral10313	= { FOLLOW_nameValueProto_in_patternLiteral10313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_patternLiteral10325  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_patternLiteral10325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_patternLiteral10325	= { FOLLOW_PATTERN_LITERAL_in_patternLiteral10325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral10345  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral10345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral10345	= { FOLLOW_nameValueProto_in_patternLiteral10345_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral10374  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral10374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000003000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral10374	= { FOLLOW_nameValueProto_in_patternLiteral10374_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_VALUE_PROTO_in_nameValueProto10439  */
static	ANTLR3_BITWORD FOLLOW_NAME_VALUE_PROTO_in_nameValueProto10439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_VALUE_PROTO_in_nameValueProto10439	= { FOLLOW_NAME_VALUE_PROTO_in_nameValueProto10439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_in_nameValueProto10462  */
static	ANTLR3_BITWORD FOLLOW_NAME_in_nameValueProto10462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_in_nameValueProto10462	= { FOLLOW_NAME_in_nameValueProto10462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_nameValueProto10474  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_nameValueProto10474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_nameValueProto10474	= { FOLLOW_propertyName_in_nameValueProto10474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_nameValueProto10517  */
static	ANTLR3_BITWORD FOLLOW_VALUE_in_nameValueProto10517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_nameValueProto10517	= { FOLLOW_VALUE_in_nameValueProto10517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_nameValueProto10546  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_nameValueProto10546_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_nameValueProto10546	= { FOLLOW_assignmentExpression_in_nameValueProto10546_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROTO_in_nameValueProto10595  */
static	ANTLR3_BITWORD FOLLOW_PROTO_in_nameValueProto10595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROTO_in_nameValueProto10595	= { FOLLOW_PROTO_in_nameValueProto10595_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_nameValueProto10623  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_nameValueProto10623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_nameValueProto10623	= { FOLLOW_assignmentExpression_in_nameValueProto10623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto10664  */
static	ANTLR3_BITWORD FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto10664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto10664	= { FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto10664_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NAME_VALUE_in_propertyNameAndValue10694  */
static	ANTLR3_BITWORD FOLLOW_NAME_VALUE_in_propertyNameAndValue10694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NAME_VALUE_in_propertyNameAndValue10694	= { FOLLOW_NAME_VALUE_in_propertyNameAndValue10694_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue10709  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue10709_bits[]	= { ANTLR3_UINT64_LIT(0xFFFFF005C20000E0), ANTLR3_UINT64_LIT(0x000E300F0A3FF7FF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue10709	= { FOLLOW_propertyName_in_propertyNameAndValue10709_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue10730  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue10730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue10730	= { FOLLOW_assignmentExpression_in_propertyNameAndValue10730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyName10742  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyName10742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyName10742	= { FOLLOW_Identifier_in_propertyName10742_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_propertyName10749  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_propertyName10749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_propertyName10749	= { FOLLOW_StringLiteral_in_propertyName10749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_propertyName10766  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_propertyName10766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_propertyName10766	= { FOLLOW_NumericLiteral_in_propertyName10766_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_212_in_literal10790  */
static	ANTLR3_BITWORD FOLLOW_212_in_literal10790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_212_in_literal10790	= { FOLLOW_212_in_literal10790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_213_in_literal10797  */
static	ANTLR3_BITWORD FOLLOW_213_in_literal10797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_213_in_literal10797	= { FOLLOW_213_in_literal10797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_214_in_literal10804  */
static	ANTLR3_BITWORD FOLLOW_214_in_literal10804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_214_in_literal10804	= { FOLLOW_214_in_literal10804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_literal10810  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_literal10810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_literal10810	= { FOLLOW_StringLiteral_in_literal10810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_literal10827  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_literal10827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_literal10827	= { FOLLOW_NumericLiteral_in_literal10827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_synpred1_EmersonTree125  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_synpred1_EmersonTree125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_synpred1_EmersonTree125	= { FOLLOW_sourceElements_in_synpred1_EmersonTree125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_synpred2_EmersonTree186  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_synpred2_EmersonTree186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_synpred2_EmersonTree186	= { FOLLOW_sourceElement_in_synpred2_EmersonTree186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_synpred3_EmersonTree209  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_synpred3_EmersonTree209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_synpred3_EmersonTree209	= { FOLLOW_functionDeclaration_in_synpred3_EmersonTree209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_synpred9_EmersonTree773  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_synpred9_EmersonTree773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_synpred9_EmersonTree773	= { FOLLOW_noOpStatement_in_synpred9_EmersonTree773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_synpred10_EmersonTree781  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_synpred10_EmersonTree781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_synpred10_EmersonTree781	= { FOLLOW_switchStatement_in_synpred10_EmersonTree781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred11_EmersonTree789  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred11_EmersonTree789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred11_EmersonTree789	= { FOLLOW_statementBlock_in_synpred11_EmersonTree789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_synpred12_EmersonTree797  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_synpred12_EmersonTree797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_synpred12_EmersonTree797	= { FOLLOW_variableStatement_in_synpred12_EmersonTree797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred13_EmersonTree805  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred13_EmersonTree805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred13_EmersonTree805	= { FOLLOW_expressionStatement_in_synpred13_EmersonTree805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_synpred14_EmersonTree813  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_synpred14_EmersonTree813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_synpred14_EmersonTree813	= { FOLLOW_ifStatement_in_synpred14_EmersonTree813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_synpred15_EmersonTree821  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_synpred15_EmersonTree821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_synpred15_EmersonTree821	= { FOLLOW_iterationStatement_in_synpred15_EmersonTree821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_synpred16_EmersonTree829  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_synpred16_EmersonTree829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_synpred16_EmersonTree829	= { FOLLOW_continueStatement_in_synpred16_EmersonTree829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_synpred17_EmersonTree837  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_synpred17_EmersonTree837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_synpred17_EmersonTree837	= { FOLLOW_breakStatement_in_synpred17_EmersonTree837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_synpred18_EmersonTree845  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_synpred18_EmersonTree845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_synpred18_EmersonTree845	= { FOLLOW_returnStatement_in_synpred18_EmersonTree845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_synpred19_EmersonTree853  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_synpred19_EmersonTree853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_synpred19_EmersonTree853	= { FOLLOW_withStatement_in_synpred19_EmersonTree853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_synpred20_EmersonTree861  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_synpred20_EmersonTree861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_synpred20_EmersonTree861	= { FOLLOW_throwStatement_in_synpred20_EmersonTree861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_synpred21_EmersonTree950  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_synpred21_EmersonTree950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_synpred21_EmersonTree950	= { FOLLOW_statementList_in_synpred21_EmersonTree950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred22_EmersonTree1050  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred22_EmersonTree1050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred22_EmersonTree1050	= { FOLLOW_statement_in_synpred22_EmersonTree1050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred27_EmersonTree1654  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred27_EmersonTree1654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred27_EmersonTree1654	= { FOLLOW_statement_in_synpred27_EmersonTree1654_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred28_EmersonTree1748  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred28_EmersonTree1748_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred28_EmersonTree1748	= { FOLLOW_statement_in_synpred28_EmersonTree1748_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_synpred44_EmersonTree2904  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_synpred44_EmersonTree2904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_synpred44_EmersonTree2904	= { FOLLOW_CASE_in_synpred44_EmersonTree2904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_synpred44_EmersonTree2924  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_synpred44_EmersonTree2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000208) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_synpred44_EmersonTree2924	= { FOLLOW_ternaryExpression_in_synpred44_EmersonTree2924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_synpred44_EmersonTree2944  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_synpred44_EmersonTree2944_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_synpred44_EmersonTree2944	= { FOLLOW_statementList_in_synpred44_EmersonTree2944_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_synpred44_EmersonTree2955  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_synpred44_EmersonTree2955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_synpred44_EmersonTree2955	= { FOLLOW_caseClause_in_synpred44_EmersonTree2955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred52_EmersonTree3570  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred52_EmersonTree3570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred52_EmersonTree3570	= { FOLLOW_memberExpression_in_synpred52_EmersonTree3570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred73_EmersonTree4968  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred73_EmersonTree4968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred73_EmersonTree4968	= { FOLLOW_callExpression_in_synpred73_EmersonTree4968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred74_EmersonTree4985  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred74_EmersonTree4985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred74_EmersonTree4985	= { FOLLOW_memberExpression_in_synpred74_EmersonTree4985_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_synpred77_EmersonTree5051  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_synpred77_EmersonTree5051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_synpred77_EmersonTree5051	= { FOLLOW_DOT_in_synpred77_EmersonTree5051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred77_EmersonTree5053  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred77_EmersonTree5053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred77_EmersonTree5053	= { FOLLOW_memberExpression_in_synpred77_EmersonTree5053_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred77_EmersonTree5057  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred77_EmersonTree5057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred77_EmersonTree5057	= { FOLLOW_propertyReferenceSuffix1_in_synpred77_EmersonTree5057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_synpred81_EmersonTree5123  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_synpred81_EmersonTree5123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_synpred81_EmersonTree5123	= { FOLLOW_CALL_in_synpred81_EmersonTree5123_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred81_EmersonTree5125  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred81_EmersonTree5125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred81_EmersonTree5125	= { FOLLOW_memberExpression_in_synpred81_EmersonTree5125_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred81_EmersonTree5127  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred81_EmersonTree5127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred81_EmersonTree5127	= { FOLLOW_arguments_in_synpred81_EmersonTree5127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred86_EmersonTree5204  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred86_EmersonTree5204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred86_EmersonTree5204	= { FOLLOW_ARGLIST_in_synpred86_EmersonTree5204_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred87_EmersonTree5214  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred87_EmersonTree5214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred87_EmersonTree5214	= { FOLLOW_ARGLIST_in_synpred87_EmersonTree5214_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred87_EmersonTree5234  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred87_EmersonTree5234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred87_EmersonTree5234	= { FOLLOW_assignmentExpression_in_synpred87_EmersonTree5234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_synpred150_EmersonTree8498  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_synpred150_EmersonTree8498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_synpred150_EmersonTree8498	= { FOLLOW_postfixExpression_in_synpred150_EmersonTree8498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_AXISANGLE_in_synpred172_EmersonTree9432  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_AXISANGLE_in_synpred172_EmersonTree9432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_AXISANGLE_in_synpred172_EmersonTree9432	= { FOLLOW_QUATERNION_AXISANGLE_in_synpred172_EmersonTree9432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9463  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9463_bits[]	= { ANTLR3_UINT64_LIT(0x00000005C20000E0), ANTLR3_UINT64_LIT(0x000E000C023FF7F0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000740000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9463	= { FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9463_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9510  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9510	= { FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9510_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred173_EmersonTree9832  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred173_EmersonTree9832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred173_EmersonTree9832	= { FOLLOW_additiveExpression_in_synpred173_EmersonTree9832_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_synpred174_EmersonTree9845  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_synpred174_EmersonTree9845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_synpred174_EmersonTree9845	= { FOLLOW_NumericLiteral_in_synpred174_EmersonTree9845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred175_EmersonTree9859  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred175_EmersonTree9859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred175_EmersonTree9859	= { FOLLOW_callExpression_in_synpred175_EmersonTree9859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred176_EmersonTree9999  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred176_EmersonTree9999_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred176_EmersonTree9999	= { FOLLOW_ARRAY_LITERAL_in_synpred176_EmersonTree9999_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree10009  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree10009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree10009	= { FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree10009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred177_EmersonTree10028  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred177_EmersonTree10028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred177_EmersonTree10028	= { FOLLOW_expression_in_synpred177_EmersonTree10028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_synpred179_EmersonTree10131  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_synpred179_EmersonTree10131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_synpred179_EmersonTree10131	= { FOLLOW_OBJ_LITERAL_in_synpred179_EmersonTree10131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJ_LITERAL_in_synpred180_EmersonTree10141  */
static	ANTLR3_BITWORD FOLLOW_OBJ_LITERAL_in_synpred180_EmersonTree10141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJ_LITERAL_in_synpred180_EmersonTree10141	= { FOLLOW_OBJ_LITERAL_in_synpred180_EmersonTree10141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred180_EmersonTree10178  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred180_EmersonTree10178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred180_EmersonTree10178	= { FOLLOW_propertyNameAndValue_in_synpred180_EmersonTree10178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_synpred182_EmersonTree10294  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_synpred182_EmersonTree10294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_synpred182_EmersonTree10294	= { FOLLOW_PATTERN_LITERAL_in_synpred182_EmersonTree10294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATTERN_LITERAL_in_synpred183_EmersonTree10304  */
static	ANTLR3_BITWORD FOLLOW_PATTERN_LITERAL_in_synpred183_EmersonTree10304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PATTERN_LITERAL_in_synpred183_EmersonTree10304	= { FOLLOW_PATTERN_LITERAL_in_synpred183_EmersonTree10304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_synpred183_EmersonTree10313  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_synpred183_EmersonTree10313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_synpred183_EmersonTree10313	= { FOLLOW_nameValueProto_in_synpred183_EmersonTree10313_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    185:1: statement : ( noOpStatement | switchStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static const ANTLR3_INT32 dfa9_eot[29] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa9_eof[29] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa9_min[29] =
    {
	3, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa9_max[29] =
    {
	105, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa9_accept[29] =
    {
	-1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 
	4, 5, 6, 7, 8, 9, 10, 11, 12, 13
    };
static const ANTLR3_INT32 dfa9_special[29] =
    {	
	-1, 10, 5, -1, 8, 9, 1, 2, 4, 6, 0, 13, 3, 7, 11, 12, 14, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa9_T_empty	    NULL

static const ANTLR3_INT32 dfa9_T0[] =
    {
	-1
    };static const ANTLR3_INT32 dfa9_T1[] =
    {
	3, -1, -1, -1, -1, -1, 3, 6, 4, -1, -1, 7, 8, 9, -1, -1, -1, 10, 12, 11, 
	13, 14, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 16, 15, -1, -1, -1, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa9_transitions[] =
{
    dfa9_T1, dfa9_T0, dfa9_T0, dfa9_T_empty, dfa9_T0, dfa9_T0, dfa9_T0, 
    dfa9_T0, dfa9_T0, dfa9_T0, dfa9_T0, dfa9_T0, dfa9_T0, dfa9_T0, dfa9_T0, 
    dfa9_T0, dfa9_T0, dfa9_T_empty, dfa9_T_empty, dfa9_T_empty, dfa9_T_empty, 
    dfa9_T_empty, dfa9_T_empty, dfa9_T_empty, dfa9_T_empty, dfa9_T_empty, 
    dfa9_T_empty, dfa9_T_empty, dfa9_T_empty	
};

static ANTLR3_INT32 dfa9_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA9_10;

    	    ANTLR3_MARKER index9_10;


    		LA9_10 = LA(1);

    	 
    	    index9_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred15_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index9_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA9_6;

    	    ANTLR3_MARKER index9_6;


    		LA9_6 = LA(1);

    	 
    	    index9_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred14_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index9_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA9_7;

    	    ANTLR3_MARKER index9_7;


    		LA9_7 = LA(1);

    	 
    	    index9_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred15_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index9_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA9_12;

    	    ANTLR3_MARKER index9_12;


    		LA9_12 = LA(1);

    	 
    	    index9_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred17_EmersonTree(ctx)) )
    	    {
    	        s = 24;
    	    }

    	 
    		SEEK(index9_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA9_8;

    	    ANTLR3_MARKER index9_8;


    		LA9_8 = LA(1);

    	 
    	    index9_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred15_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index9_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA9_2;

    	    ANTLR3_MARKER index9_2;


    		LA9_2 = LA(1);

    	 
    	    index9_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred10_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	 
    		SEEK(index9_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA9_9;

    	    ANTLR3_MARKER index9_9;


    		LA9_9 = LA(1);

    	 
    	    index9_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred15_EmersonTree(ctx)) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index9_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA9_13;

    	    ANTLR3_MARKER index9_13;


    		LA9_13 = LA(1);

    	 
    	    index9_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred18_EmersonTree(ctx)) )
    	    {
    	        s = 25;
    	    }

    	 
    		SEEK(index9_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA9_4;

    	    ANTLR3_MARKER index9_4;


    		LA9_4 = LA(1);

    	 
    	    index9_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred12_EmersonTree(ctx)) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index9_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA9_5;

    	    ANTLR3_MARKER index9_5;


    		LA9_5 = LA(1);

    	 
    	    index9_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred13_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index9_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA9_1;

    	    ANTLR3_MARKER index9_1;


    		LA9_1 = LA(1);

    	 
    	    index9_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred9_EmersonTree(ctx)) )
    	    {
    	        s = 17;
    	    }

    	    else if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	 
    		SEEK(index9_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA9_14;

    	    ANTLR3_MARKER index9_14;


    		LA9_14 = LA(1);

    	 
    	    index9_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred19_EmersonTree(ctx)) )
    	    {
    	        s = 26;
    	    }

    	 
    		SEEK(index9_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA9_15;

    	    ANTLR3_MARKER index9_15;


    		LA9_15 = LA(1);

    	 
    	    index9_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred20_EmersonTree(ctx)) )
    	    {
    	        s = 27;
    	    }

    	 
    		SEEK(index9_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA9_11;

    	    ANTLR3_MARKER index9_11;


    		LA9_11 = LA(1);

    	 
    	    index9_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (synpred16_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index9_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA9_16;

    	    ANTLR3_MARKER index9_16;


    		LA9_16 = LA(1);

    	 
    	    index9_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred11_EmersonTree(ctx)) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 28;
    	    }

    	 
    		SEEK(index9_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"185:1: statement : ( noOpStatement | switchStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );";
    EXCEPTION->decisionNum  = 9;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 9
 */
static
ANTLR3_CYCLIC_DFA cdfa9
    =	{
	    9,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"185:1: statement : ( noOpStatement | switchStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa9_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa9_eot,	    /* EOT table			    */
	    dfa9_eof,	    /* EOF table			    */
	    dfa9_min,	    /* Minimum tokens for each state    */
	    dfa9_max,	    /* Maximum tokens for each state    */
	    dfa9_accept,	/* Accept table			    */
	    dfa9_special,	/* Special transition states	    */
	    dfa9_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 9
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    324:13: ( statement )?
 */
static const ANTLR3_INT32 dfa16_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa16_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa16_min[20] =
    {
	3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa16_max[20] =
    {
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa16_accept[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, 2
    };
static const ANTLR3_INT32 dfa16_special[20] =
    {	
	-1, 6, 13, 15, 2, 10, 7, 0, 4, 5, 14, 3, 16, 1, 12, 9, 8, 11, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa16_T_empty	    NULL

static const ANTLR3_INT32 dfa16_T0[] =
    {
	-1
    };static const ANTLR3_INT32 dfa16_T1[] =
    {
	4, -1, -1, -1, -1, -1, 3, 7, 5, -1, -1, 8, 9, 10, -1, -1, -1, 11, 13, 12, 
	14, 15, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 17, 16, -1, -1, -1, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa16_transitions[] =
{
    dfa16_T1, dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T0, 
    dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T0, 
    dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T0, dfa16_T_empty, dfa16_T_empty	
};

static ANTLR3_INT32 dfa16_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA16_7;

    	    ANTLR3_MARKER index16_7;


    		LA16_7 = LA(1);

    	 
    	    index16_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA16_13;

    	    ANTLR3_MARKER index16_13;


    		LA16_13 = LA(1);

    	 
    	    index16_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA16_4;

    	    ANTLR3_MARKER index16_4;


    		LA16_4 = LA(1);

    	 
    	    index16_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA16_11;

    	    ANTLR3_MARKER index16_11;


    		LA16_11 = LA(1);

    	 
    	    index16_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA16_8;

    	    ANTLR3_MARKER index16_8;


    		LA16_8 = LA(1);

    	 
    	    index16_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA16_9;

    	    ANTLR3_MARKER index16_9;


    		LA16_9 = LA(1);

    	 
    	    index16_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA16_1;

    	    ANTLR3_MARKER index16_1;


    		LA16_1 = LA(1);

    	 
    	    index16_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA16_6;

    	    ANTLR3_MARKER index16_6;


    		LA16_6 = LA(1);

    	 
    	    index16_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA16_16;

    	    ANTLR3_MARKER index16_16;


    		LA16_16 = LA(1);

    	 
    	    index16_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA16_15;

    	    ANTLR3_MARKER index16_15;


    		LA16_15 = LA(1);

    	 
    	    index16_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA16_5;

    	    ANTLR3_MARKER index16_5;


    		LA16_5 = LA(1);

    	 
    	    index16_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA16_17;

    	    ANTLR3_MARKER index16_17;


    		LA16_17 = LA(1);

    	 
    	    index16_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA16_14;

    	    ANTLR3_MARKER index16_14;


    		LA16_14 = LA(1);

    	 
    	    index16_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA16_2;

    	    ANTLR3_MARKER index16_2;


    		LA16_2 = LA(1);

    	 
    	    index16_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA16_10;

    	    ANTLR3_MARKER index16_10;


    		LA16_10 = LA(1);

    	 
    	    index16_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA16_3;

    	    ANTLR3_MARKER index16_3;


    		LA16_3 = LA(1);

    	 
    	    index16_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA16_12;

    	    ANTLR3_MARKER index16_12;


    		LA16_12 = LA(1);

    	 
    	    index16_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred27_EmersonTree(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index16_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"324:13: ( statement )?";
    EXCEPTION->decisionNum  = 16;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 16
 */
static
ANTLR3_CYCLIC_DFA cdfa16
    =	{
	    16,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"324:13: ( statement )?",	
	    (CDFA_SPECIAL_FUNC) dfa16_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa16_eot,	    /* EOT table			    */
	    dfa16_eof,	    /* EOF table			    */
	    dfa16_min,	    /* Minimum tokens for each state    */
	    dfa16_max,	    /* Maximum tokens for each state    */
	    dfa16_accept,	/* Accept table			    */
	    dfa16_special,	/* Special transition states	    */
	    dfa16_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 16
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    677:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static const ANTLR3_INT32 dfa39_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa39_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa39_min[21] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 
	-1, -1
    };
static const ANTLR3_INT32 dfa39_max[21] =
    {
	214, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	0, -1, -1
    };
static const ANTLR3_INT32 dfa39_accept[21] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa39_special[21] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa39_T_empty	    NULL

static const ANTLR3_INT32 dfa39_T0[] =
    {
	20, 18, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa39_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa39_transitions[] =
{
    dfa39_T0, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, 
    dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, 
    dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, 
    dfa39_T_empty, dfa39_T_empty, dfa39_T1, dfa39_T1, dfa39_T_empty, dfa39_T_empty	
};

static ANTLR3_INT32 dfa39_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA39_17;

    	    ANTLR3_MARKER index39_17;


    		LA39_17 = LA(1);

    	 
    	    index39_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred52_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index39_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA39_18;

    	    ANTLR3_MARKER index39_18;


    		LA39_18 = LA(1);

    	 
    	    index39_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred52_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index39_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"677:1: memAndCallExpression : ( memberExpression | callExpression );";
    EXCEPTION->decisionNum  = 39;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 39
 */
static
ANTLR3_CYCLIC_DFA cdfa39
    =	{
	    39,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"677:1: memAndCallExpression : ( memberExpression | callExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa39_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa39_eot,	    /* EOT table			    */
	    dfa39_eof,	    /* EOF table			    */
	    dfa39_min,	    /* Minimum tokens for each state    */
	    dfa39_max,	    /* Maximum tokens for each state    */
	    dfa39_accept,	/* Accept table			    */
	    dfa39_special,	/* Special transition states	    */
	    dfa39_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 39
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    832:1: leftHandSideExpression : ( callExpression | newExpression );
 */
static const ANTLR3_INT32 dfa48_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa48_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa48_min[21] =
    {
	5, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa48_max[21] =
    {
	214, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa48_accept[21] =
    {
	-1, 1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa48_special[21] =
    {	
	-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa48_T_empty	    NULL

static const ANTLR3_INT32 dfa48_T0[] =
    {
	1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 4, -1, -1, -1, -1, 4, 4, 4, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, 4, 4, 4
    };static const ANTLR3_INT32 dfa48_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa48_transitions[] =
{
    dfa48_T0, dfa48_T_empty, dfa48_T1, dfa48_T1, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty	
};

static ANTLR3_INT32 dfa48_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA48_2;

    	    ANTLR3_MARKER index48_2;


    		LA48_2 = LA(1);

    	 
    	    index48_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred73_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index48_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA48_3;

    	    ANTLR3_MARKER index48_3;


    		LA48_3 = LA(1);

    	 
    	    index48_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred73_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index48_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"832:1: leftHandSideExpression : ( callExpression | newExpression );";
    EXCEPTION->decisionNum  = 48;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 48
 */
static
ANTLR3_CYCLIC_DFA cdfa48
    =	{
	    48,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"832:1: leftHandSideExpression : ( callExpression | newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa48_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa48_eot,	    /* EOT table			    */
	    dfa48_eof,	    /* EOF table			    */
	    dfa48_min,	    /* Minimum tokens for each state    */
	    dfa48_max,	    /* Maximum tokens for each state    */
	    dfa48_accept,	/* Accept table			    */
	    dfa48_special,	/* Special transition states	    */
	    dfa48_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 48
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    837:1: newExpression : ( memberExpression | ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa49_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa49_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa49_min[21] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1
    };
static const ANTLR3_INT32 dfa49_max[21] =
    {
	214, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1
    };
static const ANTLR3_INT32 dfa49_accept[21] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa49_special[21] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa49_T_empty	    NULL

static const ANTLR3_INT32 dfa49_T0[] =
    {
	1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	19, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa49_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa49_transitions[] =
{
    dfa49_T0, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T1, 
    dfa49_T_empty	
};

static ANTLR3_INT32 dfa49_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA49_19;

    	    ANTLR3_MARKER index49_19;


    		LA49_19 = LA(1);

    	 
    	    index49_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred74_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index49_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"837:1: newExpression : ( memberExpression | ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 49;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 49
 */
static
ANTLR3_CYCLIC_DFA cdfa49
    =	{
	    49,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"837:1: newExpression : ( memberExpression | ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa49_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa49_eot,	    /* EOT table			    */
	    dfa49_eof,	    /* EOF table			    */
	    dfa49_min,	    /* Minimum tokens for each state    */
	    dfa49_max,	    /* Maximum tokens for each state    */
	    dfa49_accept,	/* Accept table			    */
	    dfa49_special,	/* Special transition states	    */
	    dfa49_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 49
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    851:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static const ANTLR3_INT32 dfa50_eot[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa50_eof[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa50_min[22] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa50_max[22] =
    {
	214, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa50_accept[22] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 4, 
	5, 3, 6
    };
static const ANTLR3_INT32 dfa50_special[22] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa50_T_empty	    NULL

static const ANTLR3_INT32 dfa50_T0[] =
    {
	18, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 19, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa50_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa50_transitions[] =
{
    dfa50_T0, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty, dfa50_T1, dfa50_T_empty, dfa50_T_empty, 
    dfa50_T_empty, dfa50_T_empty	
};

static ANTLR3_INT32 dfa50_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA50_17;

    	    ANTLR3_MARKER index50_17;


    		LA50_17 = LA(1);

    	 
    	    index50_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred77_EmersonTree(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index50_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"851:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );";
    EXCEPTION->decisionNum  = 50;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 50
 */
static
ANTLR3_CYCLIC_DFA cdfa50
    =	{
	    50,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"851:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa50_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa50_eot,	    /* EOT table			    */
	    dfa50_eof,	    /* EOF table			    */
	    dfa50_min,	    /* Minimum tokens for each state    */
	    dfa50_max,	    /* Maximum tokens for each state    */
	    dfa50_accept,	/* Accept table			    */
	    dfa50_special,	/* Special transition states	    */
	    dfa50_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 50
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1428:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT | EVAL ) unaryExpression ) );
 */
static const ANTLR3_INT32 dfa83_eot[31] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa83_eof[31] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa83_min[31] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa83_max[31] =
    {
	214, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa83_accept[31] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa83_special[31] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa83_T_empty	    NULL

static const ANTLR3_INT32 dfa83_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 23, 23, 23, 23, 
	22, 21, 23, 23, 23, 23, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa83_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa83_transitions[] =
{
    dfa83_T0, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, 
    dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, 
    dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, 
    dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, 
    dfa83_T_empty, dfa83_T1, dfa83_T1, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, 
    dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty, dfa83_T_empty	
};

static ANTLR3_INT32 dfa83_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA83_21;

    	    ANTLR3_MARKER index83_21;


    		LA83_21 = LA(1);

    	 
    	    index83_21 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index83_21);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA83_22;

    	    ANTLR3_MARKER index83_22;


    		LA83_22 = LA(1);

    	 
    	    index83_22 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index83_22);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1428:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT | EVAL ) unaryExpression ) );";
    EXCEPTION->decisionNum  = 83;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 83
 */
static
ANTLR3_CYCLIC_DFA cdfa83
    =	{
	    83,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1428:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT | EVAL ) unaryExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa83_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa83_eot,	    /* EOT table			    */
	    dfa83_eof,	    /* EOF table			    */
	    dfa83_min,	    /* Minimum tokens for each state    */
	    dfa83_max,	    /* Maximum tokens for each state    */
	    dfa83_accept,	/* Accept table			    */
	    dfa83_special,	/* Special transition states	    */
	    dfa83_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 83
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1583:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static const ANTLR3_INT32 dfa87_eot[39] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa87_eof[39] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa87_min[39] =
    {
	5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa87_max[39] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa87_accept[39] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3, 4, 2
    };
static const ANTLR3_INT32 dfa87_special[39] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa87_T_empty	    NULL

static const ANTLR3_INT32 dfa87_T0[] =
    {
	1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 20, -1, -1, -1, -1, 16, 17, 18, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 21, 21, 21, 21, 21, 12, 13, -1, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, 
	-1, -1, 15, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
	11, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, -1, 7, 8, 9
    };static const ANTLR3_INT32 dfa87_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa87_transitions[] =
{
    dfa87_T0, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, 
    dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, 
    dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, dfa87_T1, 
    dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, 
    dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, 
    dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, 
    dfa87_T_empty, dfa87_T_empty, dfa87_T_empty	
};

static ANTLR3_INT32 dfa87_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA87_1;

    	    ANTLR3_MARKER index87_1;


    		LA87_1 = LA(1);

    	 
    	    index87_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (synpred175_EmersonTree(ctx)) )
    	    {
    	        s = 36;
    	    }

    	 
    		SEEK(index87_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA87_2;

    	    ANTLR3_MARKER index87_2;


    		LA87_2 = LA(1);

    	 
    	    index87_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (synpred175_EmersonTree(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA87_3;

    	    ANTLR3_MARKER index87_3;


    		LA87_3 = LA(1);

    	 
    	    index87_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (synpred175_EmersonTree(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA87_4;

    	    ANTLR3_MARKER index87_4;


    		LA87_4 = LA(1);

    	 
    	    index87_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA87_5;

    	    ANTLR3_MARKER index87_5;


    		LA87_5 = LA(1);

    	 
    	    index87_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA87_6;

    	    ANTLR3_MARKER index87_6;


    		LA87_6 = LA(1);

    	 
    	    index87_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA87_7;

    	    ANTLR3_MARKER index87_7;


    		LA87_7 = LA(1);

    	 
    	    index87_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA87_8;

    	    ANTLR3_MARKER index87_8;


    		LA87_8 = LA(1);

    	 
    	    index87_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA87_9;

    	    ANTLR3_MARKER index87_9;


    		LA87_9 = LA(1);

    	 
    	    index87_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA87_10;

    	    ANTLR3_MARKER index87_10;


    		LA87_10 = LA(1);

    	 
    	    index87_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA87_11;

    	    ANTLR3_MARKER index87_11;


    		LA87_11 = LA(1);

    	 
    	    index87_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (synpred174_EmersonTree(ctx)) )
    	    {
    	        s = 38;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA87_12;

    	    ANTLR3_MARKER index87_12;


    		LA87_12 = LA(1);

    	 
    	    index87_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA87_13;

    	    ANTLR3_MARKER index87_13;


    		LA87_13 = LA(1);

    	 
    	    index87_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA87_14;

    	    ANTLR3_MARKER index87_14;


    		LA87_14 = LA(1);

    	 
    	    index87_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA87_15;

    	    ANTLR3_MARKER index87_15;


    		LA87_15 = LA(1);

    	 
    	    index87_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA87_16;

    	    ANTLR3_MARKER index87_16;


    		LA87_16 = LA(1);

    	 
    	    index87_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA87_17;

    	    ANTLR3_MARKER index87_17;


    		LA87_17 = LA(1);

    	 
    	    index87_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA87_18;

    	    ANTLR3_MARKER index87_18;


    		LA87_18 = LA(1);

    	 
    	    index87_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA87_19;

    	    ANTLR3_MARKER index87_19;


    		LA87_19 = LA(1);

    	 
    	    index87_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 19:
        
    	{
    	    ANTLR3_UINT32 LA87_20;

    	    ANTLR3_MARKER index87_20;


    		LA87_20 = LA(1);

    	 
    	    index87_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_EmersonTree(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 37;
    	    }

    	 
    		SEEK(index87_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1583:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );";
    EXCEPTION->decisionNum  = 87;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 87
 */
static
ANTLR3_CYCLIC_DFA cdfa87
    =	{
	    87,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1583:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa87_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa87_eot,	    /* EOT table			    */
	    dfa87_eof,	    /* EOF table			    */
	    dfa87_min,	    /* Minimum tokens for each state    */
	    dfa87_max,	    /* Maximum tokens for each state    */
	    dfa87_accept,	/* Accept table			    */
	    dfa87_special,	/* Special transition states	    */
	    dfa87_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 87
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//EmersonTree.g:68:1: program returns [pANTLR3_STRING return_str, int* emersonLines, int* jsLines, int numLines] : ^( PROG ( sourceElements )? ) ;
 */
static EmersonTree_program_return
program(pEmersonTree ctx)
{   
    EmersonTree_program_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        // .//EmersonTree.g:69:2: ( ^( PROG ( sourceElements )? ) )
        // .//EmersonTree.g:69:3: ^( PROG ( sourceElements )? )
        {
             MATCHT(PROG, &FOLLOW_PROG_in_program80); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) 
            {

                                pANTLR3_STRING_FACTORY factory = antlr3StringFactoryNew();
                                program_string = factory->newRaw(factory);
                                capture_string = factory->newRaw(factory);
                                
                                linesSize = 40;
                                lineIndex = 0;
                                emersonLines = (int*)malloc(linesSize * sizeof(int));
                                jsLines = (int*)malloc(linesSize * sizeof(int));
                    
                                current_line = 1;
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                // .//EmersonTree.g:82:13: ( sourceElements )?
                {
                    int alt1=2;
                    {
                        int LA1_0 = LA(1);
                        if ( (((LA1_0 >= SLIST) && (LA1_0 <= VARLIST)) || ((LA1_0 >= DO) && (LA1_0 <= FOR)) || ((LA1_0 >= FORIN) && (LA1_0 <= WITH)) || LA1_0 == NOOP || ((LA1_0 >= TRY) && (LA1_0 <= THROW)) || LA1_0 == SWITCH || LA1_0 == FUNC_DECL || LA1_0 == EXPR) ) 
                        {
                            alt1=1;
                        }
                        else if ( (LA1_0 == UP) ) 
                        {
                            {
                                int LA1_2 = LA(2);
                                if ( (synpred1_EmersonTree(ctx)) ) 
                                {
                                    alt1=1;
                                }
                            }
                        }
                    }
                    switch (alt1) 
                    {
                	case 1:
                	    // .//EmersonTree.g:83:15: sourceElements
                	    {
                	        FOLLOWPUSH(FOLLOW_sourceElements_in_program125);
                	        sourceElements(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleprogramEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
            }
            if ( BACKTRACKING==0 ) 
            {

                            retval.return_str = program_string;
                            retval.emersonLines = emersonLines;
                            retval.jsLines = jsLines;
                            retval.numLines = lineIndex;
                         
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//EmersonTree.g:96:1: sourceElements : ( sourceElement )+ ;
 */
static void
sourceElements(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:97:5: ( ( sourceElement )+ )
        // .//EmersonTree.g:97:6: ( sourceElement )+
        {
            // .//EmersonTree.g:97:6: ( sourceElement )+
            {
                int cnt2=0;

                for (;;)
                {
                    int alt2=2;
            	switch ( LA(1) ) 
            	{
            	case UP:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA2_1 = LA(2);
            			    if ( (synpred2_EmersonTree(ctx)) ) 
            			    {
            			        alt2=1;
            			    }

            			}
            		}
            	    break;
            	case EOF:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA2_2 = LA(2);
            			    if ( (synpred2_EmersonTree(ctx)) ) 
            			    {
            			        alt2=1;
            			    }

            			}
            		}
            	    break;
            	case SLIST:
            	case IF:
            	case VARLIST:
            	case DO:
            	case WHILE:
            	case FOR:
            	case FORIN:
            	case BREAK:
            	case CONTINUE:
            	case RETURN:
            	case WITH:
            	case NOOP:
            	case TRY:
            	case THROW:
            	case SWITCH:
            	case FUNC_DECL:
            	case EXPR:
            		{
            			alt2=1;
            		}
            	    break;

            	}

            	switch (alt2) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:97:7: sourceElement
            	        {
            	            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements186);
            	            sourceElement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulesourceElementsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }
            	            if ( BACKTRACKING==0 ) 
            	            {
            	                APP("\n"); 
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt2 >= 1 )
            		{
            		    goto loop2;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulesourceElementsEx;
            	}
            	cnt2++;
                }
                loop2: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//EmersonTree.g:100:1: sourceElement : ( functionDeclaration | statement );
 */
static void
sourceElement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:101:5: ( functionDeclaration | statement )
            
            ANTLR3_UINT32 alt3;

            alt3=2;


            {
                int LA3_0 = LA(1);
                if ( (LA3_0 == FUNC_DECL) ) 
                {

                    {
                        int LA3_1 = LA(2);
                        if ( (synpred3_EmersonTree(ctx)) ) 
                        {
                            alt3=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt3=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 3;
                            EXCEPTION->state        = 1;


                            goto rulesourceElementEx;
                        }
                    }
                }
                else if ( (LA3_0 == EOF || LA3_0 == UP || ((LA3_0 >= SLIST) && (LA3_0 <= VARLIST)) || ((LA3_0 >= DO) && (LA3_0 <= FOR)) || ((LA3_0 >= FORIN) && (LA3_0 <= WITH)) || LA3_0 == NOOP || ((LA3_0 >= TRY) && (LA3_0 <= THROW)) || LA3_0 == SWITCH || LA3_0 == EXPR) ) 
                {
                    alt3=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 3;
                    EXCEPTION->state        = 0;


                    goto rulesourceElementEx;
                }
            }
            switch (alt3) 
            {
        	case 1:
        	    // .//EmersonTree.g:101:7: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement209);
        	        functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:102:7: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement217);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(";"); 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//EmersonTree.g:106:1: functionDeclaration : ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static void
functionDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FUNC_DECL1;
    pANTLR3_BASE_TREE    Identifier2;

    /* Initialize rule variables
     */


    FUNC_DECL1       = NULL;
    Identifier2       = NULL;

    {
        // .//EmersonTree.g:107:2: ( ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:107:4: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
        {
            FUNC_DECL1 = (pANTLR3_BASE_TREE) MATCHT(FUNC_DECL, &FOLLOW_FUNC_DECL_in_functionDeclaration236); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((FUNC_DECL1->getLine(FUNC_DECL1)));
                                APP("function ");
                              
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration268); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier2->getText(Identifier2))->chars);
                                APP("( ");
                              
            }

            // .//EmersonTree.g:117:15: ( formalParameterList )?
            {
                int alt4=2;
                {
                    int LA4_0 = LA(1);
                    if ( (LA4_0 == FUNC_PARAMS) ) 
                    {
                        alt4=1;
                    }
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//EmersonTree.g:117:16: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration302);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" )");
                                APP("\n{\n");
                              
            }
            if ( BACKTRACKING==0 ) 
            {

                                 CHECK_RESOURCES();
                              
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration367);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}");
                              
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//EmersonTree.g:133:1: functionExpression : ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static void
functionExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FUNC_EXPR3;
    pANTLR3_BASE_TREE    Identifier4;

    /* Initialize rule variables
     */


    FUNC_EXPR3       = NULL;
    Identifier4       = NULL;

    {
        // .//EmersonTree.g:134:2: ( ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:134:4: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
        {
            FUNC_EXPR3 = (pANTLR3_BASE_TREE) MATCHT(FUNC_EXPR, &FOLLOW_FUNC_EXPR_in_functionExpression411); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                               LINE((FUNC_EXPR3->getLine(FUNC_EXPR3)));
                               APP("function ");
                             
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulefunctionExpressionEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:139:14: ( Identifier )?
                {
                    int alt5=2;
                    {
                        int LA5_0 = LA(1);
                        if ( (LA5_0 == Identifier) ) 
                        {
                            alt5=1;
                        }
                    }
                    switch (alt5) 
                    {
                	case 1:
                	    // .//EmersonTree.g:140:16: Identifier
                	    {
                	        Identifier4 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression455); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefunctionExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                               APP((const char*)(Identifier4->getText(Identifier4))->chars);
                	                             
                	        }

                	    }
                	    break;

                    }
                }
                if ( BACKTRACKING==0 ) 
                {

                                   APP("( ");
                                 
                }

                // .//EmersonTree.g:148:14: ( formalParameterList )?
                {
                    int alt6=2;
                    {
                        int LA6_0 = LA(1);
                        if ( (LA6_0 == FUNC_PARAMS) ) 
                        {
                            alt6=1;
                        }
                    }
                    switch (alt6) 
                    {
                	case 1:
                	    // .//EmersonTree.g:148:15: formalParameterList
                	    {
                	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression522);
                	        formalParameterList(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefunctionExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }
                if ( BACKTRACKING==0 ) 
                {

                                   APP("  )");
                                   APP("\n{\n");
                                 
                }
                if ( BACKTRACKING==0 ) 
                {

                                     CHECK_RESOURCES();
                                 
                }
                FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression583);
                functionBody(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefunctionExpressionEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                   APP("\n}");
                                 
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulefunctionExpressionEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//EmersonTree.g:164:1: formalParameterList : ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) ;
 */
static void
formalParameterList(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    id1;
    pANTLR3_BASE_TREE    id2;

    /* Initialize rule variables
     */


    id1       = NULL;
    id2       = NULL;

    {
        // .//EmersonTree.g:165:3: ( ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) )
        // .//EmersonTree.g:165:5: ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* )
        {
             MATCHT(FUNC_PARAMS, &FOLLOW_FUNC_PARAMS_in_formalParameterList631); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:166:17: (id1= Identifier )
            // .//EmersonTree.g:166:18: id1= Identifier
            {
                id1 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList652); 
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {
                     LINE((id1->getLine(id1))); APP((const char*)(id1->getText(id1))->chars); 
                }

            }


            // .//EmersonTree.g:168:9: (id2= Identifier )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == Identifier) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//EmersonTree.g:169:18: id2= Identifier
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP(", ");
            	                             
            	        }
            	        id2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList722); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             LINE((id2->getLine(id2))); APP((const char*)(id2->getText(id2))->chars);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//EmersonTree.g:179:1: functionBody : ( sourceElements | EMPTY_FUNC_BODY );
 */
static void
functionBody(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:180:2: ( sourceElements | EMPTY_FUNC_BODY )
            
            ANTLR3_UINT32 alt8;

            alt8=2;


            {
                int LA8_0 = LA(1);
                if ( (LA8_0 == EOF || LA8_0 == UP || ((LA8_0 >= SLIST) && (LA8_0 <= VARLIST)) || ((LA8_0 >= DO) && (LA8_0 <= FOR)) || ((LA8_0 >= FORIN) && (LA8_0 <= WITH)) || LA8_0 == NOOP || ((LA8_0 >= TRY) && (LA8_0 <= FINALLY)) || LA8_0 == SWITCH || LA8_0 == FUNC_DECL || LA8_0 == EXPR) ) 
                {
                    alt8=1;
                }
                else if ( (LA8_0 == EMPTY_FUNC_BODY) ) 
                {
                    alt8=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 8;
                    EXCEPTION->state        = 0;


                    goto rulefunctionBodyEx;
                }
            }
            switch (alt8) 
            {
        	case 1:
        	    // .//EmersonTree.g:180:4: sourceElements
        	    {
        	        FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody752);
        	        sourceElements(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:181:4: EMPTY_FUNC_BODY
        	    {
        	         MATCHT(EMPTY_FUNC_BODY, &FOLLOW_EMPTY_FUNC_BODY_in_functionBody757); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//EmersonTree.g:185:1: statement : ( noOpStatement | switchStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static void
statement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:186:5: ( noOpStatement | switchStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement )
            
            ANTLR3_UINT32 alt9;

            alt9=13;

            alt9 = cdfa9.predict(ctx, RECOGNIZER, ISTREAM, &cdfa9);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt9) 
            {
        	case 1:
        	    // .//EmersonTree.g:186:7: noOpStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement773);
        	        noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:187:7: switchStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement781);
        	        switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:188:7: statementBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement789);
        	        statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:189:7: variableStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement797);
        	        variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:190:7: expressionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement805);
        	        expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:191:7: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement813);
        	        ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:192:7: iterationStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement821);
        	        iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:193:7: continueStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement829);
        	        continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:194:7: breakStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement837);
        	        breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 10:
        	    // .//EmersonTree.g:195:7: returnStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement845);
        	        returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 11:
        	    // .//EmersonTree.g:196:7: withStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement853);
        	        withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 12:
        	    // .//EmersonTree.g:197:7: throwStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement861);
        	        throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 13:
        	    // .//EmersonTree.g:198:7: tryStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement869);
        	        tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start noOpStatement
 * .//EmersonTree.g:201:1: noOpStatement : ^( NOOP ) ;
 */
static void
noOpStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:202:9: ( ^( NOOP ) )
        // .//EmersonTree.g:202:11: ^( NOOP )
        {
             MATCHT(NOOP, &FOLLOW_NOOP_in_noOpStatement894); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                          
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementBlock
 * .//EmersonTree.g:208:1: statementBlock : ( statementList )? ;
 */
static void
statementBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:209:2: ( ( statementList )? )
        // .//EmersonTree.g:209:4: ( statementList )?
        {
            if ( BACKTRACKING==0 ) 
            {

                             APP(" {\n ");
                          
            }

            // .//EmersonTree.g:212:11: ( statementList )?
            {
                int alt10=2;
                {
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == SLIST) ) 
                    {
                        {
                            int LA10_1 = LA(2);
                            if ( (synpred21_EmersonTree(ctx)) ) 
                            {
                                alt10=1;
                            }
                        }
                    }
                }
                switch (alt10) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_statementBlock950);
            	        statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {
                  
                             APP(" }\n");
                          
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//EmersonTree.g:218:1: statementList : ^( SLIST statement ( statement )* ) ;
 */
static void
statementList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:219:2: ( ^( SLIST statement ( statement )* ) )
        // .//EmersonTree.g:219:4: ^( SLIST statement ( statement )* )
        {
             MATCHT(SLIST, &FOLLOW_SLIST_in_statementList989); 
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                FOLLOWPUSH(FOLLOW_statement_in_statementList1004);
                statement(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                   APP("; \n");					  
                                
                }

                // .//EmersonTree.g:225:13: ( statement )*

                for (;;)
                {
                    int alt11=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA11_0 = LA(1);
                        if ( (LA11_0 == UP) ) 
                        {
                            {
                               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                */
                                int LA11_1 = LA(2);
                                if ( (synpred22_EmersonTree(ctx)) ) 
                                {
                                    alt11=1;
                                }

                            }
                        }
                        else if ( (((LA11_0 >= SLIST) && (LA11_0 <= VARLIST)) || ((LA11_0 >= DO) && (LA11_0 <= FOR)) || ((LA11_0 >= FORIN) && (LA11_0 <= WITH)) || LA11_0 == NOOP || ((LA11_0 >= TRY) && (LA11_0 <= THROW)) || LA11_0 == SWITCH || LA11_0 == EXPR) ) 
                        {
                            alt11=1;
                        }

                    }
                    switch (alt11) 
                    {
                	case 1:
                	    // .//EmersonTree.g:226:17: statement
                	    {
                	        FOLLOWPUSH(FOLLOW_statement_in_statementList1050);
                	        statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulestatementListEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                                APP("; \n");
                	                            
                	        }

                	    }
                	    break;

                	default:
                	    goto loop11;	/* break out of the loop */
                	    break;
                    }
                }
                loop11: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//EmersonTree.g:234:1: variableStatement : ^( VARLIST variableDeclarationList ) ;
 */
static void
variableStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    VARLIST5;

    /* Initialize rule variables
     */


    VARLIST5       = NULL;

    {
        // .//EmersonTree.g:235:2: ( ^( VARLIST variableDeclarationList ) )
        // .//EmersonTree.g:235:5: ^( VARLIST variableDeclarationList )
        {
            VARLIST5 = (pANTLR3_BASE_TREE) MATCHT(VARLIST, &FOLLOW_VARLIST_in_variableStatement1125); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((VARLIST5->getLine(VARLIST5)));
                                APP("var ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1153);
            variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//EmersonTree.g:244:1: variableDeclarationList : variableDeclaration ( variableDeclaration )* ;
 */
static void
variableDeclarationList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:245:2: ( variableDeclaration ( variableDeclaration )* )
        // .//EmersonTree.g:245:4: variableDeclaration ( variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1173);
            variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:246:9: ( variableDeclaration )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == VAR) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // .//EmersonTree.g:247:13: variableDeclaration
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(", ");
            	                        
            	        }
            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1213);
            	        variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//EmersonTree.g:254:1: variableDeclarationListNoIn : ( variableDeclarationNoIn )+ ;
 */
static void
variableDeclarationListNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:255:2: ( ( variableDeclarationNoIn )+ )
        // .//EmersonTree.g:255:4: ( variableDeclarationNoIn )+
        {
            // .//EmersonTree.g:255:4: ( variableDeclarationNoIn )+
            {
                int cnt13=0;

                for (;;)
                {
                    int alt13=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA13_0 = LA(1);
            	    if ( (LA13_0 == VAR) ) 
            	    {
            	        alt13=1;
            	    }

            	}
            	switch (alt13) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:0:0: variableDeclarationNoIn
            	        {
            	            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1236);
            	            variableDeclarationNoIn(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulevariableDeclarationListNoInEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt13 >= 1 )
            		{
            		    goto loop13;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulevariableDeclarationListNoInEx;
            	}
            	cnt13++;
                }
                loop13: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//EmersonTree.g:258:1: variableDeclaration : ^( VAR Identifier ( initialiser )? ) ;
 */
static void
variableDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier6;

    /* Initialize rule variables
     */


    Identifier6       = NULL;

    {
        // .//EmersonTree.g:259:2: ( ^( VAR Identifier ( initialiser )? ) )
        // .//EmersonTree.g:259:4: ^( VAR Identifier ( initialiser )? )
        {
             MATCHT(VAR, &FOLLOW_VAR_in_variableDeclaration1263); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier6 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1277); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                LINE((Identifier6->getLine(Identifier6)));
                                APP((const char*)(Identifier6->getText(Identifier6))->chars);
                            
            }

            // .//EmersonTree.g:267:13: ( initialiser )?
            {
                int alt14=2;
                {
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == EXPR) ) 
                    {
                        alt14=1;
                    }
                }
                switch (alt14) 
                {
            	case 1:
            	    // .//EmersonTree.g:268:17: initialiser
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1355);
            	        initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//EmersonTree.g:276:1: variableDeclarationNoIn : ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static void
variableDeclarationNoIn(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    VAR7;
    pANTLR3_BASE_TREE    Identifier8;

    /* Initialize rule variables
     */


    VAR7       = NULL;
    Identifier8       = NULL;

    {
        // .//EmersonTree.g:277:2: ( ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//EmersonTree.g:278:9: ^( VAR Identifier ( initialiserNoIn )? )
        {
            VAR7 = (pANTLR3_BASE_TREE) MATCHT(VAR, &FOLLOW_VAR_in_variableDeclarationNoIn1415); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((VAR7->getLine(VAR7)));
                                APP("var ");
                			
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier8 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1434); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                LINE((Identifier8->getLine(Identifier8)));
                                APP((const char*)(Identifier8->getText(Identifier8))->chars);
                            
            }

            // .//EmersonTree.g:290:13: ( initialiserNoIn )?
            {
                int alt15=2;
                {
                    int LA15_0 = LA(1);
                    if ( (LA15_0 == EXPR_NO_IN) ) 
                    {
                        alt15=1;
                    }
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//EmersonTree.g:291:17: initialiserNoIn
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1512);
            	        initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//EmersonTree.g:300:1: initialiser : expression ;
 */
static void
initialiser(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:301:2: ( expression )
        // .//EmersonTree.g:301:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_initialiser1555);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//EmersonTree.g:304:1: initialiserNoIn : expressionNoIn ;
 */
static void
initialiserNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:305:2: ( expressionNoIn )
        // .//EmersonTree.g:305:4: expressionNoIn
        {
            FOLLOWPUSH(FOLLOW_expressionNoIn_in_initialiserNoIn1568);
            expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start expressionStatement
 * .//EmersonTree.g:309:1: expressionStatement : expression ;
 */
static void
expressionStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:310:2: ( expression )
        // .//EmersonTree.g:310:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1582);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//EmersonTree.g:313:1: ifStatement : ^( IF expression ( statement )? ( statement )? ) ;
 */
static void
ifStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    IF9;

    /* Initialize rule variables
     */


    IF9       = NULL;

    {
        // .//EmersonTree.g:314:2: ( ^( IF expression ( statement )? ( statement )? ) )
        // .//EmersonTree.g:314:4: ^( IF expression ( statement )? ( statement )? )
        {
            IF9 = (pANTLR3_BASE_TREE) MATCHT(IF, &FOLLOW_IF_in_ifStatement1595); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((IF9->getLine(IF9)));
                                APP(" if ");
                                APP(" ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1624);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) \n{");
                            
            }

            // .//EmersonTree.g:324:13: ( statement )?
            {
                int alt16=2;
                alt16 = cdfa16.predict(ctx, RECOGNIZER, ISTREAM, &cdfa16);
                if  (HASEXCEPTION())
                {
                    goto ruleifStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                switch (alt16) 
                {
            	case 1:
            	    // .//EmersonTree.g:324:14: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1654);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(" \n");
            	                        
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            // .//EmersonTree.g:332:13: ( statement )?
            {
                int alt17=2;
                {
                    int LA17_0 = LA(1);
                    if ( (((LA17_0 >= SLIST) && (LA17_0 <= VARLIST)) || ((LA17_0 >= DO) && (LA17_0 <= FOR)) || ((LA17_0 >= FORIN) && (LA17_0 <= WITH)) || LA17_0 == NOOP || ((LA17_0 >= TRY) && (LA17_0 <= THROW)) || LA17_0 == SWITCH || LA17_0 == EXPR) ) 
                    {
                        alt17=1;
                    }
                    else if ( (LA17_0 == UP) ) 
                    {
                        {
                            int LA17_2 = LA(2);
                            if ( (synpred28_EmersonTree(ctx)) ) 
                            {
                                alt17=1;
                            }
                        }
                    }
                }
                switch (alt17) 
                {
            	case 1:
            	    // .//EmersonTree.g:333:17: statement
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP("else \n{");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1748);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP("\n}");
            	                            
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//EmersonTree.g:344:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static void
iterationStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:345:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt18;

            alt18=4;

            switch ( LA(1) ) 
            {
            case DO:
            	{
            		alt18=1;
            	}
                break;
            case WHILE:
            	{
            		alt18=2;
            	}
                break;
            case FOR:
            	{
            		alt18=3;
            	}
                break;
            case FORIN:
            	{
            		alt18=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt18) 
            {
        	case 1:
        	    // .//EmersonTree.g:345:4: doWhileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1803);
        	        doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:346:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1808);
        	        whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:347:4: forStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1813);
        	        forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:348:4: forInStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1818);
        	        forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//EmersonTree.g:351:1: doWhileStatement : ^( DO statement expression ) ;
 */
static void
doWhileStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    DO10;

    /* Initialize rule variables
     */


    DO10       = NULL;

    {
        // .//EmersonTree.g:352:2: ( ^( DO statement expression ) )
        // .//EmersonTree.g:352:4: ^( DO statement expression )
        {
            DO10 = (pANTLR3_BASE_TREE) MATCHT(DO, &FOLLOW_DO_in_doWhileStatement1845); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((DO10->getLine(DO10))); 
                                APP(" do ");  						  
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledoWhileStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1873);
                statement(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruledoWhileStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                    APP("\n}\n");
                                    APP("while ( " );      
                                
                }
                FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1901);
                expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruledoWhileStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                    APP(" ) ");  
                                
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledoWhileStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//EmersonTree.g:373:1: whileStatement : ^( WHILE expression statement ) ;
 */
static void
whileStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    WHILE11;

    /* Initialize rule variables
     */


    WHILE11       = NULL;

    {
        // .//EmersonTree.g:374:2: ( ^( WHILE expression statement ) )
        // .//EmersonTree.g:374:4: ^( WHILE expression statement )
        {
            WHILE11 = (pANTLR3_BASE_TREE) MATCHT(WHILE, &FOLLOW_WHILE_in_whileStatement1952); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((WHILE11->getLine(WHILE11))); 
                                APP(" while ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1980);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) "); 
                                //resource checking
                                APP("{\n");
                                CHECK_RESOURCES();
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_whileStatement2009);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//EmersonTree.g:394:1: forStatement : ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) ;
 */
static void
forStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FOR12;

    /* Initialize rule variables
     */


    FOR12       = NULL;

    {
        // .//EmersonTree.g:395:2: ( ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) )
        // .//EmersonTree.g:395:4: ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement )
        {
            FOR12 = (pANTLR3_BASE_TREE) MATCHT(FOR, &FOLLOW_FOR_in_forStatement2059); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((FOR12->getLine(FOR12))); 
                                APP(" for ( ");
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:401:13: ( ^( FORINIT forStatementInitialiserPart ) )?
                {
                    int alt19=2;
                    {
                        int LA19_0 = LA(1);
                        if ( (LA19_0 == FORINIT) ) 
                        {
                            alt19=1;
                        }
                    }
                    switch (alt19) 
                    {
                	case 1:
                	    // .//EmersonTree.g:401:14: ^( FORINIT forStatementInitialiserPart )
                	    {
                	         MATCHT(FORINIT, &FOLLOW_FORINIT_in_forStatement2090); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement2092);
                	        forStatementInitialiserPart(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }
                if ( BACKTRACKING==0 ) 
                {

                                    APP(" ; ");
                                
                }

                // .//EmersonTree.g:405:13: ( ^( FORCOND expression ) )?
                {
                    int alt20=2;
                    {
                        int LA20_0 = LA(1);
                        if ( (LA20_0 == FORCOND) ) 
                        {
                            alt20=1;
                        }
                    }
                    switch (alt20) 
                    {
                	case 1:
                	    // .//EmersonTree.g:405:14: ^( FORCOND expression )
                	    {
                	         MATCHT(FORCOND, &FOLLOW_FORCOND_in_forStatement2125); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2127);
                	        expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }
                if ( BACKTRACKING==0 ) 
                {

                                    APP(" ; ");
                                
                }

                // .//EmersonTree.g:409:13: ( ^( FORITER expression ) )?
                {
                    int alt21=2;
                    {
                        int LA21_0 = LA(1);
                        if ( (LA21_0 == FORITER) ) 
                        {
                            alt21=1;
                        }
                    }
                    switch (alt21) 
                    {
                	case 1:
                	    // .//EmersonTree.g:409:14: ^( FORITER expression )
                	    {
                	         MATCHT(FORITER, &FOLLOW_FORITER_in_forStatement2161); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2163);
                	        expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleforStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }
                if ( BACKTRACKING==0 ) 
                {

                                    APP(" ) ");
                                    //resource checking
                                    APP("{\n");
                                    CHECK_RESOURCES();
                                
                }
                FOLLOWPUSH(FOLLOW_statement_in_forStatement2196);
                statement(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                    APP("\n}\n");
                                
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//EmersonTree.g:423:1: forStatementInitialiserPart : ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) );
 */
static void
forStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:424:5: ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt22;

            alt22=2;


            {
                int LA22_0 = LA(1);
                if ( (LA22_0 == EXPR_NO_IN) ) 
                {
                    alt22=1;
                }
                else if ( (LA22_0 == VARLIST) ) 
                {
                    alt22=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 22;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//EmersonTree.g:424:7: expressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart2235);
        	        expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:425:7: ^( VARLIST variableDeclarationListNoIn )
        	    {
        	         MATCHT(VARLIST, &FOLLOW_VARLIST_in_forStatementInitialiserPart2244); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2246);
        	        variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//EmersonTree.g:428:1: forInStatement : ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static void
forInStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FORIN13;

    /* Initialize rule variables
     */


    FORIN13       = NULL;

    {
        // .//EmersonTree.g:429:2: ( ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//EmersonTree.g:429:4: ^( FORIN forInStatementInitialiserPart expression statement )
        {
            FORIN13 = (pANTLR3_BASE_TREE) MATCHT(FORIN, &FOLLOW_FORIN_in_forInStatement2272); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((FORIN13->getLine(FORIN13)));
                            APP(" for ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement2294);
            forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" in ");
                        
            }
            FOLLOWPUSH(FOLLOW_expression_in_forInStatement2315);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) ");
                            //resource checking
                            APP("{\n");
                            CHECK_RESOURCES();
                        
            }
            FOLLOWPUSH(FOLLOW_statement_in_forInStatement2336);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("\n}\n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//EmersonTree.g:454:1: forInStatementInitialiserPart : ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) );
 */
static void
forInStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:455:2: ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt23;

            alt23=2;


            {
                int LA23_0 = LA(1);
                if ( (((LA23_0 >= CALL) && (LA23_0 <= DOT)) || LA23_0 == NEW || ((LA23_0 >= VECTOR) && (LA23_0 <= QUATERNION_AXISANGLE)) || LA23_0 == DOLLAR_EXPRESSION || ((LA23_0 >= ARRAY_LITERAL) && (LA23_0 <= OBJ_LITERAL)) || LA23_0 == FUNC_EXPR || ((LA23_0 >= PAREN) && (LA23_0 <= PATTERN_LITERAL)) || ((LA23_0 >= Identifier) && (LA23_0 <= StringLiteral)) || LA23_0 == 210 || ((LA23_0 >= 212) && (LA23_0 <= 214))) ) 
                {
                    alt23=1;
                }
                else if ( (LA23_0 == VAR) ) 
                {
                    alt23=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 23;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//EmersonTree.g:455:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2368);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:456:4: ^( VAR variableDeclarationNoIn )
        	    {
        	         MATCHT(VAR, &FOLLOW_VAR_in_forInStatementInitialiserPart2374); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2376);
        	        variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//EmersonTree.g:459:1: continueStatement : ^( CONTINUE ( Identifier )? ) ;
 */
static void
continueStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier14;

    /* Initialize rule variables
     */


    Identifier14       = NULL;

    {
        // .//EmersonTree.g:460:5: ( ^( CONTINUE ( Identifier )? ) )
        // .//EmersonTree.g:460:7: ^( CONTINUE ( Identifier )? )
        {
             MATCHT(CONTINUE, &FOLLOW_CONTINUE_in_continueStatement2401); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("continue ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:465:9: ( Identifier )?
                {
                    int alt24=2;
                    {
                        int LA24_0 = LA(1);
                        if ( (LA24_0 == Identifier) ) 
                        {
                            alt24=1;
                        }
                    }
                    switch (alt24) 
                    {
                	case 1:
                	    // .//EmersonTree.g:466:13: Identifier
                	    {
                	        Identifier14 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2437); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecontinueStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            LINE((Identifier14->getLine(Identifier14)));
                	                            APP((const char*)(Identifier14->getText(Identifier14))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//EmersonTree.g:475:1: breakStatement : ^( BREAK ( Identifier )? ) ;
 */
static void
breakStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    BREAK15;
    pANTLR3_BASE_TREE    Identifier16;

    /* Initialize rule variables
     */


    BREAK15       = NULL;
    Identifier16       = NULL;

    {
        // .//EmersonTree.g:476:5: ( ^( BREAK ( Identifier )? ) )
        // .//EmersonTree.g:476:7: ^( BREAK ( Identifier )? )
        {
            BREAK15 = (pANTLR3_BASE_TREE) MATCHT(BREAK, &FOLLOW_BREAK_in_breakStatement2494); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((BREAK15->getLine(BREAK15)));
                            APP("break ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:482:9: ( Identifier )?
                {
                    int alt25=2;
                    {
                        int LA25_0 = LA(1);
                        if ( (LA25_0 == Identifier) ) 
                        {
                            alt25=1;
                        }
                    }
                    switch (alt25) 
                    {
                	case 1:
                	    // .//EmersonTree.g:483:13: Identifier
                	    {
                	        Identifier16 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2528); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulebreakStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            LINE((Identifier16->getLine(Identifier16)));
                	                            APP((const char*)(Identifier16->getText(Identifier16))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//EmersonTree.g:493:1: returnStatement : ^( RETURN ( expression )? ) ;
 */
static void
returnStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    RETURN17;

    /* Initialize rule variables
     */


    RETURN17       = NULL;

    {
        // .//EmersonTree.g:494:5: ( ^( RETURN ( expression )? ) )
        // .//EmersonTree.g:494:7: ^( RETURN ( expression )? )
        {
            RETURN17 = (pANTLR3_BASE_TREE) MATCHT(RETURN, &FOLLOW_RETURN_in_returnStatement2588); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((RETURN17->getLine(RETURN17)));
                            APP("return ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:500:9: ( expression )?
                {
                    int alt26=2;
                    {
                        int LA26_0 = LA(1);
                        if ( (LA26_0 == EXPR) ) 
                        {
                            alt26=1;
                        }
                    }
                    switch (alt26) 
                    {
                	case 1:
                	    // .//EmersonTree.g:501:13: expression
                	    {
                	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2625);
                	        expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulereturnStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//EmersonTree.g:506:1: withStatement : ^( WITH expression statement ) ;
 */
static void
withStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    WITH18;

    /* Initialize rule variables
     */


    WITH18       = NULL;

    {
        // .//EmersonTree.g:507:5: ( ^( WITH expression statement ) )
        // .//EmersonTree.g:507:7: ^( WITH expression statement )
        {
            WITH18 = (pANTLR3_BASE_TREE) MATCHT(WITH, &FOLLOW_WITH_in_withStatement2661); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {
                LINE((WITH18->getLine(WITH18))); APP("with ( ");
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_withStatement2687);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                APP(" )");
            }
            FOLLOWPUSH(FOLLOW_statement_in_withStatement2723);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start switchStatement
 * .//EmersonTree.g:519:1: switchStatement : ^( SWITCH expression caseBlock ) ;
 */
static void
switchStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    SWITCH19;

    /* Initialize rule variables
     */


    SWITCH19       = NULL;

    {
        // .//EmersonTree.g:520:5: ( ^( SWITCH expression caseBlock ) )
        // .//EmersonTree.g:520:7: ^( SWITCH expression caseBlock )
        {
            SWITCH19 = (pANTLR3_BASE_TREE) MATCHT(SWITCH, &FOLLOW_SWITCH_in_switchStatement2759); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((SWITCH19->getLine(SWITCH19))); 
                            APP(" switch ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2780);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) \n");
                            APP("{ \n");
                        
            }
            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2801);
            caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("} \n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//EmersonTree.g:539:1: caseBlock : ( ^( CASE_BLOCK ( caseClause )? ) | ^( CASE_BLOCK defaultClause ) );
 */
static void
caseBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:540:5: ( ^( CASE_BLOCK ( caseClause )? ) | ^( CASE_BLOCK defaultClause ) )
            
            ANTLR3_UINT32 alt28;

            alt28=2;


            {
                int LA28_0 = LA(1);
                if ( (LA28_0 == CASE_BLOCK) ) 
                {

                    {
                        int LA28_1 = LA(2);
                        if ( (LA28_1 == DOWN) ) 
                        {

                            {
                                int LA28_2 = LA(3);
                                if ( (LA28_2 == UP || LA28_2 == CASE) ) 
                                {
                                    alt28=1;
                                }
                                else if ( (LA28_2 == DEFAULT) ) 
                                {
                                    alt28=2;
                                }
                                else 
                                {
                                    if (BACKTRACKING>0)
                                    {
                                        FAILEDFLAG = ANTLR3_TRUE; 
                                        return ;
                                    }
                                
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                    EXCEPTION->message      = (void *)"";
                                    EXCEPTION->decisionNum  = 28;
                                    EXCEPTION->state        = 2;


                                    goto rulecaseBlockEx;
                                }
                            }
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 28;
                            EXCEPTION->state        = 1;


                            goto rulecaseBlockEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 28;
                    EXCEPTION->state        = 0;


                    goto rulecaseBlockEx;
                }
            }
            switch (alt28) 
            {
        	case 1:
        	    // .//EmersonTree.g:540:7: ^( CASE_BLOCK ( caseClause )? )
        	    {
        	         MATCHT(CASE_BLOCK, &FOLLOW_CASE_BLOCK_in_caseBlock2837); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	            // .//EmersonTree.g:541:9: ( caseClause )?
        	            {
        	                int alt27=2;
        	                {
        	                    int LA27_0 = LA(1);
        	                    if ( (LA27_0 == CASE) ) 
        	                    {
        	                        alt27=1;
        	                    }
        	                }
        	                switch (alt27) 
        	                {
        	            	case 1:
        	            	    // .//EmersonTree.g:0:0: caseClause
        	            	    {
        	            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2847);
        	            	        caseClause(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulecaseBlockEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }

        	            	    }
        	            	    break;

        	                }
        	            }

        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:543:7: ^( CASE_BLOCK defaultClause )
        	    {
        	         MATCHT(CASE_BLOCK, &FOLLOW_CASE_BLOCK_in_caseBlock2863); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2873);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//EmersonTree.g:550:1: caseClause : ( ^( CASE ternaryExpression ( statementList )? ( caseClause )? ) | ^( CASE ternaryExpression ( statementList )? defaultClause ) );
 */
static void
caseClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:551:5: ( ^( CASE ternaryExpression ( statementList )? ( caseClause )? ) | ^( CASE ternaryExpression ( statementList )? defaultClause ) )
            
            ANTLR3_UINT32 alt32;

            alt32=2;


            {
                int LA32_0 = LA(1);
                if ( (LA32_0 == CASE) ) 
                {

                    {
                        int LA32_1 = LA(2);
                        if ( (synpred44_EmersonTree(ctx)) ) 
                        {
                            alt32=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt32=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 32;
                            EXCEPTION->state        = 1;


                            goto rulecaseClauseEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 32;
                    EXCEPTION->state        = 0;


                    goto rulecaseClauseEx;
                }
            }
            switch (alt32) 
            {
        	case 1:
        	    // .//EmersonTree.g:551:7: ^( CASE ternaryExpression ( statementList )? ( caseClause )? )
        	    {
        	         MATCHT(CASE, &FOLLOW_CASE_in_caseClause2904); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("case ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2924);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(":");
        	                    
        	        }

        	        // .//EmersonTree.g:559:9: ( statementList )?
        	        {
        	            int alt29=2;
        	            {
        	                int LA29_0 = LA(1);
        	                if ( (LA29_0 == SLIST) ) 
        	                {
        	                    alt29=1;
        	                }
        	            }
        	            switch (alt29) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2944);
        	        	        statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//EmersonTree.g:560:9: ( caseClause )?
        	        {
        	            int alt30=2;
        	            {
        	                int LA30_0 = LA(1);
        	                if ( (LA30_0 == CASE) ) 
        	                {
        	                    alt30=1;
        	                }
        	            }
        	            switch (alt30) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseClause2955);
        	        	        caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:562:7: ^( CASE ternaryExpression ( statementList )? defaultClause )
        	    {
        	         MATCHT(CASE, &FOLLOW_CASE_in_caseClause2976); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("case ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2996);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(":");
        	                    
        	        }

        	        // .//EmersonTree.g:570:9: ( statementList )?
        	        {
        	            int alt31=2;
        	            {
        	                int LA31_0 = LA(1);
        	                if ( (LA31_0 == SLIST) ) 
        	                {
        	                    alt31=1;
        	                }
        	            }
        	            switch (alt31) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause3016);
        	        	        statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseClause3027);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start caseClauseSeenDefault
 * .//EmersonTree.g:577:1: caseClauseSeenDefault : ^( CASE ternaryExpression ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static void
caseClauseSeenDefault(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:578:5: ( ^( CASE ternaryExpression ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//EmersonTree.g:578:7: ^( CASE ternaryExpression ( statementList )? ( caseClauseSeenDefault )? )
        {
             MATCHT(CASE, &FOLLOW_CASE_in_caseClauseSeenDefault3057); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("case ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClauseSeenDefault3077);
            ternaryExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(":");
                        
            }

            // .//EmersonTree.g:586:9: ( statementList )?
            {
                int alt33=2;
                {
                    int LA33_0 = LA(1);
                    if ( (LA33_0 == SLIST) ) 
                    {
                        alt33=1;
                    }
                }
                switch (alt33) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClauseSeenDefault3097);
            	        statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            // .//EmersonTree.g:587:9: ( caseClauseSeenDefault )?
            {
                int alt34=2;
                {
                    int LA34_0 = LA(1);
                    if ( (LA34_0 == CASE) ) 
                    {
                        alt34=1;
                    }
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault3108);
            	        caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseSeenDefaultEx; /* Prevent compiler warnings */
    rulecaseClauseSeenDefaultEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClauseSeenDefault */

/** 
 * $ANTLR start defaultClause
 * .//EmersonTree.g:592:1: defaultClause : ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static void
defaultClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    DEFAULT20;

    /* Initialize rule variables
     */


    DEFAULT20       = NULL;

    {
        // .//EmersonTree.g:593:5: ( ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//EmersonTree.g:593:6: ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
        {
            DEFAULT20 = (pANTLR3_BASE_TREE) MATCHT(DEFAULT, &FOLLOW_DEFAULT_in_defaultClause3141); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((DEFAULT20->getLine(DEFAULT20))); 
                            APP("default: ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:598:9: ( statementList )?
                {
                    int alt35=2;
                    {
                        int LA35_0 = LA(1);
                        if ( (LA35_0 == SLIST) ) 
                        {
                            alt35=1;
                        }
                    }
                    switch (alt35) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: statementList
                	    {
                	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause3161);
                	        statementList(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                // .//EmersonTree.g:599:9: ( caseClauseSeenDefault )?
                {
                    int alt36=2;
                    {
                        int LA36_0 = LA(1);
                        if ( (LA36_0 == CASE) ) 
                        {
                            alt36=1;
                        }
                    }
                    switch (alt36) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: caseClauseSeenDefault
                	    {
                	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_defaultClause3172);
                	        caseClauseSeenDefault(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//EmersonTree.g:605:1: throwStatement : ^( THROW expression ) ;
 */
static void
throwStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    THROW21;

    /* Initialize rule variables
     */


    THROW21       = NULL;

    {
        // .//EmersonTree.g:606:5: ( ^( THROW expression ) )
        // .//EmersonTree.g:606:7: ^( THROW expression )
        {
            THROW21 = (pANTLR3_BASE_TREE) MATCHT(THROW, &FOLLOW_THROW_in_throwStatement3205); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            LINE((THROW21->getLine(THROW21))); 
                            APP("throw ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_throwStatement3225);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//EmersonTree.g:618:1: tryStatement : ^( TRY statementBlock catchFinallyBlock ) ;
 */
static void
tryStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    TRY22;

    /* Initialize rule variables
     */


    TRY22       = NULL;

    {
        // .//EmersonTree.g:619:9: ( ^( TRY statementBlock catchFinallyBlock ) )
        // .//EmersonTree.g:619:11: ^( TRY statementBlock catchFinallyBlock )
        {
            TRY22 = (pANTLR3_BASE_TREE) MATCHT(TRY, &FOLLOW_TRY_in_tryStatement3267); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((TRY22->getLine(TRY22))); 
                                APP("try\n");
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement3295);
                statementBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement3309);
                catchFinallyBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//EmersonTree.g:629:1: catchFinallyBlock : ( catchBlock ( finallyBlock )? | finallyBlock );
 */
static void
catchFinallyBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:630:9: ( catchBlock ( finallyBlock )? | finallyBlock )
            
            ANTLR3_UINT32 alt38;

            alt38=2;


            {
                int LA38_0 = LA(1);
                if ( (LA38_0 == CATCH) ) 
                {
                    alt38=1;
                }
                else if ( (LA38_0 == FINALLY) ) 
                {
                    alt38=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 38;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt38) 
            {
        	case 1:
        	    // .//EmersonTree.g:630:11: catchBlock ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock3347);
        	        catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:630:22: ( finallyBlock )?
        	        {
        	            int alt37=2;
        	            {
        	                int LA37_0 = LA(1);
        	                if ( (LA37_0 == FINALLY) ) 
        	                {
        	                    alt37=1;
        	                }
        	            }
        	            switch (alt37) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3349);
        	        	        finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:631:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3362);
        	        finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//EmersonTree.g:634:1: catchBlock : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchBlock(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    CATCH23;
    pANTLR3_BASE_TREE    Identifier24;

    /* Initialize rule variables
     */


    CATCH23       = NULL;
    Identifier24       = NULL;

    {
        // .//EmersonTree.g:635:9: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:635:11: ^( CATCH Identifier statementBlock )
        {
            CATCH23 = (pANTLR3_BASE_TREE) MATCHT(CATCH, &FOLLOW_CATCH_in_catchBlock3388); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((CATCH23->getLine(CATCH23))); 
                                APP("catch (");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier24 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock3416); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                LINE((Identifier24->getLine(Identifier24)));
                                APP((const char*)(Identifier24->getText(Identifier24))->chars);
                                APP( ")\n");
                                APP(" {  \n");
                                APP(" if ( system.__isResetting() ) \n { \n");
                                APP("throw new Error('__resetting__');\n}\n");
                                CHECK_RESOURCES();
                                CHECK_KILL();
                            
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock3444);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("  } \n");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//EmersonTree.g:658:1: finallyBlock : ^( FINALLY statementBlock ) ;
 */
static void
finallyBlock(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FINALLY25;

    /* Initialize rule variables
     */


    FINALLY25       = NULL;

    {
        // .//EmersonTree.g:659:9: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:659:11: ^( FINALLY statementBlock )
        {
            FINALLY25 = (pANTLR3_BASE_TREE) MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyBlock3497); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((FINALLY25->getLine(FINALLY25))); 
                                APP("finally \n");
                                APP(" {  \n");  
                                APP(" if ( system.__isResetting() ) \n { \n");
                                APP("throw new Error('__resetting__');\n}\n");
                                CHECK_RESOURCES();
                                CHECK_KILL();
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulefinallyBlockEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock3525);
                statementBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefinallyBlockEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                    APP("}\n");
                                
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulefinallyBlockEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start memAndCallExpression
 * .//EmersonTree.g:677:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static void
memAndCallExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:678:1: ( memberExpression | callExpression )
            
            ANTLR3_UINT32 alt39;

            alt39=2;

            alt39 = cdfa39.predict(ctx, RECOGNIZER, ISTREAM, &cdfa39);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt39) 
            {
        	case 1:
        	    // .//EmersonTree.g:678:3: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression3570);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:679:3: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression3574);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start catchClause
 * .//EmersonTree.g:683:1: catchClause : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    CATCH26;
    pANTLR3_BASE_TREE    Identifier27;

    /* Initialize rule variables
     */


    CATCH26       = NULL;
    Identifier27       = NULL;

    {
        // .//EmersonTree.g:684:2: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:684:4: ^( CATCH Identifier statementBlock )
        {
            CATCH26 = (pANTLR3_BASE_TREE) MATCHT(CATCH, &FOLLOW_CATCH_in_catchClause3587); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                      LINE((CATCH26->getLine(CATCH26))); 
                					  APP(" catch ( ");
                					
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier27 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause3602); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                					  APP((const char*)(Identifier27->getText(Identifier27))->chars);
                					  APP(" ) ");

                					
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause3623);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//EmersonTree.g:700:1: finallyClause : ^( FINALLY statementBlock ) ;
 */
static void
finallyClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    FINALLY28;

    /* Initialize rule variables
     */


    FINALLY28       = NULL;

    {
        // .//EmersonTree.g:701:2: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:701:4: ^( FINALLY statementBlock )
        {
            FINALLY28 = (pANTLR3_BASE_TREE) MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyClause3643); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                  LINE((FINALLY28->getLine(FINALLY28))); 
                				  APP(" finally ");

                				
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulefinallyClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause3656);
                statementBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefinallyClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulefinallyClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start expression
 * .//EmersonTree.g:714:1: expression : ^( EXPR assignmentExpression ( assignmentExpression )* ) ;
 */
static void
expression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:715:9: ( ^( EXPR assignmentExpression ( assignmentExpression )* ) )
        // .//EmersonTree.g:715:11: ^( EXPR assignmentExpression ( assignmentExpression )* )
        {
             MATCHT(EXPR, &FOLLOW_EXPR_in_expression3689); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression3703);
            assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:717:13: ( assignmentExpression )*

            for (;;)
            {
                int alt40=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA40_0 = LA(1);
                    if ( (((LA40_0 >= CALL) && (LA40_0 <= DOT)) || LA40_0 == NEW || ((LA40_0 >= VECTOR) && (LA40_0 <= QUATERNION_AXISANGLE)) || LA40_0 == DOLLAR_EXPRESSION || ((LA40_0 >= ASSIGN) && (LA40_0 <= OBJ_LITERAL)) || ((LA40_0 >= DELETE_OP) && (LA40_0 <= NOT)) || LA40_0 == FUNC_EXPR || LA40_0 == TERNARYOP || ((LA40_0 >= MESSAGE_RECV_NO_SENDER) && (LA40_0 <= PATTERN_LITERAL)) || ((LA40_0 >= SEND_CONSTRUCT) && (LA40_0 <= SENDER_CONSTRUCT)) || ((LA40_0 >= Identifier) && (LA40_0 <= StringLiteral)) || LA40_0 == 210 || ((LA40_0 >= 212) && (LA40_0 <= 214))) ) 
                    {
                        alt40=1;
                    }

                }
                switch (alt40) 
                {
            	case 1:
            	    // .//EmersonTree.g:718:17: assignmentExpression
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(",");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression3753);
            	        assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//EmersonTree.g:726:1: expressionNoIn : ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* ) ;
 */
static void
expressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:727:2: ( ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* ) )
        // .//EmersonTree.g:727:4: ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* )
        {
             MATCHT(EXPR_NO_IN, &FOLLOW_EXPR_NO_IN_in_expressionNoIn3794); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3808);
            assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:729:13: ( assignmentExpressionNoIn )*

            for (;;)
            {
                int alt41=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA41_0 = LA(1);
                    if ( (((LA41_0 >= CALL) && (LA41_0 <= DOT)) || LA41_0 == NEW || ((LA41_0 >= VECTOR) && (LA41_0 <= QUATERNION_AXISANGLE)) || LA41_0 == DOLLAR_EXPRESSION || ((LA41_0 >= ASSIGN) && (LA41_0 <= OBJ_LITERAL)) || ((LA41_0 >= DELETE_OP) && (LA41_0 <= NOT)) || LA41_0 == FUNC_EXPR || LA41_0 == TERNARYOP || ((LA41_0 >= MESSAGE_RECV_NO_SENDER) && (LA41_0 <= PATTERN_LITERAL)) || ((LA41_0 >= SEND_CONSTRUCT) && (LA41_0 <= SENDER_CONSTRUCT)) || ((LA41_0 >= Identifier) && (LA41_0 <= StringLiteral)) || LA41_0 == 210 || ((LA41_0 >= 212) && (LA41_0 <= 214))) ) 
                    {
                        alt41=1;
                    }

                }
                switch (alt41) 
                {
            	case 1:
            	    // .//EmersonTree.g:730:17: assignmentExpressionNoIn
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(",");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3858);
            	        assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//EmersonTree.g:738:1: assignmentExpression : ( conditionalExpression | ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression ) | ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) );
 */
static void
assignmentExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    MULT_ASSIGN29;
    pANTLR3_BASE_TREE    DIV_ASSIGN30;
    pANTLR3_BASE_TREE    MOD_ASSIGN31;
    pANTLR3_BASE_TREE    ADD_ASSIGN32;
    pANTLR3_BASE_TREE    SUB_ASSIGN33;
    pANTLR3_BASE_TREE    ASSIGN34;
    pANTLR3_BASE_TREE    AND_ASSIGN35;
    pANTLR3_BASE_TREE    EXP_ASSIGN36;
    pANTLR3_BASE_TREE    OR_ASSIGN37;

    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionTop = pEmersonTree_assignmentExpressionPush(ctx);
    MULT_ASSIGN29       = NULL;
    DIV_ASSIGN30       = NULL;
    MOD_ASSIGN31       = NULL;
    ADD_ASSIGN32       = NULL;
    SUB_ASSIGN33       = NULL;
    ASSIGN34       = NULL;
    AND_ASSIGN35       = NULL;
    EXP_ASSIGN36       = NULL;
    OR_ASSIGN37       = NULL;

    {
        {
            //  .//EmersonTree.g:743:9: ( conditionalExpression | ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression ) | ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt44;

            alt44=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case EVAL:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case TERNARYOP:
            case MESSAGE_RECV_NO_SENDER:
            case MESSAGE_RECV_AND_SENDER:
            case PAREN:
            case PATTERN_LITERAL:
            case SEND_CONSTRUCT:
            case SENDER_CONSTRUCT:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt44=1;
            	}
                break;
            case MULT_ASSIGN:
            case DIV_ASSIGN:
            case MOD_ASSIGN:
            case ADD_ASSIGN:
            case SUB_ASSIGN:
            	{
            		alt44=2;
            	}
                break;
            case ASSIGN:
            case AND_ASSIGN:
            case EXP_ASSIGN:
            case OR_ASSIGN:
            	{
            		alt44=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    pEmersonTree_assignmentExpressionPop(ctx);

                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 44;
                EXCEPTION->state        = 0;


                goto ruleassignmentExpressionEx;
            }

            switch (alt44) 
            {
        	case 1:
        	    // .//EmersonTree.g:743:11: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression3908);
        	        conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:744:11: ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:745:13: ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN )
        	        {
        	            int alt42=5;
        	            switch ( LA(1) ) 
        	            {
        	            case MULT_ASSIGN:
        	            	{
        	            		alt42=1;
        	            	}
        	                break;
        	            case DIV_ASSIGN:
        	            	{
        	            		alt42=2;
        	            	}
        	                break;
        	            case MOD_ASSIGN:
        	            	{
        	            		alt42=3;
        	            	}
        	                break;
        	            case ADD_ASSIGN:
        	            	{
        	            		alt42=4;
        	            	}
        	                break;
        	            case SUB_ASSIGN:
        	            	{
        	            		alt42=5;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 42;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionEx;
        	            }

        	            switch (alt42) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:746:19: MULT_ASSIGN
        	        	    {
        	        	        MULT_ASSIGN29 = (pANTLR3_BASE_TREE) MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpression3954); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((MULT_ASSIGN29->getLine(MULT_ASSIGN29))); 	(SCOPE_TOP(assignmentExpression))->op= " util.mul "; START_CAPTURE();  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:747:19: DIV_ASSIGN
        	        	    {
        	        	        DIV_ASSIGN30 = (pANTLR3_BASE_TREE) MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpression3984); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((DIV_ASSIGN30->getLine(DIV_ASSIGN30))); 	(SCOPE_TOP(assignmentExpression))->op= " util.div "; START_CAPTURE(); 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:748:19: MOD_ASSIGN
        	        	    {
        	        	        MOD_ASSIGN31 = (pANTLR3_BASE_TREE) MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpression4015); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((MOD_ASSIGN31->getLine(MOD_ASSIGN31))); 	(SCOPE_TOP(assignmentExpression))->op= " util.mod "; START_CAPTURE(); 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:749:19: ADD_ASSIGN
        	        	    {
        	        	        ADD_ASSIGN32 = (pANTLR3_BASE_TREE) MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpression4046); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((ADD_ASSIGN32->getLine(ADD_ASSIGN32))); 	(SCOPE_TOP(assignmentExpression))->op= " util.plus "; START_CAPTURE();  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:750:19: SUB_ASSIGN
        	        	    {
        	        	        SUB_ASSIGN33 = (pANTLR3_BASE_TREE) MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpression4078); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((SUB_ASSIGN33->getLine(SUB_ASSIGN33))); 	(SCOPE_TOP(assignmentExpression))->op= " util.sub "; START_CAPTURE(); 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression4120);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            STOP_CAPTURE();
        	                            APP(" = ");
        	                            APP(	(SCOPE_TOP(assignmentExpression))->op);
        	                            APP(" ( ");
        	                            APP((const char*)capture_string->chars);
        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression4149);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:766:11: ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:767:13: ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        	        {
        	            int alt43=4;
        	            switch ( LA(1) ) 
        	            {
        	            case ASSIGN:
        	            	{
        	            		alt43=1;
        	            	}
        	                break;
        	            case AND_ASSIGN:
        	            	{
        	            		alt43=2;
        	            	}
        	                break;
        	            case EXP_ASSIGN:
        	            	{
        	            		alt43=3;
        	            	}
        	                break;
        	            case OR_ASSIGN:
        	            	{
        	            		alt43=4;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 43;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionEx;
        	            }

        	            switch (alt43) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:768:17: ASSIGN
        	        	    {
        	        	        ASSIGN34 = (pANTLR3_BASE_TREE) MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpression4220); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((ASSIGN34->getLine(ASSIGN34))); 	(SCOPE_TOP(assignmentExpression))->op= " = ";    
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:769:19: AND_ASSIGN
        	        	    {
        	        	        AND_ASSIGN35 = (pANTLR3_BASE_TREE) MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpression4257); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((AND_ASSIGN35->getLine(AND_ASSIGN35))); 	(SCOPE_TOP(assignmentExpression))->op= " &= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:770:19: EXP_ASSIGN
        	        	    {
        	        	        EXP_ASSIGN36 = (pANTLR3_BASE_TREE) MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpression4288); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((EXP_ASSIGN36->getLine(EXP_ASSIGN36))); 	(SCOPE_TOP(assignmentExpression))->op= " ^= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:771:19: OR_ASSIGN
        	        	    {
        	        	        OR_ASSIGN37 = (pANTLR3_BASE_TREE) MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpression4319); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((OR_ASSIGN37->getLine(OR_ASSIGN37))); 	(SCOPE_TOP(assignmentExpression))->op= " |= "; 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression4361);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ");
        	                            APP(	(SCOPE_TOP(assignmentExpression))->op);
        	                            APP(" ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression4390);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    pEmersonTree_assignmentExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//EmersonTree.g:786:1: assignmentExpressionNoIn : ( conditionalExpression | ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression ) | ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) );
 */
static void
assignmentExpressionNoIn(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    MULT_ASSIGN38;
    pANTLR3_BASE_TREE    DIV_ASSIGN39;
    pANTLR3_BASE_TREE    MOD_ASSIGN40;
    pANTLR3_BASE_TREE    ADD_ASSIGN41;
    pANTLR3_BASE_TREE    SUB_ASSIGN42;
    pANTLR3_BASE_TREE    ASSIGN43;
    pANTLR3_BASE_TREE    AND_ASSIGN44;
    pANTLR3_BASE_TREE    EXP_ASSIGN45;
    pANTLR3_BASE_TREE    OR_ASSIGN46;

    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionNoInTop = pEmersonTree_assignmentExpressionNoInPush(ctx);
    MULT_ASSIGN38       = NULL;
    DIV_ASSIGN39       = NULL;
    MOD_ASSIGN40       = NULL;
    ADD_ASSIGN41       = NULL;
    SUB_ASSIGN42       = NULL;
    ASSIGN43       = NULL;
    AND_ASSIGN44       = NULL;
    EXP_ASSIGN45       = NULL;
    OR_ASSIGN46       = NULL;

    {
        {
            //  .//EmersonTree.g:791:9: ( conditionalExpression | ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression ) | ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt47;

            alt47=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case EVAL:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case TERNARYOP:
            case MESSAGE_RECV_NO_SENDER:
            case MESSAGE_RECV_AND_SENDER:
            case PAREN:
            case PATTERN_LITERAL:
            case SEND_CONSTRUCT:
            case SENDER_CONSTRUCT:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt47=1;
            	}
                break;
            case MULT_ASSIGN:
            case DIV_ASSIGN:
            case MOD_ASSIGN:
            case ADD_ASSIGN:
            case SUB_ASSIGN:
            	{
            		alt47=2;
            	}
                break;
            case ASSIGN:
            case AND_ASSIGN:
            case EXP_ASSIGN:
            case OR_ASSIGN:
            	{
            		alt47=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    pEmersonTree_assignmentExpressionNoInPop(ctx);

                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 47;
                EXCEPTION->state        = 0;


                goto ruleassignmentExpressionNoInEx;
            }

            switch (alt47) 
            {
        	case 1:
        	    // .//EmersonTree.g:791:11: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpressionNoIn4446);
        	        conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:792:11: ^( ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN ) e1= leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:793:13: ( MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN )
        	        {
        	            int alt45=5;
        	            switch ( LA(1) ) 
        	            {
        	            case MULT_ASSIGN:
        	            	{
        	            		alt45=1;
        	            	}
        	                break;
        	            case DIV_ASSIGN:
        	            	{
        	            		alt45=2;
        	            	}
        	                break;
        	            case MOD_ASSIGN:
        	            	{
        	            		alt45=3;
        	            	}
        	                break;
        	            case ADD_ASSIGN:
        	            	{
        	            		alt45=4;
        	            	}
        	                break;
        	            case SUB_ASSIGN:
        	            	{
        	            		alt45=5;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionNoInPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 45;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionNoInEx;
        	            }

        	            switch (alt45) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:794:19: MULT_ASSIGN
        	        	    {
        	        	        MULT_ASSIGN38 = (pANTLR3_BASE_TREE) MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4492); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((MULT_ASSIGN38->getLine(MULT_ASSIGN38))); 	(SCOPE_TOP(assignmentExpression))->op= " util.mul "; START_CAPTURE();  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:795:19: DIV_ASSIGN
        	        	    {
        	        	        DIV_ASSIGN39 = (pANTLR3_BASE_TREE) MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4522); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((DIV_ASSIGN39->getLine(DIV_ASSIGN39))); 	(SCOPE_TOP(assignmentExpression))->op= " util.div "; START_CAPTURE(); 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:796:19: MOD_ASSIGN
        	        	    {
        	        	        MOD_ASSIGN40 = (pANTLR3_BASE_TREE) MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4553); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((MOD_ASSIGN40->getLine(MOD_ASSIGN40))); 	(SCOPE_TOP(assignmentExpression))->op= " util.mod "; START_CAPTURE(); 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:797:19: ADD_ASSIGN
        	        	    {
        	        	        ADD_ASSIGN41 = (pANTLR3_BASE_TREE) MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4584); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((ADD_ASSIGN41->getLine(ADD_ASSIGN41))); 	(SCOPE_TOP(assignmentExpression))->op= " util.plus "; START_CAPTURE();  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:798:19: SUB_ASSIGN
        	        	    {
        	        	        SUB_ASSIGN42 = (pANTLR3_BASE_TREE) MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4616); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((SUB_ASSIGN42->getLine(SUB_ASSIGN42))); 	(SCOPE_TOP(assignmentExpression))->op= " util.sub "; START_CAPTURE(); 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4658);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            STOP_CAPTURE();
        	                            APP(" = ");
        	                            APP(	(SCOPE_TOP(assignmentExpression))->op);
        	                            APP(" ( ");
        	                            APP((const char*)capture_string->chars);
        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4687);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:813:11: ^( ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:814:13: ( ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        	        {
        	            int alt46=4;
        	            switch ( LA(1) ) 
        	            {
        	            case ASSIGN:
        	            	{
        	            		alt46=1;
        	            	}
        	                break;
        	            case AND_ASSIGN:
        	            	{
        	            		alt46=2;
        	            	}
        	                break;
        	            case EXP_ASSIGN:
        	            	{
        	            		alt46=3;
        	            	}
        	                break;
        	            case OR_ASSIGN:
        	            	{
        	            		alt46=4;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionNoInPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 46;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionNoInEx;
        	            }

        	            switch (alt46) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:815:17: ASSIGN
        	        	    {
        	        	        ASSIGN43 = (pANTLR3_BASE_TREE) MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpressionNoIn4757); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((ASSIGN43->getLine(ASSIGN43))); 	(SCOPE_TOP(assignmentExpression))->op= " = ";    
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:816:19: AND_ASSIGN
        	        	    {
        	        	        AND_ASSIGN44 = (pANTLR3_BASE_TREE) MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4794); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((AND_ASSIGN44->getLine(AND_ASSIGN44))); 	(SCOPE_TOP(assignmentExpression))->op= " &= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:817:19: EXP_ASSIGN
        	        	    {
        	        	        EXP_ASSIGN45 = (pANTLR3_BASE_TREE) MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4825); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((EXP_ASSIGN45->getLine(EXP_ASSIGN45))); 	(SCOPE_TOP(assignmentExpression))->op= " ^= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:818:19: OR_ASSIGN
        	        	    {
        	        	        OR_ASSIGN46 = (pANTLR3_BASE_TREE) MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4856); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             LINE((OR_ASSIGN46->getLine(OR_ASSIGN46))); 	(SCOPE_TOP(assignmentExpression))->op= " |= "; 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4898);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ");
        	                            APP(	(SCOPE_TOP(assignmentExpression))->op);
        	                            APP(" ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpressionNoIn4927);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    pEmersonTree_assignmentExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//EmersonTree.g:832:1: leftHandSideExpression : ( callExpression | newExpression );
 */
static void
leftHandSideExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:833:2: ( callExpression | newExpression )
            
            ANTLR3_UINT32 alt48;

            alt48=2;

            alt48 = cdfa48.predict(ctx, RECOGNIZER, ISTREAM, &cdfa48);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt48) 
            {
        	case 1:
        	    // .//EmersonTree.g:833:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression4968);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:834:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression4973);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//EmersonTree.g:837:1: newExpression : ( memberExpression | ^( NEW newExpression ) );
 */
static void
newExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:838:2: ( memberExpression | ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt49;

            alt49=2;

            alt49 = cdfa49.predict(ctx, RECOGNIZER, ISTREAM, &cdfa49);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt49) 
            {
        	case 1:
        	    // .//EmersonTree.g:838:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression4985);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:839:4: ^( NEW newExpression )
        	    {
        	         MATCHT(NEW, &FOLLOW_NEW_in_newExpression4992); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression4994);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//EmersonTree.g:843:1: propertyReferenceSuffix1 : Identifier ;
 */
static void
propertyReferenceSuffix1(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier47;

    /* Initialize rule variables
     */


    Identifier47       = NULL;

    {
        // .//EmersonTree.g:844:1: ( Identifier )
        // .//EmersonTree.g:844:3: Identifier
        {
            Identifier47 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix15022); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                 LINE((Identifier47->getLine(Identifier47))); APP((const char*)(Identifier47->getText(Identifier47))->chars);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start indexSuffix1
 * .//EmersonTree.g:847:1: indexSuffix1 : expression ;
 */
static void
indexSuffix1(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:848:1: ( expression )
        // .//EmersonTree.g:848:3: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix15034);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//EmersonTree.g:851:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static void
memberExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    DOT48;
    pANTLR3_BASE_TREE    ARRAY_INDEX49;
    pANTLR3_BASE_TREE    NEW50;
    pANTLR3_BASE_TREE    DOT51;

    /* Initialize rule variables
     */


    DOT48       = NULL;
    ARRAY_INDEX49       = NULL;
    NEW50       = NULL;
    DOT51       = NULL;

    {
        {
            //  .//EmersonTree.g:852:1: ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) )
            
            ANTLR3_UINT32 alt50;

            alt50=6;

            alt50 = cdfa50.predict(ctx, RECOGNIZER, ISTREAM, &cdfa50);
            if  (HASEXCEPTION())
            {
                goto rulememberExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt50) 
            {
        	case 1:
        	    // .//EmersonTree.g:852:3: primaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression5043);
        	        primaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:853:2: functionExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression5046);
        	        functionExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:854:3: ^( DOT memberExpression propertyReferenceSuffix1 )
        	    {
        	        DOT48 = (pANTLR3_BASE_TREE) MATCHT(DOT, &FOLLOW_DOT_in_memberExpression5051); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5053);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((DOT48->getLine(DOT48))); APP("."); 
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression5057);
        	        propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:855:3: ^( ARRAY_INDEX memberExpression indexSuffix1 )
        	    {
        	        ARRAY_INDEX49 = (pANTLR3_BASE_TREE) MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_memberExpression5064); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5066);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((ARRAY_INDEX49->getLine(ARRAY_INDEX49))); APP("[ "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression5070);
        	        indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ] "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:856:3: ^( NEW memberExpression arguments )
        	    {
        	        NEW50 = (pANTLR3_BASE_TREE) MATCHT(NEW, &FOLLOW_NEW_in_memberExpression5078); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((NEW50->getLine(NEW50))); APP("new "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5082);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_memberExpression5084);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:857:3: ^( DOT memberExpression )
        	    {
        	        DOT51 = (pANTLR3_BASE_TREE) MATCHT(DOT, &FOLLOW_DOT_in_memberExpression5090); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((DOT51->getLine(DOT51))); APP(".");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression5094);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//EmersonTree.g:860:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix );
 */
static void
memberExpressionSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:861:2: ( indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt51;

            alt51=2;


            {
                int LA51_0 = LA(1);
                if ( (LA51_0 == ARRAY_INDEX) ) 
                {
                    alt51=1;
                }
                else if ( (LA51_0 == DOT) ) 
                {
                    alt51=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 51;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt51) 
            {
        	case 1:
        	    // .//EmersonTree.g:861:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix5105);
        	        indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:862:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix5110);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//EmersonTree.g:865:1: callExpression : ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) );
 */
static void
callExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    ARRAY_INDEX52;
    pANTLR3_BASE_TREE    DOT53;

    /* Initialize rule variables
     */


    ARRAY_INDEX52       = NULL;
    DOT53       = NULL;

    {
        {
            //  .//EmersonTree.g:866:2: ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) )
            
            ANTLR3_UINT32 alt52;

            alt52=4;

            switch ( LA(1) ) 
            {
            case CALL:
            	{

            		{
            		    int LA52_1 = LA(2);
            		    if ( (synpred81_EmersonTree(ctx)) ) 
            		    {
            		        alt52=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt52=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return ;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 52;
            		        EXCEPTION->state        = 1;


            		        goto rulecallExpressionEx;
            		    }
            		}
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt52=2;
            	}
                break;
            case DOT:
            	{
            		alt52=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 52;
                EXCEPTION->state        = 0;


                goto rulecallExpressionEx;
            }

            switch (alt52) 
            {
        	case 1:
        	    // .//EmersonTree.g:866:4: ^( CALL memberExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression5123); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression5125);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression5127);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:867:4: ^( ARRAY_INDEX callExpression indexSuffix1 )
        	    {
        	        ARRAY_INDEX52 = (pANTLR3_BASE_TREE) MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_callExpression5135); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5137);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((ARRAY_INDEX52->getLine(ARRAY_INDEX52))); APP("[ "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression5141);
        	        indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:868:4: ^( DOT callExpression propertyReferenceSuffix1 )
        	    {
        	        DOT53 = (pANTLR3_BASE_TREE) MATCHT(DOT, &FOLLOW_DOT_in_callExpression5150); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5152);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((DOT53->getLine(DOT53))); APP(".");
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression5156);
        	        propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:869:4: ^( CALL callExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression5163); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression5165);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression5167);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//EmersonTree.g:874:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix );
 */
static void
callExpressionSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:875:2: ( arguments | indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt53;

            alt53=3;

            switch ( LA(1) ) 
            {
            case ARGLIST:
            	{
            		alt53=1;
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt53=2;
            	}
                break;
            case DOT:
            	{
            		alt53=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 53;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt53) 
            {
        	case 1:
        	    // .//EmersonTree.g:875:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix5181);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:876:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix5186);
        	        indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:877:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix5191);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//EmersonTree.g:880:1: arguments : ( ^( ARGLIST ) | ^( ARGLIST ( assignmentExpression ) ) | ^( ARGLIST assignmentExpression ( assignmentExpression )* ) );
 */
static void
arguments(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    ARGLIST54;
    pANTLR3_BASE_TREE    ARGLIST55;

    /* Initialize rule variables
     */


    ARGLIST54       = NULL;
    ARGLIST55       = NULL;

    {
        {
            //  .//EmersonTree.g:881:3: ( ^( ARGLIST ) | ^( ARGLIST ( assignmentExpression ) ) | ^( ARGLIST assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt55;

            alt55=3;


            {
                int LA55_0 = LA(1);
                if ( (LA55_0 == ARGLIST) ) 
                {

                    {
                        int LA55_1 = LA(2);
                        if ( (synpred86_EmersonTree(ctx)) ) 
                        {
                            alt55=1;
                        }
                        else if ( (synpred87_EmersonTree(ctx)) ) 
                        {
                            alt55=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt55=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 55;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 55;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt55) 
            {
        	case 1:
        	    // .//EmersonTree.g:881:5: ^( ARGLIST )
        	    {
        	        ARGLIST54 = (pANTLR3_BASE_TREE) MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5204); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((ARGLIST54->getLine(ARGLIST54)));  APP("( )"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:882:5: ^( ARGLIST ( assignmentExpression ) )
        	    {
        	        ARGLIST55 = (pANTLR3_BASE_TREE) MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5214); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((ARGLIST55->getLine(ARGLIST55))); APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:884:8: ( assignmentExpression )
        	        // .//EmersonTree.g:884:9: assignmentExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments5234);
        	            assignmentExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:888:5: ^( ARGLIST assignmentExpression ( assignmentExpression )* )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments5259); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP("( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments5275);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:893:7: ( assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt54=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA54_0 = LA(1);
        	                if ( (((LA54_0 >= CALL) && (LA54_0 <= DOT)) || LA54_0 == NEW || ((LA54_0 >= VECTOR) && (LA54_0 <= QUATERNION_AXISANGLE)) || LA54_0 == DOLLAR_EXPRESSION || ((LA54_0 >= ASSIGN) && (LA54_0 <= OBJ_LITERAL)) || ((LA54_0 >= DELETE_OP) && (LA54_0 <= NOT)) || LA54_0 == FUNC_EXPR || LA54_0 == TERNARYOP || ((LA54_0 >= MESSAGE_RECV_NO_SENDER) && (LA54_0 <= PATTERN_LITERAL)) || ((LA54_0 >= SEND_CONSTRUCT) && (LA54_0 <= SENDER_CONSTRUCT)) || ((LA54_0 >= Identifier) && (LA54_0 <= StringLiteral)) || LA54_0 == 210 || ((LA54_0 >= 212) && (LA54_0 <= 214))) ) 
        	                {
        	                    alt54=1;
        	                }

        	            }
        	            switch (alt54) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:894:9: assignmentExpression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                        APP(", ");
        	        	                    
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments5303);
        	        	        assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop54;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop54: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(" ) ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//EmersonTree.g:906:1: indexSuffix : ^( ARRAY_INDEX expression ) ;
 */
static void
indexSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:907:2: ( ^( ARRAY_INDEX expression ) )
        // .//EmersonTree.g:907:4: ^( ARRAY_INDEX expression )
        {
             MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_indexSuffix5343); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix5345);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//EmersonTree.g:910:1: propertyReferenceSuffix : ^( DOT Identifier ) ;
 */
static void
propertyReferenceSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:911:2: ( ^( DOT Identifier ) )
        // .//EmersonTree.g:911:4: ^( DOT Identifier )
        {
             MATCHT(DOT, &FOLLOW_DOT_in_propertyReferenceSuffix5360); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix5362); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//EmersonTree.g:914:1: assignmentOperator : ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN );
 */
static void
assignmentOperator(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:915:2: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= ASSIGN) && (LA(1) <= OR_ASSIGN)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_assignmentOperator0);    goto ruleassignmentOperatorEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//EmersonTree.g:918:1: conditionalExpressionNoIn : msgRecvConstructNoIn ;
 */
static void
conditionalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:919:9: ( msgRecvConstructNoIn )
        // .//EmersonTree.g:919:11: msgRecvConstructNoIn
        {
            FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn5414);
            msgRecvConstructNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start conditionalExpression
 * .//EmersonTree.g:922:1: conditionalExpression : msgRecvConstruct ;
 */
static void
conditionalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:923:9: ( msgRecvConstruct )
        // .//EmersonTree.g:923:11: msgRecvConstruct
        {
            FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_conditionalExpression5439);
            msgRecvConstruct(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start msgRecvConstruct
 * .//EmersonTree.g:926:1: msgRecvConstruct : ( msgConstruct | ^( MESSAGE_RECV_AND_SENDER msgRecvConstruct msgConstruct msgConstruct ) | ^( MESSAGE_RECV_NO_SENDER msgRecvConstruct msgConstruct ) );
 */
static void
msgRecvConstruct(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:927:9: ( msgConstruct | ^( MESSAGE_RECV_AND_SENDER msgRecvConstruct msgConstruct msgConstruct ) | ^( MESSAGE_RECV_NO_SENDER msgRecvConstruct msgConstruct ) )
            
            ANTLR3_UINT32 alt56;

            alt56=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case EVAL:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case TERNARYOP:
            case PAREN:
            case PATTERN_LITERAL:
            case SEND_CONSTRUCT:
            case SENDER_CONSTRUCT:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt56=1;
            	}
                break;
            case MESSAGE_RECV_AND_SENDER:
            	{
            		alt56=2;
            	}
                break;
            case MESSAGE_RECV_NO_SENDER:
            	{
            		alt56=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 56;
                EXCEPTION->state        = 0;


                goto rulemsgRecvConstructEx;
            }

            switch (alt56) 
            {
        	case 1:
        	    // .//EmersonTree.g:927:11: msgConstruct
        	    {
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct5472);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:928:11: ^( MESSAGE_RECV_AND_SENDER msgRecvConstruct msgConstruct msgConstruct )
        	    {
        	         MATCHT(MESSAGE_RECV_AND_SENDER, &FOLLOW_MESSAGE_RECV_AND_SENDER_in_msgRecvConstruct5485); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                           APP("system.registerHandler( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_msgRecvConstruct5513);
        	        msgRecvConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct5541);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct5569);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:945:11: ^( MESSAGE_RECV_NO_SENDER msgRecvConstruct msgConstruct )
        	    {
        	         MATCHT(MESSAGE_RECV_NO_SENDER, &FOLLOW_MESSAGE_RECV_NO_SENDER_in_msgRecvConstruct5609); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                           APP("system.registerHandler( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_msgRecvConstruct5637);
        	        msgRecvConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct5665);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(", null)");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructEx; /* Prevent compiler warnings */
    rulemsgRecvConstructEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgRecvConstruct */

/** 
 * $ANTLR start msgConstruct
 * .//EmersonTree.g:960:1: msgConstruct : ( msgSenderConstruct | ^( SEND_CONSTRUCT msgConstruct msgSenderConstruct ) );
 */
static void
msgConstruct(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:961:9: ( msgSenderConstruct | ^( SEND_CONSTRUCT msgConstruct msgSenderConstruct ) )
            
            ANTLR3_UINT32 alt57;

            alt57=2;


            {
                int LA57_0 = LA(1);
                if ( (((LA57_0 >= CALL) && (LA57_0 <= DOT)) || LA57_0 == NEW || ((LA57_0 >= VECTOR) && (LA57_0 <= QUATERNION_AXISANGLE)) || LA57_0 == DOLLAR_EXPRESSION || ((LA57_0 >= OR) && (LA57_0 <= OBJ_LITERAL)) || ((LA57_0 >= DELETE_OP) && (LA57_0 <= NOT)) || LA57_0 == FUNC_EXPR || LA57_0 == TERNARYOP || ((LA57_0 >= PAREN) && (LA57_0 <= PATTERN_LITERAL)) || LA57_0 == SENDER_CONSTRUCT || ((LA57_0 >= Identifier) && (LA57_0 <= StringLiteral)) || LA57_0 == 210 || ((LA57_0 >= 212) && (LA57_0 <= 214))) ) 
                {
                    alt57=1;
                }
                else if ( (LA57_0 == SEND_CONSTRUCT) ) 
                {
                    alt57=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 57;
                    EXCEPTION->state        = 0;


                    goto rulemsgConstructEx;
                }
            }
            switch (alt57) 
            {
        	case 1:
        	    // .//EmersonTree.g:961:11: msgSenderConstruct
        	    {
        	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct5718);
        	        msgSenderConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:962:11: ^( SEND_CONSTRUCT msgConstruct msgSenderConstruct )
        	    {
        	         MATCHT(SEND_CONSTRUCT, &FOLLOW_SEND_CONSTRUCT_in_msgConstruct5731); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("std.messaging.sendSyntax(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgConstruct5759);
        	        msgConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct5787);
        	        msgSenderConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructEx; /* Prevent compiler warnings */
    rulemsgConstructEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgConstruct */

/** 
 * $ANTLR start msgSenderConstruct
 * .//EmersonTree.g:978:1: msgSenderConstruct : ( ternaryExpression | ^( SENDER_CONSTRUCT msgSenderConstruct ternaryExpression ) );
 */
static void
msgSenderConstruct(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:979:9: ( ternaryExpression | ^( SENDER_CONSTRUCT msgSenderConstruct ternaryExpression ) )
            
            ANTLR3_UINT32 alt58;

            alt58=2;


            {
                int LA58_0 = LA(1);
                if ( (((LA58_0 >= CALL) && (LA58_0 <= DOT)) || LA58_0 == NEW || ((LA58_0 >= VECTOR) && (LA58_0 <= QUATERNION_AXISANGLE)) || LA58_0 == DOLLAR_EXPRESSION || ((LA58_0 >= OR) && (LA58_0 <= OBJ_LITERAL)) || ((LA58_0 >= DELETE_OP) && (LA58_0 <= NOT)) || LA58_0 == FUNC_EXPR || LA58_0 == TERNARYOP || ((LA58_0 >= PAREN) && (LA58_0 <= PATTERN_LITERAL)) || ((LA58_0 >= Identifier) && (LA58_0 <= StringLiteral)) || LA58_0 == 210 || ((LA58_0 >= 212) && (LA58_0 <= 214))) ) 
                {
                    alt58=1;
                }
                else if ( (LA58_0 == SENDER_CONSTRUCT) ) 
                {
                    alt58=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 58;
                    EXCEPTION->state        = 0;


                    goto rulemsgSenderConstructEx;
                }
            }
            switch (alt58) 
            {
        	case 1:
        	    // .//EmersonTree.g:979:12: ternaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct5850);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:980:11: ^( SENDER_CONSTRUCT msgSenderConstruct ternaryExpression )
        	    {
        	         MATCHT(SENDER_CONSTRUCT, &FOLLOW_SENDER_CONSTRUCT_in_msgSenderConstruct5863); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("std.messaging.SenderMessagePair(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgSenderConstruct5891);
        	        msgSenderConstruct(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct5919);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructEx; /* Prevent compiler warnings */
    rulemsgSenderConstructEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgSenderConstruct */

/** 
 * $ANTLR start ternaryExpression
 * .//EmersonTree.g:996:1: ternaryExpression : ( logicalORExpression | ^( TERNARYOP ternaryExpression assignmentExpression assignmentExpression ) );
 */
static void
ternaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:997:9: ( logicalORExpression | ^( TERNARYOP ternaryExpression assignmentExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt59;

            alt59=2;


            {
                int LA59_0 = LA(1);
                if ( (((LA59_0 >= CALL) && (LA59_0 <= DOT)) || LA59_0 == NEW || ((LA59_0 >= VECTOR) && (LA59_0 <= QUATERNION_AXISANGLE)) || LA59_0 == DOLLAR_EXPRESSION || ((LA59_0 >= OR) && (LA59_0 <= OBJ_LITERAL)) || ((LA59_0 >= DELETE_OP) && (LA59_0 <= NOT)) || LA59_0 == FUNC_EXPR || ((LA59_0 >= PAREN) && (LA59_0 <= PATTERN_LITERAL)) || ((LA59_0 >= Identifier) && (LA59_0 <= StringLiteral)) || LA59_0 == 210 || ((LA59_0 >= 212) && (LA59_0 <= 214))) ) 
                {
                    alt59=1;
                }
                else if ( (LA59_0 == TERNARYOP) ) 
                {
                    alt59=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 59;
                    EXCEPTION->state        = 0;


                    goto ruleternaryExpressionEx;
                }
            }
            switch (alt59) 
            {
        	case 1:
        	    // .//EmersonTree.g:997:11: logicalORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_ternaryExpression5981);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:998:11: ^( TERNARYOP ternaryExpression assignmentExpression assignmentExpression )
        	    {
        	         MATCHT(TERNARYOP, &FOLLOW_TERNARYOP_in_ternaryExpression5994); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_ternaryExpression6022);
        	        ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ? ( ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression6063);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) : ( ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression6104);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionEx; /* Prevent compiler warnings */
    ruleternaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ternaryExpression */

/** 
 * $ANTLR start msgRecvConstructNoIn
 * .//EmersonTree.g:1020:1: msgRecvConstructNoIn : ( msgConstructNoIn | ^( MESSAGE_RECV_AND_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn msgConstructNoIn ) | ^( MESSAGE_RECV_NO_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn ) );
 */
static void
msgRecvConstructNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1021:9: ( msgConstructNoIn | ^( MESSAGE_RECV_AND_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn msgConstructNoIn ) | ^( MESSAGE_RECV_NO_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn ) )
            
            ANTLR3_UINT32 alt60;

            alt60=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case OR:
            case AND:
            case BIT_OR:
            case EXP:
            case BIT_AND:
            case EQUALS:
            case NOT_EQUALS:
            case IDENT:
            case NOT_IDENT:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case EVAL:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case TERNARYOP_NO_IN:
            case PAREN:
            case PATTERN_LITERAL:
            case SEND_CONSTRUCT_NO_IN:
            case SENDER_CONSTRUCT_NO_IN:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt60=1;
            	}
                break;
            case MESSAGE_RECV_AND_SENDER_NO_IN:
            	{
            		alt60=2;
            	}
                break;
            case MESSAGE_RECV_NO_SENDER_NO_IN:
            	{
            		alt60=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 60;
                EXCEPTION->state        = 0;


                goto rulemsgRecvConstructNoInEx;
            }

            switch (alt60) 
            {
        	case 1:
        	    // .//EmersonTree.g:1021:11: msgConstructNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6166);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1022:11: ^( MESSAGE_RECV_AND_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn msgConstructNoIn )
        	    {
        	         MATCHT(MESSAGE_RECV_AND_SENDER_NO_IN, &FOLLOW_MESSAGE_RECV_AND_SENDER_NO_IN_in_msgRecvConstructNoIn6179); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                           APP("system.registerHandler( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6207);
        	        msgRecvConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6235);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6263);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1039:11: ^( MESSAGE_RECV_NO_SENDER_NO_IN msgRecvConstructNoIn msgConstructNoIn )
        	    {
        	         MATCHT(MESSAGE_RECV_NO_SENDER_NO_IN, &FOLLOW_MESSAGE_RECV_NO_SENDER_NO_IN_in_msgRecvConstructNoIn6303); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                           APP("system.registerHandler( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_msgRecvConstructNoIn6331);
        	        msgRecvConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn6359);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(", null)");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructNoInEx; /* Prevent compiler warnings */
    rulemsgRecvConstructNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgRecvConstructNoIn */

/** 
 * $ANTLR start msgConstructNoIn
 * .//EmersonTree.g:1055:1: msgConstructNoIn : ( msgSenderConstructNoIn | ^( SEND_CONSTRUCT_NO_IN msgConstructNoIn msgSenderConstructNoIn ) );
 */
static void
msgConstructNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1056:9: ( msgSenderConstructNoIn | ^( SEND_CONSTRUCT_NO_IN msgConstructNoIn msgSenderConstructNoIn ) )
            
            ANTLR3_UINT32 alt61;

            alt61=2;


            {
                int LA61_0 = LA(1);
                if ( (((LA61_0 >= CALL) && (LA61_0 <= DOT)) || LA61_0 == NEW || ((LA61_0 >= VECTOR) && (LA61_0 <= QUATERNION_AXISANGLE)) || LA61_0 == DOLLAR_EXPRESSION || ((LA61_0 >= OR) && (LA61_0 <= INSTANCE_OF)) || ((LA61_0 >= ADD_OP) && (LA61_0 <= OBJ_LITERAL)) || ((LA61_0 >= DELETE_OP) && (LA61_0 <= NOT)) || LA61_0 == FUNC_EXPR || LA61_0 == TERNARYOP_NO_IN || ((LA61_0 >= PAREN) && (LA61_0 <= PATTERN_LITERAL)) || LA61_0 == SENDER_CONSTRUCT_NO_IN || ((LA61_0 >= Identifier) && (LA61_0 <= StringLiteral)) || LA61_0 == 210 || ((LA61_0 >= 212) && (LA61_0 <= 214))) ) 
                {
                    alt61=1;
                }
                else if ( (LA61_0 == SEND_CONSTRUCT_NO_IN) ) 
                {
                    alt61=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 61;
                    EXCEPTION->state        = 0;


                    goto rulemsgConstructNoInEx;
                }
            }
            switch (alt61) 
            {
        	case 1:
        	    // .//EmersonTree.g:1056:11: msgSenderConstructNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6413);
        	        msgSenderConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1057:11: ^( SEND_CONSTRUCT_NO_IN msgConstructNoIn msgSenderConstructNoIn )
        	    {
        	         MATCHT(SEND_CONSTRUCT_NO_IN, &FOLLOW_SEND_CONSTRUCT_NO_IN_in_msgConstructNoIn6426); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("std.messaging.sendSyntax(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgConstructNoIn6454);
        	        msgConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn6482);
        	        msgSenderConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructNoInEx; /* Prevent compiler warnings */
    rulemsgConstructNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgConstructNoIn */

/** 
 * $ANTLR start msgSenderConstructNoIn
 * .//EmersonTree.g:1073:1: msgSenderConstructNoIn : ( ternaryExpressionNoIn | ^( SENDER_CONSTRUCT_NO_IN msgSenderConstructNoIn ternaryExpressionNoIn ) );
 */
static void
msgSenderConstructNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1074:9: ( ternaryExpressionNoIn | ^( SENDER_CONSTRUCT_NO_IN msgSenderConstructNoIn ternaryExpressionNoIn ) )
            
            ANTLR3_UINT32 alt62;

            alt62=2;


            {
                int LA62_0 = LA(1);
                if ( (((LA62_0 >= CALL) && (LA62_0 <= DOT)) || LA62_0 == NEW || ((LA62_0 >= VECTOR) && (LA62_0 <= QUATERNION_AXISANGLE)) || LA62_0 == DOLLAR_EXPRESSION || ((LA62_0 >= OR) && (LA62_0 <= INSTANCE_OF)) || ((LA62_0 >= ADD_OP) && (LA62_0 <= OBJ_LITERAL)) || ((LA62_0 >= DELETE_OP) && (LA62_0 <= NOT)) || LA62_0 == FUNC_EXPR || LA62_0 == TERNARYOP_NO_IN || ((LA62_0 >= PAREN) && (LA62_0 <= PATTERN_LITERAL)) || ((LA62_0 >= Identifier) && (LA62_0 <= StringLiteral)) || LA62_0 == 210 || ((LA62_0 >= 212) && (LA62_0 <= 214))) ) 
                {
                    alt62=1;
                }
                else if ( (LA62_0 == SENDER_CONSTRUCT_NO_IN) ) 
                {
                    alt62=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 62;
                    EXCEPTION->state        = 0;


                    goto rulemsgSenderConstructNoInEx;
                }
            }
            switch (alt62) 
            {
        	case 1:
        	    // .//EmersonTree.g:1074:12: ternaryExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6545);
        	        ternaryExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1075:11: ^( SENDER_CONSTRUCT_NO_IN msgSenderConstructNoIn ternaryExpressionNoIn )
        	    {
        	         MATCHT(SENDER_CONSTRUCT_NO_IN, &FOLLOW_SENDER_CONSTRUCT_NO_IN_in_msgSenderConstructNoIn6558); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("std.messaging.SenderMessagePair(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgSenderConstructNoIn6586);
        	        msgSenderConstructNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn6614);
        	        ternaryExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgSenderConstructNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructNoInEx; /* Prevent compiler warnings */
    rulemsgSenderConstructNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgSenderConstructNoIn */

/** 
 * $ANTLR start ternaryExpressionNoIn
 * .//EmersonTree.g:1091:1: ternaryExpressionNoIn : ( logicalORExpressionNoIn | ^( TERNARYOP_NO_IN ternaryExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn ) );
 */
static void
ternaryExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1092:9: ( logicalORExpressionNoIn | ^( TERNARYOP_NO_IN ternaryExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt63;

            alt63=2;


            {
                int LA63_0 = LA(1);
                if ( (((LA63_0 >= CALL) && (LA63_0 <= DOT)) || LA63_0 == NEW || ((LA63_0 >= VECTOR) && (LA63_0 <= QUATERNION_AXISANGLE)) || LA63_0 == DOLLAR_EXPRESSION || ((LA63_0 >= OR) && (LA63_0 <= INSTANCE_OF)) || ((LA63_0 >= ADD_OP) && (LA63_0 <= OBJ_LITERAL)) || ((LA63_0 >= DELETE_OP) && (LA63_0 <= NOT)) || LA63_0 == FUNC_EXPR || ((LA63_0 >= PAREN) && (LA63_0 <= PATTERN_LITERAL)) || ((LA63_0 >= Identifier) && (LA63_0 <= StringLiteral)) || LA63_0 == 210 || ((LA63_0 >= 212) && (LA63_0 <= 214))) ) 
                {
                    alt63=1;
                }
                else if ( (LA63_0 == TERNARYOP_NO_IN) ) 
                {
                    alt63=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 63;
                    EXCEPTION->state        = 0;


                    goto ruleternaryExpressionNoInEx;
                }
            }
            switch (alt63) 
            {
        	case 1:
        	    // .//EmersonTree.g:1092:11: logicalORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn6667);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1093:11: ^( TERNARYOP_NO_IN ternaryExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn )
        	    {
        	         MATCHT(TERNARYOP_NO_IN, &FOLLOW_TERNARYOP_NO_IN_in_ternaryExpressionNoIn6680); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_ternaryExpressionNoIn6708);
        	        ternaryExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ? ( ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6736);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) : ( ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn6764);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleternaryExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionNoInEx; /* Prevent compiler warnings */
    ruleternaryExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ternaryExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpression
 * .//EmersonTree.g:1115:1: logicalANDExpression : ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) );
 */
static void
logicalANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1116:2: ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) )
            
            ANTLR3_UINT32 alt64;

            alt64=2;


            {
                int LA64_0 = LA(1);
                if ( (((LA64_0 >= CALL) && (LA64_0 <= DOT)) || LA64_0 == NEW || ((LA64_0 >= VECTOR) && (LA64_0 <= QUATERNION_AXISANGLE)) || LA64_0 == DOLLAR_EXPRESSION || ((LA64_0 >= BIT_OR) && (LA64_0 <= OBJ_LITERAL)) || ((LA64_0 >= DELETE_OP) && (LA64_0 <= NOT)) || LA64_0 == FUNC_EXPR || ((LA64_0 >= PAREN) && (LA64_0 <= PATTERN_LITERAL)) || ((LA64_0 >= Identifier) && (LA64_0 <= StringLiteral)) || LA64_0 == 210 || ((LA64_0 >= 212) && (LA64_0 <= 214))) ) 
                {
                    alt64=1;
                }
                else if ( (LA64_0 == AND) ) 
                {
                    alt64=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 64;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionEx;
                }
            }
            switch (alt64) 
            {
        	case 1:
        	    // .//EmersonTree.g:1116:4: bitwiseORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression6812);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1117:3: ^( AND logicalANDExpression bitwiseORExpression )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpression6817); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalANDExpression6819);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression6823);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpression
 * .//EmersonTree.g:1121:1: logicalORExpression : ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) );
 */
static void
logicalORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1122:2: ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) )
            
            ANTLR3_UINT32 alt65;

            alt65=2;


            {
                int LA65_0 = LA(1);
                if ( (((LA65_0 >= CALL) && (LA65_0 <= DOT)) || LA65_0 == NEW || ((LA65_0 >= VECTOR) && (LA65_0 <= QUATERNION_AXISANGLE)) || LA65_0 == DOLLAR_EXPRESSION || ((LA65_0 >= AND) && (LA65_0 <= OBJ_LITERAL)) || ((LA65_0 >= DELETE_OP) && (LA65_0 <= NOT)) || LA65_0 == FUNC_EXPR || ((LA65_0 >= PAREN) && (LA65_0 <= PATTERN_LITERAL)) || ((LA65_0 >= Identifier) && (LA65_0 <= StringLiteral)) || LA65_0 == 210 || ((LA65_0 >= 212) && (LA65_0 <= 214))) ) 
                {
                    alt65=1;
                }
                else if ( (LA65_0 == OR) ) 
                {
                    alt65=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 65;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionEx;
                }
            }
            switch (alt65) 
            {
        	case 1:
        	    // .//EmersonTree.g:1122:4: logicalANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression6836);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1123:3: ^( OR logicalORExpression logicalANDExpression )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpression6841); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_logicalORExpression6843);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression6847);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//EmersonTree.g:1126:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) );
 */
static void
logicalORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1127:2: ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt66;

            alt66=2;


            {
                int LA66_0 = LA(1);
                if ( (((LA66_0 >= CALL) && (LA66_0 <= DOT)) || LA66_0 == NEW || ((LA66_0 >= VECTOR) && (LA66_0 <= QUATERNION_AXISANGLE)) || LA66_0 == DOLLAR_EXPRESSION || ((LA66_0 >= AND) && (LA66_0 <= INSTANCE_OF)) || ((LA66_0 >= ADD_OP) && (LA66_0 <= OBJ_LITERAL)) || ((LA66_0 >= DELETE_OP) && (LA66_0 <= NOT)) || LA66_0 == FUNC_EXPR || ((LA66_0 >= PAREN) && (LA66_0 <= PATTERN_LITERAL)) || ((LA66_0 >= Identifier) && (LA66_0 <= StringLiteral)) || LA66_0 == 210 || ((LA66_0 >= 212) && (LA66_0 <= 214))) ) 
                {
                    alt66=1;
                }
                else if ( (LA66_0 == OR) ) 
                {
                    alt66=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 66;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionNoInEx;
                }
            }
            switch (alt66) 
            {
        	case 1:
        	    // .//EmersonTree.g:1127:4: logicalANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6860);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1128:3: ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpressionNoIn6865); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn6867);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || ");
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn6869);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//EmersonTree.g:1132:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) );
 */
static void
logicalANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1133:2: ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt67;

            alt67=2;


            {
                int LA67_0 = LA(1);
                if ( (((LA67_0 >= CALL) && (LA67_0 <= DOT)) || LA67_0 == NEW || ((LA67_0 >= VECTOR) && (LA67_0 <= QUATERNION_AXISANGLE)) || LA67_0 == DOLLAR_EXPRESSION || ((LA67_0 >= BIT_OR) && (LA67_0 <= INSTANCE_OF)) || ((LA67_0 >= ADD_OP) && (LA67_0 <= OBJ_LITERAL)) || ((LA67_0 >= DELETE_OP) && (LA67_0 <= NOT)) || LA67_0 == FUNC_EXPR || ((LA67_0 >= PAREN) && (LA67_0 <= PATTERN_LITERAL)) || ((LA67_0 >= Identifier) && (LA67_0 <= StringLiteral)) || LA67_0 == 210 || ((LA67_0 >= 212) && (LA67_0 <= 214))) ) 
                {
                    alt67=1;
                }
                else if ( (LA67_0 == AND) ) 
                {
                    alt67=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 67;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionNoInEx;
                }
            }
            switch (alt67) 
            {
        	case 1:
        	    // .//EmersonTree.g:1133:4: bitwiseORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6884);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1134:3: ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpressionNoIn6890); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn6892);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn6896);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//EmersonTree.g:1137:1: bitwiseORExpression : ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) );
 */
static void
bitwiseORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1138:2: ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) )
            
            ANTLR3_UINT32 alt68;

            alt68=2;


            {
                int LA68_0 = LA(1);
                if ( (((LA68_0 >= CALL) && (LA68_0 <= DOT)) || LA68_0 == NEW || ((LA68_0 >= VECTOR) && (LA68_0 <= QUATERNION_AXISANGLE)) || LA68_0 == DOLLAR_EXPRESSION || ((LA68_0 >= EXP) && (LA68_0 <= OBJ_LITERAL)) || ((LA68_0 >= DELETE_OP) && (LA68_0 <= NOT)) || LA68_0 == FUNC_EXPR || ((LA68_0 >= PAREN) && (LA68_0 <= PATTERN_LITERAL)) || ((LA68_0 >= Identifier) && (LA68_0 <= StringLiteral)) || LA68_0 == 210 || ((LA68_0 >= 212) && (LA68_0 <= 214))) ) 
                {
                    alt68=1;
                }
                else if ( (LA68_0 == BIT_OR) ) 
                {
                    alt68=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 68;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionEx;
                }
            }
            switch (alt68) 
            {
        	case 1:
        	    // .//EmersonTree.g:1138:4: bitwiseXORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6910);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1139:3: ^( BIT_OR bitwiseORExpression bitwiseXORExpression )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpression6916); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_bitwiseORExpression6918);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" | "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression6922);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//EmersonTree.g:1142:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) );
 */
static void
bitwiseORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1143:2: ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt69;

            alt69=2;


            {
                int LA69_0 = LA(1);
                if ( (((LA69_0 >= CALL) && (LA69_0 <= DOT)) || LA69_0 == NEW || ((LA69_0 >= VECTOR) && (LA69_0 <= QUATERNION_AXISANGLE)) || LA69_0 == DOLLAR_EXPRESSION || ((LA69_0 >= EXP) && (LA69_0 <= INSTANCE_OF)) || ((LA69_0 >= ADD_OP) && (LA69_0 <= OBJ_LITERAL)) || ((LA69_0 >= DELETE_OP) && (LA69_0 <= NOT)) || LA69_0 == FUNC_EXPR || ((LA69_0 >= PAREN) && (LA69_0 <= PATTERN_LITERAL)) || ((LA69_0 >= Identifier) && (LA69_0 <= StringLiteral)) || LA69_0 == 210 || ((LA69_0 >= 212) && (LA69_0 <= 214))) ) 
                {
                    alt69=1;
                }
                else if ( (LA69_0 == BIT_OR) ) 
                {
                    alt69=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 69;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionNoInEx;
                }
            }
            switch (alt69) 
            {
        	case 1:
        	    // .//EmersonTree.g:1143:4: bitwiseXORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6935);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1144:3: ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn6942); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn6944);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" | ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn6948);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//EmersonTree.g:1147:1: bitwiseXORExpression : ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) );
 */
static void
bitwiseXORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1148:1: ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) )
            
            ANTLR3_UINT32 alt70;

            alt70=2;


            {
                int LA70_0 = LA(1);
                if ( (((LA70_0 >= CALL) && (LA70_0 <= DOT)) || LA70_0 == NEW || ((LA70_0 >= VECTOR) && (LA70_0 <= QUATERNION_AXISANGLE)) || LA70_0 == DOLLAR_EXPRESSION || ((LA70_0 >= BIT_AND) && (LA70_0 <= OBJ_LITERAL)) || ((LA70_0 >= DELETE_OP) && (LA70_0 <= NOT)) || LA70_0 == FUNC_EXPR || ((LA70_0 >= PAREN) && (LA70_0 <= PATTERN_LITERAL)) || ((LA70_0 >= Identifier) && (LA70_0 <= StringLiteral)) || LA70_0 == 210 || ((LA70_0 >= 212) && (LA70_0 <= 214))) ) 
                {
                    alt70=1;
                }
                else if ( (LA70_0 == EXP) ) 
                {
                    alt70=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 70;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionEx;
                }
            }
            switch (alt70) 
            {
        	case 1:
        	    // .//EmersonTree.g:1148:3: bitwiseANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6960);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1149:3: ^( EXP e= bitwiseXORExpression bitwiseANDExpression )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpression6967); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression6971);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression6975);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//EmersonTree.g:1152:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) );
 */
static void
bitwiseXORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1153:2: ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt71;

            alt71=2;


            {
                int LA71_0 = LA(1);
                if ( (((LA71_0 >= CALL) && (LA71_0 <= DOT)) || LA71_0 == NEW || ((LA71_0 >= VECTOR) && (LA71_0 <= QUATERNION_AXISANGLE)) || LA71_0 == DOLLAR_EXPRESSION || ((LA71_0 >= BIT_AND) && (LA71_0 <= INSTANCE_OF)) || ((LA71_0 >= ADD_OP) && (LA71_0 <= OBJ_LITERAL)) || ((LA71_0 >= DELETE_OP) && (LA71_0 <= NOT)) || LA71_0 == FUNC_EXPR || ((LA71_0 >= PAREN) && (LA71_0 <= PATTERN_LITERAL)) || ((LA71_0 >= Identifier) && (LA71_0 <= StringLiteral)) || LA71_0 == 210 || ((LA71_0 >= 212) && (LA71_0 <= 214))) ) 
                {
                    alt71=1;
                }
                else if ( (LA71_0 == EXP) ) 
                {
                    alt71=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 71;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionNoInEx;
                }
            }
            switch (alt71) 
            {
        	case 1:
        	    // .//EmersonTree.g:1153:4: bitwiseANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn6987);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1154:3: ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpressionNoIn6993); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn6997);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn7000);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//EmersonTree.g:1157:1: bitwiseANDExpression : ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) );
 */
static void
bitwiseANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1158:2: ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) )
            
            ANTLR3_UINT32 alt72;

            alt72=2;


            {
                int LA72_0 = LA(1);
                if ( (((LA72_0 >= CALL) && (LA72_0 <= DOT)) || LA72_0 == NEW || ((LA72_0 >= VECTOR) && (LA72_0 <= QUATERNION_AXISANGLE)) || LA72_0 == DOLLAR_EXPRESSION || ((LA72_0 >= EQUALS) && (LA72_0 <= OBJ_LITERAL)) || ((LA72_0 >= DELETE_OP) && (LA72_0 <= NOT)) || LA72_0 == FUNC_EXPR || ((LA72_0 >= PAREN) && (LA72_0 <= PATTERN_LITERAL)) || ((LA72_0 >= Identifier) && (LA72_0 <= StringLiteral)) || LA72_0 == 210 || ((LA72_0 >= 212) && (LA72_0 <= 214))) ) 
                {
                    alt72=1;
                }
                else if ( (LA72_0 == BIT_AND) ) 
                {
                    alt72=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 72;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionEx;
                }
            }
            switch (alt72) 
            {
        	case 1:
        	    // .//EmersonTree.g:1158:4: equalityExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression7014);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1159:4: ^( BIT_AND e= bitwiseANDExpression equalityExpression )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpression7020); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression7024);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression7028);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//EmersonTree.g:1162:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) );
 */
static void
bitwiseANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1163:2: ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) )
            
            ANTLR3_UINT32 alt73;

            alt73=2;


            {
                int LA73_0 = LA(1);
                if ( (((LA73_0 >= CALL) && (LA73_0 <= DOT)) || LA73_0 == NEW || ((LA73_0 >= VECTOR) && (LA73_0 <= QUATERNION_AXISANGLE)) || LA73_0 == DOLLAR_EXPRESSION || ((LA73_0 >= EQUALS) && (LA73_0 <= INSTANCE_OF)) || ((LA73_0 >= ADD_OP) && (LA73_0 <= OBJ_LITERAL)) || ((LA73_0 >= DELETE_OP) && (LA73_0 <= NOT)) || LA73_0 == FUNC_EXPR || ((LA73_0 >= PAREN) && (LA73_0 <= PATTERN_LITERAL)) || ((LA73_0 >= Identifier) && (LA73_0 <= StringLiteral)) || LA73_0 == 210 || ((LA73_0 >= 212) && (LA73_0 <= 214))) ) 
                {
                    alt73=1;
                }
                else if ( (LA73_0 == BIT_AND) ) 
                {
                    alt73=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 73;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionNoInEx;
                }
            }
            switch (alt73) 
            {
        	case 1:
        	    // .//EmersonTree.g:1163:4: equalityExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7042);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1164:4: ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn7049); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn7053);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn7057);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//EmersonTree.g:1167:1: equalityExpression : ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) );
 */
static void
equalityExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1168:2: ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) )
            
            ANTLR3_UINT32 alt74;

            alt74=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case EVAL:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt74=1;
            	}
                break;
            case EQUALS:
            	{
            		alt74=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt74=3;
            	}
                break;
            case IDENT:
            	{
            		alt74=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt74=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 74;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionEx;
            }

            switch (alt74) 
            {
        	case 1:
        	    // .//EmersonTree.g:1168:4: relationalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression7070);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1169:11: ^( EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpression7083); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.equal( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression7113);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(",");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression7141);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1182:4: ^( NOT_EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpression7174); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.notEqual( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression7204);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression7232);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1195:4: ^( IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpression7265); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.identical( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression7295);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression7323);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1208:4: ^( NOT_IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpression7356); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.notIdentical( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression7386);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression7414);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(")");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//EmersonTree.g:1223:1: equalityExpressionNoIn : ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) );
 */
static void
equalityExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1224:1: ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt75;

            alt75=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case EVAL:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt75=1;
            	}
                break;
            case EQUALS:
            	{
            		alt75=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt75=3;
            	}
                break;
            case IDENT:
            	{
            		alt75=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt75=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 75;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionNoInEx;
            }

            switch (alt75) 
            {
        	case 1:
        	    // .//EmersonTree.g:1224:3: relationalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7450);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1225:5: ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpressionNoIn7457); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(" util.equal( ");        
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7473);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(" , ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7489);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(")");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1238:5: ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn7511); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP("util.notEqual(");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7527);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(" != ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7543);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(")");      
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1251:5: ^( IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpressionNoIn7565); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP("util.identical( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7581);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(" , ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7597);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                      APP(")");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1264:5: ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpressionNoIn7619); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP("util.notIdentical (");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn7635);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP(" , ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn7651);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP(" )");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//EmersonTree.g:1280:1: relationalOps : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN );
 */
static void
relationalOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1281:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN )
            
            ANTLR3_UINT32 alt76;

            alt76=6;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt76=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt76=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt76=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt76=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt76=5;
            	}
                break;
            case IN:
            	{
            		alt76=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 76;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt76) 
            {
        	case 1:
        	    // .//EmersonTree.g:1281:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOps7677); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               	(SCOPE_TOP(relationalExpression))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1282:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOps7683); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">" ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1283:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOps7689); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "<=" ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1284:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOps7696); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1285:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOps7702); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "instanceOf" ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1286:3: IN
        	    {
        	         MATCHT(IN, &FOLLOW_IN_in_relationalOps7708); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "in" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//EmersonTree.g:1289:1: relationalExpression : ( additiveExpression | ^( relationalOps e= relationalExpression additiveExpression ) );
 */
static void
relationalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionTop = pEmersonTree_relationalExpressionPush(ctx);
    {
        {
            //  .//EmersonTree.g:1295:2: ( additiveExpression | ^( relationalOps e= relationalExpression additiveExpression ) )
            
            ANTLR3_UINT32 alt77;

            alt77=2;


            {
                int LA77_0 = LA(1);
                if ( (((LA77_0 >= CALL) && (LA77_0 <= DOT)) || LA77_0 == NEW || ((LA77_0 >= VECTOR) && (LA77_0 <= QUATERNION_AXISANGLE)) || LA77_0 == DOLLAR_EXPRESSION || ((LA77_0 >= ADD_OP) && (LA77_0 <= OBJ_LITERAL)) || ((LA77_0 >= DELETE_OP) && (LA77_0 <= NOT)) || LA77_0 == FUNC_EXPR || ((LA77_0 >= PAREN) && (LA77_0 <= PATTERN_LITERAL)) || ((LA77_0 >= Identifier) && (LA77_0 <= StringLiteral)) || LA77_0 == 210 || ((LA77_0 >= 212) && (LA77_0 <= 214))) ) 
                {
                    alt77=1;
                }
                else if ( (((LA77_0 >= LESS_THAN) && (LA77_0 <= IN))) ) 
                {
                    alt77=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 77;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionEx;
                }
            }
            switch (alt77) 
            {
        	case 1:
        	    // .//EmersonTree.g:1295:4: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression7726);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1297:2: ^( relationalOps e= relationalExpression additiveExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression7740);
        	        relationalOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_relationalExpression7749);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            				  APP(" ");
        	            				  APP(	(SCOPE_TOP(relationalExpression))->op );
        	            				  APP(" ");
        	            				
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression7761);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    pEmersonTree_relationalExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//EmersonTree.g:1309:1: relationalOpsNoIn : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF );
 */
static void
relationalOpsNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1310:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF )
            
            ANTLR3_UINT32 alt78;

            alt78=5;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt78=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt78=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt78=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt78=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt78=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 78;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt78) 
            {
        	case 1:
        	    // .//EmersonTree.g:1310:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOpsNoIn7777); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              	(SCOPE_TOP(relationalExpressionNoIn))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1311:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOpsNoIn7783); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">"; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1312:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn7789); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "<= " ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1313:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn7795); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1314:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOpsNoIn7801); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "instanceOf" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//EmersonTree.g:1317:1: relationalExpressionNoIn : ( additiveExpression | ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression ) );
 */
static void
relationalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionNoInTop = pEmersonTree_relationalExpressionNoInPush(ctx);
    {
        {
            //  .//EmersonTree.g:1323:2: ( additiveExpression | ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression ) )
            
            ANTLR3_UINT32 alt79;

            alt79=2;


            {
                int LA79_0 = LA(1);
                if ( (((LA79_0 >= CALL) && (LA79_0 <= DOT)) || LA79_0 == NEW || ((LA79_0 >= VECTOR) && (LA79_0 <= QUATERNION_AXISANGLE)) || LA79_0 == DOLLAR_EXPRESSION || ((LA79_0 >= ADD_OP) && (LA79_0 <= OBJ_LITERAL)) || ((LA79_0 >= DELETE_OP) && (LA79_0 <= NOT)) || LA79_0 == FUNC_EXPR || ((LA79_0 >= PAREN) && (LA79_0 <= PATTERN_LITERAL)) || ((LA79_0 >= Identifier) && (LA79_0 <= StringLiteral)) || LA79_0 == 210 || ((LA79_0 >= 212) && (LA79_0 <= 214))) ) 
                {
                    alt79=1;
                }
                else if ( (((LA79_0 >= LESS_THAN) && (LA79_0 <= INSTANCE_OF))) ) 
                {
                    alt79=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionNoInPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 79;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionNoInEx;
                }
            }
            switch (alt79) 
            {
        	case 1:
        	    // .//EmersonTree.g:1323:4: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn7821);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1324:5: ^( relationalOpsNoIn relationalExpressionNoIn additiveExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn7836);
        	        relationalOpsNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn7844);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ");
        	            						  APP(	(SCOPE_TOP(relationalExpressionNoIn))->op);
        	            						  APP(" ");
        	            						
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn7860);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    pEmersonTree_relationalExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start additiveExpression
 * .//EmersonTree.g:1340:1: additiveExpression : ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) );
 */
static void
additiveExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1341:9: ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) )
            
            ANTLR3_UINT32 alt80;

            alt80=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case EVAL:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt80=1;
            	}
                break;
            case ADD_OP:
            	{
            		alt80=2;
            	}
                break;
            case SUB:
            	{
            		alt80=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 80;
                EXCEPTION->state        = 0;


                goto ruleadditiveExpressionEx;
            }

            switch (alt80) 
            {
        	case 1:
        	    // .//EmersonTree.g:1341:11: multiplicativeExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression7892);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1342:11: ^( ADD_OP e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(ADD_OP, &FOLLOW_ADD_OP_in_additiveExpression7905); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.plus( " );
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression7938);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression7968);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1355:11: ^( SUB e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(SUB, &FOLLOW_SUB_in_additiveExpression8011); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.sub( " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression8042);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression8073);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multiplicativeExpression
 * .//EmersonTree.g:1371:1: multiplicativeExpression : ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) );
 */
static void
multiplicativeExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1372:9: ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) )
            
            ANTLR3_UINT32 alt81;

            alt81=4;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case EVAL:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt81=1;
            	}
                break;
            case MULT:
            	{
            		alt81=2;
            	}
                break;
            case DIV:
            	{
            		alt81=3;
            	}
                break;
            case MOD:
            	{
            		alt81=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 81;
                EXCEPTION->state        = 0;


                goto rulemultiplicativeExpressionEx;
            }

            switch (alt81) 
            {
        	case 1:
        	    // .//EmersonTree.g:1372:11: unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression8122);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1373:11: ^( MULT multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MULT, &FOLLOW_MULT_in_multiplicativeExpression8136); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.mul( ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression8167);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression8198);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1386:11: ^( DIV multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(DIV, &FOLLOW_DIV_in_multiplicativeExpression8241); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" util.div( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression8269);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression8297);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1399:11: ^( MOD multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MOD, &FOLLOW_MOD_in_multiplicativeExpression8338); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	                   
        	                            APP(" util.mod( ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression8366);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                        
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression8394);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start unaryOps
 * .//EmersonTree.g:1414:1: unaryOps : ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | EVAL | NOT );
 */
static void
unaryOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1415:1: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | EVAL | NOT )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= DELETE_OP) && (LA(1) <= NOT)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unaryOps0);    goto ruleunaryOpsEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//EmersonTree.g:1428:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT | EVAL ) unaryExpression ) );
 */
static void
unaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */



            bool wasEvalStatement = false;

    {
        {
            //  .//EmersonTree.g:1433:9: ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT | EVAL ) unaryExpression ) )
            
            ANTLR3_UINT32 alt83;

            alt83=2;

            alt83 = cdfa83.predict(ctx, RECOGNIZER, ISTREAM, &cdfa83);
            if  (HASEXCEPTION())
            {
                goto ruleunaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt83) 
            {
        	case 1:
        	    // .//EmersonTree.g:1433:11: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression8498);
        	        postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1434:11: ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT | EVAL ) unaryExpression )
        	    {

        	        // .//EmersonTree.g:1435:13: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT | EVAL )
        	        {
        	            int alt82=10;
        	            switch ( LA(1) ) 
        	            {
        	            case DELETE_OP:
        	            	{
        	            		alt82=1;
        	            	}
        	                break;
        	            case VOID:
        	            	{
        	            		alt82=2;
        	            	}
        	                break;
        	            case TYPEOF:
        	            	{
        	            		alt82=3;
        	            	}
        	                break;
        	            case PLUSPLUS:
        	            	{
        	            		alt82=4;
        	            	}
        	                break;
        	            case MINUSMINUS:
        	            	{
        	            		alt82=5;
        	            	}
        	                break;
        	            case UNARY_PLUS:
        	            	{
        	            		alt82=6;
        	            	}
        	                break;
        	            case UNARY_MINUS:
        	            	{
        	            		alt82=7;
        	            	}
        	                break;
        	            case COMPLEMENT:
        	            	{
        	            		alt82=8;
        	            	}
        	                break;
        	            case NOT:
        	            	{
        	            		alt82=9;
        	            	}
        	                break;
        	            case EVAL:
        	            	{
        	            		alt82=10;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 82;
        	                EXCEPTION->state        = 0;


        	                goto ruleunaryExpressionEx;
        	            }

        	            switch (alt82) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1436:16: DELETE_OP
        	        	    {
        	        	         MATCHT(DELETE_OP, &FOLLOW_DELETE_OP_in_unaryExpression8542); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("delete ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:1437:16: VOID
        	        	    {
        	        	         MATCHT(VOID, &FOLLOW_VOID_in_unaryExpression8565); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	               APP("void");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:1438:16: TYPEOF
        	        	    {
        	        	         MATCHT(TYPEOF, &FOLLOW_TYPEOF_in_unaryExpression8593); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("typeof ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:1439:16: PLUSPLUS
        	        	    {
        	        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_unaryExpression8619); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("++");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:1440:16: MINUSMINUS
        	        	    {
        	        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_unaryExpression8643); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("--");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:1441:16: UNARY_PLUS
        	        	    {
        	        	         MATCHT(UNARY_PLUS, &FOLLOW_UNARY_PLUS_in_unaryExpression8665); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("+");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:1442:16: UNARY_MINUS
        	        	    {
        	        	         MATCHT(UNARY_MINUS, &FOLLOW_UNARY_MINUS_in_unaryExpression8687); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("-");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:1443:16: COMPLEMENT
        	        	    {
        	        	         MATCHT(COMPLEMENT, &FOLLOW_COMPLEMENT_in_unaryExpression8708); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("~");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:1444:16: NOT
        	        	    {
        	        	         MATCHT(NOT, &FOLLOW_NOT_in_unaryExpression8730); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("!");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 10:
        	        	    // .//EmersonTree.g:1445:16: EVAL
        	        	    {
        	        	         MATCHT(EVAL, &FOLLOW_EVAL_in_unaryExpression8759); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP(" (system.__checkAndThrowCanEval(), eval( system.__emersonCompileString("); wasEvalStatement = true;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression8797);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            if (wasEvalStatement)
        	                            {
        	                                APP(")))");
        	                            }
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start postfixExpression
 * .//EmersonTree.g:1458:1: postfixExpression : ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) );
 */
static void
postfixExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1459:9: ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) )
            
            ANTLR3_UINT32 alt84;

            alt84=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case OBJ_LITERAL:
            case FUNC_EXPR:
            case PAREN:
            case PATTERN_LITERAL:
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 210:
            case 212:
            case 213:
            case 214:
            	{
            		alt84=1;
            	}
                break;
            case MINUSMINUS:
            	{
            		alt84=2;
            	}
                break;
            case PLUSPLUS:
            	{
            		alt84=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 84;
                EXCEPTION->state        = 0;


                goto rulepostfixExpressionEx;
            }

            switch (alt84) 
            {
        	case 1:
        	    // .//EmersonTree.g:1459:10: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression8844);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1460:11: ^( MINUSMINUS leftHandSideExpression )
        	    {
        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_postfixExpression8857); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression8859);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("--");
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1461:4: ^( PLUSPLUS leftHandSideExpression )
        	    {
        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_postfixExpression8868); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression8870);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("++");
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start primaryExpression
 * .//EmersonTree.g:1464:1: primaryExpression : ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | ^( PAREN expression ) | vectorLiteral | quaternionLiteral );
 */
static void
primaryExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier56;

    /* Initialize rule variables
     */


    Identifier56       = NULL;

    {
        {
            //  .//EmersonTree.g:1465:2: ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | ^( PAREN expression ) | vectorLiteral | quaternionLiteral )
            
            ANTLR3_UINT32 alt85;

            alt85=10;

            switch ( LA(1) ) 
            {
            case 210:
            	{
            		alt85=1;
            	}
                break;
            case Identifier:
            	{
            		alt85=2;
            	}
                break;
            case DOLLAR_EXPRESSION:
            	{
            		alt85=3;
            	}
                break;
            case NumericLiteral:
            case StringLiteral:
            case 212:
            case 213:
            case 214:
            	{
            		alt85=4;
            	}
                break;
            case ARRAY_LITERAL:
            	{
            		alt85=5;
            	}
                break;
            case OBJ_LITERAL:
            	{
            		alt85=6;
            	}
                break;
            case PATTERN_LITERAL:
            	{
            		alt85=7;
            	}
                break;
            case PAREN:
            	{
            		alt85=8;
            	}
                break;
            case VECTOR:
            	{
            		alt85=9;
            	}
                break;
            case QUATERNION:
            case QUATERNION_AXISANGLE:
            	{
            		alt85=10;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 85;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt85) 
            {
        	case 1:
        	    // .//EmersonTree.g:1465:4: 'this'
        	    {
        	         MATCHT(210, &FOLLOW_210_in_primaryExpression8891); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("this");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1466:4: Identifier
        	    {
        	        Identifier56 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression8898); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        LINE((Identifier56->getLine(Identifier56)));
        	                        APP((const char*)(Identifier56->getText(Identifier56))->chars);
        	            	  
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1471:11: dollarExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression8916);
        	        dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1472:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression8921);
        	        literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1473:4: arrayLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression8926);
        	        arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1474:4: objectLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression8931);
        	        objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:1475:11: patternLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_patternLiteral_in_primaryExpression8943);
        	        patternLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:1476:4: ^( PAREN expression )
        	    {
        	         MATCHT(PAREN, &FOLLOW_PAREN_in_primaryExpression8949); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression8953);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )");
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:1477:11: vectorLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression8968);
        	        vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 10:
        	    // .//EmersonTree.g:1478:11: quaternionLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_quaternionLiteral_in_primaryExpression8980);
        	        quaternionLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//EmersonTree.g:1483:1: vectorLiteral : ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) ) ;
 */
static void
vectorLiteral(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    VECTOR57;

    /* Initialize rule variables
     */


    VECTOR57       = NULL;

    {
        // .//EmersonTree.g:1484:9: ( ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) ) )
        // .//EmersonTree.g:1484:11: ^( VECTOR (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) )
        {
            VECTOR57 = (pANTLR3_BASE_TREE) MATCHT(VECTOR, &FOLLOW_VECTOR_in_vectorLiteral9001); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                LINE((VECTOR57->getLine(VECTOR57)));
                                APP("( new util.Vec3(");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:1489:13: (exp1= vectorLiteralField )
            // .//EmersonTree.g:1489:14: exp1= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral9032);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1494:13: (exp2= vectorLiteralField )
            // .//EmersonTree.g:1494:14: exp2= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral9079);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1499:13: (exp3= vectorLiteralField )
            // .//EmersonTree.g:1499:14: exp3= vectorLiteralField
            {
                FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral9126);
                vectorLiteralField(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(") )");
                                  
                }

            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start quaternionLiteral
 * .//EmersonTree.g:1509:1: quaternionLiteral : ( ^( QUATERNION (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) ) | ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) ) | ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) ) );
 */
static void
quaternionLiteral(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    QUATERNION58;
    pANTLR3_BASE_TREE    QUATERNION_AXISANGLE59;
    pANTLR3_BASE_TREE    QUATERNION_AXISANGLE60;

    /* Initialize rule variables
     */


    QUATERNION58       = NULL;
    QUATERNION_AXISANGLE59       = NULL;
    QUATERNION_AXISANGLE60       = NULL;

    {
        {
            //  .//EmersonTree.g:1510:9: ( ^( QUATERNION (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) ) | ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) ) | ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) ) )
            
            ANTLR3_UINT32 alt86;

            alt86=3;


            {
                int LA86_0 = LA(1);
                if ( (LA86_0 == QUATERNION) ) 
                {
                    alt86=1;
                }
                else if ( (LA86_0 == QUATERNION_AXISANGLE) ) 
                {

                    {
                        int LA86_2 = LA(2);
                        if ( (synpred172_EmersonTree(ctx)) ) 
                        {
                            alt86=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt86=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 86;
                            EXCEPTION->state        = 2;


                            goto rulequaternionLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 86;
                    EXCEPTION->state        = 0;


                    goto rulequaternionLiteralEx;
                }
            }
            switch (alt86) 
            {
        	case 1:
        	    // .//EmersonTree.g:1510:11: ^( QUATERNION (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) )
        	    {
        	        QUATERNION58 = (pANTLR3_BASE_TREE) MATCHT(QUATERNION, &FOLLOW_QUATERNION_in_quaternionLiteral9204); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            LINE((QUATERNION58->getLine(QUATERNION58)));
        	                            APP("( new util.Quaternion(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1515:13: (exp1= vectorLiteralField )
        	        // .//EmersonTree.g:1515:14: exp1= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9235);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1520:13: (exp2= vectorLiteralField )
        	        // .//EmersonTree.g:1520:14: exp2= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9282);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1525:13: (exp3= vectorLiteralField )
        	        // .//EmersonTree.g:1525:14: exp3= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9329);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1530:13: (exp4= vectorLiteralField )
        	        // .//EmersonTree.g:1530:14: exp4= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9376);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(") )");
        	                              
        	            }

        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1536:11: ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) )
        	    {
        	        QUATERNION_AXISANGLE59 = (pANTLR3_BASE_TREE) MATCHT(QUATERNION_AXISANGLE, &FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9432); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            LINE((QUATERNION_AXISANGLE59->getLine(QUATERNION_AXISANGLE59)));
        	                            APP("( new util.Quaternion(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1541:13: (exp1= vectorLiteralField )
        	        // .//EmersonTree.g:1541:14: exp1= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9463);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1546:13: (exp2= vectorLiteralField )
        	        // .//EmersonTree.g:1546:14: exp2= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9510);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(") )");
        	                              
        	            }

        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1552:11: ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) (exp3= vectorLiteralField ) (exp4= vectorLiteralField ) )
        	    {
        	        QUATERNION_AXISANGLE60 = (pANTLR3_BASE_TREE) MATCHT(QUATERNION_AXISANGLE, &FOLLOW_QUATERNION_AXISANGLE_in_quaternionLiteral9566); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            LINE((QUATERNION_AXISANGLE60->getLine(QUATERNION_AXISANGLE60)));
        	                            APP("( new util.Quaternion(new util.Vec3(");
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1557:13: (exp1= vectorLiteralField )
        	        // .//EmersonTree.g:1557:14: exp1= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9597);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1562:13: (exp2= vectorLiteralField )
        	        // .//EmersonTree.g:1562:14: exp2= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9644);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(",");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1567:13: (exp3= vectorLiteralField )
        	        // .//EmersonTree.g:1567:14: exp3= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9691);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP("),");
        	                              
        	            }

        	        }

        	        // .//EmersonTree.g:1572:13: (exp4= vectorLiteralField )
        	        // .//EmersonTree.g:1572:14: exp4= vectorLiteralField
        	        {
        	            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral9738);
        	            vectorLiteralField(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequaternionLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            if ( BACKTRACKING==0 ) 
        	            {

        	                                  APP(") )");
        	                              
        	            }

        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulequaternionLiteralEx; /* Prevent compiler warnings */
    rulequaternionLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end quaternionLiteral */

/** 
 * $ANTLR start vectorLiteralField
 * .//EmersonTree.g:1583:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static void
vectorLiteralField(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    NumericLiteral61;

    /* Initialize rule variables
     */


    NumericLiteral61       = NULL;

    {
        {
            //  .//EmersonTree.g:1584:9: ( additiveExpression | NumericLiteral | callExpression | memberExpression )
            
            ANTLR3_UINT32 alt87;

            alt87=4;

            alt87 = cdfa87.predict(ctx, RECOGNIZER, ISTREAM, &cdfa87);
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralFieldEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt87) 
            {
        	case 1:
        	    // .//EmersonTree.g:1584:11: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_vectorLiteralField9832);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1586:11: NumericLiteral
        	    {
        	        NumericLiteral61 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_vectorLiteralField9845); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((NumericLiteral61->getLine(NumericLiteral61))); APP((const char*)(NumericLiteral61->getText(NumericLiteral61))->chars);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1587:11: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_vectorLiteralField9859);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1588:11: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_vectorLiteralField9871);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralFieldEx; /* Prevent compiler warnings */
    rulevectorLiteralFieldEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteralField */

/** 
 * $ANTLR start dollarExpression
 * .//EmersonTree.g:1592:1: dollarExpression : ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static void
dollarExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier62;

    /* Initialize rule variables
     */


    Identifier62       = NULL;

    {
        // .//EmersonTree.g:1593:9: ( ^( DOLLAR_EXPRESSION Identifier ) )
        // .//EmersonTree.g:1593:11: ^( DOLLAR_EXPRESSION Identifier )
        {
             MATCHT(DOLLAR_EXPRESSION, &FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression9906); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                if (insideWhenPred)
                                    APP("'),");

                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier62 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression9934); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier62->getText(Identifier62))->chars);

                                if (insideWhenPred)
                                   APP(",util.create_quoted('");
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//EmersonTree.g:1612:1: arrayLiteral : ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( expression ) ) | ^( ARRAY_LITERAL expression ( expression )* ) );
 */
static void
arrayLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1613:3: ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( expression ) ) | ^( ARRAY_LITERAL expression ( expression )* ) )
            
            ANTLR3_UINT32 alt89;

            alt89=3;


            {
                int LA89_0 = LA(1);
                if ( (LA89_0 == ARRAY_LITERAL) ) 
                {

                    {
                        int LA89_1 = LA(2);
                        if ( (synpred176_EmersonTree(ctx)) ) 
                        {
                            alt89=1;
                        }
                        else if ( (synpred177_EmersonTree(ctx)) ) 
                        {
                            alt89=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt89=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 89;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 89;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt89) 
            {
        	case 1:
        	    // .//EmersonTree.g:1613:5: ^( ARRAY_LITERAL )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral9999); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("[ ]"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1614:5: ^( ARRAY_LITERAL ( expression ) )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral10009); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1616:8: ( expression )
        	        // .//EmersonTree.g:1616:9: expression
        	        {
        	            FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral10028);
        	            expression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1619:5: ^( ARRAY_LITERAL expression ( expression )* )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral10051); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("[ ");
        	                 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral10065);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1625:6: ( expression )*

        	        for (;;)
        	        {
        	            int alt88=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA88_0 = LA(1);
        	                if ( (LA88_0 == EXPR) ) 
        	                {
        	                    alt88=1;
        	                }

        	            }
        	            switch (alt88) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1626:7: expression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                     APP(", ");
        	        	                  
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral10094);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop88;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop88: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                     APP(" ] ");
        	                 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//EmersonTree.g:1638:1: objectLiteral : ( ^( OBJ_LITERAL ) | ^( OBJ_LITERAL ( propertyNameAndValue ) ) | ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static void
objectLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1639:3: ( ^( OBJ_LITERAL ) | ^( OBJ_LITERAL ( propertyNameAndValue ) ) | ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt91;

            alt91=3;


            {
                int LA91_0 = LA(1);
                if ( (LA91_0 == OBJ_LITERAL) ) 
                {

                    {
                        int LA91_1 = LA(2);
                        if ( (synpred179_EmersonTree(ctx)) ) 
                        {
                            alt91=1;
                        }
                        else if ( (synpred180_EmersonTree(ctx)) ) 
                        {
                            alt91=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt91=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 91;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 91;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt91) 
            {
        	case 1:
        	    // .//EmersonTree.g:1639:4: ^( OBJ_LITERAL )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral10131); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("{ }");
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1640:4: ^( OBJ_LITERAL ( propertyNameAndValue ) )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral10141); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("{ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1643:13: ( propertyNameAndValue )
        	        // .//EmersonTree.g:1643:14: propertyNameAndValue
        	        {
        	            FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral10178);
        	            propertyNameAndValue(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" }"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1647:3: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	    {
        	         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_objectLiteral10204); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("{ ");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral10222);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1651:5: ( propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt90=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA90_0 = LA(1);
        	                if ( (LA90_0 == NAME_VALUE) ) 
        	                {
        	                    alt90=1;
        	                }

        	            }
        	            switch (alt90) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1652:7: propertyNameAndValue
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             
        	        	            					  APP(", "); 
        	        	            					
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral10251);
        	        	        propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop90;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop90: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	            				  APP(" } "); 
        	            				
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start patternLiteral
 * .//EmersonTree.g:1669:1: patternLiteral : ( ^( PATTERN_LITERAL ) | ^( PATTERN_LITERAL nameValueProto ) | ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) );
 */
static void
patternLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1671:3: ( ^( PATTERN_LITERAL ) | ^( PATTERN_LITERAL nameValueProto ) | ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) )
            
            ANTLR3_UINT32 alt93;

            alt93=3;


            {
                int LA93_0 = LA(1);
                if ( (LA93_0 == PATTERN_LITERAL) ) 
                {

                    {
                        int LA93_1 = LA(2);
                        if ( (synpred182_EmersonTree(ctx)) ) 
                        {
                            alt93=1;
                        }
                        else if ( (synpred183_EmersonTree(ctx)) ) 
                        {
                            alt93=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt93=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 93;
                            EXCEPTION->state        = 1;


                            goto rulepatternLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 93;
                    EXCEPTION->state        = 0;


                    goto rulepatternLiteralEx;
                }
            }
            switch (alt93) 
            {
        	case 1:
        	    // .//EmersonTree.g:1671:4: ^( PATTERN_LITERAL )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral10294); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("new util.Pattern()");
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1672:4: ^( PATTERN_LITERAL nameValueProto )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral10304); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral10313);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1675:4: ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	    {
        	         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_patternLiteral10325); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ ");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral10345);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1679:5: ( nameValueProto )*

        	        for (;;)
        	        {
        	            int alt92=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA92_0 = LA(1);
        	                if ( (((LA92_0 >= NAME_VALUE_PROTO) && (LA92_0 <= BLANK_NAME_VAL_PROT))) ) 
        	                {
        	                    alt92=1;
        	                }

        	            }
        	            switch (alt92) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1680:7: nameValueProto
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             
        	        	            					  APP(", "); 
        	        	            					
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral10374);
        	        	        nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop92;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop92: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	            				  APP(" ] "); 
        	            				
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralEx; /* Prevent compiler warnings */
    rulepatternLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end patternLiteral */

/** 
 * $ANTLR start nameValueProto
 * .//EmersonTree.g:1697:1: nameValueProto : ( ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE assignmentExpression ) )? ( ^( PROTO assignmentExpression ) )? ) | ^( BLANK_NAME_VAL_PROT ) );
 */
static void
nameValueProto(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1698:3: ( ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE assignmentExpression ) )? ( ^( PROTO assignmentExpression ) )? ) | ^( BLANK_NAME_VAL_PROT ) )
            
            ANTLR3_UINT32 alt96;

            alt96=2;


            {
                int LA96_0 = LA(1);
                if ( (LA96_0 == NAME_VALUE_PROTO) ) 
                {
                    alt96=1;
                }
                else if ( (LA96_0 == BLANK_NAME_VAL_PROT) ) 
                {
                    alt96=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 96;
                    EXCEPTION->state        = 0;


                    goto rulenameValueProtoEx;
                }
            }
            switch (alt96) 
            {
        	case 1:
        	    // .//EmersonTree.g:1698:5: ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE assignmentExpression ) )? ( ^( PROTO assignmentExpression ) )? )
        	    {
        	         MATCHT(NAME_VALUE_PROTO, &FOLLOW_NAME_VALUE_PROTO_in_nameValueProto10439); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("new util.Pattern( ");
        	                      
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(NAME, &FOLLOW_NAME_in_nameValueProto10462); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyName_in_nameValueProto10474);
        	        propertyName(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1706:10: ( ^( VALUE assignmentExpression ) )?
        	        {
        	            int alt94=2;
        	            {
        	                int LA94_0 = LA(1);
        	                if ( (LA94_0 == VALUE) ) 
        	                {
        	                    alt94=1;
        	                }
        	            }
        	            switch (alt94) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1707:10: ^( VALUE assignmentExpression )
        	        	    {
        	        	         MATCHT(VALUE, &FOLLOW_VALUE_in_nameValueProto10517); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                          APP(", ");
        	        	                        
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_nameValueProto10546);
        	        	        assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//EmersonTree.g:1715:10: ( ^( PROTO assignmentExpression ) )?
        	        {
        	            int alt95=2;
        	            {
        	                int LA95_0 = LA(1);
        	                if ( (LA95_0 == PROTO) ) 
        	                {
        	                    alt95=1;
        	                }
        	            }
        	            switch (alt95) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1717:10: ^( PROTO assignmentExpression )
        	        	    {
        	        	         MATCHT(PROTO, &FOLLOW_PROTO_in_nameValueProto10595); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                          APP(", ");
        	        	                        
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_nameValueProto10623);
        	        	        assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" )");
        	                     
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1728:5: ^( BLANK_NAME_VAL_PROT )
        	    {
        	         MATCHT(BLANK_NAME_VAL_PROT, &FOLLOW_BLANK_NAME_VAL_PROT_in_nameValueProto10664); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("new util.Pattern()");
        	                    
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenameValueProtoEx; /* Prevent compiler warnings */
    rulenameValueProtoEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end nameValueProto */

/** 
 * $ANTLR start propertyNameAndValue
 * .//EmersonTree.g:1735:1: propertyNameAndValue : ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static void
propertyNameAndValue(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    NAME_VALUE63;

    /* Initialize rule variables
     */


    NAME_VALUE63       = NULL;

    {
        // .//EmersonTree.g:1736:2: ( ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//EmersonTree.g:1736:4: ^( NAME_VALUE propertyName assignmentExpression )
        {
            NAME_VALUE63 = (pANTLR3_BASE_TREE) MATCHT(NAME_VALUE, &FOLLOW_NAME_VALUE_in_propertyNameAndValue10694); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue10709);
            propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                 LINE((NAME_VALUE63->getLine(NAME_VALUE63))); APP(" : ");
            }
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue10730);
            assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//EmersonTree.g:1742:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static void
propertyName(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier64;
    pANTLR3_BASE_TREE    StringLiteral65;
    pANTLR3_BASE_TREE    NumericLiteral66;

    /* Initialize rule variables
     */


    Identifier64       = NULL;
    StringLiteral65       = NULL;
    NumericLiteral66       = NULL;

    {
        {
            //  .//EmersonTree.g:1743:2: ( Identifier | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt97;

            alt97=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            	{
            		alt97=1;
            	}
                break;
            case StringLiteral:
            	{
            		alt97=2;
            	}
                break;
            case NumericLiteral:
            	{
            		alt97=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 97;
                EXCEPTION->state        = 0;


                goto rulepropertyNameEx;
            }

            switch (alt97) 
            {
        	case 1:
        	    // .//EmersonTree.g:1743:4: Identifier
        	    {
        	        Identifier64 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyName10742); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((Identifier64->getLine(Identifier64))); APP((const char*)(Identifier64->getText(Identifier64))->chars); 
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1744:4: StringLiteral
        	    {
        	        StringLiteral65 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_propertyName10749); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         LINE((StringLiteral65->getLine(StringLiteral65)));
        	                         APP((const char*)(StringLiteral65->getText(StringLiteral65))->chars);  
        	                      
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1749:4: NumericLiteral
        	    {
        	        NumericLiteral66 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_propertyName10766); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                         LINE((NumericLiteral66->getLine(NumericLiteral66)));
        	                         APP((const char*)(NumericLiteral66->getText(NumericLiteral66))->chars);
        	                      
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//EmersonTree.g:1757:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static void
literal(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    StringLiteral67;
    pANTLR3_BASE_TREE    NumericLiteral68;

    /* Initialize rule variables
     */


    StringLiteral67       = NULL;
    NumericLiteral68       = NULL;

    {
        {
            //  .//EmersonTree.g:1758:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt98;

            alt98=5;

            switch ( LA(1) ) 
            {
            case 212:
            	{
            		alt98=1;
            	}
                break;
            case 213:
            	{
            		alt98=2;
            	}
                break;
            case 214:
            	{
            		alt98=3;
            	}
                break;
            case StringLiteral:
            	{
            		alt98=4;
            	}
                break;
            case NumericLiteral:
            	{
            		alt98=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 98;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;
            }

            switch (alt98) 
            {
        	case 1:
        	    // .//EmersonTree.g:1758:4: 'null'
        	    {
        	         MATCHT(212, &FOLLOW_212_in_literal10790); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("null");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1759:4: 'true'
        	    {
        	         MATCHT(213, &FOLLOW_213_in_literal10797); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("true"); 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1760:4: 'false'
        	    {
        	         MATCHT(214, &FOLLOW_214_in_literal10804); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP("false");
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1761:4: StringLiteral
        	    {
        	        StringLiteral67 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_literal10810); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                          const char* input = (const char*)(StringLiteral67->getText(StringLiteral67))->chars;
        	                          int len = (StringLiteral67->getText(StringLiteral67))->len;
        	                          char firstChar = *input;
        	                          if(firstChar == '@')
        	                          {
        	                            std::string str_input(input,len);
        	                            str_input = str_input.substr(1, str_input.size() -2);
        	                            std::string escaped = emerson_escapeMultiline(str_input.c_str());
        	                            APP("\"");
        	                            APP(escaped.c_str());
        	                            APP("\"");
        	                          }
        	                          else APP((const char*)(StringLiteral67->getText(StringLiteral67))->chars);
        	                    
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1777:4: NumericLiteral
        	    {
        	        NumericLiteral68 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_literal10827); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             LINE((NumericLiteral68->getLine(NumericLiteral68))); APP((const char*)(NumericLiteral68->getText(NumericLiteral68))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end literal */

// $ANTLR start synpred1_EmersonTree
static void synpred1_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:83:15: ( sourceElements )
    // .//EmersonTree.g:83:15: sourceElements
    {
        FOLLOWPUSH(FOLLOW_sourceElements_in_synpred1_EmersonTree125);
        sourceElements(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred1_EmersonTreeEx: ;

}
// $ANTLR end synpred1_EmersonTree

// $ANTLR start synpred2_EmersonTree
static void synpred2_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:97:7: ( sourceElement )
    // .//EmersonTree.g:97:7: sourceElement
    {
        FOLLOWPUSH(FOLLOW_sourceElement_in_synpred2_EmersonTree186);
        sourceElement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred2_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred2_EmersonTreeEx: ;

}
// $ANTLR end synpred2_EmersonTree

// $ANTLR start synpred3_EmersonTree
static void synpred3_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:101:7: ( functionDeclaration )
    // .//EmersonTree.g:101:7: functionDeclaration
    {
        FOLLOWPUSH(FOLLOW_functionDeclaration_in_synpred3_EmersonTree209);
        functionDeclaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred3_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred3_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred3_EmersonTreeEx: ;

}
// $ANTLR end synpred3_EmersonTree

// $ANTLR start synpred9_EmersonTree
static void synpred9_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:186:7: ( noOpStatement )
    // .//EmersonTree.g:186:7: noOpStatement
    {
        FOLLOWPUSH(FOLLOW_noOpStatement_in_synpred9_EmersonTree773);
        noOpStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred9_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred9_EmersonTreeEx: ;

}
// $ANTLR end synpred9_EmersonTree

// $ANTLR start synpred10_EmersonTree
static void synpred10_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:187:7: ( switchStatement )
    // .//EmersonTree.g:187:7: switchStatement
    {
        FOLLOWPUSH(FOLLOW_switchStatement_in_synpred10_EmersonTree781);
        switchStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred10_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred10_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred10_EmersonTreeEx: ;

}
// $ANTLR end synpred10_EmersonTree

// $ANTLR start synpred11_EmersonTree
static void synpred11_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:188:7: ( statementBlock )
    // .//EmersonTree.g:188:7: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred11_EmersonTree789);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred11_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred11_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred11_EmersonTreeEx: ;

}
// $ANTLR end synpred11_EmersonTree

// $ANTLR start synpred12_EmersonTree
static void synpred12_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:189:7: ( variableStatement )
    // .//EmersonTree.g:189:7: variableStatement
    {
        FOLLOWPUSH(FOLLOW_variableStatement_in_synpred12_EmersonTree797);
        variableStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred12_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred12_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred12_EmersonTreeEx: ;

}
// $ANTLR end synpred12_EmersonTree

// $ANTLR start synpred13_EmersonTree
static void synpred13_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:190:7: ( expressionStatement )
    // .//EmersonTree.g:190:7: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred13_EmersonTree805);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred13_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred13_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred13_EmersonTreeEx: ;

}
// $ANTLR end synpred13_EmersonTree

// $ANTLR start synpred14_EmersonTree
static void synpred14_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:191:7: ( ifStatement )
    // .//EmersonTree.g:191:7: ifStatement
    {
        FOLLOWPUSH(FOLLOW_ifStatement_in_synpred14_EmersonTree813);
        ifStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred14_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred14_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred14_EmersonTreeEx: ;

}
// $ANTLR end synpred14_EmersonTree

// $ANTLR start synpred15_EmersonTree
static void synpred15_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:192:7: ( iterationStatement )
    // .//EmersonTree.g:192:7: iterationStatement
    {
        FOLLOWPUSH(FOLLOW_iterationStatement_in_synpred15_EmersonTree821);
        iterationStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred15_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred15_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred15_EmersonTreeEx: ;

}
// $ANTLR end synpred15_EmersonTree

// $ANTLR start synpred16_EmersonTree
static void synpred16_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:193:7: ( continueStatement )
    // .//EmersonTree.g:193:7: continueStatement
    {
        FOLLOWPUSH(FOLLOW_continueStatement_in_synpred16_EmersonTree829);
        continueStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred16_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred16_EmersonTreeEx: ;

}
// $ANTLR end synpred16_EmersonTree

// $ANTLR start synpred17_EmersonTree
static void synpred17_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:194:7: ( breakStatement )
    // .//EmersonTree.g:194:7: breakStatement
    {
        FOLLOWPUSH(FOLLOW_breakStatement_in_synpred17_EmersonTree837);
        breakStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred17_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred17_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred17_EmersonTreeEx: ;

}
// $ANTLR end synpred17_EmersonTree

// $ANTLR start synpred18_EmersonTree
static void synpred18_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:195:7: ( returnStatement )
    // .//EmersonTree.g:195:7: returnStatement
    {
        FOLLOWPUSH(FOLLOW_returnStatement_in_synpred18_EmersonTree845);
        returnStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred18_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred18_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred18_EmersonTreeEx: ;

}
// $ANTLR end synpred18_EmersonTree

// $ANTLR start synpred19_EmersonTree
static void synpred19_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:196:7: ( withStatement )
    // .//EmersonTree.g:196:7: withStatement
    {
        FOLLOWPUSH(FOLLOW_withStatement_in_synpred19_EmersonTree853);
        withStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred19_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred19_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred19_EmersonTreeEx: ;

}
// $ANTLR end synpred19_EmersonTree

// $ANTLR start synpred20_EmersonTree
static void synpred20_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:197:7: ( throwStatement )
    // .//EmersonTree.g:197:7: throwStatement
    {
        FOLLOWPUSH(FOLLOW_throwStatement_in_synpred20_EmersonTree861);
        throwStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred20_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred20_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred20_EmersonTreeEx: ;

}
// $ANTLR end synpred20_EmersonTree

// $ANTLR start synpred21_EmersonTree
static void synpred21_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:212:11: ( statementList )
    // .//EmersonTree.g:212:11: statementList
    {
        FOLLOWPUSH(FOLLOW_statementList_in_synpred21_EmersonTree950);
        statementList(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred21_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred21_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred21_EmersonTreeEx: ;

}
// $ANTLR end synpred21_EmersonTree

// $ANTLR start synpred22_EmersonTree
static void synpred22_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:226:17: ( statement )
    // .//EmersonTree.g:226:17: statement
    {
        FOLLOWPUSH(FOLLOW_statement_in_synpred22_EmersonTree1050);
        statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred22_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred22_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred22_EmersonTreeEx: ;

}
// $ANTLR end synpred22_EmersonTree

// $ANTLR start synpred27_EmersonTree
static void synpred27_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:324:14: ( statement )
    // .//EmersonTree.g:324:14: statement
    {
        FOLLOWPUSH(FOLLOW_statement_in_synpred27_EmersonTree1654);
        statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred27_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred27_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred27_EmersonTreeEx: ;

}
// $ANTLR end synpred27_EmersonTree

// $ANTLR start synpred28_EmersonTree
static void synpred28_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:333:17: ( statement )
    // .//EmersonTree.g:333:17: statement
    {
        if ( BACKTRACKING==0 ) 
        {

                                APP("else \n{");
                            
        }
        FOLLOWPUSH(FOLLOW_statement_in_synpred28_EmersonTree1748);
        statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred28_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred28_EmersonTreeEx: ;

}
// $ANTLR end synpred28_EmersonTree

// $ANTLR start synpred44_EmersonTree
static void synpred44_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:551:7: ( ^( CASE ternaryExpression ( statementList )? ( caseClause )? ) )
    // .//EmersonTree.g:551:7: ^( CASE ternaryExpression ( statementList )? ( caseClause )? )
    {
         MATCHT(CASE, &FOLLOW_CASE_in_synpred44_EmersonTree2904); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ternaryExpression_in_synpred44_EmersonTree2924);
        ternaryExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//EmersonTree.g:559:9: ( statementList )?
        {
            int alt100=2;
            {
                int LA100_0 = LA(1);
                if ( (LA100_0 == SLIST) ) 
                {
                    alt100=1;
                }
            }
            switch (alt100) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: statementList
        	    {
        	        FOLLOWPUSH(FOLLOW_statementList_in_synpred44_EmersonTree2944);
        	        statementList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred44_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//EmersonTree.g:560:9: ( caseClause )?
        {
            int alt101=2;
            {
                int LA101_0 = LA(1);
                if ( (LA101_0 == CASE) ) 
                {
                    alt101=1;
                }
            }
            switch (alt101) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: caseClause
        	    {
        	        FOLLOWPUSH(FOLLOW_caseClause_in_synpred44_EmersonTree2955);
        	        caseClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred44_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred44_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred44_EmersonTreeEx: ;

}
// $ANTLR end synpred44_EmersonTree

// $ANTLR start synpred52_EmersonTree
static void synpred52_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:678:3: ( memberExpression )
    // .//EmersonTree.g:678:3: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred52_EmersonTree3570);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred52_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred52_EmersonTreeEx: ;

}
// $ANTLR end synpred52_EmersonTree

// $ANTLR start synpred73_EmersonTree
static void synpred73_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:833:4: ( callExpression )
    // .//EmersonTree.g:833:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred73_EmersonTree4968);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred73_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred73_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred73_EmersonTreeEx: ;

}
// $ANTLR end synpred73_EmersonTree

// $ANTLR start synpred74_EmersonTree
static void synpred74_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:838:4: ( memberExpression )
    // .//EmersonTree.g:838:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred74_EmersonTree4985);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred74_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred74_EmersonTreeEx: ;

}
// $ANTLR end synpred74_EmersonTree

// $ANTLR start synpred77_EmersonTree
static void synpred77_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:854:3: ( ^( DOT memberExpression propertyReferenceSuffix1 ) )
    // .//EmersonTree.g:854:3: ^( DOT memberExpression propertyReferenceSuffix1 )
    {
         MATCHT(DOT, &FOLLOW_DOT_in_synpred77_EmersonTree5051); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred77_EmersonTree5053);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred77_EmersonTree5057);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred77_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred77_EmersonTreeEx: ;

}
// $ANTLR end synpred77_EmersonTree

// $ANTLR start synpred81_EmersonTree
static void synpred81_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:866:4: ( ^( CALL memberExpression arguments ) )
    // .//EmersonTree.g:866:4: ^( CALL memberExpression arguments )
    {
         MATCHT(CALL, &FOLLOW_CALL_in_synpred81_EmersonTree5123); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred81_EmersonTree5125);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_arguments_in_synpred81_EmersonTree5127);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred81_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred81_EmersonTreeEx: ;

}
// $ANTLR end synpred81_EmersonTree

// $ANTLR start synpred86_EmersonTree
static void synpred86_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:881:5: ( ^( ARGLIST ) )
    // .//EmersonTree.g:881:5: ^( ARGLIST )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred86_EmersonTree5204); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred86_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred86_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred86_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred86_EmersonTreeEx: ;

}
// $ANTLR end synpred86_EmersonTree

// $ANTLR start synpred87_EmersonTree
static void synpred87_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:882:5: ( ^( ARGLIST ( assignmentExpression ) ) )
    // .//EmersonTree.g:882:5: ^( ARGLIST ( assignmentExpression ) )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred87_EmersonTree5214); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:884:8: ( assignmentExpression )
        // .//EmersonTree.g:884:9: assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred87_EmersonTree5234);
            assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred87_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred87_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred87_EmersonTreeEx: ;

}
// $ANTLR end synpred87_EmersonTree

// $ANTLR start synpred150_EmersonTree
static void synpred150_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1433:11: ( postfixExpression )
    // .//EmersonTree.g:1433:11: postfixExpression
    {
        FOLLOWPUSH(FOLLOW_postfixExpression_in_synpred150_EmersonTree8498);
        postfixExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred150_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred150_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred150_EmersonTreeEx: ;

}
// $ANTLR end synpred150_EmersonTree

// $ANTLR start synpred172_EmersonTree
static void synpred172_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1536:11: ( ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) ) )
    // .//EmersonTree.g:1536:11: ^( QUATERNION_AXISANGLE (exp1= vectorLiteralField ) (exp2= vectorLiteralField ) )
    {
         MATCHT(QUATERNION_AXISANGLE, &FOLLOW_QUATERNION_AXISANGLE_in_synpred172_EmersonTree9432); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1541:13: (exp1= vectorLiteralField )
        // .//EmersonTree.g:1541:14: exp1= vectorLiteralField
        {
            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9463);
            vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred172_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

        // .//EmersonTree.g:1546:13: (exp2= vectorLiteralField )
        // .//EmersonTree.g:1546:14: exp2= vectorLiteralField
        {
            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred172_EmersonTree9510);
            vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred172_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred172_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred172_EmersonTreeEx: ;

}
// $ANTLR end synpred172_EmersonTree

// $ANTLR start synpred173_EmersonTree
static void synpred173_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1584:11: ( additiveExpression )
    // .//EmersonTree.g:1584:11: additiveExpression
    {
        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred173_EmersonTree9832);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred173_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred173_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred173_EmersonTreeEx: ;

}
// $ANTLR end synpred173_EmersonTree

// $ANTLR start synpred174_EmersonTree
static void synpred174_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1586:11: ( NumericLiteral )
    // .//EmersonTree.g:1586:11: NumericLiteral
    {
         MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_synpred174_EmersonTree9845); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred174_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred174_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred174_EmersonTreeEx: ;

}
// $ANTLR end synpred174_EmersonTree

// $ANTLR start synpred175_EmersonTree
static void synpred175_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1587:11: ( callExpression )
    // .//EmersonTree.g:1587:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred175_EmersonTree9859);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred175_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred175_EmersonTreeEx: ;

}
// $ANTLR end synpred175_EmersonTree

// $ANTLR start synpred176_EmersonTree
static void synpred176_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1613:5: ( ^( ARRAY_LITERAL ) )
    // .//EmersonTree.g:1613:5: ^( ARRAY_LITERAL )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred176_EmersonTree9999); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred176_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred176_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred176_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred176_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred176_EmersonTreeEx: ;

}
// $ANTLR end synpred176_EmersonTree

// $ANTLR start synpred177_EmersonTree
static void synpred177_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1614:5: ( ^( ARRAY_LITERAL ( expression ) ) )
    // .//EmersonTree.g:1614:5: ^( ARRAY_LITERAL ( expression ) )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree10009); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred177_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred177_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1616:8: ( expression )
        // .//EmersonTree.g:1616:9: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_synpred177_EmersonTree10028);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred177_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred177_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred177_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred177_EmersonTreeEx: ;

}
// $ANTLR end synpred177_EmersonTree

// $ANTLR start synpred179_EmersonTree
static void synpred179_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1639:4: ( ^( OBJ_LITERAL ) )
    // .//EmersonTree.g:1639:4: ^( OBJ_LITERAL )
    {
         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_synpred179_EmersonTree10131); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred179_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred179_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred179_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred179_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred179_EmersonTreeEx: ;

}
// $ANTLR end synpred179_EmersonTree

// $ANTLR start synpred180_EmersonTree
static void synpred180_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1640:4: ( ^( OBJ_LITERAL ( propertyNameAndValue ) ) )
    // .//EmersonTree.g:1640:4: ^( OBJ_LITERAL ( propertyNameAndValue ) )
    {
         MATCHT(OBJ_LITERAL, &FOLLOW_OBJ_LITERAL_in_synpred180_EmersonTree10141); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred180_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred180_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1643:13: ( propertyNameAndValue )
        // .//EmersonTree.g:1643:14: propertyNameAndValue
        {
            FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred180_EmersonTree10178);
            propertyNameAndValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred180_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred180_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred180_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred180_EmersonTreeEx: ;

}
// $ANTLR end synpred180_EmersonTree

// $ANTLR start synpred182_EmersonTree
static void synpred182_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1671:4: ( ^( PATTERN_LITERAL ) )
    // .//EmersonTree.g:1671:4: ^( PATTERN_LITERAL )
    {
         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_synpred182_EmersonTree10294); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred182_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred182_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred182_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred182_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred182_EmersonTreeEx: ;

}
// $ANTLR end synpred182_EmersonTree

// $ANTLR start synpred183_EmersonTree
static void synpred183_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1672:4: ( ^( PATTERN_LITERAL nameValueProto ) )
    // .//EmersonTree.g:1672:4: ^( PATTERN_LITERAL nameValueProto )
    {
         MATCHT(PATTERN_LITERAL, &FOLLOW_PATTERN_LITERAL_in_synpred183_EmersonTree10304); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred183_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred183_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_nameValueProto_in_synpred183_EmersonTree10313);
        nameValueProto(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred183_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred183_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred183_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred183_EmersonTreeEx: ;

}
// $ANTLR end synpred183_EmersonTree
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred18_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred18_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred9_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred9_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred86_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred86_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred14_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred14_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred2_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred2_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred12_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred12_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred74_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred74_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred173_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred173_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred17_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred17_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred177_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred177_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred28_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred28_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred172_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred172_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred16_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred16_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred179_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred179_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred182_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred182_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred175_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred175_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred20_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred20_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred87_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred87_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred27_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred27_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred174_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred174_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred21_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred21_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred81_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred81_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred52_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred52_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred73_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred73_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred19_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred19_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred77_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred77_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred150_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred150_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred15_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred15_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred3_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred3_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred180_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred180_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred176_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred176_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred10_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred10_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred13_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred13_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred44_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred44_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred11_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred11_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred22_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred22_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred183_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred183_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */

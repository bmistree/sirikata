/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//EmersonTree.g
 *     -                            On : 2011-04-22 13:57:03
 *     -           for the tree parser : EmersonTreeTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

    #include <stdlib.h>
    #include <string.h>
    #include <antlr3.h>
    #include "Util.h"
    #define APP(s)  program_string->append(program_string, s);
    
    #ifndef __SIRIKATA_INSIDE_WHEN_PRED__
    #define __SIRIKATA_INSIDE_WHEN_PRED__
    static bool insideWhenPred = false;
    #endif

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonTree.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonTree_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonTree_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonTree_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_msgSendStatement scope set 
 */
static pEmersonTree_msgSendStatement_SCOPE   pEmersonTree_msgSendStatementPush(pEmersonTree ctx);
static void ANTLR3_CDECL msgSendStatementFree(pEmersonTree_msgSendStatement_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL msgSendStatementFree(pEmersonTree_msgSendStatement_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree msgSendStatement scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_msgSendStatementTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_msgSendStatement_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_msgSendStatement_SCOPE
pEmersonTree_msgSendStatementPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_msgSendStatement_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_msgSendStatementStack->size(ctx->pEmersonTree_msgSendStatementStack) > ctx->pEmersonTree_msgSendStatementStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_msgSendStatement_SCOPE)ctx->pEmersonTree_msgSendStatementStack->get(ctx->pEmersonTree_msgSendStatementStack, ctx->pEmersonTree_msgSendStatementStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_msgSendStatement_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_msgSendStatement_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_msgSendStatementStack->push(ctx->pEmersonTree_msgSendStatementStack, newAttributes, (void (*)(void *))msgSendStatementFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_msgSendStatementStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpression scope set 
 */
static pEmersonTree_assignmentExpression_SCOPE   pEmersonTree_assignmentExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionFree(pEmersonTree_assignmentExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpression_SCOPE
pEmersonTree_assignmentExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionStack->size(ctx->pEmersonTree_assignmentExpressionStack) > ctx->pEmersonTree_assignmentExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE)ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionStack->push(ctx->pEmersonTree_assignmentExpressionStack, newAttributes, (void (*)(void *))assignmentExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_assignmentExpressionNoIn scope set 
 */
static pEmersonTree_assignmentExpressionNoIn_SCOPE   pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL assignmentExpressionNoInFree(pEmersonTree_assignmentExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree assignmentExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_assignmentExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_assignmentExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_assignmentExpressionNoIn_SCOPE
pEmersonTree_assignmentExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_assignmentExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_assignmentExpressionNoInStack->size(ctx->pEmersonTree_assignmentExpressionNoInStack) > ctx->pEmersonTree_assignmentExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE)ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_assignmentExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_assignmentExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_assignmentExpressionNoInStack->push(ctx->pEmersonTree_assignmentExpressionNoInStack, newAttributes, (void (*)(void *))assignmentExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpression scope set 
 */
static pEmersonTree_relationalExpression_SCOPE   pEmersonTree_relationalExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionFree(pEmersonTree_relationalExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpression_SCOPE
pEmersonTree_relationalExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionStack->size(ctx->pEmersonTree_relationalExpressionStack) > ctx->pEmersonTree_relationalExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE)ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionStack->push(ctx->pEmersonTree_relationalExpressionStack, newAttributes, (void (*)(void *))relationalExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_relationalExpressionNoIn scope set 
 */
static pEmersonTree_relationalExpressionNoIn_SCOPE   pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx);
static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL relationalExpressionNoInFree(pEmersonTree_relationalExpressionNoIn_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree relationalExpressionNoIn scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_relationalExpressionNoInTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_relationalExpressionNoIn_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_relationalExpressionNoIn_SCOPE
pEmersonTree_relationalExpressionNoInPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_relationalExpressionNoIn_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_relationalExpressionNoInStack->size(ctx->pEmersonTree_relationalExpressionNoInStack) > ctx->pEmersonTree_relationalExpressionNoInStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE)ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_relationalExpressionNoIn_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_relationalExpressionNoIn_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_relationalExpressionNoInStack->push(ctx->pEmersonTree_relationalExpressionNoInStack, newAttributes, (void (*)(void *))relationalExpressionNoInFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a EmersonTree_shiftExpression scope set 
 */
static pEmersonTree_shiftExpression_SCOPE   pEmersonTree_shiftExpressionPush(pEmersonTree ctx);
static void ANTLR3_CDECL shiftExpressionFree(pEmersonTree_shiftExpression_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL shiftExpressionFree(pEmersonTree_shiftExpression_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a EmersonTree shiftExpression scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pEmersonTree_shiftExpressionTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pEmersonTree_shiftExpression_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pEmersonTree_shiftExpression_SCOPE
pEmersonTree_shiftExpressionPush(pEmersonTree ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pEmersonTree_shiftExpression_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pEmersonTree_shiftExpressionStack->size(ctx->pEmersonTree_shiftExpressionStack) > ctx->pEmersonTree_shiftExpressionStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pEmersonTree_shiftExpression_SCOPE)ctx->pEmersonTree_shiftExpressionStack->get(ctx->pEmersonTree_shiftExpressionStack, ctx->pEmersonTree_shiftExpressionStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pEmersonTree_shiftExpression_SCOPE) ANTLR3_MALLOC(sizeof(EmersonTree_shiftExpression_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pEmersonTree_shiftExpressionStack->push(ctx->pEmersonTree_shiftExpressionStack, newAttributes, (void (*)(void *))shiftExpressionFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pEmersonTree_shiftExpressionStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonTreeTokenNames[211+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "RIGHT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "TRIPLE_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "EMPTY_BLOCK",
        (pANTLR3_UINT8) "LEFT_SHIFT",
        (pANTLR3_UINT8) "RIGHT_SHIFT",
        (pANTLR3_UINT8) "TRIPLE_SHIFT",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "OBJECT_LITERAL",
        (pANTLR3_UINT8) "OBJECT_LITERAL_INTERNAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<-'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'>>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'>>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIG"
       };

        
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_msgSendStatementStack
 */
void
pEmersonTree_msgSendStatementPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(msgSendStatement)->free != NULL)
	{
        SCOPE_TOP(msgSendStatement)->free(SCOPE_TOP(msgSendStatement));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_msgSendStatementStack_limit--;
    SCOPE_TOP(msgSendStatement) = (pEmersonTree_msgSendStatement_SCOPE)(ctx->pEmersonTree_msgSendStatementStack->get(ctx->pEmersonTree_msgSendStatementStack, ctx->pEmersonTree_msgSendStatementStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionStack
 */
void
pEmersonTree_assignmentExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpression)->free != NULL)
	{
        SCOPE_TOP(assignmentExpression)->free(SCOPE_TOP(assignmentExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionStack_limit--;
    SCOPE_TOP(assignmentExpression) = (pEmersonTree_assignmentExpression_SCOPE)(ctx->pEmersonTree_assignmentExpressionStack->get(ctx->pEmersonTree_assignmentExpressionStack, ctx->pEmersonTree_assignmentExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_assignmentExpressionNoInStack
 */
void
pEmersonTree_assignmentExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(assignmentExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(assignmentExpressionNoIn)->free(SCOPE_TOP(assignmentExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit--;
    SCOPE_TOP(assignmentExpressionNoIn) = (pEmersonTree_assignmentExpressionNoIn_SCOPE)(ctx->pEmersonTree_assignmentExpressionNoInStack->get(ctx->pEmersonTree_assignmentExpressionNoInStack, ctx->pEmersonTree_assignmentExpressionNoInStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionStack
 */
void
pEmersonTree_relationalExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpression)->free != NULL)
	{
        SCOPE_TOP(relationalExpression)->free(SCOPE_TOP(relationalExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionStack_limit--;
    SCOPE_TOP(relationalExpression) = (pEmersonTree_relationalExpression_SCOPE)(ctx->pEmersonTree_relationalExpressionStack->get(ctx->pEmersonTree_relationalExpressionStack, ctx->pEmersonTree_relationalExpressionStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_relationalExpressionNoInStack
 */
void
pEmersonTree_relationalExpressionNoInPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(relationalExpressionNoIn)->free != NULL)
	{
        SCOPE_TOP(relationalExpressionNoIn)->free(SCOPE_TOP(relationalExpressionNoIn));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_relationalExpressionNoInStack_limit--;
    SCOPE_TOP(relationalExpressionNoIn) = (pEmersonTree_relationalExpressionNoIn_SCOPE)(ctx->pEmersonTree_relationalExpressionNoInStack->get(ctx->pEmersonTree_relationalExpressionNoInStack, ctx->pEmersonTree_relationalExpressionNoInStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pEmersonTree_shiftExpressionStack
 */
void
pEmersonTree_shiftExpressionPop(pEmersonTree ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(shiftExpression)->free != NULL)
	{
        SCOPE_TOP(shiftExpression)->free(SCOPE_TOP(shiftExpression));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pEmersonTree_shiftExpressionStack_limit--;
    SCOPE_TOP(shiftExpression) = (pEmersonTree_shiftExpression_SCOPE)(ctx->pEmersonTree_shiftExpressionStack->get(ctx->pEmersonTree_shiftExpressionStack, ctx->pEmersonTree_shiftExpressionStack_limit - 1));
}


// Forward declare the locally static matching functions we have generated.
//
static pANTLR3_STRING	program    (pEmersonTree ctx);
static void	sourceElements    (pEmersonTree ctx);
static void	sourceElement    (pEmersonTree ctx);
static void	functionDeclaration    (pEmersonTree ctx);
static void	functionExpression    (pEmersonTree ctx);
static void	formalParameterList    (pEmersonTree ctx);
static void	functionBody    (pEmersonTree ctx);
static void	statement    (pEmersonTree ctx);
static void	noOpStatement    (pEmersonTree ctx);
static void	statementBlock    (pEmersonTree ctx);
static void	statementList    (pEmersonTree ctx);
static void	variableStatement    (pEmersonTree ctx);
static void	variableDeclarationList    (pEmersonTree ctx);
static void	variableDeclarationListNoIn    (pEmersonTree ctx);
static void	variableDeclaration    (pEmersonTree ctx);
static void	variableDeclarationNoIn    (pEmersonTree ctx);
static void	initialiser    (pEmersonTree ctx);
static void	initialiserNoIn    (pEmersonTree ctx);
static void	expressionStatement    (pEmersonTree ctx);
static void	ifStatement    (pEmersonTree ctx);
static void	iterationStatement    (pEmersonTree ctx);
static void	doWhileStatement    (pEmersonTree ctx);
static void	whileStatement    (pEmersonTree ctx);
static void	forStatement    (pEmersonTree ctx);
static void	forStatementInitialiserPart    (pEmersonTree ctx);
static void	forInStatement    (pEmersonTree ctx);
static void	forInStatementInitialiserPart    (pEmersonTree ctx);
static void	continueStatement    (pEmersonTree ctx);
static void	breakStatement    (pEmersonTree ctx);
static void	returnStatement    (pEmersonTree ctx);
static void	withStatement    (pEmersonTree ctx);
static void	labelledStatement    (pEmersonTree ctx);
static void	switchStatement    (pEmersonTree ctx);
static void	caseBlock    (pEmersonTree ctx);
static void	caseClause    (pEmersonTree ctx);
static void	defaultClause    (pEmersonTree ctx);
static void	throwStatement    (pEmersonTree ctx);
static void	whenStatement    (pEmersonTree ctx);
static void	whenPred    (pEmersonTree ctx);
static void	whenCheckedListFirst    (pEmersonTree ctx);
static void	whenCheckedListSubsequent    (pEmersonTree ctx);
static void	tryStatement    (pEmersonTree ctx);
static void	catchFinallyBlock    (pEmersonTree ctx);
static void	catchBlock    (pEmersonTree ctx);
static void	finallyBlock    (pEmersonTree ctx);
static void	msgSendStatement    (pEmersonTree ctx);
static void	memAndCallExpression    (pEmersonTree ctx);
static void	msgRecvStatement    (pEmersonTree ctx);
static void	catchClause    (pEmersonTree ctx);
static void	finallyClause    (pEmersonTree ctx);
static void	expression    (pEmersonTree ctx);
static void	expressionNoIn    (pEmersonTree ctx);
static void	assignmentExpression    (pEmersonTree ctx);
static void	assignmentExpressionNoIn    (pEmersonTree ctx);
static void	leftHandSideExpression    (pEmersonTree ctx);
static void	newExpression    (pEmersonTree ctx);
static void	propertyReferenceSuffix1    (pEmersonTree ctx);
static void	indexSuffix1    (pEmersonTree ctx);
static void	memberExpression    (pEmersonTree ctx);
static void	memberExpressionSuffix    (pEmersonTree ctx);
static void	callExpression    (pEmersonTree ctx);
static void	callExpressionSuffix    (pEmersonTree ctx);
static void	arguments    (pEmersonTree ctx);
static void	indexSuffix    (pEmersonTree ctx);
static void	propertyReferenceSuffix    (pEmersonTree ctx);
static void	assignmentOperator    (pEmersonTree ctx);
static void	conditionalExpression    (pEmersonTree ctx);
static void	conditionalExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpression    (pEmersonTree ctx);
static void	logicalORExpression    (pEmersonTree ctx);
static void	logicalORExpressionNoIn    (pEmersonTree ctx);
static void	logicalANDExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseORExpression    (pEmersonTree ctx);
static void	bitwiseORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseXORExpression    (pEmersonTree ctx);
static void	bitwiseXORExpressionNoIn    (pEmersonTree ctx);
static void	bitwiseANDExpression    (pEmersonTree ctx);
static void	bitwiseANDExpressionNoIn    (pEmersonTree ctx);
static void	equalityExpression    (pEmersonTree ctx);
static void	equalityExpressionNoIn    (pEmersonTree ctx);
static void	relationalOps    (pEmersonTree ctx);
static void	relationalExpression    (pEmersonTree ctx);
static void	relationalOpsNoIn    (pEmersonTree ctx);
static void	relationalExpressionNoIn    (pEmersonTree ctx);
static void	shiftOps    (pEmersonTree ctx);
static void	shiftExpression    (pEmersonTree ctx);
static void	additiveExpression    (pEmersonTree ctx);
static void	multiplicativeExpression    (pEmersonTree ctx);
static void	unaryOps    (pEmersonTree ctx);
static void	unaryExpression    (pEmersonTree ctx);
static void	postfixExpression    (pEmersonTree ctx);
static void	primaryExpression    (pEmersonTree ctx);
static void	vectorLiteral    (pEmersonTree ctx);
static void	dollarExpression    (pEmersonTree ctx);
static void	arrayLiteral    (pEmersonTree ctx);
static void	objectLiteral    (pEmersonTree ctx);
static void	objectLiteralInternal    (pEmersonTree ctx);
static void	propertyName    (pEmersonTree ctx);
static void	literal    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred31_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred44_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred46_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred48_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred56_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred57_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred58_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred85_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred86_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred89_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred93_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred98_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred99_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred159_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred177_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred178_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred180_EmersonTree    (pEmersonTree ctx);
static ANTLR3_BOOLEAN	synpred181_EmersonTree    (pEmersonTree ctx);
static void	EmersonTreeFree(pEmersonTree ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//EmersonTree.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonTreeNewSSD(instream, NULL);
}

/** \brief Create a new EmersonTree parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonTree
EmersonTreeNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonTree ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonTree) ANTLR3_CALLOC(1, sizeof(EmersonTree));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonTree.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our EmersonTree interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->whenStatement	= whenStatement;
    ctx->whenPred	= whenPred;
    ctx->whenCheckedListFirst	= whenCheckedListFirst;
    ctx->whenCheckedListSubsequent	= whenCheckedListSubsequent;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->shiftOps	= shiftOps;
    ctx->shiftExpression	= shiftExpression;
    ctx->additiveExpression	= additiveExpression;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->objectLiteralInternal	= objectLiteralInternal;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred31_EmersonTree	= synpred31_EmersonTree;
    ctx->synpred44_EmersonTree	= synpred44_EmersonTree;
    ctx->synpred46_EmersonTree	= synpred46_EmersonTree;
    ctx->synpred48_EmersonTree	= synpred48_EmersonTree;
    ctx->synpred56_EmersonTree	= synpred56_EmersonTree;
    ctx->synpred57_EmersonTree	= synpred57_EmersonTree;
    ctx->synpred58_EmersonTree	= synpred58_EmersonTree;
    ctx->synpred85_EmersonTree	= synpred85_EmersonTree;
    ctx->synpred86_EmersonTree	= synpred86_EmersonTree;
    ctx->synpred89_EmersonTree	= synpred89_EmersonTree;
    ctx->synpred93_EmersonTree	= synpred93_EmersonTree;
    ctx->synpred98_EmersonTree	= synpred98_EmersonTree;
    ctx->synpred99_EmersonTree	= synpred99_EmersonTree;
    ctx->synpred159_EmersonTree	= synpred159_EmersonTree;
    ctx->synpred177_EmersonTree	= synpred177_EmersonTree;
    ctx->synpred178_EmersonTree	= synpred178_EmersonTree;
    ctx->synpred180_EmersonTree	= synpred180_EmersonTree;
    ctx->synpred181_EmersonTree	= synpred181_EmersonTree;
    ctx->free			= EmersonTreeFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_msgSendStatementPush     = pEmersonTree_msgSendStatementPush;
    ctx->pEmersonTree_msgSendStatementStack    = antlr3StackNew(0);
    ctx->pEmersonTree_msgSendStatementStack_limit    = 0;
    ctx->pEmersonTree_msgSendStatementTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionPush     = pEmersonTree_assignmentExpressionPush;
    ctx->pEmersonTree_assignmentExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInPush     = pEmersonTree_assignmentExpressionNoInPush;
    ctx->pEmersonTree_assignmentExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_assignmentExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_assignmentExpressionNoInTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionPush     = pEmersonTree_relationalExpressionPush;
    ctx->pEmersonTree_relationalExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInPush     = pEmersonTree_relationalExpressionNoInPush;
    ctx->pEmersonTree_relationalExpressionNoInStack    = antlr3StackNew(0);
    ctx->pEmersonTree_relationalExpressionNoInStack_limit    = 0;
    ctx->pEmersonTree_relationalExpressionNoInTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_shiftExpressionPush     = pEmersonTree_shiftExpressionPush;
    ctx->pEmersonTree_shiftExpressionStack    = antlr3StackNew(0);
    ctx->pEmersonTree_shiftExpressionStack_limit    = 0;
    ctx->pEmersonTree_shiftExpressionTop      = NULL;


        
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonTreeTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonTreeFree(pEmersonTree ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_msgSendStatementStack->free(ctx->pEmersonTree_msgSendStatementStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionStack->free(ctx->pEmersonTree_assignmentExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_assignmentExpressionNoInStack->free(ctx->pEmersonTree_assignmentExpressionNoInStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionStack->free(ctx->pEmersonTree_relationalExpressionStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_relationalExpressionNoInStack->free(ctx->pEmersonTree_relationalExpressionNoInStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pEmersonTree_shiftExpressionStack->free(ctx->pEmersonTree_shiftExpressionStack);

    
        
	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonTreeTokenNames; 
}


        pANTLR3_STRING program_string;
        ANTLR3_UINT32 program_line;
        ANTLR3_UINT32 line_pos;
        extern pEmersonTree _treeParser;
        

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_PROG_in_program76  */
static	ANTLR3_BITWORD FOLLOW_PROG_in_program76_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PROG_in_program76	= { FOLLOW_PROG_in_program76_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program121  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program121	= { FOLLOW_sourceElements_in_program121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements182  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements182_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE02), ANTLR3_UINT64_LIT(0x0000000C24000010) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements182	= { FOLLOW_sourceElement_in_sourceElements182_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement205  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement205	= { FOLLOW_functionDeclaration_in_sourceElement205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement213  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement213	= { FOLLOW_statement_in_sourceElement213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_DECL_in_functionDeclaration232  */
static	ANTLR3_BITWORD FOLLOW_FUNC_DECL_in_functionDeclaration232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_DECL_in_functionDeclaration232	= { FOLLOW_FUNC_DECL_in_functionDeclaration232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration264  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration264_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE00), ANTLR3_UINT64_LIT(0x0000000E26000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration264	= { FOLLOW_Identifier_in_functionDeclaration264_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration298  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration298_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE00), ANTLR3_UINT64_LIT(0x0000000E26000010) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration298	= { FOLLOW_formalParameterList_in_functionDeclaration298_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration332  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration332	= { FOLLOW_functionBody_in_functionDeclaration332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_EXPR_in_functionExpression376  */
static	ANTLR3_BITWORD FOLLOW_FUNC_EXPR_in_functionExpression376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_EXPR_in_functionExpression376	= { FOLLOW_FUNC_EXPR_in_functionExpression376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression420  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression420_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE00), ANTLR3_UINT64_LIT(0x0000000E26000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression420	= { FOLLOW_Identifier_in_functionExpression420_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression487  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression487_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE00), ANTLR3_UINT64_LIT(0x0000000E26000010) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression487	= { FOLLOW_formalParameterList_in_functionExpression487_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression519  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression519	= { FOLLOW_functionBody_in_functionExpression519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_PARAMS_in_formalParameterList567  */
static	ANTLR3_BITWORD FOLLOW_FUNC_PARAMS_in_formalParameterList567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_PARAMS_in_formalParameterList567	= { FOLLOW_FUNC_PARAMS_in_formalParameterList567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList588  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList588	= { FOLLOW_Identifier_in_formalParameterList588_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList658  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList658	= { FOLLOW_Identifier_in_formalParameterList658_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody687  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody687	= { FOLLOW_sourceElements_in_functionBody687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EMPTY_FUNC_BODY_in_functionBody692  */
static	ANTLR3_BITWORD FOLLOW_EMPTY_FUNC_BODY_in_functionBody692_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EMPTY_FUNC_BODY_in_functionBody692	= { FOLLOW_EMPTY_FUNC_BODY_in_functionBody692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement708  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement708	= { FOLLOW_msgSendStatement_in_statement708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_statement716  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_statement716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_statement716	= { FOLLOW_msgRecvStatement_in_statement716_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement724  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement724	= { FOLLOW_noOpStatement_in_statement724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement732  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement732_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement732	= { FOLLOW_statementBlock_in_statement732_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement740  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement740	= { FOLLOW_variableStatement_in_statement740_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement748  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement748_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement748	= { FOLLOW_expressionStatement_in_statement748_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement756  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement756	= { FOLLOW_ifStatement_in_statement756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement764  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement764	= { FOLLOW_iterationStatement_in_statement764_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement772  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement772	= { FOLLOW_continueStatement_in_statement772_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement780  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement780	= { FOLLOW_breakStatement_in_statement780_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement788  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement788	= { FOLLOW_returnStatement_in_statement788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement796  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement796	= { FOLLOW_withStatement_in_statement796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement804  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement804	= { FOLLOW_labelledStatement_in_statement804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement812  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement812	= { FOLLOW_switchStatement_in_statement812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement820  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement820	= { FOLLOW_throwStatement_in_statement820_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenStatement_in_statement828  */
static	ANTLR3_BITWORD FOLLOW_whenStatement_in_statement828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenStatement_in_statement828	= { FOLLOW_whenStatement_in_statement828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement836  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement836	= { FOLLOW_tryStatement_in_statement836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOOP_in_noOpStatement862  */
static	ANTLR3_BITWORD FOLLOW_NOOP_in_noOpStatement862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOOP_in_noOpStatement862	= { FOLLOW_NOOP_in_noOpStatement862_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EMPTY_BLOCK_in_statementBlock907  */
static	ANTLR3_BITWORD FOLLOW_EMPTY_BLOCK_in_statementBlock907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EMPTY_BLOCK_in_statementBlock907	= { FOLLOW_EMPTY_BLOCK_in_statementBlock907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock948  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock948	= { FOLLOW_statementList_in_statementBlock948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLIST_in_statementList977  */
static	ANTLR3_BITWORD FOLLOW_SLIST_in_statementList977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SLIST_in_statementList977	= { FOLLOW_SLIST_in_statementList977_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList993  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList993_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE08), ANTLR3_UINT64_LIT(0x0000000C24000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList993	= { FOLLOW_statement_in_statementList993_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_variableStatement1059  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_variableStatement1059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_variableStatement1059	= { FOLLOW_VARLIST_in_variableStatement1059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1087  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1087	= { FOLLOW_variableDeclarationList_in_variableStatement1087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1107  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1107	= { FOLLOW_variableDeclaration_in_variableDeclarationList1107_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1147  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1147	= { FOLLOW_variableDeclaration_in_variableDeclarationList1147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1170  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1170	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclaration1197  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclaration1197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclaration1197	= { FOLLOW_VAR_in_variableDeclaration1197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1211  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1211_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000008), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1211	= { FOLLOW_Identifier_in_variableDeclaration1211_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1289  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1289	= { FOLLOW_initialiser_in_variableDeclaration1289_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_variableDeclarationNoIn1349  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_variableDeclarationNoIn1349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_variableDeclarationNoIn1349	= { FOLLOW_VAR_in_variableDeclarationNoIn1349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1368  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1368_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000008), ANTLR3_UINT64_LIT(0x0000000080000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1368	= { FOLLOW_Identifier_in_variableDeclarationNoIn1368_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1446  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1446	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1446_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_initialiser1489  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_initialiser1489_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_initialiser1489	= { FOLLOW_assignmentExpression_in_initialiser1489_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1502  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1502	= { FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1502_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1519  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1519	= { FOLLOW_expression_in_expressionStatement1519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IF_in_ifStatement1532  */
static	ANTLR3_BITWORD FOLLOW_IF_in_ifStatement1532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IF_in_ifStatement1532	= { FOLLOW_IF_in_ifStatement1532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1561  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1561_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE08), ANTLR3_UINT64_LIT(0x0000000C24000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1561	= { FOLLOW_expression_in_ifStatement1561_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1591  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1591_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE08), ANTLR3_UINT64_LIT(0x0000000C24000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1591	= { FOLLOW_statement_in_ifStatement1591_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1685  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1685	= { FOLLOW_statement_in_ifStatement1685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1740  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1740	= { FOLLOW_doWhileStatement_in_iterationStatement1740_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1745  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1745	= { FOLLOW_whileStatement_in_iterationStatement1745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1750  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1750_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1750	= { FOLLOW_forStatement_in_iterationStatement1750_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1755  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1755_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1755	= { FOLLOW_forInStatement_in_iterationStatement1755_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DO_in_doWhileStatement1782  */
static	ANTLR3_BITWORD FOLLOW_DO_in_doWhileStatement1782_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DO_in_doWhileStatement1782	= { FOLLOW_DO_in_doWhileStatement1782_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1811  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1811	= { FOLLOW_statement_in_doWhileStatement1811_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1839  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1839	= { FOLLOW_expression_in_doWhileStatement1839_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHILE_in_whileStatement1890  */
static	ANTLR3_BITWORD FOLLOW_WHILE_in_whileStatement1890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHILE_in_whileStatement1890	= { FOLLOW_WHILE_in_whileStatement1890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1918  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1918_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE08), ANTLR3_UINT64_LIT(0x0000000C24000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1918	= { FOLLOW_expression_in_whileStatement1918_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1947  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1947	= { FOLLOW_statement_in_whileStatement1947_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FOR_in_forStatement1983  */
static	ANTLR3_BITWORD FOLLOW_FOR_in_forStatement1983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FOR_in_forStatement1983	= { FOLLOW_FOR_in_forStatement1983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORINIT_in_forStatement2014  */
static	ANTLR3_BITWORD FOLLOW_FORINIT_in_forStatement2014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORINIT_in_forStatement2014	= { FOLLOW_FORINIT_in_forStatement2014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement2016  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement2016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement2016	= { FOLLOW_forStatementInitialiserPart_in_forStatement2016_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORCOND_in_forStatement2049  */
static	ANTLR3_BITWORD FOLLOW_FORCOND_in_forStatement2049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORCOND_in_forStatement2049	= { FOLLOW_FORCOND_in_forStatement2049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2051  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2051	= { FOLLOW_expression_in_forStatement2051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORITER_in_forStatement2085  */
static	ANTLR3_BITWORD FOLLOW_FORITER_in_forStatement2085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORITER_in_forStatement2085	= { FOLLOW_FORITER_in_forStatement2085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2087  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2087	= { FOLLOW_expression_in_forStatement2087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement2120  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement2120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement2120	= { FOLLOW_statement_in_forStatement2120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart2145  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart2145_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart2145	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart2145_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARLIST_in_forStatementInitialiserPart2154  */
static	ANTLR3_BITWORD FOLLOW_VARLIST_in_forStatementInitialiserPart2154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARLIST_in_forStatementInitialiserPart2154	= { FOLLOW_VARLIST_in_forStatementInitialiserPart2154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2156  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2156	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FORIN_in_forInStatement2182  */
static	ANTLR3_BITWORD FOLLOW_FORIN_in_forInStatement2182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FORIN_in_forInStatement2182	= { FOLLOW_FORIN_in_forInStatement2182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement2204  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement2204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement2204	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement2204_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement2225  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement2225_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE08), ANTLR3_UINT64_LIT(0x0000000C24000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement2225	= { FOLLOW_expression_in_forInStatement2225_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement2246  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement2246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement2246	= { FOLLOW_statement_in_forInStatement2246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2264  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2264	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2264_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VAR_in_forInStatementInitialiserPart2270  */
static	ANTLR3_BITWORD FOLLOW_VAR_in_forInStatementInitialiserPart2270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VAR_in_forInStatementInitialiserPart2270	= { FOLLOW_VAR_in_forInStatementInitialiserPart2270_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2272  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2272	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTINUE_in_continueStatement2297  */
static	ANTLR3_BITWORD FOLLOW_CONTINUE_in_continueStatement2297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTINUE_in_continueStatement2297	= { FOLLOW_CONTINUE_in_continueStatement2297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2333  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2333	= { FOLLOW_Identifier_in_continueStatement2333_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BREAK_in_breakStatement2390  */
static	ANTLR3_BITWORD FOLLOW_BREAK_in_breakStatement2390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BREAK_in_breakStatement2390	= { FOLLOW_BREAK_in_breakStatement2390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2424  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2424	= { FOLLOW_Identifier_in_breakStatement2424_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_returnStatement2483  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_returnStatement2483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_returnStatement2483	= { FOLLOW_RETURN_in_returnStatement2483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2520  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2520	= { FOLLOW_expression_in_returnStatement2520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WITH_in_withStatement2556  */
static	ANTLR3_BITWORD FOLLOW_WITH_in_withStatement2556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WITH_in_withStatement2556	= { FOLLOW_WITH_in_withStatement2556_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2558  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2558_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE08), ANTLR3_UINT64_LIT(0x0000000C24000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2558	= { FOLLOW_expression_in_withStatement2558_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2560  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2560	= { FOLLOW_statement_in_withStatement2560_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LABEL_in_labelledStatement2580  */
static	ANTLR3_BITWORD FOLLOW_LABEL_in_labelledStatement2580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LABEL_in_labelledStatement2580	= { FOLLOW_LABEL_in_labelledStatement2580_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement2591  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement2591_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE08), ANTLR3_UINT64_LIT(0x0000000C24000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement2591	= { FOLLOW_Identifier_in_labelledStatement2591_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement2612  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement2612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement2612	= { FOLLOW_statement_in_labelledStatement2612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SWITCH_in_switchStatement2647  */
static	ANTLR3_BITWORD FOLLOW_SWITCH_in_switchStatement2647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SWITCH_in_switchStatement2647	= { FOLLOW_SWITCH_in_switchStatement2647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2668  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2668_bits[]	= { ANTLR3_UINT64_LIT(0x000000A000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2668	= { FOLLOW_expression_in_switchStatement2668_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2689  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2689	= { FOLLOW_caseBlock_in_switchStatement2689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2724  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2724_bits[]	= { ANTLR3_UINT64_LIT(0x000000A000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2724	= { FOLLOW_caseClause_in_caseBlock2724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2729  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2729_bits[]	= { ANTLR3_UINT64_LIT(0x000000A000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2729	= { FOLLOW_defaultClause_in_caseBlock2729_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2735  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2735_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2735	= { FOLLOW_caseClause_in_caseBlock2735_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_caseClause2757  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_caseClause2757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_caseClause2757	= { FOLLOW_CASE_in_caseClause2757_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2759  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000208), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2759	= { FOLLOW_expression_in_caseClause2759_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2761  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2761	= { FOLLOW_statementList_in_caseClause2761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DEFAULT_in_defaultClause2781  */
static	ANTLR3_BITWORD FOLLOW_DEFAULT_in_defaultClause2781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DEFAULT_in_defaultClause2781	= { FOLLOW_DEFAULT_in_defaultClause2781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2783  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2783	= { FOLLOW_statementList_in_defaultClause2783_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_THROW_in_throwStatement2804  */
static	ANTLR3_BITWORD FOLLOW_THROW_in_throwStatement2804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_THROW_in_throwStatement2804	= { FOLLOW_THROW_in_throwStatement2804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2806  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2806	= { FOLLOW_expression_in_throwStatement2806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHEN_in_whenStatement2825  */
static	ANTLR3_BITWORD FOLLOW_WHEN_in_whenStatement2825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHEN_in_whenStatement2825	= { FOLLOW_WHEN_in_whenStatement2825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenPred_in_whenStatement2845  */
static	ANTLR3_BITWORD FOLLOW_whenPred_in_whenStatement2845_bits[]	= { ANTLR3_UINT64_LIT(0x0000014685F1CE00), ANTLR3_UINT64_LIT(0x0000000E26000010) };
static  ANTLR3_BITSET_LIST FOLLOW_whenPred_in_whenStatement2845	= { FOLLOW_whenPred_in_whenStatement2845_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_whenStatement2865  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_whenStatement2865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_whenStatement2865	= { FOLLOW_functionBody_in_whenStatement2865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHEN_PRED_in_whenPred2904  */
static	ANTLR3_BITWORD FOLLOW_WHEN_PRED_in_whenPred2904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHEN_PRED_in_whenPred2904	= { FOLLOW_WHEN_PRED_in_whenPred2904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred2914  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred2914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred2914	= { FOLLOW_expression_in_whenPred2914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst2938  */
static	ANTLR3_BITWORD FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst2938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst2938	= { FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst2938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListFirst2958  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListFirst2958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListFirst2958	= { FOLLOW_expression_in_whenCheckedListFirst2958_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst2979  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst2979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst2979	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst2979_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3020  */
static	ANTLR3_BITWORD FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3020	= { FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListSubsequent3040  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListSubsequent3040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListSubsequent3040	= { FOLLOW_expression_in_whenCheckedListSubsequent3040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3061  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000008) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3061	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRY_in_tryStatement3114  */
static	ANTLR3_BITWORD FOLLOW_TRY_in_tryStatement3114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRY_in_tryStatement3114	= { FOLLOW_TRY_in_tryStatement3114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement3142  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement3142_bits[]	= { ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement3142	= { FOLLOW_statementBlock_in_tryStatement3142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement3156  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement3156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement3156	= { FOLLOW_catchFinallyBlock_in_tryStatement3156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock3194  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock3194_bits[]	= { ANTLR3_UINT64_LIT(0x0000001800000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock3194	= { FOLLOW_catchBlock_in_catchFinallyBlock3194_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3196  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3196	= { FOLLOW_finallyBlock_in_catchFinallyBlock3196_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock3209  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock3209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock3209	= { FOLLOW_finallyBlock_in_catchFinallyBlock3209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchBlock3235  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchBlock3235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchBlock3235	= { FOLLOW_CATCH_in_catchBlock3235_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock3263  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock3263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock3263	= { FOLLOW_Identifier_in_catchBlock3263_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock3291  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock3291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock3291	= { FOLLOW_statementBlock_in_catchBlock3291_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyBlock3330  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyBlock3330_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyBlock3330	= { FOLLOW_FINALLY_in_finallyBlock3330_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock3358  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock3358_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock3358	= { FOLLOW_statementBlock_in_finallyBlock3358_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_SEND_in_msgSendStatement3399  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_SEND_in_msgSendStatement3399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_SEND_in_msgSendStatement3399	= { FOLLOW_MESSAGE_SEND_in_msgSendStatement3399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3422  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3422_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3422	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3422_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement3439  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement3439_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000C8), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement3439	= { FOLLOW_leftHandSideExpression_in_msgSendStatement3439_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement3491  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement3491_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement3491	= { FOLLOW_memberExpression_in_msgSendStatement3491_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression3548  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression3548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression3548	= { FOLLOW_memberExpression_in_memAndCallExpression3548_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression3552  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression3552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression3552	= { FOLLOW_callExpression_in_memAndCallExpression3552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement3571  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement3571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement3571	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement3571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement3587  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement3587_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement3587	= { FOLLOW_memAndCallExpression_in_msgRecvStatement3587_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement3604  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement3604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement3604	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement3604_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement3632  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement3632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement3632	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement3632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement3644  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement3644_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement3644	= { FOLLOW_memAndCallExpression_in_msgRecvStatement3644_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement3657  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement3657_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement3657	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement3657_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement3669  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement3669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement3669	= { FOLLOW_memAndCallExpression_in_msgRecvStatement3669_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_msgRecvStatement3692  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_msgRecvStatement3692_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_msgRecvStatement3692	= { FOLLOW_MESSAGE_RECV_in_msgRecvStatement3692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_msgRecvStatement3708  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_msgRecvStatement3708_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_msgRecvStatement3708	= { FOLLOW_callExpression_in_msgRecvStatement3708_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement3725  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement3725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement3725	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement3725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CATCH_in_catchClause3749  */
static	ANTLR3_BITWORD FOLLOW_CATCH_in_catchClause3749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CATCH_in_catchClause3749	= { FOLLOW_CATCH_in_catchClause3749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause3764  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause3764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause3764	= { FOLLOW_Identifier_in_catchClause3764_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause3785  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause3785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause3785	= { FOLLOW_statementBlock_in_catchClause3785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FINALLY_in_finallyClause3805  */
static	ANTLR3_BITWORD FOLLOW_FINALLY_in_finallyClause3805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FINALLY_in_finallyClause3805	= { FOLLOW_FINALLY_in_finallyClause3805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause3818  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause3818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause3818	= { FOLLOW_statementBlock_in_finallyClause3818_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_LIST_in_expression3843  */
static	ANTLR3_BITWORD FOLLOW_EXPR_LIST_in_expression3843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_LIST_in_expression3843	= { FOLLOW_EXPR_LIST_in_expression3843_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression3845  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression3845_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000008), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression3845	= { FOLLOW_assignmentExpression_in_expression3845_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXPR_LIST_in_expressionNoIn3860  */
static	ANTLR3_BITWORD FOLLOW_EXPR_LIST_in_expressionNoIn3860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXPR_LIST_in_expressionNoIn3860	= { FOLLOW_EXPR_LIST_in_expressionNoIn3860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3862  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3862_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000008), ANTLR3_UINT64_LIT(0x0000000080000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3862	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3862_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COND_EXPR_in_assignmentExpression3884  */
static	ANTLR3_BITWORD FOLLOW_COND_EXPR_in_assignmentExpression3884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COND_EXPR_in_assignmentExpression3884	= { FOLLOW_COND_EXPR_in_assignmentExpression3884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression3886  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression3886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression3886	= { FOLLOW_conditionalExpression_in_assignmentExpression3886_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpression3906  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpression3906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpression3906	= { FOLLOW_ASSIGN_in_assignmentExpression3906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpression3930  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpression3930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpression3930	= { FOLLOW_MULT_ASSIGN_in_assignmentExpression3930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpression3948  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpression3948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpression3948	= { FOLLOW_DIV_ASSIGN_in_assignmentExpression3948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpression3968  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpression3968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpression3968	= { FOLLOW_MOD_ASSIGN_in_assignmentExpression3968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpression3987  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpression3987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpression3987	= { FOLLOW_ADD_ASSIGN_in_assignmentExpression3987_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpression4007  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpression4007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpression4007	= { FOLLOW_SUB_ASSIGN_in_assignmentExpression4007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpression4026  */
static	ANTLR3_BITWORD FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpression4026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpression4026	= { FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpression4026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4039  */
static	ANTLR3_BITWORD FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4039	= { FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4039_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4050  */
static	ANTLR3_BITWORD FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4050	= { FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpression4060  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpression4060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpression4060	= { FOLLOW_AND_ASSIGN_in_assignmentExpression4060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpression4079  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpression4079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpression4079	= { FOLLOW_EXP_ASSIGN_in_assignmentExpression4079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpression4098  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpression4098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpression4098	= { FOLLOW_OR_ASSIGN_in_assignmentExpression4098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression4126  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression4126_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression4126	= { FOLLOW_leftHandSideExpression_in_assignmentExpression4126_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression4153  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression4153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression4153	= { FOLLOW_assignmentExpression_in_assignmentExpression4153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4190  */
static	ANTLR3_BITWORD FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4190_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4190	= { FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4192  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4192	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentExpressionNoIn4212  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentExpressionNoIn4212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentExpressionNoIn4212	= { FOLLOW_ASSIGN_in_assignmentExpressionNoIn4212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4236  */
static	ANTLR3_BITWORD FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4236	= { FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4254  */
static	ANTLR3_BITWORD FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4254	= { FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4274  */
static	ANTLR3_BITWORD FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4274	= { FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4293  */
static	ANTLR3_BITWORD FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4293	= { FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4313  */
static	ANTLR3_BITWORD FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4313	= { FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpressionNoIn4332  */
static	ANTLR3_BITWORD FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpressionNoIn4332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpressionNoIn4332	= { FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpressionNoIn4332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn4345  */
static	ANTLR3_BITWORD FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn4345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn4345	= { FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn4345_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn4356  */
static	ANTLR3_BITWORD FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn4356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn4356	= { FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn4356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4366  */
static	ANTLR3_BITWORD FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4366	= { FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4385  */
static	ANTLR3_BITWORD FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4385	= { FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4404  */
static	ANTLR3_BITWORD FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4404	= { FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4437  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4437_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000000), ANTLR3_UINT64_LIT(0x0000000080000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4437	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4437_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn4452  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn4452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn4452	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn4452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression4469  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression4469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression4469	= { FOLLOW_callExpression_in_leftHandSideExpression4469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression4474  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression4474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression4474	= { FOLLOW_newExpression_in_leftHandSideExpression4474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression4486  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression4486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression4486	= { FOLLOW_memberExpression_in_newExpression4486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_newExpression4493  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_newExpression4493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_newExpression4493	= { FOLLOW_NEW_in_newExpression4493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression4495  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression4495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression4495	= { FOLLOW_newExpression_in_newExpression4495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix14508  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix14508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix14508	= { FOLLOW_Identifier_in_propertyReferenceSuffix14508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix14520  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix14520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix14520	= { FOLLOW_expression_in_indexSuffix14520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression4529  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression4529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression4529	= { FOLLOW_primaryExpression_in_memberExpression4529_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression4532  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression4532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression4532	= { FOLLOW_functionExpression_in_memberExpression4532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression4537  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression4537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression4537	= { FOLLOW_DOT_in_memberExpression4537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression4539  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression4539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression4539	= { FOLLOW_memberExpression_in_memberExpression4539_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression4543  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression4543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression4543	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression4543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_memberExpression4550  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_memberExpression4550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_memberExpression4550	= { FOLLOW_ARRAY_INDEX_in_memberExpression4550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression4552  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression4552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression4552	= { FOLLOW_memberExpression_in_memberExpression4552_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression4556  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression4556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression4556	= { FOLLOW_indexSuffix1_in_memberExpression4556_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_memberExpression4564  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_memberExpression4564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_memberExpression4564	= { FOLLOW_NEW_in_memberExpression4564_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression4568  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression4568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression4568	= { FOLLOW_memberExpression_in_memberExpression4568_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression4570  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression4570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression4570	= { FOLLOW_arguments_in_memberExpression4570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_memberExpression4576  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_memberExpression4576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_memberExpression4576	= { FOLLOW_DOT_in_memberExpression4576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression4580  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression4580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression4580	= { FOLLOW_memberExpression_in_memberExpression4580_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix4591  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix4591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix4591	= { FOLLOW_indexSuffix_in_memberExpressionSuffix4591_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix4596  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix4596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix4596	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix4596_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression4609  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression4609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression4609	= { FOLLOW_CALL_in_callExpression4609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression4611  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression4611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression4611	= { FOLLOW_memberExpression_in_callExpression4611_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression4613  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression4613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression4613	= { FOLLOW_arguments_in_callExpression4613_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_callExpression4621  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_callExpression4621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_callExpression4621	= { FOLLOW_ARRAY_INDEX_in_callExpression4621_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression4623  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression4623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression4623	= { FOLLOW_callExpression_in_callExpression4623_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression4627  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression4627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression4627	= { FOLLOW_indexSuffix1_in_callExpression4627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_callExpression4636  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_callExpression4636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_callExpression4636	= { FOLLOW_DOT_in_callExpression4636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression4638  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression4638_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression4638	= { FOLLOW_callExpression_in_callExpression4638_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression4642  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression4642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression4642	= { FOLLOW_propertyReferenceSuffix1_in_callExpression4642_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_callExpression4649  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_callExpression4649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_callExpression4649	= { FOLLOW_CALL_in_callExpression4649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_callExpression4651  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_callExpression4651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_callExpression4651	= { FOLLOW_callExpression_in_callExpression4651_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression4653  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression4653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression4653	= { FOLLOW_arguments_in_callExpression4653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix4667  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix4667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix4667	= { FOLLOW_arguments_in_callExpressionSuffix4667_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix4672  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix4672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix4672	= { FOLLOW_indexSuffix_in_callExpressionSuffix4672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix4677  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix4677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix4677	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix4677_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments4690  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments4690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments4690	= { FOLLOW_ARGLIST_in_arguments4690_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments4700  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments4700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments4700	= { FOLLOW_ARGLIST_in_arguments4700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments4720  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments4720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments4720	= { FOLLOW_assignmentExpression_in_arguments4720_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_arguments4743  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_arguments4743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_arguments4743	= { FOLLOW_ARGLIST_in_arguments4743_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments4771  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments4771_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000008), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments4771	= { FOLLOW_assignmentExpression_in_arguments4771_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments4827  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments4827_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000008), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments4827	= { FOLLOW_assignmentExpression_in_arguments4827_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_INDEX_in_indexSuffix4880  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_INDEX_in_indexSuffix4880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_INDEX_in_indexSuffix4880	= { FOLLOW_ARRAY_INDEX_in_indexSuffix4880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix4882  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix4882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix4882	= { FOLLOW_expression_in_indexSuffix4882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_propertyReferenceSuffix4897  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_propertyReferenceSuffix4897_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_propertyReferenceSuffix4897	= { FOLLOW_DOT_in_propertyReferenceSuffix4897_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix4899  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix4899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix4899	= { FOLLOW_Identifier_in_propertyReferenceSuffix4899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignmentOperator0  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignmentOperator0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignmentOperator0	= { FOLLOW_set_in_assignmentOperator0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression4950  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression4950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression4950	= { FOLLOW_logicalORExpression_in_conditionalExpression4950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_in_conditionalExpression4962  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_in_conditionalExpression4962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_in_conditionalExpression4962	= { FOLLOW_TERNARYOP_in_conditionalExpression4962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression4976  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression4976_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression4976	= { FOLLOW_logicalORExpression_in_conditionalExpression4976_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression4996  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression4996_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression4996	= { FOLLOW_assignmentExpression_in_conditionalExpression4996_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression5019  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression5019_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression5019	= { FOLLOW_assignmentExpression_in_conditionalExpression5019_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5052  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5052	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5052_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TERNARYOP_in_conditionalExpressionNoIn5062  */
static	ANTLR3_BITWORD FOLLOW_TERNARYOP_in_conditionalExpressionNoIn5062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TERNARYOP_in_conditionalExpressionNoIn5062	= { FOLLOW_TERNARYOP_in_conditionalExpressionNoIn5062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5074  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5074_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000000), ANTLR3_UINT64_LIT(0x0000000080000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5074	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5074_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5093  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5093_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000000), ANTLR3_UINT64_LIT(0x0000000080000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5093	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5093_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5110  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5110	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression5135  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression5135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression5135	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression5135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpression5140  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpression5140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpression5140	= { FOLLOW_AND_in_logicalANDExpression5140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalANDExpression5142  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalANDExpression5142_bits[]	= { ANTLR3_UINT64_LIT(0xFF800001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalANDExpression5142	= { FOLLOW_logicalANDExpression_in_logicalANDExpression5142_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression5146  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression5146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression5146	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression5146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression5159  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression5159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression5159	= { FOLLOW_logicalANDExpression_in_logicalORExpression5159_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpression5164  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpression5164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpression5164	= { FOLLOW_OR_in_logicalORExpression5164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_logicalORExpression5166  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_logicalORExpression5166_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_logicalORExpression5166	= { FOLLOW_logicalORExpression_in_logicalORExpression5166_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression5170  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression5170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression5170	= { FOLLOW_logicalANDExpression_in_logicalORExpression5170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5183  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5183	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logicalORExpressionNoIn5188  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logicalORExpressionNoIn5188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logicalORExpressionNoIn5188	= { FOLLOW_OR_in_logicalORExpressionNoIn5188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5190  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5190_bits[]	= { ANTLR3_UINT64_LIT(0xFFC00001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5190	= { FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5190_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5192  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5192	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5207  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5207	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logicalANDExpressionNoIn5213  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logicalANDExpressionNoIn5213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logicalANDExpressionNoIn5213	= { FOLLOW_AND_in_logicalANDExpressionNoIn5213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn5215  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn5215_bits[]	= { ANTLR3_UINT64_LIT(0xFF800001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn5215	= { FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn5215_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5219  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5219	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5233  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5233	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5233_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpression5239  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpression5239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpression5239	= { FOLLOW_BIT_OR_in_bitwiseORExpression5239_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_bitwiseORExpression5241  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_bitwiseORExpression5241_bits[]	= { ANTLR3_UINT64_LIT(0xFF000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_bitwiseORExpression5241	= { FOLLOW_bitwiseORExpression_in_bitwiseORExpression5241_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5245  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5245	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5245_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5258  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5258	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn5265  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn5265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn5265	= { FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn5265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn5267  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn5267_bits[]	= { ANTLR3_UINT64_LIT(0xFF000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn5267	= { FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn5267_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5271  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5271	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5283  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5283	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpression5290  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpression5290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpression5290	= { FOLLOW_EXP_in_bitwiseXORExpression5290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression5294  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression5294_bits[]	= { ANTLR3_UINT64_LIT(0xFE000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression5294	= { FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression5294_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5298  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5298	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5298_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5310  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5310	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5310_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXP_in_bitwiseXORExpressionNoIn5316  */
static	ANTLR3_BITWORD FOLLOW_EXP_in_bitwiseXORExpressionNoIn5316_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EXP_in_bitwiseXORExpressionNoIn5316	= { FOLLOW_EXP_in_bitwiseXORExpressionNoIn5316_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn5320  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn5320_bits[]	= { ANTLR3_UINT64_LIT(0xFE000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn5320	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn5320_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5323  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5323	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression5337  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression5337_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression5337	= { FOLLOW_equalityExpression_in_bitwiseANDExpression5337_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpression5343  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpression5343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpression5343	= { FOLLOW_BIT_AND_in_bitwiseANDExpression5343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression5347  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression5347_bits[]	= { ANTLR3_UINT64_LIT(0xFC000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression5347	= { FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression5347_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression5351  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression5351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression5351	= { FOLLOW_equalityExpression_in_bitwiseANDExpression5351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5365  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5365_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5365	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5365_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn5372  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn5372_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn5372	= { FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn5372_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn5376  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn5376_bits[]	= { ANTLR3_UINT64_LIT(0xFC000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn5376	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn5376_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5380  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5380	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression5393  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression5393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression5393	= { FOLLOW_relationalExpression_in_equalityExpression5393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpression5399  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpression5399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpression5399	= { FOLLOW_EQUALS_in_equalityExpression5399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression5403  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression5403_bits[]	= { ANTLR3_UINT64_LIT(0xC0000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression5403	= { FOLLOW_equalityExpression_in_equalityExpression5403_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression5407  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression5407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression5407	= { FOLLOW_relationalExpression_in_equalityExpression5407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpression5414  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpression5414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpression5414	= { FOLLOW_NOT_EQUALS_in_equalityExpression5414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression5418  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression5418_bits[]	= { ANTLR3_UINT64_LIT(0xC0000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression5418	= { FOLLOW_equalityExpression_in_equalityExpression5418_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression5422  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression5422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression5422	= { FOLLOW_relationalExpression_in_equalityExpression5422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpression5429  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpression5429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpression5429	= { FOLLOW_IDENT_in_equalityExpression5429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression5433  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression5433_bits[]	= { ANTLR3_UINT64_LIT(0xC0000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression5433	= { FOLLOW_equalityExpression_in_equalityExpression5433_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression5437  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression5437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression5437	= { FOLLOW_relationalExpression_in_equalityExpression5437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpression5444  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpression5444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpression5444	= { FOLLOW_NOT_IDENT_in_equalityExpression5444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_equalityExpression5448  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_equalityExpression5448_bits[]	= { ANTLR3_UINT64_LIT(0xC0000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFEF), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_equalityExpression5448	= { FOLLOW_equalityExpression_in_equalityExpression5448_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression5452  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression5452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression5452	= { FOLLOW_relationalExpression_in_equalityExpression5452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5462  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5462	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_equalityExpressionNoIn5468  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_equalityExpressionNoIn5468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_equalityExpressionNoIn5468	= { FOLLOW_EQUALS_in_equalityExpressionNoIn5468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5470  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5470_bits[]	= { ANTLR3_UINT64_LIT(0xC0000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5470	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5470_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5474  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5474	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn5481  */
static	ANTLR3_BITWORD FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn5481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn5481	= { FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn5481_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5483  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5483_bits[]	= { ANTLR3_UINT64_LIT(0xC0000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5483	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5483_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5487  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5487	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_equalityExpressionNoIn5494  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_equalityExpressionNoIn5494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_equalityExpressionNoIn5494	= { FOLLOW_IDENT_in_equalityExpressionNoIn5494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5496  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5496_bits[]	= { ANTLR3_UINT64_LIT(0xC0000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5496	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5496_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5500  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5500	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_IDENT_in_equalityExpressionNoIn5507  */
static	ANTLR3_BITWORD FOLLOW_NOT_IDENT_in_equalityExpressionNoIn5507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_IDENT_in_equalityExpressionNoIn5507	= { FOLLOW_NOT_IDENT_in_equalityExpressionNoIn5507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5509  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5509_bits[]	= { ANTLR3_UINT64_LIT(0xC0000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE7), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5509	= { FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5509_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5513  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5513	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5513_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOps5526  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOps5526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOps5526	= { FOLLOW_LESS_THAN_in_relationalOps5526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOps5532  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOps5532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOps5532	= { FOLLOW_GREATER_THAN_in_relationalOps5532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOps5538  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOps5538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOps5538	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOps5538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOps5545  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOps5545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOps5545	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOps5545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOps5551  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOps5551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOps5551	= { FOLLOW_INSTANCE_OF_in_relationalOps5551_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IN_in_relationalOps5557  */
static	ANTLR3_BITWORD FOLLOW_IN_in_relationalOps5557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IN_in_relationalOps5557	= { FOLLOW_IN_in_relationalOps5557_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression5575  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression5575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression5575	= { FOLLOW_shiftExpression_in_relationalExpression5575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression5589  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression5589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression5589	= { FOLLOW_relationalOps_in_relationalExpression5589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_relationalExpression5598  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_relationalExpression5598_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_relationalExpression5598	= { FOLLOW_relationalExpression_in_relationalExpression5598_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression5610  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression5610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression5610	= { FOLLOW_shiftExpression_in_relationalExpression5610_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_in_relationalOpsNoIn5626  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_in_relationalOpsNoIn5626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_in_relationalOpsNoIn5626	= { FOLLOW_LESS_THAN_in_relationalOpsNoIn5626_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_in_relationalOpsNoIn5632  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_in_relationalOpsNoIn5632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_in_relationalOpsNoIn5632	= { FOLLOW_GREATER_THAN_in_relationalOpsNoIn5632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn5638  */
static	ANTLR3_BITWORD FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn5638_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn5638	= { FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn5638_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn5644  */
static	ANTLR3_BITWORD FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn5644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn5644	= { FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn5644_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSTANCE_OF_in_relationalOpsNoIn5650  */
static	ANTLR3_BITWORD FOLLOW_INSTANCE_OF_in_relationalOpsNoIn5650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INSTANCE_OF_in_relationalOpsNoIn5650	= { FOLLOW_INSTANCE_OF_in_relationalOpsNoIn5650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn5670  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn5670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn5670	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn5670_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5685  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5685	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn5693  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn5693_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBFE0), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn5693	= { FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn5693_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn5709  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn5709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn5709	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn5709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEFT_SHIFT_in_shiftOps5730  */
static	ANTLR3_BITWORD FOLLOW_LEFT_SHIFT_in_shiftOps5730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LEFT_SHIFT_in_shiftOps5730	= { FOLLOW_LEFT_SHIFT_in_shiftOps5730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RIGHT_SHIFT_in_shiftOps5737  */
static	ANTLR3_BITWORD FOLLOW_RIGHT_SHIFT_in_shiftOps5737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RIGHT_SHIFT_in_shiftOps5737	= { FOLLOW_RIGHT_SHIFT_in_shiftOps5737_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRIPLE_SHIFT_in_shiftOps5744  */
static	ANTLR3_BITWORD FOLLOW_TRIPLE_SHIFT_in_shiftOps5744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_TRIPLE_SHIFT_in_shiftOps5744	= { FOLLOW_TRIPLE_SHIFT_in_shiftOps5744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression5760  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression5760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression5760	= { FOLLOW_additiveExpression_in_shiftExpression5760_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftOps_in_shiftExpression5766  */
static	ANTLR3_BITWORD FOLLOW_shiftOps_in_shiftExpression5766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftOps_in_shiftExpression5766	= { FOLLOW_shiftOps_in_shiftExpression5766_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_shiftExpression5776  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_shiftExpression5776_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBF00), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_shiftExpression5776	= { FOLLOW_shiftExpression_in_shiftExpression5776_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression5792  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression5792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression5792	= { FOLLOW_additiveExpression_in_shiftExpression5792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression5820  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression5820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression5820	= { FOLLOW_multiplicativeExpression_in_additiveExpression5820_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_OP_in_additiveExpression5833  */
static	ANTLR3_BITWORD FOLLOW_ADD_OP_in_additiveExpression5833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_OP_in_additiveExpression5833	= { FOLLOW_ADD_OP_in_additiveExpression5833_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression5866  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression5866_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBC00), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression5866	= { FOLLOW_additiveExpression_in_additiveExpression5866_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression5896  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression5896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression5896	= { FOLLOW_multiplicativeExpression_in_additiveExpression5896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_in_additiveExpression5939  */
static	ANTLR3_BITWORD FOLLOW_SUB_in_additiveExpression5939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_in_additiveExpression5939	= { FOLLOW_SUB_in_additiveExpression5939_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_additiveExpression5970  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_additiveExpression5970_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFBC00), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_additiveExpression5970	= { FOLLOW_additiveExpression_in_additiveExpression5970_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression6001  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression6001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression6001	= { FOLLOW_multiplicativeExpression_in_additiveExpression6001_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression6046  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression6046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression6046	= { FOLLOW_unaryExpression_in_multiplicativeExpression6046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MULT_in_multiplicativeExpression6053  */
static	ANTLR3_BITWORD FOLLOW_MULT_in_multiplicativeExpression6053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MULT_in_multiplicativeExpression6053	= { FOLLOW_MULT_in_multiplicativeExpression6053_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression6061  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression6061_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFA000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression6061	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression6061_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression6077  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression6077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression6077	= { FOLLOW_unaryExpression_in_multiplicativeExpression6077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_in_multiplicativeExpression6090  */
static	ANTLR3_BITWORD FOLLOW_DIV_in_multiplicativeExpression6090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_in_multiplicativeExpression6090	= { FOLLOW_DIV_in_multiplicativeExpression6090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression6092  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression6092_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFA000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression6092	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression6092_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression6096  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression6096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression6096	= { FOLLOW_unaryExpression_in_multiplicativeExpression6096_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_in_multiplicativeExpression6103  */
static	ANTLR3_BITWORD FOLLOW_MOD_in_multiplicativeExpression6103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_in_multiplicativeExpression6103	= { FOLLOW_MOD_in_multiplicativeExpression6103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_multiplicativeExpression6105  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_multiplicativeExpression6105_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008FFA000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_multiplicativeExpression6105	= { FOLLOW_multiplicativeExpression_in_multiplicativeExpression6105_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression6109  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression6109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression6109	= { FOLLOW_unaryExpression_in_multiplicativeExpression6109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unaryOps0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unaryOps0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unaryOps0	= { FOLLOW_set_in_unaryOps0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression6171  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression6171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression6171	= { FOLLOW_postfixExpression_in_unaryExpression6171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_OP_in_unaryExpression6195  */
static	ANTLR3_BITWORD FOLLOW_DELETE_OP_in_unaryExpression6195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_OP_in_unaryExpression6195	= { FOLLOW_DELETE_OP_in_unaryExpression6195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VOID_in_unaryExpression6217  */
static	ANTLR3_BITWORD FOLLOW_VOID_in_unaryExpression6217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VOID_in_unaryExpression6217	= { FOLLOW_VOID_in_unaryExpression6217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TYPEOF_in_unaryExpression6239  */
static	ANTLR3_BITWORD FOLLOW_TYPEOF_in_unaryExpression6239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_TYPEOF_in_unaryExpression6239	= { FOLLOW_TYPEOF_in_unaryExpression6239_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_unaryExpression6259  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_unaryExpression6259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_unaryExpression6259	= { FOLLOW_PLUSPLUS_in_unaryExpression6259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_unaryExpression6277  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_unaryExpression6277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_unaryExpression6277	= { FOLLOW_MINUSMINUS_in_unaryExpression6277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_PLUS_in_unaryExpression6293  */
static	ANTLR3_BITWORD FOLLOW_UNARY_PLUS_in_unaryExpression6293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_PLUS_in_unaryExpression6293	= { FOLLOW_UNARY_PLUS_in_unaryExpression6293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNARY_MINUS_in_unaryExpression6309  */
static	ANTLR3_BITWORD FOLLOW_UNARY_MINUS_in_unaryExpression6309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNARY_MINUS_in_unaryExpression6309	= { FOLLOW_UNARY_MINUS_in_unaryExpression6309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMPLEMENT_in_unaryExpression6324  */
static	ANTLR3_BITWORD FOLLOW_COMPLEMENT_in_unaryExpression6324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_COMPLEMENT_in_unaryExpression6324	= { FOLLOW_COMPLEMENT_in_unaryExpression6324_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_unaryExpression6340  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_unaryExpression6340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_unaryExpression6340	= { FOLLOW_NOT_in_unaryExpression6340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression6369  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression6369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression6369	= { FOLLOW_unaryExpression_in_unaryExpression6369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression6394  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression6394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression6394	= { FOLLOW_leftHandSideExpression_in_postfixExpression6394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_postfixExpression6407  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_postfixExpression6407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_postfixExpression6407	= { FOLLOW_MINUSMINUS_in_postfixExpression6407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression6409  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression6409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression6409	= { FOLLOW_leftHandSideExpression_in_postfixExpression6409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_postfixExpression6418  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_postfixExpression6418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_postfixExpression6418	= { FOLLOW_PLUSPLUS_in_postfixExpression6418_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression6420  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression6420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression6420	= { FOLLOW_leftHandSideExpression_in_postfixExpression6420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_209_in_primaryExpression6441  */
static	ANTLR3_BITWORD FOLLOW_209_in_primaryExpression6441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_209_in_primaryExpression6441	= { FOLLOW_209_in_primaryExpression6441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression6448  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression6448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression6448	= { FOLLOW_Identifier_in_primaryExpression6448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression6462  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression6462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression6462	= { FOLLOW_dollarExpression_in_primaryExpression6462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression6470  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression6470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression6470	= { FOLLOW_literal_in_primaryExpression6470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression6478  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression6478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression6478	= { FOLLOW_arrayLiteral_in_primaryExpression6478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression6486  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression6486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression6486	= { FOLLOW_objectLiteral_in_primaryExpression6486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_in_primaryExpression6495  */
static	ANTLR3_BITWORD FOLLOW_PAREN_in_primaryExpression6495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_in_primaryExpression6495	= { FOLLOW_PAREN_in_primaryExpression6495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression6499  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression6499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression6499	= { FOLLOW_expression_in_primaryExpression6499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression6510  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression6510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression6510	= { FOLLOW_vectorLiteral_in_primaryExpression6510_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR_in_vectorLiteral6531  */
static	ANTLR3_BITWORD FOLLOW_VECTOR_in_vectorLiteral6531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR_in_vectorLiteral6531	= { FOLLOW_VECTOR_in_vectorLiteral6531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_vectorLiteral6562  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_vectorLiteral6562_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_vectorLiteral6562	= { FOLLOW_assignmentExpression_in_vectorLiteral6562_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_vectorLiteral6609  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_vectorLiteral6609_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_vectorLiteral6609	= { FOLLOW_assignmentExpression_in_vectorLiteral6609_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_vectorLiteral6656  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_vectorLiteral6656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_vectorLiteral6656	= { FOLLOW_assignmentExpression_in_vectorLiteral6656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression6742  */
static	ANTLR3_BITWORD FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression6742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression6742	= { FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression6742_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression6770  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression6770_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression6770	= { FOLLOW_Identifier_in_dollarExpression6770_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral6835  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral6835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral6835	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral6835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral6845  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral6845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral6845	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral6845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral6867  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral6867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral6867	= { FOLLOW_assignmentExpression_in_arrayLiteral6867_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_arrayLiteral6894  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_arrayLiteral6894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_arrayLiteral6894	= { FOLLOW_ARRAY_LITERAL_in_arrayLiteral6894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral6914  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral6914_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000008), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral6914	= { FOLLOW_assignmentExpression_in_arrayLiteral6914_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral6952  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral6952_bits[]	= { ANTLR3_UINT64_LIT(0x001F7E0000000008), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral6952	= { FOLLOW_assignmentExpression_in_arrayLiteral6952_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJECT_LITERAL_in_objectLiteral7006  */
static	ANTLR3_BITWORD FOLLOW_OBJECT_LITERAL_in_objectLiteral7006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJECT_LITERAL_in_objectLiteral7006	= { FOLLOW_OBJECT_LITERAL_in_objectLiteral7006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJECT_LITERAL_in_objectLiteral7033  */
static	ANTLR3_BITWORD FOLLOW_OBJECT_LITERAL_in_objectLiteral7033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJECT_LITERAL_in_objectLiteral7033	= { FOLLOW_OBJECT_LITERAL_in_objectLiteral7033_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteralInternal_in_objectLiteral7052  */
static	ANTLR3_BITWORD FOLLOW_objectLiteralInternal_in_objectLiteral7052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteralInternal_in_objectLiteral7052	= { FOLLOW_objectLiteralInternal_in_objectLiteral7052_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJECT_LITERAL_in_objectLiteral7078  */
static	ANTLR3_BITWORD FOLLOW_OBJECT_LITERAL_in_objectLiteral7078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJECT_LITERAL_in_objectLiteral7078	= { FOLLOW_OBJECT_LITERAL_in_objectLiteral7078_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteralInternal_in_objectLiteral7098  */
static	ANTLR3_BITWORD FOLLOW_objectLiteralInternal_in_objectLiteral7098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteralInternal_in_objectLiteral7098	= { FOLLOW_objectLiteralInternal_in_objectLiteral7098_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteralInternal_in_objectLiteral7136  */
static	ANTLR3_BITWORD FOLLOW_objectLiteralInternal_in_objectLiteral7136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteralInternal_in_objectLiteral7136	= { FOLLOW_objectLiteralInternal_in_objectLiteral7136_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJECT_LITERAL_INTERNAL_in_objectLiteralInternal7206  */
static	ANTLR3_BITWORD FOLLOW_OBJECT_LITERAL_INTERNAL_in_objectLiteralInternal7206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJECT_LITERAL_INTERNAL_in_objectLiteralInternal7206	= { FOLLOW_OBJECT_LITERAL_INTERNAL_in_objectLiteralInternal7206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_objectLiteralInternal7218  */
static	ANTLR3_BITWORD FOLLOW_expression_in_objectLiteralInternal7218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_objectLiteralInternal7218	= { FOLLOW_expression_in_objectLiteralInternal7218_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_objectLiteralInternal7258  */
static	ANTLR3_BITWORD FOLLOW_expression_in_objectLiteralInternal7258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_objectLiteralInternal7258	= { FOLLOW_expression_in_objectLiteralInternal7258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyName7314  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyName7314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyName7314	= { FOLLOW_Identifier_in_propertyName7314_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_propertyName7321  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_propertyName7321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_propertyName7321	= { FOLLOW_StringLiteral_in_propertyName7321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_propertyName7338  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_propertyName7338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_propertyName7338	= { FOLLOW_NumericLiteral_in_propertyName7338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_211_in_literal7352  */
static	ANTLR3_BITWORD FOLLOW_211_in_literal7352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_211_in_literal7352	= { FOLLOW_211_in_literal7352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_212_in_literal7359  */
static	ANTLR3_BITWORD FOLLOW_212_in_literal7359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_212_in_literal7359	= { FOLLOW_212_in_literal7359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_213_in_literal7366  */
static	ANTLR3_BITWORD FOLLOW_213_in_literal7366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_213_in_literal7366	= { FOLLOW_213_in_literal7366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_literal7372  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_literal7372_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_literal7372	= { FOLLOW_StringLiteral_in_literal7372_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_literal7390  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_literal7390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_literal7390	= { FOLLOW_NumericLiteral_in_literal7390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred31_EmersonTree1591  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred31_EmersonTree1591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred31_EmersonTree1591	= { FOLLOW_statement_in_synpred31_EmersonTree1591_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_synpred44_EmersonTree2724  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_synpred44_EmersonTree2724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_synpred44_EmersonTree2724	= { FOLLOW_caseClause_in_synpred44_EmersonTree2724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_synpred46_EmersonTree2729  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_synpred46_EmersonTree2729_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_synpred46_EmersonTree2729	= { FOLLOW_defaultClause_in_synpred46_EmersonTree2729_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_synpred48_EmersonTree2735  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_synpred48_EmersonTree2735_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_synpred48_EmersonTree2735	= { FOLLOW_caseClause_in_synpred48_EmersonTree2735_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred56_EmersonTree3548  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred56_EmersonTree3548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred56_EmersonTree3548	= { FOLLOW_memberExpression_in_synpred56_EmersonTree3548_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree3571  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree3571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree3571	= { FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree3571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred57_EmersonTree3587  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred57_EmersonTree3587_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred57_EmersonTree3587	= { FOLLOW_memAndCallExpression_in_synpred57_EmersonTree3587_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree3604  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree3604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree3604	= { FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree3604_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree3632  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree3632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree3632	= { FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree3632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3644  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3644_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3644	= { FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3644_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree3657  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree3657_bits[]	= { ANTLR3_UINT64_LIT(0x00000001420000E0), ANTLR3_UINT64_LIT(0x0000703008002000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000003A0000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree3657	= { FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree3657_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3669  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3669	= { FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3669_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred85_EmersonTree4469  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred85_EmersonTree4469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred85_EmersonTree4469	= { FOLLOW_callExpression_in_synpred85_EmersonTree4469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred86_EmersonTree4486  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred86_EmersonTree4486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred86_EmersonTree4486	= { FOLLOW_memberExpression_in_synpred86_EmersonTree4486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_synpred89_EmersonTree4537  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_synpred89_EmersonTree4537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_synpred89_EmersonTree4537	= { FOLLOW_DOT_in_synpred89_EmersonTree4537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred89_EmersonTree4539  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred89_EmersonTree4539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred89_EmersonTree4539	= { FOLLOW_memberExpression_in_synpred89_EmersonTree4539_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred89_EmersonTree4543  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred89_EmersonTree4543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred89_EmersonTree4543	= { FOLLOW_propertyReferenceSuffix1_in_synpred89_EmersonTree4543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_synpred93_EmersonTree4609  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_synpred93_EmersonTree4609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_synpred93_EmersonTree4609	= { FOLLOW_CALL_in_synpred93_EmersonTree4609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred93_EmersonTree4611  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred93_EmersonTree4611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred93_EmersonTree4611	= { FOLLOW_memberExpression_in_synpred93_EmersonTree4611_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred93_EmersonTree4613  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred93_EmersonTree4613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred93_EmersonTree4613	= { FOLLOW_arguments_in_synpred93_EmersonTree4613_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred98_EmersonTree4690  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred98_EmersonTree4690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred98_EmersonTree4690	= { FOLLOW_ARGLIST_in_synpred98_EmersonTree4690_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGLIST_in_synpred99_EmersonTree4700  */
static	ANTLR3_BITWORD FOLLOW_ARGLIST_in_synpred99_EmersonTree4700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGLIST_in_synpred99_EmersonTree4700	= { FOLLOW_ARGLIST_in_synpred99_EmersonTree4700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred99_EmersonTree4720  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred99_EmersonTree4720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred99_EmersonTree4720	= { FOLLOW_assignmentExpression_in_synpred99_EmersonTree4720_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_synpred159_EmersonTree6171  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_synpred159_EmersonTree6171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_synpred159_EmersonTree6171	= { FOLLOW_postfixExpression_in_synpred159_EmersonTree6171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree6835  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree6835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree6835	= { FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree6835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_LITERAL_in_synpred178_EmersonTree6845  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_LITERAL_in_synpred178_EmersonTree6845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_LITERAL_in_synpred178_EmersonTree6845	= { FOLLOW_ARRAY_LITERAL_in_synpred178_EmersonTree6845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred178_EmersonTree6867  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred178_EmersonTree6867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred178_EmersonTree6867	= { FOLLOW_assignmentExpression_in_synpred178_EmersonTree6867_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJECT_LITERAL_in_synpred180_EmersonTree7006  */
static	ANTLR3_BITWORD FOLLOW_OBJECT_LITERAL_in_synpred180_EmersonTree7006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJECT_LITERAL_in_synpred180_EmersonTree7006	= { FOLLOW_OBJECT_LITERAL_in_synpred180_EmersonTree7006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJECT_LITERAL_in_synpred181_EmersonTree7033  */
static	ANTLR3_BITWORD FOLLOW_OBJECT_LITERAL_in_synpred181_EmersonTree7033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJECT_LITERAL_in_synpred181_EmersonTree7033	= { FOLLOW_OBJECT_LITERAL_in_synpred181_EmersonTree7033_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteralInternal_in_synpred181_EmersonTree7052  */
static	ANTLR3_BITWORD FOLLOW_objectLiteralInternal_in_synpred181_EmersonTree7052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteralInternal_in_synpred181_EmersonTree7052	= { FOLLOW_objectLiteralInternal_in_synpred181_EmersonTree7052_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    281:13: ( statement )?
 */
static const ANTLR3_INT32 dfa16_eot[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_eof[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_min[24] =
    {
	3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa16_max[24] =
    {
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 
	-1
    };
static const ANTLR3_INT32 dfa16_accept[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa16_special[24] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
	20, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa16_T_empty	    NULL

static const ANTLR3_INT32 dfa16_T0[] =
    {
	22, -1, -1, -1, -1, -1, 5, 8, 6, -1, -1, 9, 10, 11, -1, -1, -1, 12, 14, 
	13, 15, 16, -1, 20, -1, -1, -1, -1, 3, -1, 21, 19, -1, -1, -1, 18, -1, 
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
	-1, -1, -1, -1, 1, 2
    };static const ANTLR3_INT32 dfa16_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa16_transitions[] =
{
    dfa16_T0, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, 
    dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, 
    dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, dfa16_T1, 
    dfa16_T1, dfa16_T_empty, dfa16_T_empty	
};

static ANTLR3_INT32 dfa16_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA16_1;

    	    ANTLR3_MARKER index16_1;


    		LA16_1 = LA(1);

    	 
    	    index16_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA16_2;

    	    ANTLR3_MARKER index16_2;


    		LA16_2 = LA(1);

    	 
    	    index16_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA16_3;

    	    ANTLR3_MARKER index16_3;


    		LA16_3 = LA(1);

    	 
    	    index16_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA16_4;

    	    ANTLR3_MARKER index16_4;


    		LA16_4 = LA(1);

    	 
    	    index16_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA16_5;

    	    ANTLR3_MARKER index16_5;


    		LA16_5 = LA(1);

    	 
    	    index16_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA16_6;

    	    ANTLR3_MARKER index16_6;


    		LA16_6 = LA(1);

    	 
    	    index16_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA16_7;

    	    ANTLR3_MARKER index16_7;


    		LA16_7 = LA(1);

    	 
    	    index16_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA16_8;

    	    ANTLR3_MARKER index16_8;


    		LA16_8 = LA(1);

    	 
    	    index16_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA16_9;

    	    ANTLR3_MARKER index16_9;


    		LA16_9 = LA(1);

    	 
    	    index16_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA16_10;

    	    ANTLR3_MARKER index16_10;


    		LA16_10 = LA(1);

    	 
    	    index16_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA16_11;

    	    ANTLR3_MARKER index16_11;


    		LA16_11 = LA(1);

    	 
    	    index16_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA16_12;

    	    ANTLR3_MARKER index16_12;


    		LA16_12 = LA(1);

    	 
    	    index16_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA16_13;

    	    ANTLR3_MARKER index16_13;


    		LA16_13 = LA(1);

    	 
    	    index16_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA16_14;

    	    ANTLR3_MARKER index16_14;


    		LA16_14 = LA(1);

    	 
    	    index16_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA16_15;

    	    ANTLR3_MARKER index16_15;


    		LA16_15 = LA(1);

    	 
    	    index16_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA16_16;

    	    ANTLR3_MARKER index16_16;


    		LA16_16 = LA(1);

    	 
    	    index16_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA16_17;

    	    ANTLR3_MARKER index16_17;


    		LA16_17 = LA(1);

    	 
    	    index16_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA16_18;

    	    ANTLR3_MARKER index16_18;


    		LA16_18 = LA(1);

    	 
    	    index16_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA16_19;

    	    ANTLR3_MARKER index16_19;


    		LA16_19 = LA(1);

    	 
    	    index16_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 19:
        
    	{
    	    ANTLR3_UINT32 LA16_20;

    	    ANTLR3_MARKER index16_20;


    		LA16_20 = LA(1);

    	 
    	    index16_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 20:
        
    	{
    	    ANTLR3_UINT32 LA16_21;

    	    ANTLR3_MARKER index16_21;


    		LA16_21 = LA(1);

    	 
    	    index16_21 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred31_EmersonTree(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index16_21);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"281:13: ( statement )?";
    EXCEPTION->decisionNum  = 16;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 16
 */
static
ANTLR3_CYCLIC_DFA cdfa16
    =	{
	    16,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"281:13: ( statement )?",	
	    (CDFA_SPECIAL_FUNC) dfa16_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa16_eot,	    /* EOT table			    */
	    dfa16_eof,	    /* EOF table			    */
	    dfa16_min,	    /* Minimum tokens for each state    */
	    dfa16_max,	    /* Maximum tokens for each state    */
	    dfa16_accept,	/* Accept table			    */
	    dfa16_special,	/* Special transition states	    */
	    dfa16_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 16
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    647:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static const ANTLR3_INT32 dfa39_eot[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa39_eof[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa39_min[18] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa39_max[18] =
    {
	213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa39_accept[18] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa39_special[18] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa39_T_empty	    NULL

static const ANTLR3_INT32 dfa39_T0[] =
    {
	17, 15, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa39_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa39_transitions[] =
{
    dfa39_T0, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, 
    dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, 
    dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T_empty, dfa39_T1, 
    dfa39_T1, dfa39_T_empty, dfa39_T_empty	
};

static ANTLR3_INT32 dfa39_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA39_14;

    	    ANTLR3_MARKER index39_14;


    		LA39_14 = LA(1);

    	 
    	    index39_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred56_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index39_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA39_15;

    	    ANTLR3_MARKER index39_15;


    		LA39_15 = LA(1);

    	 
    	    index39_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred56_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index39_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"647:1: memAndCallExpression : ( memberExpression | callExpression );";
    EXCEPTION->decisionNum  = 39;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 39
 */
static
ANTLR3_CYCLIC_DFA cdfa39
    =	{
	    39,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"647:1: memAndCallExpression : ( memberExpression | callExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa39_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa39_eot,	    /* EOT table			    */
	    dfa39_eof,	    /* EOF table			    */
	    dfa39_min,	    /* Minimum tokens for each state    */
	    dfa39_max,	    /* Maximum tokens for each state    */
	    dfa39_accept,	/* Accept table			    */
	    dfa39_special,	/* Special transition states	    */
	    dfa39_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 39
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    817:1: leftHandSideExpression : ( callExpression | newExpression );
 */
static const ANTLR3_INT32 dfa47_eot[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa47_eof[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa47_min[18] =
    {
	5, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa47_max[18] =
    {
	213, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa47_accept[18] =
    {
	-1, 1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa47_special[18] =
    {	
	-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa47_T_empty	    NULL

static const ANTLR3_INT32 dfa47_T0[] =
    {
	1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 4, -1, -1, -1, -1, 4, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, 4, 4, 4
    };static const ANTLR3_INT32 dfa47_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa47_transitions[] =
{
    dfa47_T0, dfa47_T_empty, dfa47_T1, dfa47_T1, dfa47_T_empty, dfa47_T_empty, 
    dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, 
    dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, dfa47_T_empty, 
    dfa47_T_empty, dfa47_T_empty	
};

static ANTLR3_INT32 dfa47_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA47_2;

    	    ANTLR3_MARKER index47_2;


    		LA47_2 = LA(1);

    	 
    	    index47_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred85_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index47_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA47_3;

    	    ANTLR3_MARKER index47_3;


    		LA47_3 = LA(1);

    	 
    	    index47_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred85_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index47_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"817:1: leftHandSideExpression : ( callExpression | newExpression );";
    EXCEPTION->decisionNum  = 47;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 47
 */
static
ANTLR3_CYCLIC_DFA cdfa47
    =	{
	    47,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"817:1: leftHandSideExpression : ( callExpression | newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa47_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa47_eot,	    /* EOT table			    */
	    dfa47_eof,	    /* EOF table			    */
	    dfa47_min,	    /* Minimum tokens for each state    */
	    dfa47_max,	    /* Maximum tokens for each state    */
	    dfa47_accept,	/* Accept table			    */
	    dfa47_special,	/* Special transition states	    */
	    dfa47_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 47
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    822:1: newExpression : ( memberExpression | ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa48_eot[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa48_eof[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa48_min[18] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa48_max[18] =
    {
	213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa48_accept[18] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa48_special[18] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa48_T_empty	    NULL

static const ANTLR3_INT32 dfa48_T0[] =
    {
	1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	16, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa48_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa48_transitions[] =
{
    dfa48_T0, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, dfa48_T_empty, 
    dfa48_T_empty, dfa48_T1, dfa48_T_empty	
};

static ANTLR3_INT32 dfa48_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA48_16;

    	    ANTLR3_MARKER index48_16;


    		LA48_16 = LA(1);

    	 
    	    index48_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred86_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index48_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"822:1: newExpression : ( memberExpression | ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 48;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 48
 */
static
ANTLR3_CYCLIC_DFA cdfa48
    =	{
	    48,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"822:1: newExpression : ( memberExpression | ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa48_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa48_eot,	    /* EOT table			    */
	    dfa48_eof,	    /* EOF table			    */
	    dfa48_min,	    /* Minimum tokens for each state    */
	    dfa48_max,	    /* Maximum tokens for each state    */
	    dfa48_accept,	/* Accept table			    */
	    dfa48_special,	/* Special transition states	    */
	    dfa48_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 48
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    836:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static const ANTLR3_INT32 dfa49_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa49_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa49_min[19] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa49_max[19] =
    {
	213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa49_accept[19] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 4, 5, 3, 6
    };
static const ANTLR3_INT32 dfa49_special[19] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa49_T_empty	    NULL

static const ANTLR3_INT32 dfa49_T0[] =
    {
	15, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 16, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa49_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa49_transitions[] =
{
    dfa49_T0, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T1, 
    dfa49_T_empty, dfa49_T_empty, dfa49_T_empty, dfa49_T_empty	
};

static ANTLR3_INT32 dfa49_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA49_14;

    	    ANTLR3_MARKER index49_14;


    		LA49_14 = LA(1);

    	 
    	    index49_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred89_EmersonTree(ctx)) )
    	    {
    	        s = 17;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index49_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"836:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );";
    EXCEPTION->decisionNum  = 49;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 49
 */
static
ANTLR3_CYCLIC_DFA cdfa49
    =	{
	    49,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"836:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa49_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa49_eot,	    /* EOT table			    */
	    dfa49_eof,	    /* EOF table			    */
	    dfa49_min,	    /* Minimum tokens for each state    */
	    dfa49_max,	    /* Maximum tokens for each state    */
	    dfa49_accept,	/* Accept table			    */
	    dfa49_special,	/* Special transition states	    */
	    dfa49_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 49
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1177:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );
 */
static const ANTLR3_INT32 dfa78_eot[27] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa78_eof[27] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa78_min[27] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	0, 0, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa78_max[27] =
    {
	213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	0, 0, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa78_accept[27] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa78_special[27] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	0, 1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa78_T_empty	    NULL

static const ANTLR3_INT32 dfa78_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	20, 20, 20, 19, 18, 20, 20, 20, 20, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, 1, 1, 1
    };static const ANTLR3_INT32 dfa78_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa78_transitions[] =
{
    dfa78_T0, dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, 
    dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, 
    dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, 
    dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, dfa78_T1, dfa78_T1, dfa78_T_empty, 
    dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, dfa78_T_empty, 
    dfa78_T_empty	
};

static ANTLR3_INT32 dfa78_sst(pEmersonTree ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA78_18;

    	    ANTLR3_MARKER index78_18;


    		LA78_18 = LA(1);

    	 
    	    index78_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index78_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA78_19;

    	    ANTLR3_MARKER index78_19;


    		LA78_19 = LA(1);

    	 
    	    index78_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_EmersonTree(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index78_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1177:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );";
    EXCEPTION->decisionNum  = 78;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 78
 */
static
ANTLR3_CYCLIC_DFA cdfa78
    =	{
	    78,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1177:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa78_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa78_eot,	    /* EOT table			    */
	    dfa78_eof,	    /* EOF table			    */
	    dfa78_min,	    /* Minimum tokens for each state    */
	    dfa78_max,	    /* Maximum tokens for each state    */
	    dfa78_accept,	/* Accept table			    */
	    dfa78_special,	/* Special transition states	    */
	    dfa78_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 78
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//EmersonTree.g:46:1: program returns [pANTLR3_STRING s] : ^( PROG ( sourceElements )? ) ;
 */
static pANTLR3_STRING
program(pEmersonTree ctx)
{   
    pANTLR3_STRING s = NULL;

    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:47:2: ( ^( PROG ( sourceElements )? ) )
        // .//EmersonTree.g:47:3: ^( PROG ( sourceElements )? )
        {
             MATCHT(PROG, &FOLLOW_PROG_in_program76); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return s;
            }

            if ( BACKTRACKING==0 ) 
            {

                                pANTLR3_STRING_FACTORY factory = antlr3StringFactoryNew();
                                program_string = factory->newRaw(factory);
                            
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return s;
                }

                // .//EmersonTree.g:52:13: ( sourceElements )?
                {
                    int alt1=2;
                    {
                        int LA1_0 = LA(1);
                        if ( (((LA1_0 >= SLIST) && (LA1_0 <= VARLIST)) || ((LA1_0 >= DO) && (LA1_0 <= FOR)) || ((LA1_0 >= FORIN) && (LA1_0 <= WITH)) || LA1_0 == WHEN || LA1_0 == NOOP || ((LA1_0 >= TRY) && (LA1_0 <= THROW)) || LA1_0 == SWITCH || LA1_0 == LABEL || LA1_0 == EMPTY_BLOCK || LA1_0 == FUNC_DECL || LA1_0 == EXPR_LIST || ((LA1_0 >= MESSAGE_SEND) && (LA1_0 <= MESSAGE_RECV))) ) 
                        {
                            alt1=1;
                        }
                    }
                    switch (alt1) 
                    {
                	case 1:
                	    // .//EmersonTree.g:53:15: sourceElements
                	    {
                	        FOLLOWPUSH(FOLLOW_sourceElements_in_program121);
                	        sourceElements(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleprogramEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return s;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return s;
                }
            }
            if ( BACKTRACKING==0 ) 
            {

                            s = program_string;
                         
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return s;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//EmersonTree.g:63:1: sourceElements : ( sourceElement )+ ;
 */
static void
sourceElements(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:64:5: ( ( sourceElement )+ )
        // .//EmersonTree.g:64:6: ( sourceElement )+
        {
            // .//EmersonTree.g:64:6: ( sourceElement )+
            {
                int cnt2=0;

                for (;;)
                {
                    int alt2=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA2_0 = LA(1);
            	    if ( (((LA2_0 >= SLIST) && (LA2_0 <= VARLIST)) || ((LA2_0 >= DO) && (LA2_0 <= FOR)) || ((LA2_0 >= FORIN) && (LA2_0 <= WITH)) || LA2_0 == WHEN || LA2_0 == NOOP || ((LA2_0 >= TRY) && (LA2_0 <= THROW)) || LA2_0 == SWITCH || LA2_0 == LABEL || LA2_0 == EMPTY_BLOCK || LA2_0 == FUNC_DECL || LA2_0 == EXPR_LIST || ((LA2_0 >= MESSAGE_SEND) && (LA2_0 <= MESSAGE_RECV))) ) 
            	    {
            	        alt2=1;
            	    }

            	}
            	switch (alt2) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:64:7: sourceElement
            	        {
            	            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements182);
            	            sourceElement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulesourceElementsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }
            	            if ( BACKTRACKING==0 ) 
            	            {
            	                APP("\n"); 
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt2 >= 1 )
            		{
            		    goto loop2;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulesourceElementsEx;
            	}
            	cnt2++;
                }
                loop2: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//EmersonTree.g:67:1: sourceElement : ( functionDeclaration | statement );
 */
static void
sourceElement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:68:5: ( functionDeclaration | statement )
            
            ANTLR3_UINT32 alt3;

            alt3=2;


            {
                int LA3_0 = LA(1);
                if ( (LA3_0 == FUNC_DECL) ) 
                {
                    alt3=1;
                }
                else if ( (((LA3_0 >= SLIST) && (LA3_0 <= VARLIST)) || ((LA3_0 >= DO) && (LA3_0 <= FOR)) || ((LA3_0 >= FORIN) && (LA3_0 <= WITH)) || LA3_0 == WHEN || LA3_0 == NOOP || ((LA3_0 >= TRY) && (LA3_0 <= THROW)) || LA3_0 == SWITCH || LA3_0 == LABEL || LA3_0 == EMPTY_BLOCK || LA3_0 == EXPR_LIST || ((LA3_0 >= MESSAGE_SEND) && (LA3_0 <= MESSAGE_RECV))) ) 
                {
                    alt3=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 3;
                    EXCEPTION->state        = 0;


                    goto rulesourceElementEx;
                }
            }
            switch (alt3) 
            {
        	case 1:
        	    // .//EmersonTree.g:68:7: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement205);
        	        functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:69:7: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement213);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(";"); 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//EmersonTree.g:73:1: functionDeclaration : ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static void
functionDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier1;

    /* Initialize rule variables
     */


    Identifier1       = NULL;

    {
        // .//EmersonTree.g:74:2: ( ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:74:4: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
        {
             MATCHT(FUNC_DECL, &FOLLOW_FUNC_DECL_in_functionDeclaration232); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("function ");
                              
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier1 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration264); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier1->getText(Identifier1))->chars);
                                APP("( ");
                              
            }

            // .//EmersonTree.g:83:15: ( formalParameterList )?
            {
                int alt4=2;
                {
                    int LA4_0 = LA(1);
                    if ( (LA4_0 == FUNC_PARAMS) ) 
                    {
                        alt4=1;
                    }
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//EmersonTree.g:83:16: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration298);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" )");
                                APP("\n{\n");
                              
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration332);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}");
                              
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//EmersonTree.g:95:1: functionExpression : ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static void
functionExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier2;

    /* Initialize rule variables
     */


    Identifier2       = NULL;

    {
        // .//EmersonTree.g:96:2: ( ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//EmersonTree.g:96:4: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
        {
             MATCHT(FUNC_EXPR, &FOLLOW_FUNC_EXPR_in_functionExpression376); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                               APP("function ");
                             
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:100:14: ( Identifier )?
            {
                int alt5=2;
                {
                    int LA5_0 = LA(1);
                    if ( (LA5_0 == Identifier) ) 
                    {
                        alt5=1;
                    }
                }
                switch (alt5) 
                {
            	case 1:
            	    // .//EmersonTree.g:101:16: Identifier
            	    {
            	        Identifier2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression420); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP((const char*)(Identifier2->getText(Identifier2))->chars);
            	                             
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("( ");
                             
            }

            // .//EmersonTree.g:109:14: ( formalParameterList )?
            {
                int alt6=2;
                {
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == FUNC_PARAMS) ) 
                    {
                        alt6=1;
                    }
                }
                switch (alt6) 
                {
            	case 1:
            	    // .//EmersonTree.g:109:15: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression487);
            	        formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("  )");
                               APP("\n{\n");
                             
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression519);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                               APP("\n}");
                             
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//EmersonTree.g:121:1: formalParameterList : ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) ;
 */
static void
formalParameterList(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    id1;
    pANTLR3_BASE_TREE    id2;

    /* Initialize rule variables
     */


    id1       = NULL;
    id2       = NULL;

    {
        // .//EmersonTree.g:122:3: ( ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* ) )
        // .//EmersonTree.g:122:5: ^( FUNC_PARAMS (id1= Identifier ) (id2= Identifier )* )
        {
             MATCHT(FUNC_PARAMS, &FOLLOW_FUNC_PARAMS_in_formalParameterList567); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:123:17: (id1= Identifier )
            // .//EmersonTree.g:123:18: id1= Identifier
            {
                id1 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList588); 
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {
                    APP((const char*)(id1->getText(id1))->chars); 
                }

            }


            // .//EmersonTree.g:125:9: (id2= Identifier )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == Identifier) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//EmersonTree.g:126:18: id2= Identifier
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP(", ");
            	                             
            	        }
            	        id2 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList658); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	            APP((const char*)(id2->getText(id2))->chars);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//EmersonTree.g:135:1: functionBody : ( sourceElements | EMPTY_FUNC_BODY );
 */
static void
functionBody(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:136:2: ( sourceElements | EMPTY_FUNC_BODY )
            
            ANTLR3_UINT32 alt8;

            alt8=2;


            {
                int LA8_0 = LA(1);
                if ( (((LA8_0 >= SLIST) && (LA8_0 <= VARLIST)) || ((LA8_0 >= DO) && (LA8_0 <= FOR)) || ((LA8_0 >= FORIN) && (LA8_0 <= WITH)) || LA8_0 == WHEN || LA8_0 == NOOP || ((LA8_0 >= TRY) && (LA8_0 <= THROW)) || LA8_0 == SWITCH || LA8_0 == LABEL || LA8_0 == EMPTY_BLOCK || LA8_0 == FUNC_DECL || LA8_0 == EXPR_LIST || ((LA8_0 >= MESSAGE_SEND) && (LA8_0 <= MESSAGE_RECV))) ) 
                {
                    alt8=1;
                }
                else if ( (LA8_0 == EMPTY_FUNC_BODY) ) 
                {
                    alt8=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 8;
                    EXCEPTION->state        = 0;


                    goto rulefunctionBodyEx;
                }
            }
            switch (alt8) 
            {
        	case 1:
        	    // .//EmersonTree.g:136:4: sourceElements
        	    {
        	        FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody687);
        	        sourceElements(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:137:4: EMPTY_FUNC_BODY
        	    {
        	         MATCHT(EMPTY_FUNC_BODY, &FOLLOW_EMPTY_FUNC_BODY_in_functionBody692); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//EmersonTree.g:141:1: statement : ( msgSendStatement | msgRecvStatement | noOpStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement );
 */
static void
statement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:142:5: ( msgSendStatement | msgRecvStatement | noOpStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement )
            
            ANTLR3_UINT32 alt9;

            alt9=17;

            switch ( LA(1) ) 
            {
            case MESSAGE_SEND:
            	{
            		alt9=1;
            	}
                break;
            case MESSAGE_RECV:
            	{
            		alt9=2;
            	}
                break;
            case NOOP:
            	{
            		alt9=3;
            	}
                break;
            case SLIST:
            case EMPTY_BLOCK:
            	{
            		alt9=4;
            	}
                break;
            case VARLIST:
            	{
            		alt9=5;
            	}
                break;
            case EXPR_LIST:
            	{
            		alt9=6;
            	}
                break;
            case IF:
            	{
            		alt9=7;
            	}
                break;
            case DO:
            case WHILE:
            case FOR:
            case FORIN:
            	{
            		alt9=8;
            	}
                break;
            case CONTINUE:
            	{
            		alt9=9;
            	}
                break;
            case BREAK:
            	{
            		alt9=10;
            	}
                break;
            case RETURN:
            	{
            		alt9=11;
            	}
                break;
            case WITH:
            	{
            		alt9=12;
            	}
                break;
            case LABEL:
            	{
            		alt9=13;
            	}
                break;
            case SWITCH:
            	{
            		alt9=14;
            	}
                break;
            case THROW:
            	{
            		alt9=15;
            	}
                break;
            case WHEN:
            	{
            		alt9=16;
            	}
                break;
            case TRY:
            	{
            		alt9=17;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // .//EmersonTree.g:142:7: msgSendStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement708);
        	        msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:143:7: msgRecvStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_statement716);
        	        msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:144:7: noOpStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement724);
        	        noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:145:7: statementBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement732);
        	        statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:146:7: variableStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement740);
        	        variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:147:7: expressionStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement748);
        	        expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:148:7: ifStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement756);
        	        ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:149:7: iterationStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement764);
        	        iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // .//EmersonTree.g:150:7: continueStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement772);
        	        continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 10:
        	    // .//EmersonTree.g:151:7: breakStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement780);
        	        breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 11:
        	    // .//EmersonTree.g:152:7: returnStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement788);
        	        returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 12:
        	    // .//EmersonTree.g:153:7: withStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement796);
        	        withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 13:
        	    // .//EmersonTree.g:154:7: labelledStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement804);
        	        labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 14:
        	    // .//EmersonTree.g:155:7: switchStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement812);
        	        switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 15:
        	    // .//EmersonTree.g:156:7: throwStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement820);
        	        throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 16:
        	    // .//EmersonTree.g:157:7: whenStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whenStatement_in_statement828);
        	        whenStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 17:
        	    // .//EmersonTree.g:158:7: tryStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement836);
        	        tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start noOpStatement
 * .//EmersonTree.g:162:1: noOpStatement : ^( NOOP ) ;
 */
static void
noOpStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:163:9: ( ^( NOOP ) )
        // .//EmersonTree.g:163:11: ^( NOOP )
        {
             MATCHT(NOOP, &FOLLOW_NOOP_in_noOpStatement862); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                          
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulenoOpStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementBlock
 * .//EmersonTree.g:169:1: statementBlock : ( ^( EMPTY_BLOCK ) | statementList );
 */
static void
statementBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:170:2: ( ^( EMPTY_BLOCK ) | statementList )
            
            ANTLR3_UINT32 alt10;

            alt10=2;


            {
                int LA10_0 = LA(1);
                if ( (LA10_0 == EMPTY_BLOCK) ) 
                {
                    alt10=1;
                }
                else if ( (LA10_0 == SLIST) ) 
                {
                    alt10=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 10;
                    EXCEPTION->state        = 0;


                    goto rulestatementBlockEx;
                }
            }
            switch (alt10) 
            {
        	case 1:
        	    // .//EmersonTree.g:170:4: ^( EMPTY_BLOCK )
        	    {
        	         MATCHT(EMPTY_BLOCK, &FOLLOW_EMPTY_BLOCK_in_statementBlock907); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("{ }");
        	                        
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:175:11: statementList
        	    {
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" {\n "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_statementList_in_statementBlock948);
        	        statementList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              
        	                        APP(" }\n");
        	                    
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//EmersonTree.g:180:1: statementList : ^( SLIST ( statement )* ) ;
 */
static void
statementList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:181:2: ( ^( SLIST ( statement )* ) )
        // .//EmersonTree.g:181:5: ^( SLIST ( statement )* )
        {
             MATCHT(SLIST, &FOLLOW_SLIST_in_statementList977); 
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:183:13: ( statement )*

                for (;;)
                {
                    int alt11=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA11_0 = LA(1);
                        if ( (((LA11_0 >= SLIST) && (LA11_0 <= VARLIST)) || ((LA11_0 >= DO) && (LA11_0 <= FOR)) || ((LA11_0 >= FORIN) && (LA11_0 <= WITH)) || LA11_0 == WHEN || LA11_0 == NOOP || ((LA11_0 >= TRY) && (LA11_0 <= THROW)) || LA11_0 == SWITCH || LA11_0 == LABEL || LA11_0 == EMPTY_BLOCK || LA11_0 == EXPR_LIST || ((LA11_0 >= MESSAGE_SEND) && (LA11_0 <= MESSAGE_RECV))) ) 
                        {
                            alt11=1;
                        }

                    }
                    switch (alt11) 
                    {
                	case 1:
                	    // .//EmersonTree.g:183:14: statement
                	    {
                	        FOLLOWPUSH(FOLLOW_statement_in_statementList993);
                	        statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulestatementListEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	            			        APP("; \n");					  
                	                            
                	        }

                	    }
                	    break;

                	default:
                	    goto loop11;	/* break out of the loop */
                	    break;
                    }
                }
                loop11: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//EmersonTree.g:190:1: variableStatement : ^( VARLIST variableDeclarationList ) ;
 */
static void
variableStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:191:2: ( ^( VARLIST variableDeclarationList ) )
        // .//EmersonTree.g:191:5: ^( VARLIST variableDeclarationList )
        {
             MATCHT(VARLIST, &FOLLOW_VARLIST_in_variableStatement1059); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("var ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1087);
            variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//EmersonTree.g:199:1: variableDeclarationList : variableDeclaration ( variableDeclaration )* ;
 */
static void
variableDeclarationList(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:200:2: ( variableDeclaration ( variableDeclaration )* )
        // .//EmersonTree.g:200:4: variableDeclaration ( variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1107);
            variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:201:9: ( variableDeclaration )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == VAR) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // .//EmersonTree.g:202:13: variableDeclaration
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(", ");
            	                        
            	        }
            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1147);
            	        variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//EmersonTree.g:209:1: variableDeclarationListNoIn : ( variableDeclarationNoIn )+ ;
 */
static void
variableDeclarationListNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:210:2: ( ( variableDeclarationNoIn )+ )
        // .//EmersonTree.g:210:4: ( variableDeclarationNoIn )+
        {
            // .//EmersonTree.g:210:4: ( variableDeclarationNoIn )+
            {
                int cnt13=0;

                for (;;)
                {
                    int alt13=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA13_0 = LA(1);
            	    if ( (LA13_0 == VAR) ) 
            	    {
            	        alt13=1;
            	    }

            	}
            	switch (alt13) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:0:0: variableDeclarationNoIn
            	        {
            	            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1170);
            	            variableDeclarationNoIn(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulevariableDeclarationListNoInEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt13 >= 1 )
            		{
            		    goto loop13;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulevariableDeclarationListNoInEx;
            	}
            	cnt13++;
                }
                loop13: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//EmersonTree.g:213:1: variableDeclaration : ^( VAR Identifier ( initialiser )? ) ;
 */
static void
variableDeclaration(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier3;

    /* Initialize rule variables
     */


    Identifier3       = NULL;

    {
        // .//EmersonTree.g:214:2: ( ^( VAR Identifier ( initialiser )? ) )
        // .//EmersonTree.g:214:4: ^( VAR Identifier ( initialiser )? )
        {
             MATCHT(VAR, &FOLLOW_VAR_in_variableDeclaration1197); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier3 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1211); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier3->getText(Identifier3))->chars);
                            
            }

            // .//EmersonTree.g:221:13: ( initialiser )?
            {
                int alt14=2;
                {
                    int LA14_0 = LA(1);
                    if ( (((LA14_0 >= ASSIGN) && (LA14_0 <= SUB_ASSIGN)) || ((LA14_0 >= RIGHT_SHIFT_ASSIGN) && (LA14_0 <= OR_ASSIGN)) || LA14_0 == COND_EXPR || LA14_0 == LEFT_SHIFT_ASSIG) ) 
                    {
                        alt14=1;
                    }
                }
                switch (alt14) 
                {
            	case 1:
            	    // .//EmersonTree.g:222:17: initialiser
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1289);
            	        initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//EmersonTree.g:230:1: variableDeclarationNoIn : ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static void
variableDeclarationNoIn(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier4;

    /* Initialize rule variables
     */


    Identifier4       = NULL;

    {
        // .//EmersonTree.g:231:2: ( ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//EmersonTree.g:232:9: ^( VAR Identifier ( initialiserNoIn )? )
        {
             MATCHT(VAR, &FOLLOW_VAR_in_variableDeclarationNoIn1349); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("var ");
                			
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier4 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1368); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier4->getText(Identifier4))->chars);
                            
            }

            // .//EmersonTree.g:242:13: ( initialiserNoIn )?
            {
                int alt15=2;
                {
                    int LA15_0 = LA(1);
                    if ( (((LA15_0 >= ASSIGN) && (LA15_0 <= SUB_ASSIGN)) || ((LA15_0 >= RIGHT_SHIFT_ASSIGN) && (LA15_0 <= OR_ASSIGN)) || LA15_0 == COND_EXPR_NOIN || LA15_0 == LEFT_SHIFT_ASSIG) ) 
                    {
                        alt15=1;
                    }
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//EmersonTree.g:243:17: initialiserNoIn
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP(" = ");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1446);
            	        initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//EmersonTree.g:252:1: initialiser : assignmentExpression ;
 */
static void
initialiser(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:253:2: ( assignmentExpression )
        // .//EmersonTree.g:253:4: assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_initialiser1489);
            assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//EmersonTree.g:256:1: initialiserNoIn : assignmentExpressionNoIn ;
 */
static void
initialiserNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:257:2: ( assignmentExpressionNoIn )
        // .//EmersonTree.g:257:4: assignmentExpressionNoIn
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1502);
            assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start expressionStatement
 * .//EmersonTree.g:266:1: expressionStatement : expression ;
 */
static void
expressionStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:267:2: ( expression )
        // .//EmersonTree.g:267:4: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1519);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//EmersonTree.g:270:1: ifStatement : ^( IF expression ( statement )? ( statement )? ) ;
 */
static void
ifStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:271:2: ( ^( IF expression ( statement )? ( statement )? ) )
        // .//EmersonTree.g:271:4: ^( IF expression ( statement )? ( statement )? )
        {
             MATCHT(IF, &FOLLOW_IF_in_ifStatement1532); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                
                                APP(" if ");
                                APP(" ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1561);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) \n{");
                            
            }

            // .//EmersonTree.g:281:13: ( statement )?
            {
                int alt16=2;
                alt16 = cdfa16.predict(ctx, RECOGNIZER, ISTREAM, &cdfa16);
                if  (HASEXCEPTION())
                {
                    goto ruleifStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                switch (alt16) 
                {
            	case 1:
            	    // .//EmersonTree.g:281:14: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1591);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(" \n");
            	                        
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("\n}\n");
                            
            }

            // .//EmersonTree.g:289:13: ( statement )?
            {
                int alt17=2;
                {
                    int LA17_0 = LA(1);
                    if ( (((LA17_0 >= SLIST) && (LA17_0 <= VARLIST)) || ((LA17_0 >= DO) && (LA17_0 <= FOR)) || ((LA17_0 >= FORIN) && (LA17_0 <= WITH)) || LA17_0 == WHEN || LA17_0 == NOOP || ((LA17_0 >= TRY) && (LA17_0 <= THROW)) || LA17_0 == SWITCH || LA17_0 == LABEL || LA17_0 == EMPTY_BLOCK || LA17_0 == EXPR_LIST || ((LA17_0 >= MESSAGE_SEND) && (LA17_0 <= MESSAGE_RECV))) ) 
                    {
                        alt17=1;
                    }
                }
                switch (alt17) 
                {
            	case 1:
            	    // .//EmersonTree.g:290:17: statement
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                                APP("else \n{");
            	                            
            	        }
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1685);
            	        statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                               APP("\n}");
            	                            
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//EmersonTree.g:301:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static void
iterationStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:302:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt18;

            alt18=4;

            switch ( LA(1) ) 
            {
            case DO:
            	{
            		alt18=1;
            	}
                break;
            case WHILE:
            	{
            		alt18=2;
            	}
                break;
            case FOR:
            	{
            		alt18=3;
            	}
                break;
            case FORIN:
            	{
            		alt18=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt18) 
            {
        	case 1:
        	    // .//EmersonTree.g:302:4: doWhileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1740);
        	        doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:303:4: whileStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1745);
        	        whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:304:4: forStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1750);
        	        forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:305:4: forInStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1755);
        	        forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//EmersonTree.g:308:1: doWhileStatement : ^( DO statement expression ) ;
 */
static void
doWhileStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:309:2: ( ^( DO statement expression ) )
        // .//EmersonTree.g:309:4: ^( DO statement expression )
        {
             MATCHT(DO, &FOLLOW_DO_in_doWhileStatement1782); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" do ");  						  
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1811);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP("while ( " );      
                            
            }
            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1839);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) ");  
                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//EmersonTree.g:325:1: whileStatement : ^( WHILE expression statement ) ;
 */
static void
whileStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:326:2: ( ^( WHILE expression statement ) )
        // .//EmersonTree.g:326:4: ^( WHILE expression statement )
        {
             MATCHT(WHILE, &FOLLOW_WHILE_in_whileStatement1890); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" while ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1918);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) "); 
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1947);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//EmersonTree.g:339:1: forStatement : ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) ;
 */
static void
forStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:340:2: ( ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement ) )
        // .//EmersonTree.g:340:4: ^( FOR ( ^( FORINIT forStatementInitialiserPart ) )? ( ^( FORCOND expression ) )? ( ^( FORITER expression ) )? statement )
        {
             MATCHT(FOR, &FOLLOW_FOR_in_forStatement1983); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" for ( ");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:345:13: ( ^( FORINIT forStatementInitialiserPart ) )?
            {
                int alt19=2;
                {
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == FORINIT) ) 
                    {
                        alt19=1;
                    }
                }
                switch (alt19) 
                {
            	case 1:
            	    // .//EmersonTree.g:345:14: ^( FORINIT forStatementInitialiserPart )
            	    {
            	         MATCHT(FORINIT, &FOLLOW_FORINIT_in_forStatement2014); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement2016);
            	        forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ; ");
                            
            }

            // .//EmersonTree.g:349:13: ( ^( FORCOND expression ) )?
            {
                int alt20=2;
                {
                    int LA20_0 = LA(1);
                    if ( (LA20_0 == FORCOND) ) 
                    {
                        alt20=1;
                    }
                }
                switch (alt20) 
                {
            	case 1:
            	    // .//EmersonTree.g:349:14: ^( FORCOND expression )
            	    {
            	         MATCHT(FORCOND, &FOLLOW_FORCOND_in_forStatement2049); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2051);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ; ");
                            
            }

            // .//EmersonTree.g:353:13: ( ^( FORITER expression ) )?
            {
                int alt21=2;
                {
                    int LA21_0 = LA(1);
                    if ( (LA21_0 == FORITER) ) 
                    {
                        alt21=1;
                    }
                }
                switch (alt21) 
                {
            	case 1:
            	    // .//EmersonTree.g:353:14: ^( FORITER expression )
            	    {
            	         MATCHT(FORITER, &FOLLOW_FORITER_in_forStatement2085); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2087);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP(" ) ");
                            
            }
            FOLLOWPUSH(FOLLOW_statement_in_forStatement2120);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//EmersonTree.g:361:1: forStatementInitialiserPart : ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) );
 */
static void
forStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:362:5: ( expressionNoIn | ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt22;

            alt22=2;


            {
                int LA22_0 = LA(1);
                if ( (LA22_0 == EXPR_LIST) ) 
                {
                    alt22=1;
                }
                else if ( (LA22_0 == VARLIST) ) 
                {
                    alt22=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 22;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//EmersonTree.g:362:7: expressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart2145);
        	        expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:363:7: ^( VARLIST variableDeclarationListNoIn )
        	    {
        	         MATCHT(VARLIST, &FOLLOW_VARLIST_in_forStatementInitialiserPart2154); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2156);
        	        variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//EmersonTree.g:366:1: forInStatement : ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static void
forInStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:367:2: ( ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//EmersonTree.g:367:4: ^( FORIN forInStatementInitialiserPart expression statement )
        {
             MATCHT(FORIN, &FOLLOW_FORIN_in_forInStatement2182); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(" for ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement2204);
            forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" in ");
                        
            }
            FOLLOWPUSH(FOLLOW_expression_in_forInStatement2225);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) ");
                        
            }
            FOLLOWPUSH(FOLLOW_statement_in_forInStatement2246);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//EmersonTree.g:385:1: forInStatementInitialiserPart : ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) );
 */
static void
forInStatementInitialiserPart(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:386:2: ( leftHandSideExpression | ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt23;

            alt23=2;


            {
                int LA23_0 = LA(1);
                if ( (((LA23_0 >= CALL) && (LA23_0 <= DOT)) || LA23_0 == NEW || LA23_0 == VECTOR || LA23_0 == DOLLAR_EXPRESSION || LA23_0 == ARRAY_LITERAL || LA23_0 == FUNC_EXPR || ((LA23_0 >= PAREN) && (LA23_0 <= OBJECT_LITERAL)) || ((LA23_0 >= Identifier) && (LA23_0 <= NumericLiteral)) || LA23_0 == 209 || ((LA23_0 >= 211) && (LA23_0 <= 213))) ) 
                {
                    alt23=1;
                }
                else if ( (LA23_0 == VAR) ) 
                {
                    alt23=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 23;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//EmersonTree.g:386:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2264);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:387:4: ^( VAR variableDeclarationNoIn )
        	    {
        	         MATCHT(VAR, &FOLLOW_VAR_in_forInStatementInitialiserPart2270); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2272);
        	        variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//EmersonTree.g:390:1: continueStatement : ^( CONTINUE ( Identifier )? ) ;
 */
static void
continueStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier5;

    /* Initialize rule variables
     */


    Identifier5       = NULL;

    {
        // .//EmersonTree.g:391:5: ( ^( CONTINUE ( Identifier )? ) )
        // .//EmersonTree.g:391:7: ^( CONTINUE ( Identifier )? )
        {
             MATCHT(CONTINUE, &FOLLOW_CONTINUE_in_continueStatement2297); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("continue ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:396:9: ( Identifier )?
                {
                    int alt24=2;
                    {
                        int LA24_0 = LA(1);
                        if ( (LA24_0 == Identifier) ) 
                        {
                            alt24=1;
                        }
                    }
                    switch (alt24) 
                    {
                	case 1:
                	    // .//EmersonTree.g:397:13: Identifier
                	    {
                	        Identifier5 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2333); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecontinueStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            APP((const char*)(Identifier5->getText(Identifier5))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecontinueStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//EmersonTree.g:405:1: breakStatement : ^( BREAK ( Identifier )? ) ;
 */
static void
breakStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier6;

    /* Initialize rule variables
     */


    Identifier6       = NULL;

    {
        // .//EmersonTree.g:406:5: ( ^( BREAK ( Identifier )? ) )
        // .//EmersonTree.g:406:7: ^( BREAK ( Identifier )? )
        {
             MATCHT(BREAK, &FOLLOW_BREAK_in_breakStatement2390); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("break ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:411:9: ( Identifier )?
                {
                    int alt25=2;
                    {
                        int LA25_0 = LA(1);
                        if ( (LA25_0 == Identifier) ) 
                        {
                            alt25=1;
                        }
                    }
                    switch (alt25) 
                    {
                	case 1:
                	    // .//EmersonTree.g:412:13: Identifier
                	    {
                	        Identifier6 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2424); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulebreakStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        if ( BACKTRACKING==0 ) 
                	        {

                	                            APP((const char*)(Identifier6->getText(Identifier6))->chars);
                	                        
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulebreakStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//EmersonTree.g:420:1: returnStatement : ^( RETURN ( expression )? ) ;
 */
static void
returnStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:421:5: ( ^( RETURN ( expression )? ) )
        // .//EmersonTree.g:421:7: ^( RETURN ( expression )? )
        {
             MATCHT(RETURN, &FOLLOW_RETURN_in_returnStatement2483); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP("return ");
                        
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:426:9: ( expression )?
                {
                    int alt26=2;
                    {
                        int LA26_0 = LA(1);
                        if ( (LA26_0 == EXPR_LIST) ) 
                        {
                            alt26=1;
                        }
                    }
                    switch (alt26) 
                    {
                	case 1:
                	    // .//EmersonTree.g:427:13: expression
                	    {
                	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2520);
                	        expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulereturnStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulereturnStatementEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//EmersonTree.g:432:1: withStatement : ^( WITH expression statement ) ;
 */
static void
withStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:433:5: ( ^( WITH expression statement ) )
        // .//EmersonTree.g:433:7: ^( WITH expression statement )
        {
             MATCHT(WITH, &FOLLOW_WITH_in_withStatement2556); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_withStatement2558);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statement_in_withStatement2560);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//EmersonTree.g:436:1: labelledStatement : ^( LABEL Identifier statement ) ;
 */
static void
labelledStatement(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier7;

    /* Initialize rule variables
     */


    Identifier7       = NULL;

    {
        // .//EmersonTree.g:437:5: ( ^( LABEL Identifier statement ) )
        // .//EmersonTree.g:437:7: ^( LABEL Identifier statement )
        {
             MATCHT(LABEL, &FOLLOW_LABEL_in_labelledStatement2580); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier7 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement2591); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP((const char*)(Identifier7->getText(Identifier7))->chars);
                            APP(" : \n");
                        
            }
            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement2612);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//EmersonTree.g:447:1: switchStatement : ^( SWITCH expression caseBlock ) ;
 */
static void
switchStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:448:5: ( ^( SWITCH expression caseBlock ) )
        // .//EmersonTree.g:448:7: ^( SWITCH expression caseBlock )
        {
             MATCHT(SWITCH, &FOLLOW_SWITCH_in_switchStatement2647); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(" switch ( ");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2668);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP(" ) \n");
                            APP("{ \n");
                        
            }
            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2689);
            caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            APP("} \n");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//EmersonTree.g:465:1: caseBlock : ( caseClause )* ( ( defaultClause )* )? ( ( caseClause )* )? ;
 */
static void
caseBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:466:5: ( ( caseClause )* ( ( defaultClause )* )? ( ( caseClause )* )? )
        // .//EmersonTree.g:466:7: ( caseClause )* ( ( defaultClause )* )? ( ( caseClause )* )?
        {

            // .//EmersonTree.g:466:7: ( caseClause )*

            for (;;)
            {
                int alt27=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA27_0 = LA(1);
                    if ( (LA27_0 == CASE) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA27_2 = LA(2);
                            if ( (synpred44_EmersonTree(ctx)) ) 
                            {
                                alt27=1;
                            }

                        }
                    }

                }
                switch (alt27) 
                {
            	case 1:
            	    // .//EmersonTree.g:466:8: caseClause
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2724);
            	        caseClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */


            // .//EmersonTree.g:466:21: ( ( defaultClause )* )?
            {
                int alt29=2;
                switch ( LA(1) ) 
                {
                    case DEFAULT:
                    	{
                    		alt29=1;
                    	}
                        break;
                    case CASE:
                    	{
                    		{
                    		    int LA29_2 = LA(2);
                    		    if ( (synpred46_EmersonTree(ctx)) ) 
                    		    {
                    		        alt29=1;
                    		    }
                    		}
                    	}
                        break;
                    case UP:
                    	{
                    		{
                    		    int LA29_3 = LA(2);
                    		    if ( (synpred46_EmersonTree(ctx)) ) 
                    		    {
                    		        alt29=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt29) 
                {
            	case 1:
            	    // .//EmersonTree.g:466:22: ( defaultClause )*
            	    {

            	        // .//EmersonTree.g:466:22: ( defaultClause )*

            	        for (;;)
            	        {
            	            int alt28=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA28_0 = LA(1);
            	                if ( (LA28_0 == DEFAULT) ) 
            	                {
            	                    alt28=1;
            	                }

            	            }
            	            switch (alt28) 
            	            {
            	        	case 1:
            	        	    // .//EmersonTree.g:0:0: defaultClause
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2729);
            	        	        defaultClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop28;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop28: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//EmersonTree.g:466:39: ( ( caseClause )* )?
            {
                int alt31=2;
                {
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == CASE) ) 
                    {
                        alt31=1;
                    }
                    else if ( (LA31_0 == UP) ) 
                    {
                        {
                            int LA31_2 = LA(2);
                            if ( (synpred48_EmersonTree(ctx)) ) 
                            {
                                alt31=1;
                            }
                        }
                    }
                }
                switch (alt31) 
                {
            	case 1:
            	    // .//EmersonTree.g:466:40: ( caseClause )*
            	    {

            	        // .//EmersonTree.g:466:40: ( caseClause )*

            	        for (;;)
            	        {
            	            int alt30=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA30_0 = LA(1);
            	                if ( (LA30_0 == CASE) ) 
            	                {
            	                    alt30=1;
            	                }

            	            }
            	            switch (alt30) 
            	            {
            	        	case 1:
            	        	    // .//EmersonTree.g:0:0: caseClause
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2735);
            	        	        caseClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop30;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop30: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//EmersonTree.g:469:1: caseClause : ^( CASE expression ( statementList )? ) ;
 */
static void
caseClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:470:5: ( ^( CASE expression ( statementList )? ) )
        // .//EmersonTree.g:470:7: ^( CASE expression ( statementList )? )
        {
             MATCHT(CASE, &FOLLOW_CASE_in_caseClause2757); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_caseClause2759);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:470:26: ( statementList )?
            {
                int alt32=2;
                {
                    int LA32_0 = LA(1);
                    if ( (LA32_0 == SLIST) ) 
                    {
                        alt32=1;
                    }
                }
                switch (alt32) 
                {
            	case 1:
            	    // .//EmersonTree.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2761);
            	        statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//EmersonTree.g:473:1: defaultClause : ^( DEFAULT ( statementList )? ) ;
 */
static void
defaultClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:474:5: ( ^( DEFAULT ( statementList )? ) )
        // .//EmersonTree.g:474:6: ^( DEFAULT ( statementList )? )
        {
             MATCHT(DEFAULT, &FOLLOW_DEFAULT_in_defaultClause2781); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // .//EmersonTree.g:474:16: ( statementList )?
                {
                    int alt33=2;
                    {
                        int LA33_0 = LA(1);
                        if ( (LA33_0 == SLIST) ) 
                        {
                            alt33=1;
                        }
                    }
                    switch (alt33) 
                    {
                	case 1:
                	    // .//EmersonTree.g:0:0: statementList
                	    {
                	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2783);
                	        statementList(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledefaultClauseEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//EmersonTree.g:477:1: throwStatement : ^( THROW expression ) ;
 */
static void
throwStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:478:5: ( ^( THROW expression ) )
        // .//EmersonTree.g:478:7: ^( THROW expression )
        {
             MATCHT(THROW, &FOLLOW_THROW_in_throwStatement2804); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2806);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start whenStatement
 * .//EmersonTree.g:481:1: whenStatement : ^( WHEN whenPred functionBody ) ;
 */
static void
whenStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:482:5: ( ^( WHEN whenPred functionBody ) )
        // .//EmersonTree.g:482:7: ^( WHEN whenPred functionBody )
        {
             MATCHT(WHEN, &FOLLOW_WHEN_in_whenStatement2825); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(" util.create_when( ");
                            insideWhenPred = true;
                            APP(" [ util.create_quoted('");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_whenPred_in_whenStatement2845);
            whenPred(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            //FIXME: potential problem if last statement in array is
                            //dollar syntax.
                            APP("')],\n");

                            insideWhenPred = false;
                            //open function for callback
                            APP("function(){ ");
                              
                        
            }
            FOLLOWPUSH(FOLLOW_functionBody_in_whenStatement2865);
            functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            //close function for callback
                            APP(" }");
                            //close create_when
                            APP(");");
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenStatementEx; /* Prevent compiler warnings */
    rulewhenStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whenStatement */

/** 
 * $ANTLR start whenPred
 * .//EmersonTree.g:510:1: whenPred : ^( WHEN_PRED expression ) ;
 */
static void
whenPred(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:511:5: ( ^( WHEN_PRED expression ) )
        // .//EmersonTree.g:511:7: ^( WHEN_PRED expression )
        {
             MATCHT(WHEN_PRED, &FOLLOW_WHEN_PRED_in_whenPred2904); 
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whenPred2914);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenPredEx; /* Prevent compiler warnings */
    rulewhenPredEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whenPred */

/** 
 * $ANTLR start whenCheckedListFirst
 * .//EmersonTree.g:516:1: whenCheckedListFirst : ^( WHEN_CHECKED_LIST_FIRST expression ( whenCheckedListSubsequent )? ) ;
 */
static void
whenCheckedListFirst(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:517:5: ( ^( WHEN_CHECKED_LIST_FIRST expression ( whenCheckedListSubsequent )? ) )
        // .//EmersonTree.g:517:7: ^( WHEN_CHECKED_LIST_FIRST expression ( whenCheckedListSubsequent )? )
        {
             MATCHT(WHEN_CHECKED_LIST_FIRST, &FOLLOW_WHEN_CHECKED_LIST_FIRST_in_whenCheckedListFirst2938); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListFirst2958);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            //expression will automatically fill in correct values here
                        
            }

            // .//EmersonTree.g:524:9: ( whenCheckedListSubsequent )?
            {
                int alt34=2;
                {
                    int LA34_0 = LA(1);
                    if ( (LA34_0 == WHEN_CHECKED_LIST_SUBSEQUENT) ) 
                    {
                        alt34=1;
                    }
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//EmersonTree.g:524:10: whenCheckedListSubsequent
            	    {
            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst2979);
            	        whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                    
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListFirstEx; /* Prevent compiler warnings */
    rulewhenCheckedListFirstEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whenCheckedListFirst */

/** 
 * $ANTLR start whenCheckedListSubsequent
 * .//EmersonTree.g:531:1: whenCheckedListSubsequent : ^( WHEN_CHECKED_LIST_SUBSEQUENT expression ( whenCheckedListSubsequent )* ) ;
 */
static void
whenCheckedListSubsequent(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:532:5: ( ^( WHEN_CHECKED_LIST_SUBSEQUENT expression ( whenCheckedListSubsequent )* ) )
        // .//EmersonTree.g:532:7: ^( WHEN_CHECKED_LIST_SUBSEQUENT expression ( whenCheckedListSubsequent )* )
        {
             MATCHT(WHEN_CHECKED_LIST_SUBSEQUENT, &FOLLOW_WHEN_CHECKED_LIST_SUBSEQUENT_in_whenCheckedListSubsequent3020); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                            APP(",");
                        
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListSubsequent3040);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                            //expression will automatically fill in correct values here
                        
            }

            // .//EmersonTree.g:540:9: ( whenCheckedListSubsequent )*

            for (;;)
            {
                int alt35=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA35_0 = LA(1);
                    if ( (LA35_0 == WHEN_CHECKED_LIST_SUBSEQUENT) ) 
                    {
                        alt35=1;
                    }

                }
                switch (alt35) 
                {
            	case 1:
            	    // .//EmersonTree.g:540:10: whenCheckedListSubsequent
            	    {
            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent3061);
            	        whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                    
            	        }

            	    }
            	    break;

            	default:
            	    goto loop35;	/* break out of the loop */
            	    break;
                }
            }
            loop35: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListSubsequentEx; /* Prevent compiler warnings */
    rulewhenCheckedListSubsequentEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end whenCheckedListSubsequent */

/** 
 * $ANTLR start tryStatement
 * .//EmersonTree.g:547:1: tryStatement : ^( TRY statementBlock catchFinallyBlock ) ;
 */
static void
tryStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:548:9: ( ^( TRY statementBlock catchFinallyBlock ) )
        // .//EmersonTree.g:548:11: ^( TRY statementBlock catchFinallyBlock )
        {
             MATCHT(TRY, &FOLLOW_TRY_in_tryStatement3114); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("try\n");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement3142);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement3156);
            catchFinallyBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//EmersonTree.g:557:1: catchFinallyBlock : ( catchBlock ( finallyBlock )? | finallyBlock );
 */
static void
catchFinallyBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:558:9: ( catchBlock ( finallyBlock )? | finallyBlock )
            
            ANTLR3_UINT32 alt37;

            alt37=2;


            {
                int LA37_0 = LA(1);
                if ( (LA37_0 == CATCH) ) 
                {
                    alt37=1;
                }
                else if ( (LA37_0 == FINALLY) ) 
                {
                    alt37=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 37;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt37) 
            {
        	case 1:
        	    // .//EmersonTree.g:558:11: catchBlock ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock3194);
        	        catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:558:22: ( finallyBlock )?
        	        {
        	            int alt36=2;
        	            {
        	                int LA36_0 = LA(1);
        	                if ( (LA36_0 == FINALLY) ) 
        	                {
        	                    alt36=1;
        	                }
        	            }
        	            switch (alt36) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3196);
        	        	        finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:559:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock3209);
        	        finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//EmersonTree.g:562:1: catchBlock : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchBlock(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier8;

    /* Initialize rule variables
     */


    Identifier8       = NULL;

    {
        // .//EmersonTree.g:563:9: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:563:11: ^( CATCH Identifier statementBlock )
        {
             MATCHT(CATCH, &FOLLOW_CATCH_in_catchBlock3235); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("catch (");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier8 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock3263); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier8->getText(Identifier8))->chars);
                                APP( ")\n");
                            
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock3291);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//EmersonTree.g:576:1: finallyBlock : ^( FINALLY statementBlock ) ;
 */
static void
finallyBlock(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:577:9: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:577:11: ^( FINALLY statementBlock )
        {
             MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyBlock3330); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP("finally \n");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock3358);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start msgSendStatement
 * .//EmersonTree.g:585:1: msgSendStatement : ^( MESSAGE_SEND leftHandSideExpression leftHandSideExpression ( memberExpression )? ) ;
 */
static void
msgSendStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_msgSendStatementTop = pEmersonTree_msgSendStatementPush(ctx);
    {
        // .//EmersonTree.g:594:2: ( ^( MESSAGE_SEND leftHandSideExpression leftHandSideExpression ( memberExpression )? ) )
        // .//EmersonTree.g:594:4: ^( MESSAGE_SEND leftHandSideExpression leftHandSideExpression ( memberExpression )? )
        {
             MATCHT(MESSAGE_SEND, &FOLLOW_MESSAGE_SEND_in_msgSendStatement3399); 
            if  (HASEXCEPTION())
            {
                goto rulemsgSendStatementEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_msgSendStatementPop(ctx);

                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                          /* Save the program string here */
                          	(SCOPE_TOP(msgSendStatement))->prev_program_string= program_string;
                          /* length of the program string */
                          	(SCOPE_TOP(msgSendStatement))->prev_program_len= 	(SCOPE_TOP(msgSendStatement))->prev_program_string->len;
                          pANTLR3_STRING_FACTORY factory = antlr3StringFactoryNew();
                          	(SCOPE_TOP(msgSendStatement))->init_program_string= factory->newRaw(factory);
                          	(SCOPE_TOP(msgSendStatement))->init_program_string->setS(	(SCOPE_TOP(msgSendStatement))->init_program_string, program_string);
                      
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulemsgSendStatementEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_msgSendStatementPop(ctx);

                return ;
            }
            FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3422);
            leftHandSideExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemsgSendStatementEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_msgSendStatementPop(ctx);

                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                          unsigned int prev_program_len = 	(SCOPE_TOP(msgSendStatement))->prev_program_len;
                          unsigned int  new_program_len = program_string->len;
                          	(SCOPE_TOP(msgSendStatement))->firstExprString= (char*)(malloc(new_program_len - prev_program_len + 1) );
                          memset(	(SCOPE_TOP(msgSendStatement))->firstExprString, 0, (new_program_len - prev_program_len + 1));
                          memcpy(	(SCOPE_TOP(msgSendStatement))->firstExprString, (char*)(program_string->chars) + prev_program_len, (new_program_len - prev_program_len) );
                						 
                          	(SCOPE_TOP(msgSendStatement))->prev_program_len= new_program_len; 
                          //APP(".sendMessage( ");
                      
            }
            FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement3439);
            leftHandSideExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemsgSendStatementEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_msgSendStatementPop(ctx);

                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                          unsigned int prev_program_len = 	(SCOPE_TOP(msgSendStatement))->prev_program_len;
                          unsigned int new_program_len = program_string->len;
                          	(SCOPE_TOP(msgSendStatement))->secondExprString= (char*)(malloc(new_program_len - prev_program_len + 1) );
                          memset(	(SCOPE_TOP(msgSendStatement))->secondExprString, 0, new_program_len - prev_program_len + 1);
                          memcpy(	(SCOPE_TOP(msgSendStatement))->secondExprString, (char*)(program_string->chars) + prev_program_len, (new_program_len - prev_program_len));

                          pANTLR3_STRING init_program_string = 	(SCOPE_TOP(msgSendStatement))->init_program_string;
                          init_program_string->append(init_program_string, 	(SCOPE_TOP(msgSendStatement))->secondExprString);
                          init_program_string->append(init_program_string, ".sendMessage( ");
                          init_program_string->append(init_program_string, 	(SCOPE_TOP(msgSendStatement))->firstExprString);

                          program_string->setS(program_string, init_program_string); 

                       
            }

            // .//EmersonTree.g:633:8: ( memberExpression )?
            {
                int alt38=2;
                {
                    int LA38_0 = LA(1);
                    if ( (((LA38_0 >= ARRAY_INDEX) && (LA38_0 <= DOT)) || LA38_0 == NEW || LA38_0 == VECTOR || LA38_0 == DOLLAR_EXPRESSION || LA38_0 == ARRAY_LITERAL || LA38_0 == FUNC_EXPR || ((LA38_0 >= PAREN) && (LA38_0 <= OBJECT_LITERAL)) || ((LA38_0 >= Identifier) && (LA38_0 <= NumericLiteral)) || LA38_0 == 209 || ((LA38_0 >= 211) && (LA38_0 <= 213))) ) 
                    {
                        alt38=1;
                    }
                }
                switch (alt38) 
                {
            	case 1:
            	    // .//EmersonTree.g:634:11: memberExpression
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                        APP(", ");
            	                      
            	        }
            	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement3491);
            	        memberExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pEmersonTree_msgSendStatementPop(ctx);

            	            return ;
            	        }
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                      
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                          APP(" ) ");
                       
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulemsgSendStatementEx;
            }
            if (HASFAILED())
            {
                pEmersonTree_msgSendStatementPop(ctx);

                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;
    pEmersonTree_msgSendStatementPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start memAndCallExpression
 * .//EmersonTree.g:647:1: memAndCallExpression : ( memberExpression | callExpression );
 */
static void
memAndCallExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:648:1: ( memberExpression | callExpression )
            
            ANTLR3_UINT32 alt39;

            alt39=2;

            alt39 = cdfa39.predict(ctx, RECOGNIZER, ISTREAM, &cdfa39);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt39) 
            {
        	case 1:
        	    // .//EmersonTree.g:648:3: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression3548);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:649:3: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression3552);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start msgRecvStatement
 * .//EmersonTree.g:652:1: msgRecvStatement : ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) | ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) | ^( MESSAGE_RECV callExpression leftHandSideExpression ) );
 */
static void
msgRecvStatement(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:653:2: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) | ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) | ^( MESSAGE_RECV callExpression leftHandSideExpression ) )
            
            ANTLR3_UINT32 alt40;

            alt40=3;


            {
                int LA40_0 = LA(1);
                if ( (LA40_0 == MESSAGE_RECV) ) 
                {

                    {
                        int LA40_1 = LA(2);
                        if ( (synpred57_EmersonTree(ctx)) ) 
                        {
                            alt40=1;
                        }
                        else if ( (synpred58_EmersonTree(ctx)) ) 
                        {
                            alt40=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt40=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 40;
                            EXCEPTION->state        = 1;


                            goto rulemsgRecvStatementEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 40;
                    EXCEPTION->state        = 0;


                    goto rulemsgRecvStatementEx;
                }
            }
            switch (alt40) 
            {
        	case 1:
        	    // .//EmersonTree.g:653:4: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement3571); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("system.registerHandler( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement3587);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(", null");
        	                    APP(", ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement3604);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", null) ");  // No sender case
        	                
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:671:3: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement3632); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP("system.registerHandler( ");
        	                
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement3644);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(", null");
        	                        APP(", ");
        	                
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement3657);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", ");
        	                
        	        }
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement3669);
        	        memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(") "); // Case with sender
        	               
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:691:3: ^( MESSAGE_RECV callExpression leftHandSideExpression )
        	    {
        	         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_msgRecvStatement3692); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP("system.registerHandler( ");
        	                  
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_msgRecvStatement3708);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                    APP(", null");
        	                    APP(", ");
        	                  
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement3725);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                  APP(", null) ");  // No sender case
        	                
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start catchClause
 * .//EmersonTree.g:709:1: catchClause : ^( CATCH Identifier statementBlock ) ;
 */
static void
catchClause(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier9;

    /* Initialize rule variables
     */


    Identifier9       = NULL;

    {
        // .//EmersonTree.g:710:2: ( ^( CATCH Identifier statementBlock ) )
        // .//EmersonTree.g:710:4: ^( CATCH Identifier statementBlock )
        {
             MATCHT(CATCH, &FOLLOW_CATCH_in_catchClause3749); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                					  APP(" catch ( ");
                					
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier9 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause3764); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                					  APP((const char*)(Identifier9->getText(Identifier9))->chars);
                					  APP(" ) ");

                					
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause3785);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//EmersonTree.g:725:1: finallyClause : ^( FINALLY statementBlock ) ;
 */
static void
finallyClause(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:726:2: ( ^( FINALLY statementBlock ) )
        // .//EmersonTree.g:726:4: ^( FINALLY statementBlock )
        {
             MATCHT(FINALLY, &FOLLOW_FINALLY_in_finallyClause3805); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                				  APP(" finally ");

                				
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause3818);
            statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start expression
 * .//EmersonTree.g:737:1: expression : ^( EXPR_LIST ( assignmentExpression )+ ) ;
 */
static void
expression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:738:2: ( ^( EXPR_LIST ( assignmentExpression )+ ) )
        // .//EmersonTree.g:738:4: ^( EXPR_LIST ( assignmentExpression )+ )
        {
             MATCHT(EXPR_LIST, &FOLLOW_EXPR_LIST_in_expression3843); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:738:16: ( assignmentExpression )+
            {
                int cnt41=0;

                for (;;)
                {
                    int alt41=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA41_0 = LA(1);
            	    if ( (((LA41_0 >= ASSIGN) && (LA41_0 <= SUB_ASSIGN)) || ((LA41_0 >= RIGHT_SHIFT_ASSIGN) && (LA41_0 <= OR_ASSIGN)) || LA41_0 == COND_EXPR || LA41_0 == LEFT_SHIFT_ASSIG) ) 
            	    {
            	        alt41=1;
            	    }

            	}
            	switch (alt41) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:0:0: assignmentExpression
            	        {
            	            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression3845);
            	            assignmentExpression(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleexpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt41 >= 1 )
            		{
            		    goto loop41;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleexpressionEx;
            	}
            	cnt41++;
                }
                loop41: ;	/* Jump to here if this rule does not match */
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//EmersonTree.g:741:1: expressionNoIn : ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) ;
 */
static void
expressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:742:2: ( ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) )
        // .//EmersonTree.g:742:4: ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
        {
             MATCHT(EXPR_LIST, &FOLLOW_EXPR_LIST_in_expressionNoIn3860); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:742:16: ( assignmentExpressionNoIn )+
            {
                int cnt42=0;

                for (;;)
                {
                    int alt42=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA42_0 = LA(1);
            	    if ( (((LA42_0 >= ASSIGN) && (LA42_0 <= SUB_ASSIGN)) || ((LA42_0 >= RIGHT_SHIFT_ASSIGN) && (LA42_0 <= OR_ASSIGN)) || LA42_0 == COND_EXPR_NOIN || LA42_0 == LEFT_SHIFT_ASSIG) ) 
            	    {
            	        alt42=1;
            	    }

            	}
            	switch (alt42) 
            	{
            	    case 1:
            	        // .//EmersonTree.g:0:0: assignmentExpressionNoIn
            	        {
            	            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3862);
            	            assignmentExpressionNoIn(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleexpressionNoInEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt42 >= 1 )
            		{
            		    goto loop42;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleexpressionNoInEx;
            	}
            	cnt42++;
                }
                loop42: ;	/* Jump to here if this rule does not match */
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//EmersonTree.g:747:1: assignmentExpression : ( ^( COND_EXPR conditionalExpression ) | ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIG | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) );
 */
static void
assignmentExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionTop = pEmersonTree_assignmentExpressionPush(ctx);
    {
        {
            //  .//EmersonTree.g:753:2: ( ^( COND_EXPR conditionalExpression ) | ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIG | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt44;

            alt44=2;


            {
                int LA44_0 = LA(1);
                if ( (LA44_0 == COND_EXPR) ) 
                {
                    alt44=1;
                }
                else if ( (((LA44_0 >= ASSIGN) && (LA44_0 <= SUB_ASSIGN)) || ((LA44_0 >= RIGHT_SHIFT_ASSIGN) && (LA44_0 <= OR_ASSIGN)) || LA44_0 == LEFT_SHIFT_ASSIG) ) 
                {
                    alt44=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_assignmentExpressionPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 44;
                    EXCEPTION->state        = 0;


                    goto ruleassignmentExpressionEx;
                }
            }
            switch (alt44) 
            {
        	case 1:
        	    // .//EmersonTree.g:753:4: ^( COND_EXPR conditionalExpression )
        	    {
        	         MATCHT(COND_EXPR, &FOLLOW_COND_EXPR_in_assignmentExpression3884); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression3886);
        	        conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:754:4: ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIG | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpression )
        	    {

        	        // .//EmersonTree.g:755:6: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIG | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        	        {
        	            int alt43=12;
        	            switch ( LA(1) ) 
        	            {
        	            case ASSIGN:
        	            	{
        	            		alt43=1;
        	            	}
        	                break;
        	            case MULT_ASSIGN:
        	            	{
        	            		alt43=2;
        	            	}
        	                break;
        	            case DIV_ASSIGN:
        	            	{
        	            		alt43=3;
        	            	}
        	                break;
        	            case MOD_ASSIGN:
        	            	{
        	            		alt43=4;
        	            	}
        	                break;
        	            case ADD_ASSIGN:
        	            	{
        	            		alt43=5;
        	            	}
        	                break;
        	            case SUB_ASSIGN:
        	            	{
        	            		alt43=6;
        	            	}
        	                break;
        	            case LEFT_SHIFT_ASSIG:
        	            	{
        	            		alt43=7;
        	            	}
        	                break;
        	            case RIGHT_SHIFT_ASSIGN:
        	            	{
        	            		alt43=8;
        	            	}
        	                break;
        	            case TRIPLE_SHIFT_ASSIGN:
        	            	{
        	            		alt43=9;
        	            	}
        	                break;
        	            case AND_ASSIGN:
        	            	{
        	            		alt43=10;
        	            	}
        	                break;
        	            case EXP_ASSIGN:
        	            	{
        	            		alt43=11;
        	            	}
        	                break;
        	            case OR_ASSIGN:
        	            	{
        	            		alt43=12;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 43;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionEx;
        	            }

        	            switch (alt43) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:756:6: ASSIGN
        	        	    {
        	        	         MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpression3906); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " = ";    
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:757:7: MULT_ASSIGN
        	        	    {
        	        	         MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpression3930); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " *= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:758:7: DIV_ASSIGN
        	        	    {
        	        	         MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpression3948); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " /= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:759:8: MOD_ASSIGN
        	        	    {
        	        	         MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpression3968); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " %= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:760:8: ADD_ASSIGN
        	        	    {
        	        	         MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpression3987); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " += ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:761:8: SUB_ASSIGN
        	        	    {
        	        	         MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpression4007); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " -= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:762:7: LEFT_SHIFT_ASSIG
        	        	    {
        	        	         MATCHT(LEFT_SHIFT_ASSIG, &FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpression4026); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " <<= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:763:7: RIGHT_SHIFT_ASSIGN
        	        	    {
        	        	         MATCHT(RIGHT_SHIFT_ASSIGN, &FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpression4039); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " >>= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:764:7: TRIPLE_SHIFT_ASSIGN
        	        	    {
        	        	         MATCHT(TRIPLE_SHIFT_ASSIGN, &FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpression4050); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= "  >>>= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 10:
        	        	    // .//EmersonTree.g:765:7: AND_ASSIGN
        	        	    {
        	        	         MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpression4060); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " &= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 11:
        	        	    // .//EmersonTree.g:766:7: EXP_ASSIGN
        	        	    {
        	        	         MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpression4079); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " ^= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 12:
        	        	    // .//EmersonTree.g:767:7: OR_ASSIGN
        	        	    {
        	        	         MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpression4098); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpression))->op= " |= "; 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression4126);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            							  APP(" ");
        	            							  APP(	(SCOPE_TOP(assignmentExpression))->op);
        	            							  APP(" ");
        	            							
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression4153);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    pEmersonTree_assignmentExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//EmersonTree.g:783:1: assignmentExpressionNoIn : ( ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIG | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpressionNoIn ) );
 */
static void
assignmentExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_assignmentExpressionNoInTop = pEmersonTree_assignmentExpressionNoInPush(ctx);
    {
        {
            //  .//EmersonTree.g:789:2: ( ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIG | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt46;

            alt46=2;


            {
                int LA46_0 = LA(1);
                if ( (LA46_0 == COND_EXPR_NOIN) ) 
                {
                    alt46=1;
                }
                else if ( (((LA46_0 >= ASSIGN) && (LA46_0 <= SUB_ASSIGN)) || ((LA46_0 >= RIGHT_SHIFT_ASSIGN) && (LA46_0 <= OR_ASSIGN)) || LA46_0 == LEFT_SHIFT_ASSIG) ) 
                {
                    alt46=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_assignmentExpressionNoInPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 46;
                    EXCEPTION->state        = 0;


                    goto ruleassignmentExpressionNoInEx;
                }
            }
            switch (alt46) 
            {
        	case 1:
        	    // .//EmersonTree.g:789:4: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	    {
        	         MATCHT(COND_EXPR_NOIN, &FOLLOW_COND_EXPR_NOIN_in_assignmentExpressionNoIn4190); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn4192);
        	        conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:790:4: ^( ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIG | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN ) leftHandSideExpression assignmentExpressionNoIn )
        	    {

        	        // .//EmersonTree.g:791:6: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIG | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        	        {
        	            int alt45=12;
        	            switch ( LA(1) ) 
        	            {
        	            case ASSIGN:
        	            	{
        	            		alt45=1;
        	            	}
        	                break;
        	            case MULT_ASSIGN:
        	            	{
        	            		alt45=2;
        	            	}
        	                break;
        	            case DIV_ASSIGN:
        	            	{
        	            		alt45=3;
        	            	}
        	                break;
        	            case MOD_ASSIGN:
        	            	{
        	            		alt45=4;
        	            	}
        	                break;
        	            case ADD_ASSIGN:
        	            	{
        	            		alt45=5;
        	            	}
        	                break;
        	            case SUB_ASSIGN:
        	            	{
        	            		alt45=6;
        	            	}
        	                break;
        	            case LEFT_SHIFT_ASSIG:
        	            	{
        	            		alt45=7;
        	            	}
        	                break;
        	            case RIGHT_SHIFT_ASSIGN:
        	            	{
        	            		alt45=8;
        	            	}
        	                break;
        	            case TRIPLE_SHIFT_ASSIGN:
        	            	{
        	            		alt45=9;
        	            	}
        	                break;
        	            case AND_ASSIGN:
        	            	{
        	            		alt45=10;
        	            	}
        	                break;
        	            case EXP_ASSIGN:
        	            	{
        	            		alt45=11;
        	            	}
        	                break;
        	            case OR_ASSIGN:
        	            	{
        	            		alt45=12;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    pEmersonTree_assignmentExpressionNoInPop(ctx);

        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 45;
        	                EXCEPTION->state        = 0;


        	                goto ruleassignmentExpressionNoInEx;
        	            }

        	            switch (alt45) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:792:6: ASSIGN
        	        	    {
        	        	         MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentExpressionNoIn4212); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " = ";    
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:793:7: MULT_ASSIGN
        	        	    {
        	        	         MATCHT(MULT_ASSIGN, &FOLLOW_MULT_ASSIGN_in_assignmentExpressionNoIn4236); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " *= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:794:7: DIV_ASSIGN
        	        	    {
        	        	         MATCHT(DIV_ASSIGN, &FOLLOW_DIV_ASSIGN_in_assignmentExpressionNoIn4254); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " /= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:795:8: MOD_ASSIGN
        	        	    {
        	        	         MATCHT(MOD_ASSIGN, &FOLLOW_MOD_ASSIGN_in_assignmentExpressionNoIn4274); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " %= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:796:8: ADD_ASSIGN
        	        	    {
        	        	         MATCHT(ADD_ASSIGN, &FOLLOW_ADD_ASSIGN_in_assignmentExpressionNoIn4293); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " += ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:797:8: SUB_ASSIGN
        	        	    {
        	        	         MATCHT(SUB_ASSIGN, &FOLLOW_SUB_ASSIGN_in_assignmentExpressionNoIn4313); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " -= ";  
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:798:7: LEFT_SHIFT_ASSIG
        	        	    {
        	        	         MATCHT(LEFT_SHIFT_ASSIG, &FOLLOW_LEFT_SHIFT_ASSIG_in_assignmentExpressionNoIn4332); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " <<= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:799:7: RIGHT_SHIFT_ASSIGN
        	        	    {
        	        	         MATCHT(RIGHT_SHIFT_ASSIGN, &FOLLOW_RIGHT_SHIFT_ASSIGN_in_assignmentExpressionNoIn4345); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " >>= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:800:7: TRIPLE_SHIFT_ASSIGN
        	        	    {
        	        	         MATCHT(TRIPLE_SHIFT_ASSIGN, &FOLLOW_TRIPLE_SHIFT_ASSIGN_in_assignmentExpressionNoIn4356); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= "  >>>= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 10:
        	        	    // .//EmersonTree.g:801:7: AND_ASSIGN
        	        	    {
        	        	         MATCHT(AND_ASSIGN, &FOLLOW_AND_ASSIGN_in_assignmentExpressionNoIn4366); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " &= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 11:
        	        	    // .//EmersonTree.g:802:7: EXP_ASSIGN
        	        	    {
        	        	         MATCHT(EXP_ASSIGN, &FOLLOW_EXP_ASSIGN_in_assignmentExpressionNoIn4385); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " ^= "; 
        	        	        }

        	        	    }
        	        	    break;
        	        	case 12:
        	        	    // .//EmersonTree.g:803:7: OR_ASSIGN
        	        	    {
        	        	         MATCHT(OR_ASSIGN, &FOLLOW_OR_ASSIGN_in_assignmentExpressionNoIn4404); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             	(SCOPE_TOP(assignmentExpressionNoIn))->op= " |= "; 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn4437);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP(" ");
        	            					  APP(	(SCOPE_TOP(assignmentExpressionNoIn))->op);
        	            					  APP(" ");
        	            					
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn4452);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_assignmentExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    pEmersonTree_assignmentExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//EmersonTree.g:817:1: leftHandSideExpression : ( callExpression | newExpression );
 */
static void
leftHandSideExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:818:2: ( callExpression | newExpression )
            
            ANTLR3_UINT32 alt47;

            alt47=2;

            alt47 = cdfa47.predict(ctx, RECOGNIZER, ISTREAM, &cdfa47);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt47) 
            {
        	case 1:
        	    // .//EmersonTree.g:818:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression4469);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:819:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression4474);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//EmersonTree.g:822:1: newExpression : ( memberExpression | ^( NEW newExpression ) );
 */
static void
newExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:823:2: ( memberExpression | ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt48;

            alt48=2;

            alt48 = cdfa48.predict(ctx, RECOGNIZER, ISTREAM, &cdfa48);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt48) 
            {
        	case 1:
        	    // .//EmersonTree.g:823:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression4486);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:824:4: ^( NEW newExpression )
        	    {
        	         MATCHT(NEW, &FOLLOW_NEW_in_newExpression4493); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression4495);
        	        newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//EmersonTree.g:828:1: propertyReferenceSuffix1 : Identifier ;
 */
static void
propertyReferenceSuffix1(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier10;

    /* Initialize rule variables
     */


    Identifier10       = NULL;

    {
        // .//EmersonTree.g:829:1: ( Identifier )
        // .//EmersonTree.g:829:3: Identifier
        {
            Identifier10 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix14508); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                 APP((const char*)(Identifier10->getText(Identifier10))->chars);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start indexSuffix1
 * .//EmersonTree.g:832:1: indexSuffix1 : expression ;
 */
static void
indexSuffix1(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:833:1: ( expression )
        // .//EmersonTree.g:833:3: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix14520);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//EmersonTree.g:836:1: memberExpression : ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) );
 */
static void
memberExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:837:1: ( primaryExpression | functionExpression | ^( DOT memberExpression propertyReferenceSuffix1 ) | ^( ARRAY_INDEX memberExpression indexSuffix1 ) | ^( NEW memberExpression arguments ) | ^( DOT memberExpression ) )
            
            ANTLR3_UINT32 alt49;

            alt49=6;

            alt49 = cdfa49.predict(ctx, RECOGNIZER, ISTREAM, &cdfa49);
            if  (HASEXCEPTION())
            {
                goto rulememberExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt49) 
            {
        	case 1:
        	    // .//EmersonTree.g:837:3: primaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression4529);
        	        primaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:838:2: functionExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression4532);
        	        functionExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:839:3: ^( DOT memberExpression propertyReferenceSuffix1 )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_memberExpression4537); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression4539);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("."); 
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression4543);
        	        propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:840:3: ^( ARRAY_INDEX memberExpression indexSuffix1 )
        	    {
        	         MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_memberExpression4550); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression4552);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression4556);
        	        indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ] "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:841:3: ^( NEW memberExpression arguments )
        	    {
        	         MATCHT(NEW, &FOLLOW_NEW_in_memberExpression4564); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("new "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression4568);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_memberExpression4570);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:842:3: ^( DOT memberExpression )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_memberExpression4576); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(".");
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression4580);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//EmersonTree.g:845:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix );
 */
static void
memberExpressionSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:846:2: ( indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt50;

            alt50=2;


            {
                int LA50_0 = LA(1);
                if ( (LA50_0 == ARRAY_INDEX) ) 
                {
                    alt50=1;
                }
                else if ( (LA50_0 == DOT) ) 
                {
                    alt50=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 50;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt50) 
            {
        	case 1:
        	    // .//EmersonTree.g:846:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix4591);
        	        indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:847:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix4596);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//EmersonTree.g:850:1: callExpression : ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) );
 */
static void
callExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:851:2: ( ^( CALL memberExpression arguments ) | ^( ARRAY_INDEX callExpression indexSuffix1 ) | ^( DOT callExpression propertyReferenceSuffix1 ) | ^( CALL callExpression arguments ) )
            
            ANTLR3_UINT32 alt51;

            alt51=4;

            switch ( LA(1) ) 
            {
            case CALL:
            	{

            		{
            		    int LA51_1 = LA(2);
            		    if ( (synpred93_EmersonTree(ctx)) ) 
            		    {
            		        alt51=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt51=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return ;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 51;
            		        EXCEPTION->state        = 1;


            		        goto rulecallExpressionEx;
            		    }
            		}
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt51=2;
            	}
                break;
            case DOT:
            	{
            		alt51=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 51;
                EXCEPTION->state        = 0;


                goto rulecallExpressionEx;
            }

            switch (alt51) 
            {
        	case 1:
        	    // .//EmersonTree.g:851:4: ^( CALL memberExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression4609); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression4611);
        	        memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression4613);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:852:4: ^( ARRAY_INDEX callExpression indexSuffix1 )
        	    {
        	         MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_callExpression4621); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression4623);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("[ "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression4627);
        	        indexSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:853:4: ^( DOT callExpression propertyReferenceSuffix1 )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_callExpression4636); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression4638);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(".");
        	        }
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression4642);
        	        propertyReferenceSuffix1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:854:4: ^( CALL callExpression arguments )
        	    {
        	         MATCHT(CALL, &FOLLOW_CALL_in_callExpression4649); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_callExpression_in_callExpression4651);
        	        callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression4653);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//EmersonTree.g:859:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix );
 */
static void
callExpressionSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:860:2: ( arguments | indexSuffix | propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt52;

            alt52=3;

            switch ( LA(1) ) 
            {
            case ARGLIST:
            	{
            		alt52=1;
            	}
                break;
            case ARRAY_INDEX:
            	{
            		alt52=2;
            	}
                break;
            case DOT:
            	{
            		alt52=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 52;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt52) 
            {
        	case 1:
        	    // .//EmersonTree.g:860:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix4667);
        	        arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:861:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix4672);
        	        indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:862:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix4677);
        	        propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//EmersonTree.g:865:1: arguments : ( ^( ARGLIST ) | ^( ARGLIST ( assignmentExpression ) ) | ^( ARGLIST assignmentExpression ( assignmentExpression )* ) );
 */
static void
arguments(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:866:3: ( ^( ARGLIST ) | ^( ARGLIST ( assignmentExpression ) ) | ^( ARGLIST assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt54;

            alt54=3;


            {
                int LA54_0 = LA(1);
                if ( (LA54_0 == ARGLIST) ) 
                {

                    {
                        int LA54_1 = LA(2);
                        if ( (synpred98_EmersonTree(ctx)) ) 
                        {
                            alt54=1;
                        }
                        else if ( (synpred99_EmersonTree(ctx)) ) 
                        {
                            alt54=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt54=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 54;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 54;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt54) 
            {
        	case 1:
        	    // .//EmersonTree.g:866:5: ^( ARGLIST )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments4690); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("( )"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:867:5: ^( ARGLIST ( assignmentExpression ) )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments4700); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:870:8: ( assignmentExpression )
        	        // .//EmersonTree.g:870:9: assignmentExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments4720);
        	            assignmentExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleargumentsEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:874:5: ^( ARGLIST assignmentExpression ( assignmentExpression )* )
        	    {
        	         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_arguments4743); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                             APP("( ");
        	            		
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments4771);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:880:9: ( assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt53=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA53_0 = LA(1);
        	                if ( (((LA53_0 >= ASSIGN) && (LA53_0 <= SUB_ASSIGN)) || ((LA53_0 >= RIGHT_SHIFT_ASSIGN) && (LA53_0 <= OR_ASSIGN)) || LA53_0 == COND_EXPR || LA53_0 == LEFT_SHIFT_ASSIG) ) 
        	                {
        	                    alt53=1;
        	                }

        	            }
        	            switch (alt53) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:881:18: assignmentExpression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                               APP(", ");
        	        	                             
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments4827);
        	        	        assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop53;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop53: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                              APP(" ) ");
        	                            
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//EmersonTree.g:894:1: indexSuffix : ^( ARRAY_INDEX expression ) ;
 */
static void
indexSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:895:2: ( ^( ARRAY_INDEX expression ) )
        // .//EmersonTree.g:895:4: ^( ARRAY_INDEX expression )
        {
             MATCHT(ARRAY_INDEX, &FOLLOW_ARRAY_INDEX_in_indexSuffix4880); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix4882);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//EmersonTree.g:898:1: propertyReferenceSuffix : ^( DOT Identifier ) ;
 */
static void
propertyReferenceSuffix(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:899:2: ( ^( DOT Identifier ) )
        // .//EmersonTree.g:899:4: ^( DOT Identifier )
        {
             MATCHT(DOT, &FOLLOW_DOT_in_propertyReferenceSuffix4897); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix4899); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//EmersonTree.g:902:1: assignmentOperator : ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN );
 */
static void
assignmentOperator(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:903:2: ( ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_SHIFT_ASSIGN | RIGHT_SHIFT_ASSIGN | TRIPLE_SHIFT_ASSIGN | AND_ASSIGN | EXP_ASSIGN | OR_ASSIGN )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= ASSIGN) && (LA(1) <= OR_ASSIGN)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_assignmentOperator0);    goto ruleassignmentOperatorEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//EmersonTree.g:906:1: conditionalExpression : ( logicalORExpression | ^( TERNARYOP logicalORExpression assignmentExpression assignmentExpression ) );
 */
static void
conditionalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:907:2: ( logicalORExpression | ^( TERNARYOP logicalORExpression assignmentExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt55;

            alt55=2;


            {
                int LA55_0 = LA(1);
                if ( (((LA55_0 >= CALL) && (LA55_0 <= DOT)) || LA55_0 == NEW || LA55_0 == VECTOR || LA55_0 == DOLLAR_EXPRESSION || ((LA55_0 >= OR) && (LA55_0 <= IN)) || ((LA55_0 >= LEFT_SHIFT) && (LA55_0 <= ARRAY_LITERAL)) || ((LA55_0 >= DELETE_OP) && (LA55_0 <= NOT)) || LA55_0 == FUNC_EXPR || ((LA55_0 >= PAREN) && (LA55_0 <= OBJECT_LITERAL)) || ((LA55_0 >= Identifier) && (LA55_0 <= NumericLiteral)) || LA55_0 == 209 || ((LA55_0 >= 211) && (LA55_0 <= 213))) ) 
                {
                    alt55=1;
                }
                else if ( (LA55_0 == TERNARYOP) ) 
                {
                    alt55=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 55;
                    EXCEPTION->state        = 0;


                    goto ruleconditionalExpressionEx;
                }
            }
            switch (alt55) 
            {
        	case 1:
        	    // .//EmersonTree.g:907:4: logicalORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression4950);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:908:3: ^( TERNARYOP logicalORExpression assignmentExpression assignmentExpression )
        	    {
        	         MATCHT(TERNARYOP, &FOLLOW_TERNARYOP_in_conditionalExpression4962); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP( " ( ");
        	            					
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression4976);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP(" )  ? ( ");
        	            					
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression4996);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ) : ( ");
        	            					
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression5019);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ) ");
        	            						
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//EmersonTree.g:932:1: conditionalExpressionNoIn : ( logicalORExpressionNoIn | ^( TERNARYOP logicalORExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn ) );
 */
static void
conditionalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:933:2: ( logicalORExpressionNoIn | ^( TERNARYOP logicalORExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt56;

            alt56=2;


            {
                int LA56_0 = LA(1);
                if ( (((LA56_0 >= CALL) && (LA56_0 <= DOT)) || LA56_0 == NEW || LA56_0 == VECTOR || LA56_0 == DOLLAR_EXPRESSION || ((LA56_0 >= OR) && (LA56_0 <= INSTANCE_OF)) || ((LA56_0 >= LEFT_SHIFT) && (LA56_0 <= ARRAY_LITERAL)) || ((LA56_0 >= DELETE_OP) && (LA56_0 <= NOT)) || LA56_0 == FUNC_EXPR || ((LA56_0 >= PAREN) && (LA56_0 <= OBJECT_LITERAL)) || ((LA56_0 >= Identifier) && (LA56_0 <= NumericLiteral)) || LA56_0 == 209 || ((LA56_0 >= 211) && (LA56_0 <= 213))) ) 
                {
                    alt56=1;
                }
                else if ( (LA56_0 == TERNARYOP) ) 
                {
                    alt56=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 56;
                    EXCEPTION->state        = 0;


                    goto ruleconditionalExpressionNoInEx;
                }
            }
            switch (alt56) 
            {
        	case 1:
        	    // .//EmersonTree.g:933:4: logicalORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5052);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:934:3: ^( TERNARYOP logicalORExpressionNoIn assignmentExpressionNoIn assignmentExpressionNoIn )
        	    {
        	         MATCHT(TERNARYOP, &FOLLOW_TERNARYOP_in_conditionalExpressionNoIn5062); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	            				  APP(" ( ");
        	            				
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn5074);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            				  APP(" ) ? ( ");
        	            				
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5093);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP(" ) : ( ");
        	            					
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn5110);
        	        assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP(" ) ");
        	            					
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpression
 * .//EmersonTree.g:956:1: logicalANDExpression : ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) );
 */
static void
logicalANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:957:2: ( bitwiseORExpression | ^( AND logicalANDExpression bitwiseORExpression ) )
            
            ANTLR3_UINT32 alt57;

            alt57=2;


            {
                int LA57_0 = LA(1);
                if ( (((LA57_0 >= CALL) && (LA57_0 <= DOT)) || LA57_0 == NEW || LA57_0 == VECTOR || LA57_0 == DOLLAR_EXPRESSION || ((LA57_0 >= BIT_OR) && (LA57_0 <= IN)) || ((LA57_0 >= LEFT_SHIFT) && (LA57_0 <= ARRAY_LITERAL)) || ((LA57_0 >= DELETE_OP) && (LA57_0 <= NOT)) || LA57_0 == FUNC_EXPR || ((LA57_0 >= PAREN) && (LA57_0 <= OBJECT_LITERAL)) || ((LA57_0 >= Identifier) && (LA57_0 <= NumericLiteral)) || LA57_0 == 209 || ((LA57_0 >= 211) && (LA57_0 <= 213))) ) 
                {
                    alt57=1;
                }
                else if ( (LA57_0 == AND) ) 
                {
                    alt57=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 57;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionEx;
                }
            }
            switch (alt57) 
            {
        	case 1:
        	    // .//EmersonTree.g:957:4: bitwiseORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression5135);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:958:3: ^( AND logicalANDExpression bitwiseORExpression )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpression5140); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalANDExpression5142);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression5146);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpression
 * .//EmersonTree.g:962:1: logicalORExpression : ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) );
 */
static void
logicalORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:963:2: ( logicalANDExpression | ^( OR logicalORExpression logicalANDExpression ) )
            
            ANTLR3_UINT32 alt58;

            alt58=2;


            {
                int LA58_0 = LA(1);
                if ( (((LA58_0 >= CALL) && (LA58_0 <= DOT)) || LA58_0 == NEW || LA58_0 == VECTOR || LA58_0 == DOLLAR_EXPRESSION || ((LA58_0 >= AND) && (LA58_0 <= IN)) || ((LA58_0 >= LEFT_SHIFT) && (LA58_0 <= ARRAY_LITERAL)) || ((LA58_0 >= DELETE_OP) && (LA58_0 <= NOT)) || LA58_0 == FUNC_EXPR || ((LA58_0 >= PAREN) && (LA58_0 <= OBJECT_LITERAL)) || ((LA58_0 >= Identifier) && (LA58_0 <= NumericLiteral)) || LA58_0 == 209 || ((LA58_0 >= 211) && (LA58_0 <= 213))) ) 
                {
                    alt58=1;
                }
                else if ( (LA58_0 == OR) ) 
                {
                    alt58=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 58;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionEx;
                }
            }
            switch (alt58) 
            {
        	case 1:
        	    // .//EmersonTree.g:963:4: logicalANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression5159);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:964:3: ^( OR logicalORExpression logicalANDExpression )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpression5164); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpression_in_logicalORExpression5166);
        	        logicalORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression5170);
        	        logicalANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//EmersonTree.g:967:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) );
 */
static void
logicalORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:968:2: ( logicalANDExpressionNoIn | ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt59;

            alt59=2;


            {
                int LA59_0 = LA(1);
                if ( (((LA59_0 >= CALL) && (LA59_0 <= DOT)) || LA59_0 == NEW || LA59_0 == VECTOR || LA59_0 == DOLLAR_EXPRESSION || ((LA59_0 >= AND) && (LA59_0 <= INSTANCE_OF)) || ((LA59_0 >= LEFT_SHIFT) && (LA59_0 <= ARRAY_LITERAL)) || ((LA59_0 >= DELETE_OP) && (LA59_0 <= NOT)) || LA59_0 == FUNC_EXPR || ((LA59_0 >= PAREN) && (LA59_0 <= OBJECT_LITERAL)) || ((LA59_0 >= Identifier) && (LA59_0 <= NumericLiteral)) || LA59_0 == 209 || ((LA59_0 >= 211) && (LA59_0 <= 213))) ) 
                {
                    alt59=1;
                }
                else if ( (LA59_0 == OR) ) 
                {
                    alt59=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 59;
                    EXCEPTION->state        = 0;


                    goto rulelogicalORExpressionNoInEx;
                }
            }
            switch (alt59) 
            {
        	case 1:
        	    // .//EmersonTree.g:968:4: logicalANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5183);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:969:3: ^( OR logicalORExpressionNoIn logicalANDExpressionNoIn )
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_logicalORExpressionNoIn5188); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_logicalORExpressionNoIn5190);
        	        logicalORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" || ");
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn5192);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//EmersonTree.g:973:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) );
 */
static void
logicalANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:974:2: ( bitwiseORExpressionNoIn | ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt60;

            alt60=2;


            {
                int LA60_0 = LA(1);
                if ( (((LA60_0 >= CALL) && (LA60_0 <= DOT)) || LA60_0 == NEW || LA60_0 == VECTOR || LA60_0 == DOLLAR_EXPRESSION || ((LA60_0 >= BIT_OR) && (LA60_0 <= INSTANCE_OF)) || ((LA60_0 >= LEFT_SHIFT) && (LA60_0 <= ARRAY_LITERAL)) || ((LA60_0 >= DELETE_OP) && (LA60_0 <= NOT)) || LA60_0 == FUNC_EXPR || ((LA60_0 >= PAREN) && (LA60_0 <= OBJECT_LITERAL)) || ((LA60_0 >= Identifier) && (LA60_0 <= NumericLiteral)) || LA60_0 == 209 || ((LA60_0 >= 211) && (LA60_0 <= 213))) ) 
                {
                    alt60=1;
                }
                else if ( (LA60_0 == AND) ) 
                {
                    alt60=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 60;
                    EXCEPTION->state        = 0;


                    goto rulelogicalANDExpressionNoInEx;
                }
            }
            switch (alt60) 
            {
        	case 1:
        	    // .//EmersonTree.g:974:4: bitwiseORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5207);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:975:3: ^( AND logicalANDExpressionNoIn bitwiseORExpressionNoIn )
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_logicalANDExpressionNoIn5213); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalANDExpressionNoIn5215);
        	        logicalANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" && ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5219);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelogicalANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//EmersonTree.g:978:1: bitwiseORExpression : ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) );
 */
static void
bitwiseORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:979:2: ( bitwiseXORExpression | ^( BIT_OR bitwiseORExpression bitwiseXORExpression ) )
            
            ANTLR3_UINT32 alt61;

            alt61=2;


            {
                int LA61_0 = LA(1);
                if ( (((LA61_0 >= CALL) && (LA61_0 <= DOT)) || LA61_0 == NEW || LA61_0 == VECTOR || LA61_0 == DOLLAR_EXPRESSION || ((LA61_0 >= EXP) && (LA61_0 <= IN)) || ((LA61_0 >= LEFT_SHIFT) && (LA61_0 <= ARRAY_LITERAL)) || ((LA61_0 >= DELETE_OP) && (LA61_0 <= NOT)) || LA61_0 == FUNC_EXPR || ((LA61_0 >= PAREN) && (LA61_0 <= OBJECT_LITERAL)) || ((LA61_0 >= Identifier) && (LA61_0 <= NumericLiteral)) || LA61_0 == 209 || ((LA61_0 >= 211) && (LA61_0 <= 213))) ) 
                {
                    alt61=1;
                }
                else if ( (LA61_0 == BIT_OR) ) 
                {
                    alt61=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 61;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionEx;
                }
            }
            switch (alt61) 
            {
        	case 1:
        	    // .//EmersonTree.g:979:4: bitwiseXORExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5233);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:980:3: ^( BIT_OR bitwiseORExpression bitwiseXORExpression )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpression5239); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_bitwiseORExpression5241);
        	        bitwiseORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" | "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression5245);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//EmersonTree.g:983:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) );
 */
static void
bitwiseORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:984:2: ( bitwiseXORExpressionNoIn | ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )
            
            ANTLR3_UINT32 alt62;

            alt62=2;


            {
                int LA62_0 = LA(1);
                if ( (((LA62_0 >= CALL) && (LA62_0 <= DOT)) || LA62_0 == NEW || LA62_0 == VECTOR || LA62_0 == DOLLAR_EXPRESSION || ((LA62_0 >= EXP) && (LA62_0 <= INSTANCE_OF)) || ((LA62_0 >= LEFT_SHIFT) && (LA62_0 <= ARRAY_LITERAL)) || ((LA62_0 >= DELETE_OP) && (LA62_0 <= NOT)) || LA62_0 == FUNC_EXPR || ((LA62_0 >= PAREN) && (LA62_0 <= OBJECT_LITERAL)) || ((LA62_0 >= Identifier) && (LA62_0 <= NumericLiteral)) || LA62_0 == 209 || ((LA62_0 >= 211) && (LA62_0 <= 213))) ) 
                {
                    alt62=1;
                }
                else if ( (LA62_0 == BIT_OR) ) 
                {
                    alt62=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 62;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseORExpressionNoInEx;
                }
            }
            switch (alt62) 
            {
        	case 1:
        	    // .//EmersonTree.g:984:4: bitwiseXORExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5258);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:985:3: ^( BIT_OR bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_bitwiseORExpressionNoIn5265); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_bitwiseORExpressionNoIn5267);
        	        bitwiseORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" | ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5271);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//EmersonTree.g:988:1: bitwiseXORExpression : ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) );
 */
static void
bitwiseXORExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:989:1: ( bitwiseANDExpression | ^( EXP e= bitwiseXORExpression bitwiseANDExpression ) )
            
            ANTLR3_UINT32 alt63;

            alt63=2;


            {
                int LA63_0 = LA(1);
                if ( (((LA63_0 >= CALL) && (LA63_0 <= DOT)) || LA63_0 == NEW || LA63_0 == VECTOR || LA63_0 == DOLLAR_EXPRESSION || ((LA63_0 >= BIT_AND) && (LA63_0 <= IN)) || ((LA63_0 >= LEFT_SHIFT) && (LA63_0 <= ARRAY_LITERAL)) || ((LA63_0 >= DELETE_OP) && (LA63_0 <= NOT)) || LA63_0 == FUNC_EXPR || ((LA63_0 >= PAREN) && (LA63_0 <= OBJECT_LITERAL)) || ((LA63_0 >= Identifier) && (LA63_0 <= NumericLiteral)) || LA63_0 == 209 || ((LA63_0 >= 211) && (LA63_0 <= 213))) ) 
                {
                    alt63=1;
                }
                else if ( (LA63_0 == EXP) ) 
                {
                    alt63=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 63;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionEx;
                }
            }
            switch (alt63) 
            {
        	case 1:
        	    // .//EmersonTree.g:989:3: bitwiseANDExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5283);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:990:3: ^( EXP e= bitwiseXORExpression bitwiseANDExpression )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpression5290); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseXORExpression5294);
        	        bitwiseXORExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression5298);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//EmersonTree.g:993:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) );
 */
static void
bitwiseXORExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:994:2: ( bitwiseANDExpressionNoIn | ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )
            
            ANTLR3_UINT32 alt64;

            alt64=2;


            {
                int LA64_0 = LA(1);
                if ( (((LA64_0 >= CALL) && (LA64_0 <= DOT)) || LA64_0 == NEW || LA64_0 == VECTOR || LA64_0 == DOLLAR_EXPRESSION || ((LA64_0 >= BIT_AND) && (LA64_0 <= INSTANCE_OF)) || ((LA64_0 >= LEFT_SHIFT) && (LA64_0 <= ARRAY_LITERAL)) || ((LA64_0 >= DELETE_OP) && (LA64_0 <= NOT)) || LA64_0 == FUNC_EXPR || ((LA64_0 >= PAREN) && (LA64_0 <= OBJECT_LITERAL)) || ((LA64_0 >= Identifier) && (LA64_0 <= NumericLiteral)) || LA64_0 == 209 || ((LA64_0 >= 211) && (LA64_0 <= 213))) ) 
                {
                    alt64=1;
                }
                else if ( (LA64_0 == EXP) ) 
                {
                    alt64=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 64;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseXORExpressionNoInEx;
                }
            }
            switch (alt64) 
            {
        	case 1:
        	    // .//EmersonTree.g:994:4: bitwiseANDExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5310);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:995:3: ^( EXP e= bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
        	    {
        	         MATCHT(EXP, &FOLLOW_EXP_in_bitwiseXORExpressionNoIn5316); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseXORExpressionNoIn5320);
        	        bitwiseXORExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ^ ");
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5323);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseXORExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//EmersonTree.g:998:1: bitwiseANDExpression : ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) );
 */
static void
bitwiseANDExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:999:2: ( equalityExpression | ^( BIT_AND e= bitwiseANDExpression equalityExpression ) )
            
            ANTLR3_UINT32 alt65;

            alt65=2;


            {
                int LA65_0 = LA(1);
                if ( (((LA65_0 >= CALL) && (LA65_0 <= DOT)) || LA65_0 == NEW || LA65_0 == VECTOR || LA65_0 == DOLLAR_EXPRESSION || ((LA65_0 >= EQUALS) && (LA65_0 <= IN)) || ((LA65_0 >= LEFT_SHIFT) && (LA65_0 <= ARRAY_LITERAL)) || ((LA65_0 >= DELETE_OP) && (LA65_0 <= NOT)) || LA65_0 == FUNC_EXPR || ((LA65_0 >= PAREN) && (LA65_0 <= OBJECT_LITERAL)) || ((LA65_0 >= Identifier) && (LA65_0 <= NumericLiteral)) || LA65_0 == 209 || ((LA65_0 >= 211) && (LA65_0 <= 213))) ) 
                {
                    alt65=1;
                }
                else if ( (LA65_0 == BIT_AND) ) 
                {
                    alt65=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 65;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionEx;
                }
            }
            switch (alt65) 
            {
        	case 1:
        	    // .//EmersonTree.g:999:4: equalityExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression5337);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1000:4: ^( BIT_AND e= bitwiseANDExpression equalityExpression )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpression5343); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseANDExpression5347);
        	        bitwiseANDExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression5351);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//EmersonTree.g:1003:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) );
 */
static void
bitwiseANDExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1004:2: ( equalityExpressionNoIn | ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn ) )
            
            ANTLR3_UINT32 alt66;

            alt66=2;


            {
                int LA66_0 = LA(1);
                if ( (((LA66_0 >= CALL) && (LA66_0 <= DOT)) || LA66_0 == NEW || LA66_0 == VECTOR || LA66_0 == DOLLAR_EXPRESSION || ((LA66_0 >= EQUALS) && (LA66_0 <= INSTANCE_OF)) || ((LA66_0 >= LEFT_SHIFT) && (LA66_0 <= ARRAY_LITERAL)) || ((LA66_0 >= DELETE_OP) && (LA66_0 <= NOT)) || LA66_0 == FUNC_EXPR || ((LA66_0 >= PAREN) && (LA66_0 <= OBJECT_LITERAL)) || ((LA66_0 >= Identifier) && (LA66_0 <= NumericLiteral)) || LA66_0 == 209 || ((LA66_0 >= 211) && (LA66_0 <= 213))) ) 
                {
                    alt66=1;
                }
                else if ( (LA66_0 == BIT_AND) ) 
                {
                    alt66=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 66;
                    EXCEPTION->state        = 0;


                    goto rulebitwiseANDExpressionNoInEx;
                }
            }
            switch (alt66) 
            {
        	case 1:
        	    // .//EmersonTree.g:1004:4: equalityExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5365);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1005:4: ^( BIT_AND e= bitwiseANDExpressionNoIn equalityExpressionNoIn )
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_bitwiseANDExpressionNoIn5372); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseANDExpressionNoIn5376);
        	        bitwiseANDExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" & ");
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5380);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitwiseANDExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//EmersonTree.g:1008:1: equalityExpression : ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) );
 */
static void
equalityExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1009:2: ( relationalExpression | ^( EQUALS e= equalityExpression relationalExpression ) | ^( NOT_EQUALS e= equalityExpression relationalExpression ) | ^( IDENT e= equalityExpression relationalExpression ) | ^( NOT_IDENT e= equalityExpression relationalExpression ) )
            
            ANTLR3_UINT32 alt67;

            alt67=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case IN:
            case LEFT_SHIFT:
            case RIGHT_SHIFT:
            case TRIPLE_SHIFT:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case OBJECT_LITERAL:
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 209:
            case 211:
            case 212:
            case 213:
            	{
            		alt67=1;
            	}
                break;
            case EQUALS:
            	{
            		alt67=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt67=3;
            	}
                break;
            case IDENT:
            	{
            		alt67=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt67=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 67;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionEx;
            }

            switch (alt67) 
            {
        	case 1:
        	    // .//EmersonTree.g:1009:4: relationalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression5393);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1010:4: ^( EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpression5399); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression5403);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" == ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression5407);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1011:4: ^( NOT_EQUALS e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpression5414); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression5418);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" != ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression5422);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1012:4: ^( IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpression5429); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression5433);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" === ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression5437);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1013:4: ^( NOT_IDENT e= equalityExpression relationalExpression )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpression5444); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpression_in_equalityExpression5448);
        	        equalityExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP(" !== ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression5452);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//EmersonTree.g:1016:1: equalityExpressionNoIn : ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) );
 */
static void
equalityExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1017:1: ( relationalExpressionNoIn | ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn ) | ^( IDENT equalityExpressionNoIn relationalExpressionNoIn ) | ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn ) )
            
            ANTLR3_UINT32 alt68;

            alt68=5;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case LESS_THAN:
            case GREATER_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN_EQUAL:
            case INSTANCE_OF:
            case LEFT_SHIFT:
            case RIGHT_SHIFT:
            case TRIPLE_SHIFT:
            case ADD_OP:
            case SUB:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case OBJECT_LITERAL:
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 209:
            case 211:
            case 212:
            case 213:
            	{
            		alt68=1;
            	}
                break;
            case EQUALS:
            	{
            		alt68=2;
            	}
                break;
            case NOT_EQUALS:
            	{
            		alt68=3;
            	}
                break;
            case IDENT:
            	{
            		alt68=4;
            	}
                break;
            case NOT_IDENT:
            	{
            		alt68=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 68;
                EXCEPTION->state        = 0;


                goto ruleequalityExpressionNoInEx;
            }

            switch (alt68) 
            {
        	case 1:
        	    // .//EmersonTree.g:1017:3: relationalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5462);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1018:3: ^( EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(EQUALS, &FOLLOW_EQUALS_in_equalityExpressionNoIn5468); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5470);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" == ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5474);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1019:3: ^( NOT_EQUALS equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_EQUALS, &FOLLOW_NOT_EQUALS_in_equalityExpressionNoIn5481); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5483);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP(" != ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5487);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1020:3: ^( IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(IDENT, &FOLLOW_IDENT_in_equalityExpressionNoIn5494); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5496);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" === "); 
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5500);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1021:3: ^( NOT_IDENT equalityExpressionNoIn relationalExpressionNoIn )
        	    {
        	         MATCHT(NOT_IDENT, &FOLLOW_NOT_IDENT_in_equalityExpressionNoIn5507); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_equalityExpressionNoIn5509);
        	        equalityExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" !== ");
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5513);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//EmersonTree.g:1026:1: relationalOps : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN );
 */
static void
relationalOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1027:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF | IN )
            
            ANTLR3_UINT32 alt69;

            alt69=6;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt69=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt69=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt69=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt69=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt69=5;
            	}
                break;
            case IN:
            	{
            		alt69=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 69;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt69) 
            {
        	case 1:
        	    // .//EmersonTree.g:1027:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOps5526); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               	(SCOPE_TOP(relationalExpression))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1028:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOps5532); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">" ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1029:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOps5538); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "<=" ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1030:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOps5545); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpression))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1031:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOps5551); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "instanceOf" ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1032:3: IN
        	    {
        	         MATCHT(IN, &FOLLOW_IN_in_relationalOps5557); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(relationalExpression))->op= "in" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//EmersonTree.g:1035:1: relationalExpression : ( shiftExpression | ^( relationalOps e= relationalExpression shiftExpression ) );
 */
static void
relationalExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionTop = pEmersonTree_relationalExpressionPush(ctx);
    {
        {
            //  .//EmersonTree.g:1041:2: ( shiftExpression | ^( relationalOps e= relationalExpression shiftExpression ) )
            
            ANTLR3_UINT32 alt70;

            alt70=2;


            {
                int LA70_0 = LA(1);
                if ( (((LA70_0 >= CALL) && (LA70_0 <= DOT)) || LA70_0 == NEW || LA70_0 == VECTOR || LA70_0 == DOLLAR_EXPRESSION || ((LA70_0 >= LEFT_SHIFT) && (LA70_0 <= ARRAY_LITERAL)) || ((LA70_0 >= DELETE_OP) && (LA70_0 <= NOT)) || LA70_0 == FUNC_EXPR || ((LA70_0 >= PAREN) && (LA70_0 <= OBJECT_LITERAL)) || ((LA70_0 >= Identifier) && (LA70_0 <= NumericLiteral)) || LA70_0 == 209 || ((LA70_0 >= 211) && (LA70_0 <= 213))) ) 
                {
                    alt70=1;
                }
                else if ( (((LA70_0 >= LESS_THAN) && (LA70_0 <= IN))) ) 
                {
                    alt70=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 70;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionEx;
                }
            }
            switch (alt70) 
            {
        	case 1:
        	    // .//EmersonTree.g:1041:4: shiftExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression5575);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1043:2: ^( relationalOps e= relationalExpression shiftExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression5589);
        	        relationalOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpression_in_relationalExpression5598);
        	        relationalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            				  APP(" ");
        	            				  APP(	(SCOPE_TOP(relationalExpression))->op );
        	            				  APP(" ");
        	            				
        	        }
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression5610);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    pEmersonTree_relationalExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//EmersonTree.g:1055:1: relationalOpsNoIn : ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF );
 */
static void
relationalOpsNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1056:1: ( LESS_THAN | GREATER_THAN | LESS_THAN_EQUAL | GREATER_THAN_EQUAL | INSTANCE_OF )
            
            ANTLR3_UINT32 alt71;

            alt71=5;

            switch ( LA(1) ) 
            {
            case LESS_THAN:
            	{
            		alt71=1;
            	}
                break;
            case GREATER_THAN:
            	{
            		alt71=2;
            	}
                break;
            case LESS_THAN_EQUAL:
            	{
            		alt71=3;
            	}
                break;
            case GREATER_THAN_EQUAL:
            	{
            		alt71=4;
            	}
                break;
            case INSTANCE_OF:
            	{
            		alt71=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 71;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt71) 
            {
        	case 1:
        	    // .//EmersonTree.g:1056:3: LESS_THAN
        	    {
        	         MATCHT(LESS_THAN, &FOLLOW_LESS_THAN_in_relationalOpsNoIn5626); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              	(SCOPE_TOP(relationalExpressionNoIn))->op= "<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1057:3: GREATER_THAN
        	    {
        	         MATCHT(GREATER_THAN, &FOLLOW_GREATER_THAN_in_relationalOpsNoIn5632); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">"; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1058:3: LESS_THAN_EQUAL
        	    {
        	         MATCHT(LESS_THAN_EQUAL, &FOLLOW_LESS_THAN_EQUAL_in_relationalOpsNoIn5638); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "<= " ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1059:3: GREATER_THAN_EQUAL
        	    {
        	         MATCHT(GREATER_THAN_EQUAL, &FOLLOW_GREATER_THAN_EQUAL_in_relationalOpsNoIn5644); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= ">=" ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1060:3: INSTANCE_OF
        	    {
        	         MATCHT(INSTANCE_OF, &FOLLOW_INSTANCE_OF_in_relationalOpsNoIn5650); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(relationalExpressionNoIn))->op= "instanceOf" ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//EmersonTree.g:1063:1: relationalExpressionNoIn : ( shiftExpression | ^( relationalOpsNoIn relationalExpressionNoIn shiftExpression ) );
 */
static void
relationalExpressionNoIn(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_relationalExpressionNoInTop = pEmersonTree_relationalExpressionNoInPush(ctx);
    {
        {
            //  .//EmersonTree.g:1069:2: ( shiftExpression | ^( relationalOpsNoIn relationalExpressionNoIn shiftExpression ) )
            
            ANTLR3_UINT32 alt72;

            alt72=2;


            {
                int LA72_0 = LA(1);
                if ( (((LA72_0 >= CALL) && (LA72_0 <= DOT)) || LA72_0 == NEW || LA72_0 == VECTOR || LA72_0 == DOLLAR_EXPRESSION || ((LA72_0 >= LEFT_SHIFT) && (LA72_0 <= ARRAY_LITERAL)) || ((LA72_0 >= DELETE_OP) && (LA72_0 <= NOT)) || LA72_0 == FUNC_EXPR || ((LA72_0 >= PAREN) && (LA72_0 <= OBJECT_LITERAL)) || ((LA72_0 >= Identifier) && (LA72_0 <= NumericLiteral)) || LA72_0 == 209 || ((LA72_0 >= 211) && (LA72_0 <= 213))) ) 
                {
                    alt72=1;
                }
                else if ( (((LA72_0 >= LESS_THAN) && (LA72_0 <= INSTANCE_OF))) ) 
                {
                    alt72=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_relationalExpressionNoInPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 72;
                    EXCEPTION->state        = 0;


                    goto rulerelationalExpressionNoInEx;
                }
            }
            switch (alt72) 
            {
        	case 1:
        	    // .//EmersonTree.g:1069:4: shiftExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn5670);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1070:5: ^( relationalOpsNoIn relationalExpressionNoIn shiftExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5685);
        	        relationalOpsNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_relationalExpressionNoIn5693);
        	        relationalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ");
        	            						  APP(	(SCOPE_TOP(relationalExpressionNoIn))->op);
        	            						  APP(" ");
        	            						
        	        }
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn5709);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_relationalExpressionNoInPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    pEmersonTree_relationalExpressionNoInPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start shiftOps
 * .//EmersonTree.g:1083:1: shiftOps : ( LEFT_SHIFT | RIGHT_SHIFT | TRIPLE_SHIFT );
 */
static void
shiftOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1084:1: ( LEFT_SHIFT | RIGHT_SHIFT | TRIPLE_SHIFT )
            
            ANTLR3_UINT32 alt73;

            alt73=3;

            switch ( LA(1) ) 
            {
            case LEFT_SHIFT:
            	{
            		alt73=1;
            	}
                break;
            case RIGHT_SHIFT:
            	{
            		alt73=2;
            	}
                break;
            case TRIPLE_SHIFT:
            	{
            		alt73=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 73;
                EXCEPTION->state        = 0;


                goto ruleshiftOpsEx;
            }

            switch (alt73) 
            {
        	case 1:
        	    // .//EmersonTree.g:1084:3: LEFT_SHIFT
        	    {
        	         MATCHT(LEFT_SHIFT, &FOLLOW_LEFT_SHIFT_in_shiftOps5730); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            	(SCOPE_TOP(shiftExpression))->op= "<<" ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1085:3: RIGHT_SHIFT
        	    {
        	         MATCHT(RIGHT_SHIFT, &FOLLOW_RIGHT_SHIFT_in_shiftOps5737); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(shiftExpression))->op= ">>" ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1086:3: TRIPLE_SHIFT
        	    {
        	         MATCHT(TRIPLE_SHIFT, &FOLLOW_TRIPLE_SHIFT_in_shiftOps5744); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             	(SCOPE_TOP(shiftExpression))->op= ">>>"; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftOpsEx; /* Prevent compiler warnings */
    ruleshiftOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end shiftOps */

/** 
 * $ANTLR start shiftExpression
 * .//EmersonTree.g:1089:1: shiftExpression : ( additiveExpression | ^( shiftOps e= shiftExpression additiveExpression ) );
 */
static void
shiftExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */

    ctx->pEmersonTree_shiftExpressionTop = pEmersonTree_shiftExpressionPush(ctx);
    {
        {
            //  .//EmersonTree.g:1094:2: ( additiveExpression | ^( shiftOps e= shiftExpression additiveExpression ) )
            
            ANTLR3_UINT32 alt74;

            alt74=2;


            {
                int LA74_0 = LA(1);
                if ( (((LA74_0 >= CALL) && (LA74_0 <= DOT)) || LA74_0 == NEW || LA74_0 == VECTOR || LA74_0 == DOLLAR_EXPRESSION || ((LA74_0 >= ADD_OP) && (LA74_0 <= ARRAY_LITERAL)) || ((LA74_0 >= DELETE_OP) && (LA74_0 <= NOT)) || LA74_0 == FUNC_EXPR || ((LA74_0 >= PAREN) && (LA74_0 <= OBJECT_LITERAL)) || ((LA74_0 >= Identifier) && (LA74_0 <= NumericLiteral)) || LA74_0 == 209 || ((LA74_0 >= 211) && (LA74_0 <= 213))) ) 
                {
                    alt74=1;
                }
                else if ( (((LA74_0 >= LEFT_SHIFT) && (LA74_0 <= TRIPLE_SHIFT))) ) 
                {
                    alt74=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        pEmersonTree_shiftExpressionPop(ctx);

                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 74;
                    EXCEPTION->state        = 0;


                    goto ruleshiftExpressionEx;
                }
            }
            switch (alt74) 
            {
        	case 1:
        	    // .//EmersonTree.g:1094:4: additiveExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression5760);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1095:4: ^( shiftOps e= shiftExpression additiveExpression )
        	    {
        	        FOLLOWPUSH(FOLLOW_shiftOps_in_shiftExpression5766);
        	        shiftOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_shiftExpression_in_shiftExpression5776);
        	        shiftExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            						  APP(" ");
        	            						  APP(	(SCOPE_TOP(shiftExpression))->op);
        	            						  APP(" ");
        	            						
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression5792);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pEmersonTree_shiftExpressionPop(ctx);

        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftExpressionEx; /* Prevent compiler warnings */
    ruleshiftExpressionEx: ;
    pEmersonTree_shiftExpressionPop(ctx);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end shiftExpression */

/** 
 * $ANTLR start additiveExpression
 * .//EmersonTree.g:1108:1: additiveExpression : ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) );
 */
static void
additiveExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1109:9: ( multiplicativeExpression | ^( ADD_OP e1= additiveExpression multiplicativeExpression ) | ^( SUB e1= additiveExpression multiplicativeExpression ) )
            
            ANTLR3_UINT32 alt75;

            alt75=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case MULT:
            case DIV:
            case MOD:
            case ARRAY_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case OBJECT_LITERAL:
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 209:
            case 211:
            case 212:
            case 213:
            	{
            		alt75=1;
            	}
                break;
            case ADD_OP:
            	{
            		alt75=2;
            	}
                break;
            case SUB:
            	{
            		alt75=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 75;
                EXCEPTION->state        = 0;


                goto ruleadditiveExpressionEx;
            }

            switch (alt75) 
            {
        	case 1:
        	    // .//EmersonTree.g:1109:11: multiplicativeExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression5820);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1110:11: ^( ADD_OP e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(ADD_OP, &FOLLOW_ADD_OP_in_additiveExpression5833); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.plus( " );
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression5866);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression5896);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP( " ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1123:11: ^( SUB e1= additiveExpression multiplicativeExpression )
        	    {
        	         MATCHT(SUB, &FOLLOW_SUB_in_additiveExpression5939); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP("  util.minus( " );
        	                        
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_additiveExpression5970);
        	        additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" , ");
        	                         
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression6001);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                            APP(" ) ");
        	                         
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadditiveExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multiplicativeExpression
 * .//EmersonTree.g:1139:1: multiplicativeExpression : ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) );
 */
static void
multiplicativeExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1151:2: ( unaryExpression | ^( MULT multiplicativeExpression unaryExpression ) | ^( DIV multiplicativeExpression unaryExpression ) | ^( MOD multiplicativeExpression unaryExpression ) )
            
            ANTLR3_UINT32 alt76;

            alt76=4;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case DELETE_OP:
            case VOID:
            case TYPEOF:
            case PLUSPLUS:
            case MINUSMINUS:
            case UNARY_PLUS:
            case UNARY_MINUS:
            case COMPLEMENT:
            case NOT:
            case FUNC_EXPR:
            case PAREN:
            case OBJECT_LITERAL:
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 209:
            case 211:
            case 212:
            case 213:
            	{
            		alt76=1;
            	}
                break;
            case MULT:
            	{
            		alt76=2;
            	}
                break;
            case DIV:
            	{
            		alt76=3;
            	}
                break;
            case MOD:
            	{
            		alt76=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 76;
                EXCEPTION->state        = 0;


                goto rulemultiplicativeExpressionEx;
            }

            switch (alt76) 
            {
        	case 1:
        	    // .//EmersonTree.g:1151:4: unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression6046);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1152:4: ^( MULT multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MULT, &FOLLOW_MULT_in_multiplicativeExpression6053); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression6061);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            					  APP(" * ");
        	            					 
        	            					
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression6077);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1160:4: ^( DIV multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(DIV, &FOLLOW_DIV_in_multiplicativeExpression6090); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression6092);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" / ");
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression6096);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1161:4: ^( MOD multiplicativeExpression unaryExpression )
        	    {
        	         MATCHT(MOD, &FOLLOW_MOD_in_multiplicativeExpression6103); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_multiplicativeExpression6105);
        	        multiplicativeExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" % ");
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression6109);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicativeExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start unaryOps
 * .//EmersonTree.g:1164:1: unaryOps : ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT );
 */
static void
unaryOps(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1165:1: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT )
        // .//EmersonTree.g:
        {
            if ( ((LA(1) >= DELETE_OP) && (LA(1) <= NOT)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unaryOps0);    goto ruleunaryOpsEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//EmersonTree.g:1177:1: unaryExpression : ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) );
 */
static void
unaryExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1178:9: ( postfixExpression | ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression ) )
            
            ANTLR3_UINT32 alt78;

            alt78=2;

            alt78 = cdfa78.predict(ctx, RECOGNIZER, ISTREAM, &cdfa78);
            if  (HASEXCEPTION())
            {
                goto ruleunaryExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt78) 
            {
        	case 1:
        	    // .//EmersonTree.g:1178:11: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression6171);
        	        postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1179:4: ^( ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT ) unaryExpression )
        	    {

        	        // .//EmersonTree.g:1181:6: ( DELETE_OP | VOID | TYPEOF | PLUSPLUS | MINUSMINUS | UNARY_PLUS | UNARY_MINUS | COMPLEMENT | NOT )
        	        {
        	            int alt77=9;
        	            switch ( LA(1) ) 
        	            {
        	            case DELETE_OP:
        	            	{
        	            		alt77=1;
        	            	}
        	                break;
        	            case VOID:
        	            	{
        	            		alt77=2;
        	            	}
        	                break;
        	            case TYPEOF:
        	            	{
        	            		alt77=3;
        	            	}
        	                break;
        	            case PLUSPLUS:
        	            	{
        	            		alt77=4;
        	            	}
        	                break;
        	            case MINUSMINUS:
        	            	{
        	            		alt77=5;
        	            	}
        	                break;
        	            case UNARY_PLUS:
        	            	{
        	            		alt77=6;
        	            	}
        	                break;
        	            case UNARY_MINUS:
        	            	{
        	            		alt77=7;
        	            	}
        	                break;
        	            case COMPLEMENT:
        	            	{
        	            		alt77=8;
        	            	}
        	                break;
        	            case NOT:
        	            	{
        	            		alt77=9;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE; 
        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 77;
        	                EXCEPTION->state        = 0;


        	                goto ruleunaryExpressionEx;
        	            }

        	            switch (alt77) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1182:8: DELETE_OP
        	        	    {
        	        	         MATCHT(DELETE_OP, &FOLLOW_DELETE_OP_in_unaryExpression6195); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("delete ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//EmersonTree.g:1183:10: VOID
        	        	    {
        	        	         MATCHT(VOID, &FOLLOW_VOID_in_unaryExpression6217); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	               APP("void");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // .//EmersonTree.g:1184:10: TYPEOF
        	        	    {
        	        	         MATCHT(TYPEOF, &FOLLOW_TYPEOF_in_unaryExpression6239); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("typeof ");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // .//EmersonTree.g:1185:10: PLUSPLUS
        	        	    {
        	        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_unaryExpression6259); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("++");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // .//EmersonTree.g:1186:10: MINUSMINUS
        	        	    {
        	        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_unaryExpression6277); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("--");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // .//EmersonTree.g:1187:10: UNARY_PLUS
        	        	    {
        	        	         MATCHT(UNARY_PLUS, &FOLLOW_UNARY_PLUS_in_unaryExpression6293); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("+");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // .//EmersonTree.g:1188:10: UNARY_MINUS
        	        	    {
        	        	         MATCHT(UNARY_MINUS, &FOLLOW_UNARY_MINUS_in_unaryExpression6309); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("-");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // .//EmersonTree.g:1189:10: COMPLEMENT
        	        	    {
        	        	         MATCHT(COMPLEMENT, &FOLLOW_COMPLEMENT_in_unaryExpression6324); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("~");
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // .//EmersonTree.g:1190:10: NOT
        	        	    {
        	        	         MATCHT(NOT, &FOLLOW_NOT_in_unaryExpression6340); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	              APP("!");
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression6369);
        	        unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start postfixExpression
 * .//EmersonTree.g:1199:1: postfixExpression : ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) );
 */
static void
postfixExpression(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1200:9: ( leftHandSideExpression | ^( MINUSMINUS leftHandSideExpression ) | ^( PLUSPLUS leftHandSideExpression ) )
            
            ANTLR3_UINT32 alt79;

            alt79=3;

            switch ( LA(1) ) 
            {
            case CALL:
            case ARRAY_INDEX:
            case DOT:
            case NEW:
            case VECTOR:
            case DOLLAR_EXPRESSION:
            case ARRAY_LITERAL:
            case FUNC_EXPR:
            case PAREN:
            case OBJECT_LITERAL:
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 209:
            case 211:
            case 212:
            case 213:
            	{
            		alt79=1;
            	}
                break;
            case MINUSMINUS:
            	{
            		alt79=2;
            	}
                break;
            case PLUSPLUS:
            	{
            		alt79=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 79;
                EXCEPTION->state        = 0;


                goto rulepostfixExpressionEx;
            }

            switch (alt79) 
            {
        	case 1:
        	    // .//EmersonTree.g:1200:10: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression6394);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1201:11: ^( MINUSMINUS leftHandSideExpression )
        	    {
        	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_postfixExpression6407); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression6409);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("--");
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1202:4: ^( PLUSPLUS leftHandSideExpression )
        	    {
        	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_postfixExpression6418); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression6420);
        	        leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("++");
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start primaryExpression
 * .//EmersonTree.g:1205:1: primaryExpression : ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | ^( PAREN expression ) | vectorLiteral );
 */
static void
primaryExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier11;

    /* Initialize rule variables
     */


    Identifier11       = NULL;

    {
        {
            //  .//EmersonTree.g:1206:2: ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | ^( PAREN expression ) | vectorLiteral )
            
            ANTLR3_UINT32 alt80;

            alt80=8;

            switch ( LA(1) ) 
            {
            case 209:
            	{
            		alt80=1;
            	}
                break;
            case Identifier:
            	{
            		alt80=2;
            	}
                break;
            case DOLLAR_EXPRESSION:
            	{
            		alt80=3;
            	}
                break;
            case StringLiteral:
            case NumericLiteral:
            case 211:
            case 212:
            case 213:
            	{
            		alt80=4;
            	}
                break;
            case ARRAY_LITERAL:
            	{
            		alt80=5;
            	}
                break;
            case OBJECT_LITERAL:
            	{
            		alt80=6;
            	}
                break;
            case PAREN:
            	{
            		alt80=7;
            	}
                break;
            case VECTOR:
            	{
            		alt80=8;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 80;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt80) 
            {
        	case 1:
        	    // .//EmersonTree.g:1206:4: 'this'
        	    {
        	         MATCHT(209, &FOLLOW_209_in_primaryExpression6441); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("this");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1207:4: Identifier
        	    {
        	        Identifier11 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression6448); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             
        	                        APP((const char*)(Identifier11->getText(Identifier11))->chars);
        	            	  
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1211:7: dollarExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression6462);
        	        dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1212:7: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression6470);
        	        literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1213:7: arrayLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression6478);
        	        arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // .//EmersonTree.g:1214:7: objectLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression6486);
        	        objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // .//EmersonTree.g:1215:7: ^( PAREN expression )
        	    {
        	         MATCHT(PAREN, &FOLLOW_PAREN_in_primaryExpression6495); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("( "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression6499);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" )");
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // .//EmersonTree.g:1216:7: vectorLiteral
        	    {
        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression6510);
        	        vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//EmersonTree.g:1221:1: vectorLiteral : ^( VECTOR (exp1= assignmentExpression ) (exp2= assignmentExpression ) (exp3= assignmentExpression ) ) ;
 */
static void
vectorLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        // .//EmersonTree.g:1222:9: ( ^( VECTOR (exp1= assignmentExpression ) (exp2= assignmentExpression ) (exp3= assignmentExpression ) ) )
        // .//EmersonTree.g:1222:11: ^( VECTOR (exp1= assignmentExpression ) (exp2= assignmentExpression ) (exp3= assignmentExpression ) )
        {
             MATCHT(VECTOR, &FOLLOW_VECTOR_in_vectorLiteral6531); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                APP(" new util.Vec3(");
                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // .//EmersonTree.g:1226:13: (exp1= assignmentExpression )
            // .//EmersonTree.g:1226:14: exp1= assignmentExpression
            {
                FOLLOWPUSH(FOLLOW_assignmentExpression_in_vectorLiteral6562);
                assignmentExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1231:13: (exp2= assignmentExpression )
            // .//EmersonTree.g:1231:14: exp2= assignmentExpression
            {
                FOLLOWPUSH(FOLLOW_assignmentExpression_in_vectorLiteral6609);
                assignmentExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(",");
                                  
                }

            }

            // .//EmersonTree.g:1236:13: (exp3= assignmentExpression )
            // .//EmersonTree.g:1236:14: exp3= assignmentExpression
            {
                FOLLOWPUSH(FOLLOW_assignmentExpression_in_vectorLiteral6656);
                assignmentExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulevectorLiteralEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                if ( BACKTRACKING==0 ) 
                {

                                      APP(")");
                                  
                }

            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start dollarExpression
 * .//EmersonTree.g:1246:1: dollarExpression : ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static void
dollarExpression(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier12;

    /* Initialize rule variables
     */


    Identifier12       = NULL;

    {
        // .//EmersonTree.g:1247:9: ( ^( DOLLAR_EXPRESSION Identifier ) )
        // .//EmersonTree.g:1247:11: ^( DOLLAR_EXPRESSION Identifier )
        {
             MATCHT(DOLLAR_EXPRESSION, &FOLLOW_DOLLAR_EXPRESSION_in_dollarExpression6742); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {

                                if (insideWhenPred)
                                    APP("'),");

                            
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            Identifier12 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression6770); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                                APP((const char*)(Identifier12->getText(Identifier12))->chars);

                                if (insideWhenPred)
                                   APP(",util.create_quoted('");

                            
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//EmersonTree.g:1267:1: arrayLiteral : ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( assignmentExpression ) ) | ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) );
 */
static void
arrayLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1268:3: ( ^( ARRAY_LITERAL ) | ^( ARRAY_LITERAL ( assignmentExpression ) ) | ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt82;

            alt82=3;


            {
                int LA82_0 = LA(1);
                if ( (LA82_0 == ARRAY_LITERAL) ) 
                {

                    {
                        int LA82_1 = LA(2);
                        if ( (synpred177_EmersonTree(ctx)) ) 
                        {
                            alt82=1;
                        }
                        else if ( (synpred178_EmersonTree(ctx)) ) 
                        {
                            alt82=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt82=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 82;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 82;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt82) 
            {
        	case 1:
        	    // .//EmersonTree.g:1268:5: ^( ARRAY_LITERAL )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral6835); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP("[ ]"); 
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1269:5: ^( ARRAY_LITERAL ( assignmentExpression ) )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral6845); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP("[ "); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1271:9: ( assignmentExpression )
        	        // .//EmersonTree.g:1271:10: assignmentExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral6867);
        	            assignmentExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
        	             APP(" ]"); 
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1275:5: ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	    {
        	         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_arrayLiteral6894); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP("[ ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral6914);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1280:9: ( assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt81=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA81_0 = LA(1);
        	                if ( (((LA81_0 >= ASSIGN) && (LA81_0 <= SUB_ASSIGN)) || ((LA81_0 >= RIGHT_SHIFT_ASSIGN) && (LA81_0 <= OR_ASSIGN)) || LA81_0 == COND_EXPR || LA81_0 == LEFT_SHIFT_ASSIG) ) 
        	                {
        	                    alt81=1;
        	                }

        	            }
        	            switch (alt81) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1281:13: assignmentExpression
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                            APP(", ");
        	        	                        
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral6952);
        	        	        assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop81;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop81: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" ] ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//EmersonTree.g:1295:1: objectLiteral : ( ^( OBJECT_LITERAL ) | ^( OBJECT_LITERAL ( objectLiteralInternal ) ) | ^( OBJECT_LITERAL objectLiteralInternal ( objectLiteralInternal )* ) );
 */
static void
objectLiteral(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  .//EmersonTree.g:1296:4: ( ^( OBJECT_LITERAL ) | ^( OBJECT_LITERAL ( objectLiteralInternal ) ) | ^( OBJECT_LITERAL objectLiteralInternal ( objectLiteralInternal )* ) )
            
            ANTLR3_UINT32 alt84;

            alt84=3;


            {
                int LA84_0 = LA(1);
                if ( (LA84_0 == OBJECT_LITERAL) ) 
                {

                    {
                        int LA84_1 = LA(2);
                        if ( (synpred180_EmersonTree(ctx)) ) 
                        {
                            alt84=1;
                        }
                        else if ( (synpred181_EmersonTree(ctx)) ) 
                        {
                            alt84=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt84=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return ;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 84;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return ;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 84;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt84) 
            {
        	case 1:
        	    // .//EmersonTree.g:1296:6: ^( OBJECT_LITERAL )
        	    {
        	         MATCHT(OBJECT_LITERAL, &FOLLOW_OBJECT_LITERAL_in_objectLiteral7006); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" { }");
        	                   
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1301:6: ^( OBJECT_LITERAL ( objectLiteralInternal ) )
        	    {
        	         MATCHT(OBJECT_LITERAL, &FOLLOW_OBJECT_LITERAL_in_objectLiteral7033); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" { ");
        	                   
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // .//EmersonTree.g:1305:8: ( objectLiteralInternal )
        	        // .//EmersonTree.g:1305:9: objectLiteralInternal
        	        {
        	            FOLLOWPUSH(FOLLOW_objectLiteralInternal_in_objectLiteral7052);
        	            objectLiteralInternal(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" } ");
        	                   
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1310:6: ^( OBJECT_LITERAL objectLiteralInternal ( objectLiteralInternal )* )
        	    {
        	         MATCHT(OBJECT_LITERAL, &FOLLOW_OBJECT_LITERAL_in_objectLiteral7078); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                        APP(" { ");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_objectLiteralInternal_in_objectLiteral7098);
        	        objectLiteralInternal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//EmersonTree.g:1315:9: ( objectLiteralInternal )*

        	        for (;;)
        	        {
        	            int alt83=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA83_0 = LA(1);
        	                if ( (LA83_0 == OBJECT_LITERAL_INTERNAL) ) 
        	                {
        	                    alt83=1;
        	                }

        	            }
        	            switch (alt83) 
        	            {
        	        	case 1:
        	        	    // .//EmersonTree.g:1316:13: objectLiteralInternal
        	        	    {
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {

        	        	                            APP(",");
        	        	                        
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_objectLiteralInternal_in_objectLiteral7136);
        	        	        objectLiteralInternal(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop83;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop83: ; /* Jump out to here if this rule does not match */

        	        if ( BACKTRACKING==0 ) 
        	        {

        	                       APP(" }");
        	                    
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start objectLiteralInternal
 * .//EmersonTree.g:1329:1: objectLiteralInternal : ^( OBJECT_LITERAL_INTERNAL name= expression (val= expression )? ) ;
 */
static void
objectLiteralInternal(pEmersonTree ctx)
{   
    /* Initialize rule variables
     */



            bool hasValue = false;
        
    {
        // .//EmersonTree.g:1334:5: ( ^( OBJECT_LITERAL_INTERNAL name= expression (val= expression )? ) )
        // .//EmersonTree.g:1334:7: ^( OBJECT_LITERAL_INTERNAL name= expression (val= expression )? )
        {
             MATCHT(OBJECT_LITERAL_INTERNAL, &FOLLOW_OBJECT_LITERAL_INTERNAL_in_objectLiteralInternal7206); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectLiteralInternalEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectLiteralInternalEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expression_in_objectLiteralInternal7218);
            expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobjectLiteralInternalEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // .//EmersonTree.g:1336:9: (val= expression )?
            {
                int alt85=2;
                {
                    int LA85_0 = LA(1);
                    if ( (LA85_0 == EXPR_LIST) ) 
                    {
                        alt85=1;
                    }
                }
                switch (alt85) 
                {
            	case 1:
            	    // .//EmersonTree.g:1337:13: val= expression
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {

            	                            APP(" : " );
            	                            hasValue = true;
            	                        
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_objectLiteralInternal7258);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobjectLiteralInternalEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }
            if ( BACKTRACKING==0 ) 
            {

                            if (! hasValue)
                            {
                                APP(": system.PATTERN_TOKEN");
                            }
                        
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleobjectLiteralInternalEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralInternalEx; /* Prevent compiler warnings */
    ruleobjectLiteralInternalEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end objectLiteralInternal */

/** 
 * $ANTLR start propertyName
 * .//EmersonTree.g:1355:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static void
propertyName(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    Identifier13;
    pANTLR3_BASE_TREE    StringLiteral14;
    pANTLR3_BASE_TREE    NumericLiteral15;

    /* Initialize rule variables
     */


    Identifier13       = NULL;
    StringLiteral14       = NULL;
    NumericLiteral15       = NULL;

    {
        {
            //  .//EmersonTree.g:1356:2: ( Identifier | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt86;

            alt86=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            	{
            		alt86=1;
            	}
                break;
            case StringLiteral:
            	{
            		alt86=2;
            	}
                break;
            case NumericLiteral:
            	{
            		alt86=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 86;
                EXCEPTION->state        = 0;


                goto rulepropertyNameEx;
            }

            switch (alt86) 
            {
        	case 1:
        	    // .//EmersonTree.g:1356:4: Identifier
        	    {
        	        Identifier13 = (pANTLR3_BASE_TREE) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyName7314); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP((const char*)(Identifier13->getText(Identifier13))->chars); 
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1357:4: StringLiteral
        	    {
        	        StringLiteral14 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_propertyName7321); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                          if (insideWhenPred)
        	                          {
        	                              std::string escapedSequence = emerson_escapeSingleQuotes((const char*) (StringLiteral14->getText(StringLiteral14))->chars);
        	                              APP((const char*) escapedSequence.c_str());
        	                          }
        	                          else
        	                          {
        	                              APP((const char*)(StringLiteral14->getText(StringLiteral14))->chars);  
        	                          }
        	                      
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1369:4: NumericLiteral
        	    {
        	        NumericLiteral15 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_propertyName7338); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepropertyNameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP((const char*)(NumericLiteral15->getText(NumericLiteral15))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//EmersonTree.g:1373:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static void
literal(pEmersonTree ctx)
{   
    pANTLR3_BASE_TREE    StringLiteral16;
    pANTLR3_BASE_TREE    NumericLiteral17;

    /* Initialize rule variables
     */


    StringLiteral16       = NULL;
    NumericLiteral17       = NULL;

    {
        {
            //  .//EmersonTree.g:1374:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
            
            ANTLR3_UINT32 alt87;

            alt87=5;

            switch ( LA(1) ) 
            {
            case 211:
            	{
            		alt87=1;
            	}
                break;
            case 212:
            	{
            		alt87=2;
            	}
                break;
            case 213:
            	{
            		alt87=3;
            	}
                break;
            case StringLiteral:
            	{
            		alt87=4;
            	}
                break;
            case NumericLiteral:
            	{
            		alt87=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 87;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;
            }

            switch (alt87) 
            {
        	case 1:
        	    // .//EmersonTree.g:1374:4: 'null'
        	    {
        	         MATCHT(211, &FOLLOW_211_in_literal7352); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("null");
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//EmersonTree.g:1375:4: 'true'
        	    {
        	         MATCHT(212, &FOLLOW_212_in_literal7359); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	               APP("true"); 
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//EmersonTree.g:1376:4: 'false'
        	    {
        	         MATCHT(213, &FOLLOW_213_in_literal7366); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	              APP("false");
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//EmersonTree.g:1377:4: StringLiteral
        	    {
        	        StringLiteral16 = (pANTLR3_BASE_TREE) MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_literal7372); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	                          if (insideWhenPred)
        	                          {
        	                              std::string escapedSequence = emerson_escapeSingleQuotes(((const char*) (StringLiteral16->getText(StringLiteral16))->chars));
        	                              APP((const char*)(escapedSequence.c_str()));
        	                          }
        	                          else
        	                          {
        	                              APP((const char*)(StringLiteral16->getText(StringLiteral16))->chars);  
        	                          }
        	                      
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//EmersonTree.g:1390:4: NumericLiteral
        	    {
        	        NumericLiteral17 = (pANTLR3_BASE_TREE) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_literal7390); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            APP((const char*)(NumericLiteral17->getText(NumericLiteral17))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return ;
}
/* $ANTLR end literal */

// $ANTLR start synpred31_EmersonTree
static void synpred31_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:281:14: ( statement )
    // .//EmersonTree.g:281:14: statement
    {
        FOLLOWPUSH(FOLLOW_statement_in_synpred31_EmersonTree1591);
        statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred31_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred31_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred31_EmersonTreeEx: ;

}
// $ANTLR end synpred31_EmersonTree

// $ANTLR start synpred44_EmersonTree
static void synpred44_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:466:8: ( caseClause )
    // .//EmersonTree.g:466:8: caseClause
    {
        FOLLOWPUSH(FOLLOW_caseClause_in_synpred44_EmersonTree2724);
        caseClause(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred44_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred44_EmersonTreeEx: ;

}
// $ANTLR end synpred44_EmersonTree

// $ANTLR start synpred46_EmersonTree
static void synpred46_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:466:22: ( ( defaultClause )* )
    // .//EmersonTree.g:466:22: ( defaultClause )*
    {

        // .//EmersonTree.g:466:22: ( defaultClause )*

        for (;;)
        {
            int alt88=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA88_0 = LA(1);
                if ( (LA88_0 == DEFAULT) ) 
                {
                    alt88=1;
                }

            }
            switch (alt88) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: defaultClause
        	    {
        	        FOLLOWPUSH(FOLLOW_defaultClause_in_synpred46_EmersonTree2729);
        	        defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred46_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop88;	/* break out of the loop */
        	    break;
            }
        }
        loop88: ; /* Jump out to here if this rule does not match */


    }

// This is where rules clean up and exit
//
goto rulesynpred46_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred46_EmersonTreeEx: ;

}
// $ANTLR end synpred46_EmersonTree

// $ANTLR start synpred48_EmersonTree
static void synpred48_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:466:40: ( ( caseClause )* )
    // .//EmersonTree.g:466:40: ( caseClause )*
    {

        // .//EmersonTree.g:466:40: ( caseClause )*

        for (;;)
        {
            int alt89=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA89_0 = LA(1);
                if ( (LA89_0 == CASE) ) 
                {
                    alt89=1;
                }

            }
            switch (alt89) 
            {
        	case 1:
        	    // .//EmersonTree.g:0:0: caseClause
        	    {
        	        FOLLOWPUSH(FOLLOW_caseClause_in_synpred48_EmersonTree2735);
        	        caseClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred48_EmersonTreeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop89;	/* break out of the loop */
        	    break;
            }
        }
        loop89: ; /* Jump out to here if this rule does not match */


    }

// This is where rules clean up and exit
//
goto rulesynpred48_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred48_EmersonTreeEx: ;

}
// $ANTLR end synpred48_EmersonTree

// $ANTLR start synpred56_EmersonTree
static void synpred56_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:648:3: ( memberExpression )
    // .//EmersonTree.g:648:3: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred56_EmersonTree3548);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred56_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred56_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred56_EmersonTreeEx: ;

}
// $ANTLR end synpred56_EmersonTree

// $ANTLR start synpred57_EmersonTree
static void synpred57_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:653:4: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression ) )
    // .//EmersonTree.g:653:4: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression )
    {
         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_synpred57_EmersonTree3571); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred57_EmersonTree3587);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred57_EmersonTree3604);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred57_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred57_EmersonTreeEx: ;

}
// $ANTLR end synpred57_EmersonTree

// $ANTLR start synpred58_EmersonTree
static void synpred58_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:671:3: ( ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression ) )
    // .//EmersonTree.g:671:3: ^( MESSAGE_RECV memAndCallExpression leftHandSideExpression memAndCallExpression )
    {
         MATCHT(MESSAGE_RECV, &FOLLOW_MESSAGE_RECV_in_synpred58_EmersonTree3632); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3644);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred58_EmersonTree3657);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred58_EmersonTree3669);
        memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred58_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred58_EmersonTreeEx: ;

}
// $ANTLR end synpred58_EmersonTree

// $ANTLR start synpred85_EmersonTree
static void synpred85_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:818:4: ( callExpression )
    // .//EmersonTree.g:818:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred85_EmersonTree4469);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred85_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred85_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred85_EmersonTreeEx: ;

}
// $ANTLR end synpred85_EmersonTree

// $ANTLR start synpred86_EmersonTree
static void synpred86_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:823:4: ( memberExpression )
    // .//EmersonTree.g:823:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred86_EmersonTree4486);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred86_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred86_EmersonTreeEx: ;

}
// $ANTLR end synpred86_EmersonTree

// $ANTLR start synpred89_EmersonTree
static void synpred89_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:839:3: ( ^( DOT memberExpression propertyReferenceSuffix1 ) )
    // .//EmersonTree.g:839:3: ^( DOT memberExpression propertyReferenceSuffix1 )
    {
         MATCHT(DOT, &FOLLOW_DOT_in_synpred89_EmersonTree4537); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred89_EmersonTree4539);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred89_EmersonTree4543);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred89_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred89_EmersonTreeEx: ;

}
// $ANTLR end synpred89_EmersonTree

// $ANTLR start synpred93_EmersonTree
static void synpred93_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:851:4: ( ^( CALL memberExpression arguments ) )
    // .//EmersonTree.g:851:4: ^( CALL memberExpression arguments )
    {
         MATCHT(CALL, &FOLLOW_CALL_in_synpred93_EmersonTree4609); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred93_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred93_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred93_EmersonTree4611);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred93_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_arguments_in_synpred93_EmersonTree4613);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred93_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred93_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred93_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred93_EmersonTreeEx: ;

}
// $ANTLR end synpred93_EmersonTree

// $ANTLR start synpred98_EmersonTree
static void synpred98_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:866:5: ( ^( ARGLIST ) )
    // .//EmersonTree.g:866:5: ^( ARGLIST )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred98_EmersonTree4690); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred98_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred98_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred98_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred98_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred98_EmersonTreeEx: ;

}
// $ANTLR end synpred98_EmersonTree

// $ANTLR start synpred99_EmersonTree
static void synpred99_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:867:5: ( ^( ARGLIST ( assignmentExpression ) ) )
    // .//EmersonTree.g:867:5: ^( ARGLIST ( assignmentExpression ) )
    {
         MATCHT(ARGLIST, &FOLLOW_ARGLIST_in_synpred99_EmersonTree4700); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred99_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred99_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:870:8: ( assignmentExpression )
        // .//EmersonTree.g:870:9: assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred99_EmersonTree4720);
            assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred99_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred99_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred99_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred99_EmersonTreeEx: ;

}
// $ANTLR end synpred99_EmersonTree

// $ANTLR start synpred159_EmersonTree
static void synpred159_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1178:11: ( postfixExpression )
    // .//EmersonTree.g:1178:11: postfixExpression
    {
        FOLLOWPUSH(FOLLOW_postfixExpression_in_synpred159_EmersonTree6171);
        postfixExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred159_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred159_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred159_EmersonTreeEx: ;

}
// $ANTLR end synpred159_EmersonTree

// $ANTLR start synpred177_EmersonTree
static void synpred177_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1268:5: ( ^( ARRAY_LITERAL ) )
    // .//EmersonTree.g:1268:5: ^( ARRAY_LITERAL )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred177_EmersonTree6835); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred177_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred177_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred177_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred177_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred177_EmersonTreeEx: ;

}
// $ANTLR end synpred177_EmersonTree

// $ANTLR start synpred178_EmersonTree
static void synpred178_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1269:5: ( ^( ARRAY_LITERAL ( assignmentExpression ) ) )
    // .//EmersonTree.g:1269:5: ^( ARRAY_LITERAL ( assignmentExpression ) )
    {
         MATCHT(ARRAY_LITERAL, &FOLLOW_ARRAY_LITERAL_in_synpred178_EmersonTree6845); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1271:9: ( assignmentExpression )
        // .//EmersonTree.g:1271:10: assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred178_EmersonTree6867);
            assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred178_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred178_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred178_EmersonTreeEx: ;

}
// $ANTLR end synpred178_EmersonTree

// $ANTLR start synpred180_EmersonTree
static void synpred180_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1296:6: ( ^( OBJECT_LITERAL ) )
    // .//EmersonTree.g:1296:6: ^( OBJECT_LITERAL )
    {
         MATCHT(OBJECT_LITERAL, &FOLLOW_OBJECT_LITERAL_in_synpred180_EmersonTree7006); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred180_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred180_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesynpred180_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred180_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred180_EmersonTreeEx: ;

}
// $ANTLR end synpred180_EmersonTree

// $ANTLR start synpred181_EmersonTree
static void synpred181_EmersonTree_fragment(pEmersonTree ctx ) 
{
    // .//EmersonTree.g:1301:6: ( ^( OBJECT_LITERAL ( objectLiteralInternal ) ) )
    // .//EmersonTree.g:1301:6: ^( OBJECT_LITERAL ( objectLiteralInternal ) )
    {
         MATCHT(OBJECT_LITERAL, &FOLLOW_OBJECT_LITERAL_in_synpred181_EmersonTree7033); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred181_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred181_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // .//EmersonTree.g:1305:8: ( objectLiteralInternal )
        // .//EmersonTree.g:1305:9: objectLiteralInternal
        {
            FOLLOWPUSH(FOLLOW_objectLiteralInternal_in_synpred181_EmersonTree7052);
            objectLiteralInternal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesynpred181_EmersonTreeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }


        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred181_EmersonTreeEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred181_EmersonTreeEx; /* Prevent compiler warnings */
rulesynpred181_EmersonTreeEx: ;

}
// $ANTLR end synpred181_EmersonTree
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred86_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred86_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred178_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred178_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred31_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred31_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred93_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred93_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred46_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred46_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred99_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred99_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred177_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred177_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred98_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred98_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred89_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred89_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred180_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred180_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred48_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred48_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred44_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred44_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred85_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred85_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred159_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred159_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred58_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred58_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred56_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred56_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred181_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred181_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred57_EmersonTree(pEmersonTree ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred57_EmersonTree_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */

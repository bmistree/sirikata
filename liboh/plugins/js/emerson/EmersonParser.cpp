/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-04-21 13:55:04
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>
  #include <stdio.h>
  #include "Util.h"

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonParserTokenNames[211+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "RIGHT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "TRIPLE_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "LEFT_SHIFT",
        (pANTLR3_UINT8) "RIGHT_SHIFT",
        (pANTLR3_UINT8) "TRIPLE_SHIFT",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "PATTERN_LITERAL",
        (pANTLR3_UINT8) "PATTERN_LITERAL_INTERNAL",
        (pANTLR3_UINT8) "PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<-'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'>>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'>>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static EmersonParser_program_return	program    (pEmersonParser ctx);
static EmersonParser_sourceElements_return	sourceElements    (pEmersonParser ctx);
static EmersonParser_sourceElement_return	sourceElement    (pEmersonParser ctx);
static EmersonParser_functionDeclaration_return	functionDeclaration    (pEmersonParser ctx);
static EmersonParser_functionExpression_return	functionExpression    (pEmersonParser ctx);
static EmersonParser_formalParameterList_return	formalParameterList    (pEmersonParser ctx);
static EmersonParser_functionBody_return	functionBody    (pEmersonParser ctx);
static EmersonParser_statement_return	statement    (pEmersonParser ctx);
static EmersonParser_statementBlock_return	statementBlock    (pEmersonParser ctx);
static EmersonParser_noOpStatement_return	noOpStatement    (pEmersonParser ctx);
static EmersonParser_statementList_return	statementList    (pEmersonParser ctx);
static EmersonParser_variableStatement_return	variableStatement    (pEmersonParser ctx);
static EmersonParser_variableDeclarationList_return	variableDeclarationList    (pEmersonParser ctx);
static EmersonParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pEmersonParser ctx);
static EmersonParser_variableDeclaration_return	variableDeclaration    (pEmersonParser ctx);
static EmersonParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pEmersonParser ctx);
static EmersonParser_initialiser_return	initialiser    (pEmersonParser ctx);
static EmersonParser_initialiserNoIn_return	initialiserNoIn    (pEmersonParser ctx);
static EmersonParser_emptyStatement_return	emptyStatement    (pEmersonParser ctx);
static EmersonParser_expressionStatement_return	expressionStatement    (pEmersonParser ctx);
static EmersonParser_whenStatement_return	whenStatement    (pEmersonParser ctx);
static EmersonParser_whenPred_return	whenPred    (pEmersonParser ctx);
static EmersonParser_whenCheckedListFirst_return	whenCheckedListFirst    (pEmersonParser ctx);
static EmersonParser_whenCheckedListSubsequent_return	whenCheckedListSubsequent    (pEmersonParser ctx);
static EmersonParser_ifStatement_return	ifStatement    (pEmersonParser ctx);
static EmersonParser_iterationStatement_return	iterationStatement    (pEmersonParser ctx);
static EmersonParser_doWhileStatement_return	doWhileStatement    (pEmersonParser ctx);
static EmersonParser_whileStatement_return	whileStatement    (pEmersonParser ctx);
static EmersonParser_forStatement_return	forStatement    (pEmersonParser ctx);
static EmersonParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_forInStatement_return	forInStatement    (pEmersonParser ctx);
static EmersonParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_continueStatement_return	continueStatement    (pEmersonParser ctx);
static EmersonParser_breakStatement_return	breakStatement    (pEmersonParser ctx);
static EmersonParser_returnStatement_return	returnStatement    (pEmersonParser ctx);
static EmersonParser_withStatement_return	withStatement    (pEmersonParser ctx);
static EmersonParser_labelledStatement_return	labelledStatement    (pEmersonParser ctx);
static EmersonParser_switchStatement_return	switchStatement    (pEmersonParser ctx);
static EmersonParser_caseBlock_return	caseBlock    (pEmersonParser ctx);
static EmersonParser_caseClause_return	caseClause    (pEmersonParser ctx);
static EmersonParser_defaultClause_return	defaultClause    (pEmersonParser ctx);
static EmersonParser_throwStatement_return	throwStatement    (pEmersonParser ctx);
static EmersonParser_tryStatement_return	tryStatement    (pEmersonParser ctx);
static EmersonParser_catchFinallyBlock_return	catchFinallyBlock    (pEmersonParser ctx);
static EmersonParser_catchBlock_return	catchBlock    (pEmersonParser ctx);
static EmersonParser_finallyBlock_return	finallyBlock    (pEmersonParser ctx);
static EmersonParser_msgSendStatement_return	msgSendStatement    (pEmersonParser ctx);
static EmersonParser_memAndCallExpression_return	memAndCallExpression    (pEmersonParser ctx);
static EmersonParser_msgRecvStatement_return	msgRecvStatement    (pEmersonParser ctx);
static EmersonParser_expression_return	expression    (pEmersonParser ctx);
static EmersonParser_expressionNoIn_return	expressionNoIn    (pEmersonParser ctx);
static EmersonParser_assignmentExpression_return	assignmentExpression    (pEmersonParser ctx);
static EmersonParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_leftHandSideExpression_return	leftHandSideExpression    (pEmersonParser ctx);
static EmersonParser_newExpression_return	newExpression    (pEmersonParser ctx);
static EmersonParser_indexSuffix1_return	indexSuffix1    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pEmersonParser ctx);
static EmersonParser_memberExpression_return	memberExpression    (pEmersonParser ctx);
static EmersonParser_memberExpressionSuffix_return	memberExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_callExpression_return	callExpression    (pEmersonParser ctx);
static EmersonParser_callExpressionSuffix_return	callExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_arguments_return	arguments    (pEmersonParser ctx);
static EmersonParser_indexSuffix_return	indexSuffix    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pEmersonParser ctx);
static EmersonParser_assignmentOperator_return	assignmentOperator    (pEmersonParser ctx);
static EmersonParser_conditionalExpression_return	conditionalExpression    (pEmersonParser ctx);
static EmersonParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalORExpression_return	logicalORExpression    (pEmersonParser ctx);
static EmersonParser_logicalANDExpression_return	logicalANDExpression    (pEmersonParser ctx);
static EmersonParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpression_return	bitwiseORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpression_return	bitwiseXORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpression_return	bitwiseANDExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_equalityExpression_return	equalityExpression    (pEmersonParser ctx);
static EmersonParser_equalityOps_return	equalityOps    (pEmersonParser ctx);
static EmersonParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_relationalOps_return	relationalOps    (pEmersonParser ctx);
static EmersonParser_relationalExpression_return	relationalExpression    (pEmersonParser ctx);
static EmersonParser_relationalOpsNoIn_return	relationalOpsNoIn    (pEmersonParser ctx);
static EmersonParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_shiftOps_return	shiftOps    (pEmersonParser ctx);
static EmersonParser_shiftExpression_return	shiftExpression    (pEmersonParser ctx);
static EmersonParser_addOps_return	addOps    (pEmersonParser ctx);
static EmersonParser_additiveExpression_return	additiveExpression    (pEmersonParser ctx);
static EmersonParser_multOps_return	multOps    (pEmersonParser ctx);
static EmersonParser_multiplicativeExpression_return	multiplicativeExpression    (pEmersonParser ctx);
static EmersonParser_postfixExpression_return	postfixExpression    (pEmersonParser ctx);
static EmersonParser_unaryOps_return	unaryOps    (pEmersonParser ctx);
static EmersonParser_unaryExpression_return	unaryExpression    (pEmersonParser ctx);
static EmersonParser_primaryExpression_return	primaryExpression    (pEmersonParser ctx);
static EmersonParser_vectorLiteral_return	vectorLiteral    (pEmersonParser ctx);
static EmersonParser_dollarExpression_return	dollarExpression    (pEmersonParser ctx);
static EmersonParser_arrayLiteral_return	arrayLiteral    (pEmersonParser ctx);
static EmersonParser_objectLiteral_return	objectLiteral    (pEmersonParser ctx);
static EmersonParser_patternLiteral_return	patternLiteral    (pEmersonParser ctx);
static EmersonParser_patternLiteralInternal_return	patternLiteralInternal    (pEmersonParser ctx);
static EmersonParser_propertyNameAndValue_return	propertyNameAndValue    (pEmersonParser ctx);
static EmersonParser_nameValueProto_return	nameValueProto    (pEmersonParser ctx);
static EmersonParser_propertyName_return	propertyName    (pEmersonParser ctx);
static EmersonParser_literal_return	literal    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred1_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred4_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred8_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred11_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred14_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred22_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred24_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred25_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred26_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred27_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred29_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred30_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred37_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred43_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred45_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred55_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred57_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred72_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred76_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred78_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred79_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred82_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred83_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred90_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred101_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred109_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred121_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred123_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred137_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred140_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred145_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred156_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred159_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred163_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred166_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred169_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred170_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred176_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred178_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred181_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred183_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred188_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred190_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred194_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred196_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred198_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred201_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred204_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred279_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred295_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred301_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred302_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred318_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred319_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred330_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred333_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred338_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred341_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred347_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred351_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred353_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred355_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred358_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred363_Emerson    (pEmersonParser ctx);
static void	EmersonParserFree(pEmersonParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//Emerson.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonParserNewSSD(instream, NULL);
}

/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonParser) ANTLR3_CALLOC(1, sizeof(EmersonParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our EmersonParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->emptyStatement	= emptyStatement;
    ctx->expressionStatement	= expressionStatement;
    ctx->whenStatement	= whenStatement;
    ctx->whenPred	= whenPred;
    ctx->whenCheckedListFirst	= whenCheckedListFirst;
    ctx->whenCheckedListSubsequent	= whenCheckedListSubsequent;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->shiftOps	= shiftOps;
    ctx->shiftExpression	= shiftExpression;
    ctx->addOps	= addOps;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->patternLiteral	= patternLiteral;
    ctx->patternLiteralInternal	= patternLiteralInternal;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->nameValueProto	= nameValueProto;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred1_Emerson	= synpred1_Emerson;
    ctx->synpred4_Emerson	= synpred4_Emerson;
    ctx->synpred8_Emerson	= synpred8_Emerson;
    ctx->synpred11_Emerson	= synpred11_Emerson;
    ctx->synpred14_Emerson	= synpred14_Emerson;
    ctx->synpred22_Emerson	= synpred22_Emerson;
    ctx->synpred24_Emerson	= synpred24_Emerson;
    ctx->synpred25_Emerson	= synpred25_Emerson;
    ctx->synpred26_Emerson	= synpred26_Emerson;
    ctx->synpred27_Emerson	= synpred27_Emerson;
    ctx->synpred29_Emerson	= synpred29_Emerson;
    ctx->synpred30_Emerson	= synpred30_Emerson;
    ctx->synpred37_Emerson	= synpred37_Emerson;
    ctx->synpred43_Emerson	= synpred43_Emerson;
    ctx->synpred45_Emerson	= synpred45_Emerson;
    ctx->synpred55_Emerson	= synpred55_Emerson;
    ctx->synpred57_Emerson	= synpred57_Emerson;
    ctx->synpred72_Emerson	= synpred72_Emerson;
    ctx->synpred76_Emerson	= synpred76_Emerson;
    ctx->synpred78_Emerson	= synpred78_Emerson;
    ctx->synpred79_Emerson	= synpred79_Emerson;
    ctx->synpred82_Emerson	= synpred82_Emerson;
    ctx->synpred83_Emerson	= synpred83_Emerson;
    ctx->synpred90_Emerson	= synpred90_Emerson;
    ctx->synpred101_Emerson	= synpred101_Emerson;
    ctx->synpred109_Emerson	= synpred109_Emerson;
    ctx->synpred121_Emerson	= synpred121_Emerson;
    ctx->synpred123_Emerson	= synpred123_Emerson;
    ctx->synpred137_Emerson	= synpred137_Emerson;
    ctx->synpred140_Emerson	= synpred140_Emerson;
    ctx->synpred145_Emerson	= synpred145_Emerson;
    ctx->synpred156_Emerson	= synpred156_Emerson;
    ctx->synpred159_Emerson	= synpred159_Emerson;
    ctx->synpred163_Emerson	= synpred163_Emerson;
    ctx->synpred166_Emerson	= synpred166_Emerson;
    ctx->synpred169_Emerson	= synpred169_Emerson;
    ctx->synpred170_Emerson	= synpred170_Emerson;
    ctx->synpred176_Emerson	= synpred176_Emerson;
    ctx->synpred178_Emerson	= synpred178_Emerson;
    ctx->synpred181_Emerson	= synpred181_Emerson;
    ctx->synpred183_Emerson	= synpred183_Emerson;
    ctx->synpred188_Emerson	= synpred188_Emerson;
    ctx->synpred190_Emerson	= synpred190_Emerson;
    ctx->synpred194_Emerson	= synpred194_Emerson;
    ctx->synpred196_Emerson	= synpred196_Emerson;
    ctx->synpred198_Emerson	= synpred198_Emerson;
    ctx->synpred201_Emerson	= synpred201_Emerson;
    ctx->synpred204_Emerson	= synpred204_Emerson;
    ctx->synpred279_Emerson	= synpred279_Emerson;
    ctx->synpred295_Emerson	= synpred295_Emerson;
    ctx->synpred301_Emerson	= synpred301_Emerson;
    ctx->synpred302_Emerson	= synpred302_Emerson;
    ctx->synpred318_Emerson	= synpred318_Emerson;
    ctx->synpred319_Emerson	= synpred319_Emerson;
    ctx->synpred330_Emerson	= synpred330_Emerson;
    ctx->synpred333_Emerson	= synpred333_Emerson;
    ctx->synpred338_Emerson	= synpred338_Emerson;
    ctx->synpred341_Emerson	= synpred341_Emerson;
    ctx->synpred347_Emerson	= synpred347_Emerson;
    ctx->synpred351_Emerson	= synpred351_Emerson;
    ctx->synpred353_Emerson	= synpred353_Emerson;
    ctx->synpred355_Emerson	= synpred355_Emerson;
    ctx->synpred358_Emerson	= synpred358_Emerson;
    ctx->synpred363_Emerson	= synpred363_Emerson;
    ctx->free			= EmersonParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonParserFree(pEmersonParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program854  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program854	= { FOLLOW_LTERM_in_program854_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program858  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program858	= { FOLLOW_sourceElements_in_program858_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program861  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program861	= { FOLLOW_LTERM_in_program861_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program864  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program864	= { FOLLOW_EOF_in_program864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements885  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements885	= { FOLLOW_sourceElement_in_sourceElements885_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements888  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements888	= { FOLLOW_LTERM_in_sourceElements888_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements891  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements891	= { FOLLOW_sourceElement_in_sourceElements891_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement912  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement912	= { FOLLOW_functionDeclaration_in_sourceElement912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement921  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement921	= { FOLLOW_statement_in_sourceElement921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_functionDeclaration938  */
static	ANTLR3_BITWORD FOLLOW_135_in_functionDeclaration938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_functionDeclaration938	= { FOLLOW_135_in_functionDeclaration938_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration940  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration940	= { FOLLOW_LTERM_in_functionDeclaration940_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration943  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration943	= { FOLLOW_Identifier_in_functionDeclaration943_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration945  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration945	= { FOLLOW_LTERM_in_functionDeclaration945_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration949  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration949	= { FOLLOW_formalParameterList_in_functionDeclaration949_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration952  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration952	= { FOLLOW_LTERM_in_functionDeclaration952_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration955  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration955	= { FOLLOW_functionBody_in_functionDeclaration955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_functionExpression980  */
static	ANTLR3_BITWORD FOLLOW_135_in_functionExpression980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_functionExpression980	= { FOLLOW_135_in_functionExpression980_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression982  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression982	= { FOLLOW_LTERM_in_functionExpression982_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression985  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression985	= { FOLLOW_Identifier_in_functionExpression985_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression988  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression988	= { FOLLOW_LTERM_in_functionExpression988_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_functionExpression991  */
static	ANTLR3_BITWORD FOLLOW_136_in_functionExpression991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_functionExpression991	= { FOLLOW_136_in_functionExpression991_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression993  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression993	= { FOLLOW_LTERM_in_functionExpression993_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression996  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression996	= { FOLLOW_formalParameterList_in_functionExpression996_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression999  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression999_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression999	= { FOLLOW_LTERM_in_functionExpression999_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_functionExpression1002  */
static	ANTLR3_BITWORD FOLLOW_137_in_functionExpression1002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_functionExpression1002	= { FOLLOW_137_in_functionExpression1002_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1004  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1004	= { FOLLOW_LTERM_in_functionExpression1004_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression1007  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression1007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression1007	= { FOLLOW_functionBody_in_functionExpression1007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList1035  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList1035	= { FOLLOW_Identifier_in_formalParameterList1035_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_formalParameterList1038  */
static	ANTLR3_BITWORD FOLLOW_138_in_formalParameterList1038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_formalParameterList1038	= { FOLLOW_138_in_formalParameterList1038_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList1040  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList1040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList1040	= { FOLLOW_LTERM_in_formalParameterList1040_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList1043  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList1043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList1043	= { FOLLOW_Identifier_in_formalParameterList1043_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_functionBody1066  */
static	ANTLR3_BITWORD FOLLOW_139_in_functionBody1066_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_functionBody1066	= { FOLLOW_139_in_functionBody1066_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1068  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1068	= { FOLLOW_LTERM_in_functionBody1068_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_functionBody1071  */
static	ANTLR3_BITWORD FOLLOW_140_in_functionBody1071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_functionBody1071	= { FOLLOW_140_in_functionBody1071_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_functionBody1082  */
static	ANTLR3_BITWORD FOLLOW_139_in_functionBody1082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_functionBody1082	= { FOLLOW_139_in_functionBody1082_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1084  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1084	= { FOLLOW_LTERM_in_functionBody1084_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody1088  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody1088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody1088	= { FOLLOW_sourceElements_in_functionBody1088_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1095  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1095	= { FOLLOW_LTERM_in_functionBody1095_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_functionBody1098  */
static	ANTLR3_BITWORD FOLLOW_140_in_functionBody1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_functionBody1098	= { FOLLOW_140_in_functionBody1098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement1117  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement1117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement1117	= { FOLLOW_noOpStatement_in_statement1117_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement1129  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement1129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement1129	= { FOLLOW_msgSendStatement_in_statement1129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_statement1134  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_statement1134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_statement1134	= { FOLLOW_msgRecvStatement_in_statement1134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement1146  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement1146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement1146	= { FOLLOW_statementBlock_in_statement1146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement1158  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement1158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement1158	= { FOLLOW_variableStatement_in_statement1158_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement1170  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement1170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement1170	= { FOLLOW_emptyStatement_in_statement1170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement1182  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement1182	= { FOLLOW_expressionStatement_in_statement1182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement1194  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement1194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement1194	= { FOLLOW_ifStatement_in_statement1194_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement1206  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement1206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement1206	= { FOLLOW_iterationStatement_in_statement1206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement1218  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement1218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement1218	= { FOLLOW_continueStatement_in_statement1218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement1223  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement1223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement1223	= { FOLLOW_breakStatement_in_statement1223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1228  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1228	= { FOLLOW_returnStatement_in_statement1228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement1233  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement1233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement1233	= { FOLLOW_withStatement_in_statement1233_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement1238  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement1238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement1238	= { FOLLOW_labelledStatement_in_statement1238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement1243  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement1243	= { FOLLOW_switchStatement_in_statement1243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement1248  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement1248	= { FOLLOW_throwStatement_in_statement1248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenStatement_in_statement1260  */
static	ANTLR3_BITWORD FOLLOW_whenStatement_in_statement1260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenStatement_in_statement1260	= { FOLLOW_whenStatement_in_statement1260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement1265  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement1265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement1265	= { FOLLOW_tryStatement_in_statement1265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_statementBlock1292  */
static	ANTLR3_BITWORD FOLLOW_139_in_statementBlock1292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_statementBlock1292	= { FOLLOW_139_in_statementBlock1292_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1294  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1294	= { FOLLOW_LTERM_in_statementBlock1294_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_statementBlock1297  */
static	ANTLR3_BITWORD FOLLOW_140_in_statementBlock1297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_statementBlock1297	= { FOLLOW_140_in_statementBlock1297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_statementBlock1310  */
static	ANTLR3_BITWORD FOLLOW_139_in_statementBlock1310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_statementBlock1310	= { FOLLOW_139_in_statementBlock1310_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1312  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1312	= { FOLLOW_LTERM_in_statementBlock1312_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock1316  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock1316_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock1316	= { FOLLOW_statementList_in_statementBlock1316_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1321  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1321	= { FOLLOW_LTERM_in_statementBlock1321_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_statementBlock1324  */
static	ANTLR3_BITWORD FOLLOW_140_in_statementBlock1324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_statementBlock1324	= { FOLLOW_140_in_statementBlock1324_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_noOpStatement1344  */
static	ANTLR3_BITWORD FOLLOW_141_in_noOpStatement1344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_noOpStatement1344	= { FOLLOW_141_in_noOpStatement1344_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList1386  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList1386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList1386	= { FOLLOW_LTERM_in_statementList1386_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1389  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1389	= { FOLLOW_statement_in_statementList1389_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_variableStatement1412  */
static	ANTLR3_BITWORD FOLLOW_142_in_variableStatement1412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_variableStatement1412	= { FOLLOW_142_in_variableStatement1412_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1414  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1414	= { FOLLOW_LTERM_in_variableStatement1414_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1417  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1417	= { FOLLOW_variableDeclarationList_in_variableStatement1417_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1420  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1420	= { FOLLOW_LTERM_in_variableStatement1420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_variableStatement1424  */
static	ANTLR3_BITWORD FOLLOW_141_in_variableStatement1424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_variableStatement1424	= { FOLLOW_141_in_variableStatement1424_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1446  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1446	= { FOLLOW_variableDeclaration_in_variableDeclarationList1446_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1449  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1449	= { FOLLOW_LTERM_in_variableDeclarationList1449_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_variableDeclarationList1452  */
static	ANTLR3_BITWORD FOLLOW_138_in_variableDeclarationList1452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_variableDeclarationList1452	= { FOLLOW_138_in_variableDeclarationList1452_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1454  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1454	= { FOLLOW_LTERM_in_variableDeclarationList1454_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1457  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1457	= { FOLLOW_variableDeclaration_in_variableDeclarationList1457_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1476  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1476	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1476_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1479  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1479	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1479_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_variableDeclarationListNoIn1482  */
static	ANTLR3_BITWORD FOLLOW_138_in_variableDeclarationListNoIn1482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_variableDeclarationListNoIn1482	= { FOLLOW_138_in_variableDeclarationListNoIn1482_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1484  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1484	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1484_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1487  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1487	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1487_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1506  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1506	= { FOLLOW_Identifier_in_variableDeclaration1506_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1508  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1508	= { FOLLOW_LTERM_in_variableDeclaration1508_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1511  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1511	= { FOLLOW_initialiser_in_variableDeclaration1511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1535  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1535	= { FOLLOW_Identifier_in_variableDeclarationNoIn1535_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1537  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1537	= { FOLLOW_LTERM_in_variableDeclarationNoIn1537_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1540  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1540	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1540_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_initialiser1565  */
static	ANTLR3_BITWORD FOLLOW_143_in_initialiser1565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_initialiser1565	= { FOLLOW_143_in_initialiser1565_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1567  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1567	= { FOLLOW_LTERM_in_initialiser1567_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_initialiser1570  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_initialiser1570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_initialiser1570	= { FOLLOW_assignmentExpression_in_initialiser1570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_initialiserNoIn1587  */
static	ANTLR3_BITWORD FOLLOW_143_in_initialiserNoIn1587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_initialiserNoIn1587	= { FOLLOW_143_in_initialiserNoIn1587_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1589  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1589	= { FOLLOW_LTERM_in_initialiserNoIn1589_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1592  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1592	= { FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1592_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_emptyStatement1615  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_emptyStatement1615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_emptyStatement1615	= { FOLLOW_LTERM_in_emptyStatement1615_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_emptyStatement1618  */
static	ANTLR3_BITWORD FOLLOW_141_in_emptyStatement1618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_emptyStatement1618	= { FOLLOW_141_in_emptyStatement1618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1630  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1630	= { FOLLOW_expression_in_expressionStatement1630_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1633  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1633	= { FOLLOW_LTERM_in_expressionStatement1633_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_expressionStatement1637  */
static	ANTLR3_BITWORD FOLLOW_141_in_expressionStatement1637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_expressionStatement1637	= { FOLLOW_141_in_expressionStatement1637_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_whenStatement1657  */
static	ANTLR3_BITWORD FOLLOW_144_in_whenStatement1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_whenStatement1657	= { FOLLOW_144_in_whenStatement1657_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1659  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1659	= { FOLLOW_LTERM_in_whenStatement1659_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_whenStatement1662  */
static	ANTLR3_BITWORD FOLLOW_136_in_whenStatement1662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_whenStatement1662	= { FOLLOW_136_in_whenStatement1662_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1664  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1664	= { FOLLOW_LTERM_in_whenStatement1664_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenPred_in_whenStatement1667  */
static	ANTLR3_BITWORD FOLLOW_whenPred_in_whenStatement1667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_whenPred_in_whenStatement1667	= { FOLLOW_whenPred_in_whenStatement1667_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1669  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1669	= { FOLLOW_LTERM_in_whenStatement1669_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_whenStatement1672  */
static	ANTLR3_BITWORD FOLLOW_137_in_whenStatement1672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_whenStatement1672	= { FOLLOW_137_in_whenStatement1672_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1674  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1674	= { FOLLOW_LTERM_in_whenStatement1674_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_whenStatement1677  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_whenStatement1677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_whenStatement1677	= { FOLLOW_functionBody_in_whenStatement1677_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred1706  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred1706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred1706	= { FOLLOW_expression_in_whenPred1706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListFirst1733  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListFirst1733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListFirst1733	= { FOLLOW_expression_in_whenCheckedListFirst1733_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListFirst1735  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListFirst1735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListFirst1735	= { FOLLOW_LTERM_in_whenCheckedListFirst1735_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_whenCheckedListFirst1739  */
static	ANTLR3_BITWORD FOLLOW_138_in_whenCheckedListFirst1739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_whenCheckedListFirst1739	= { FOLLOW_138_in_whenCheckedListFirst1739_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListFirst1741  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListFirst1741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListFirst1741	= { FOLLOW_LTERM_in_whenCheckedListFirst1741_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1746  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1746	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1746_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListSubsequent1783  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListSubsequent1783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListSubsequent1783	= { FOLLOW_expression_in_whenCheckedListSubsequent1783_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListSubsequent1785  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListSubsequent1785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListSubsequent1785	= { FOLLOW_LTERM_in_whenCheckedListSubsequent1785_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_whenCheckedListSubsequent1789  */
static	ANTLR3_BITWORD FOLLOW_138_in_whenCheckedListSubsequent1789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_whenCheckedListSubsequent1789	= { FOLLOW_138_in_whenCheckedListSubsequent1789_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListSubsequent1791  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListSubsequent1791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListSubsequent1791	= { FOLLOW_LTERM_in_whenCheckedListSubsequent1791_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1796  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1796	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1796_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_ifStatement1829  */
static	ANTLR3_BITWORD FOLLOW_145_in_ifStatement1829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_ifStatement1829	= { FOLLOW_145_in_ifStatement1829_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1831  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1831	= { FOLLOW_LTERM_in_ifStatement1831_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_ifStatement1834  */
static	ANTLR3_BITWORD FOLLOW_136_in_ifStatement1834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_ifStatement1834	= { FOLLOW_136_in_ifStatement1834_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1836  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1836	= { FOLLOW_LTERM_in_ifStatement1836_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1839  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1839	= { FOLLOW_expression_in_ifStatement1839_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1841  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1841	= { FOLLOW_LTERM_in_ifStatement1841_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_ifStatement1844  */
static	ANTLR3_BITWORD FOLLOW_137_in_ifStatement1844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_ifStatement1844	= { FOLLOW_137_in_ifStatement1844_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1846  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1846	= { FOLLOW_LTERM_in_ifStatement1846_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1851  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1851	= { FOLLOW_statement_in_ifStatement1851_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1854  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1854	= { FOLLOW_LTERM_in_ifStatement1854_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_ifStatement1857  */
static	ANTLR3_BITWORD FOLLOW_146_in_ifStatement1857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_ifStatement1857	= { FOLLOW_146_in_ifStatement1857_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1859  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1859	= { FOLLOW_LTERM_in_ifStatement1859_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1864  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1864	= { FOLLOW_statement_in_ifStatement1864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1896  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1896	= { FOLLOW_doWhileStatement_in_iterationStatement1896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1901  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1901	= { FOLLOW_whileStatement_in_iterationStatement1901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1906  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1906	= { FOLLOW_forStatement_in_iterationStatement1906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1911  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1911	= { FOLLOW_forInStatement_in_iterationStatement1911_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_doWhileStatement1923  */
static	ANTLR3_BITWORD FOLLOW_147_in_doWhileStatement1923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_doWhileStatement1923	= { FOLLOW_147_in_doWhileStatement1923_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1925  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1925	= { FOLLOW_LTERM_in_doWhileStatement1925_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1928  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1928	= { FOLLOW_statement_in_doWhileStatement1928_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1930  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1930	= { FOLLOW_LTERM_in_doWhileStatement1930_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_doWhileStatement1933  */
static	ANTLR3_BITWORD FOLLOW_148_in_doWhileStatement1933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_doWhileStatement1933	= { FOLLOW_148_in_doWhileStatement1933_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1935  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1935	= { FOLLOW_LTERM_in_doWhileStatement1935_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_doWhileStatement1938  */
static	ANTLR3_BITWORD FOLLOW_136_in_doWhileStatement1938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_doWhileStatement1938	= { FOLLOW_136_in_doWhileStatement1938_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1940  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1940	= { FOLLOW_expression_in_doWhileStatement1940_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_doWhileStatement1942  */
static	ANTLR3_BITWORD FOLLOW_137_in_doWhileStatement1942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_doWhileStatement1942	= { FOLLOW_137_in_doWhileStatement1942_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1945  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1945	= { FOLLOW_LTERM_in_doWhileStatement1945_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_doWhileStatement1949  */
static	ANTLR3_BITWORD FOLLOW_141_in_doWhileStatement1949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_doWhileStatement1949	= { FOLLOW_141_in_doWhileStatement1949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_whileStatement1975  */
static	ANTLR3_BITWORD FOLLOW_148_in_whileStatement1975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_whileStatement1975	= { FOLLOW_148_in_whileStatement1975_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1977  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1977	= { FOLLOW_LTERM_in_whileStatement1977_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_whileStatement1980  */
static	ANTLR3_BITWORD FOLLOW_136_in_whileStatement1980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_whileStatement1980	= { FOLLOW_136_in_whileStatement1980_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1982  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1982	= { FOLLOW_LTERM_in_whileStatement1982_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1985  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1985	= { FOLLOW_expression_in_whileStatement1985_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1987  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1987	= { FOLLOW_LTERM_in_whileStatement1987_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_whileStatement1990  */
static	ANTLR3_BITWORD FOLLOW_137_in_whileStatement1990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_whileStatement1990	= { FOLLOW_137_in_whileStatement1990_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1992  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1992	= { FOLLOW_LTERM_in_whileStatement1992_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1995  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1995	= { FOLLOW_statement_in_whileStatement1995_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_forStatement2018  */
static	ANTLR3_BITWORD FOLLOW_149_in_forStatement2018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_forStatement2018	= { FOLLOW_149_in_forStatement2018_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement2020  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement2020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement2020	= { FOLLOW_LTERM_in_forStatement2020_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_forStatement2023  */
static	ANTLR3_BITWORD FOLLOW_136_in_forStatement2023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000006980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_forStatement2023	= { FOLLOW_136_in_forStatement2023_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement2026  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement2026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000004980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement2026	= { FOLLOW_LTERM_in_forStatement2026_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement2031  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement2031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement2031	= { FOLLOW_forStatementInitialiserPart_in_forStatement2031_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement2035  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement2035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement2035	= { FOLLOW_LTERM_in_forStatement2035_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forStatement2038  */
static	ANTLR3_BITWORD FOLLOW_141_in_forStatement2038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000002980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forStatement2038	= { FOLLOW_141_in_forStatement2038_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement2041  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement2041_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement2041	= { FOLLOW_LTERM_in_forStatement2041_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2046  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2046	= { FOLLOW_expression_in_forStatement2046_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement2050  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement2050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement2050	= { FOLLOW_LTERM_in_forStatement2050_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forStatement2053  */
static	ANTLR3_BITWORD FOLLOW_141_in_forStatement2053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000B80), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forStatement2053	= { FOLLOW_141_in_forStatement2053_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement2056  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement2056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement2056	= { FOLLOW_LTERM_in_forStatement2056_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement2061  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement2061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement2061	= { FOLLOW_expression_in_forStatement2061_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement2065  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement2065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement2065	= { FOLLOW_LTERM_in_forStatement2065_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_forStatement2068  */
static	ANTLR3_BITWORD FOLLOW_137_in_forStatement2068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_forStatement2068	= { FOLLOW_137_in_forStatement2068_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement2070  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement2070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement2070	= { FOLLOW_LTERM_in_forStatement2070_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement2073  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement2073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement2073	= { FOLLOW_statement_in_forStatement2073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart2122  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart2122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart2122	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart2122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_forStatementInitialiserPart2127  */
static	ANTLR3_BITWORD FOLLOW_142_in_forStatementInitialiserPart2127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_forStatementInitialiserPart2127	= { FOLLOW_142_in_forStatementInitialiserPart2127_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart2129  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart2129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart2129	= { FOLLOW_LTERM_in_forStatementInitialiserPart2129_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2132  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2132	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_forInStatement2152  */
static	ANTLR3_BITWORD FOLLOW_149_in_forInStatement2152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_forInStatement2152	= { FOLLOW_149_in_forInStatement2152_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2154  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2154	= { FOLLOW_LTERM_in_forInStatement2154_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_forInStatement2157  */
static	ANTLR3_BITWORD FOLLOW_136_in_forInStatement2157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000004980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_forInStatement2157	= { FOLLOW_136_in_forInStatement2157_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2159  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000004980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2159	= { FOLLOW_LTERM_in_forInStatement2159_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement2162  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement2162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement2162	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement2162_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2164  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2164	= { FOLLOW_LTERM_in_forInStatement2164_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_forInStatement2167  */
static	ANTLR3_BITWORD FOLLOW_150_in_forInStatement2167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_forInStatement2167	= { FOLLOW_150_in_forInStatement2167_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2169  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2169	= { FOLLOW_LTERM_in_forInStatement2169_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement2172  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement2172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement2172	= { FOLLOW_expression_in_forInStatement2172_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2174  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2174	= { FOLLOW_LTERM_in_forInStatement2174_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_forInStatement2177  */
static	ANTLR3_BITWORD FOLLOW_137_in_forInStatement2177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_forInStatement2177	= { FOLLOW_137_in_forInStatement2177_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement2179  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement2179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement2179	= { FOLLOW_LTERM_in_forInStatement2179_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement2182  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement2182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement2182	= { FOLLOW_statement_in_forInStatement2182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2206  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2206	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_forInStatementInitialiserPart2215  */
static	ANTLR3_BITWORD FOLLOW_142_in_forInStatementInitialiserPart2215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_forInStatementInitialiserPart2215	= { FOLLOW_142_in_forInStatementInitialiserPart2215_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart2217  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart2217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart2217	= { FOLLOW_LTERM_in_forInStatementInitialiserPart2217_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2220  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2220	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_continueStatement2239  */
static	ANTLR3_BITWORD FOLLOW_151_in_continueStatement2239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_continueStatement2239	= { FOLLOW_151_in_continueStatement2239_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2241  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2241	= { FOLLOW_Identifier_in_continueStatement2241_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement2245  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement2245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement2245	= { FOLLOW_LTERM_in_continueStatement2245_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_continueStatement2249  */
static	ANTLR3_BITWORD FOLLOW_141_in_continueStatement2249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_continueStatement2249	= { FOLLOW_141_in_continueStatement2249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_breakStatement2271  */
static	ANTLR3_BITWORD FOLLOW_152_in_breakStatement2271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_breakStatement2271	= { FOLLOW_152_in_breakStatement2271_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2273  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2273	= { FOLLOW_Identifier_in_breakStatement2273_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement2277  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement2277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement2277	= { FOLLOW_LTERM_in_breakStatement2277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_breakStatement2281  */
static	ANTLR3_BITWORD FOLLOW_141_in_breakStatement2281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_breakStatement2281	= { FOLLOW_141_in_breakStatement2281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_returnStatement2302  */
static	ANTLR3_BITWORD FOLLOW_153_in_returnStatement2302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000002980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_returnStatement2302	= { FOLLOW_153_in_returnStatement2302_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2304  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2304	= { FOLLOW_expression_in_returnStatement2304_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement2308  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement2308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement2308	= { FOLLOW_LTERM_in_returnStatement2308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_returnStatement2312  */
static	ANTLR3_BITWORD FOLLOW_141_in_returnStatement2312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_returnStatement2312	= { FOLLOW_141_in_returnStatement2312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_withStatement2334  */
static	ANTLR3_BITWORD FOLLOW_154_in_withStatement2334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_withStatement2334	= { FOLLOW_154_in_withStatement2334_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2336  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2336	= { FOLLOW_LTERM_in_withStatement2336_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_withStatement2339  */
static	ANTLR3_BITWORD FOLLOW_136_in_withStatement2339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_withStatement2339	= { FOLLOW_136_in_withStatement2339_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2341  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2341	= { FOLLOW_LTERM_in_withStatement2341_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2344  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2344	= { FOLLOW_expression_in_withStatement2344_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2346  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2346	= { FOLLOW_LTERM_in_withStatement2346_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_withStatement2349  */
static	ANTLR3_BITWORD FOLLOW_137_in_withStatement2349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_withStatement2349	= { FOLLOW_137_in_withStatement2349_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2351  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2351	= { FOLLOW_LTERM_in_withStatement2351_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2354  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2354	= { FOLLOW_statement_in_withStatement2354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement2375  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement2375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement2375	= { FOLLOW_Identifier_in_labelledStatement2375_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2377  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2377	= { FOLLOW_LTERM_in_labelledStatement2377_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_labelledStatement2380  */
static	ANTLR3_BITWORD FOLLOW_155_in_labelledStatement2380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_labelledStatement2380	= { FOLLOW_155_in_labelledStatement2380_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2382  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2382	= { FOLLOW_LTERM_in_labelledStatement2382_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement2385  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement2385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement2385	= { FOLLOW_statement_in_labelledStatement2385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_switchStatement2408  */
static	ANTLR3_BITWORD FOLLOW_156_in_switchStatement2408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_switchStatement2408	= { FOLLOW_156_in_switchStatement2408_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2410  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2410	= { FOLLOW_LTERM_in_switchStatement2410_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_switchStatement2413  */
static	ANTLR3_BITWORD FOLLOW_136_in_switchStatement2413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_switchStatement2413	= { FOLLOW_136_in_switchStatement2413_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2415  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2415	= { FOLLOW_LTERM_in_switchStatement2415_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2418  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2418	= { FOLLOW_expression_in_switchStatement2418_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2420  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2420	= { FOLLOW_LTERM_in_switchStatement2420_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_switchStatement2423  */
static	ANTLR3_BITWORD FOLLOW_137_in_switchStatement2423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_switchStatement2423	= { FOLLOW_137_in_switchStatement2423_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2425  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2425	= { FOLLOW_LTERM_in_switchStatement2425_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2428  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2428	= { FOLLOW_caseBlock_in_switchStatement2428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_caseBlock2450  */
static	ANTLR3_BITWORD FOLLOW_139_in_caseBlock2450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000060001000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_caseBlock2450	= { FOLLOW_139_in_caseBlock2450_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2453  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2453	= { FOLLOW_LTERM_in_caseBlock2453_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2458  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000060001000) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2458	= { FOLLOW_caseClause_in_caseBlock2458_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2463  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2463	= { FOLLOW_LTERM_in_caseBlock2463_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2466  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000020001000) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2466	= { FOLLOW_defaultClause_in_caseBlock2466_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2469  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2469	= { FOLLOW_LTERM_in_caseBlock2469_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2474  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000020001000) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2474	= { FOLLOW_caseClause_in_caseBlock2474_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2480  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2480	= { FOLLOW_LTERM_in_caseBlock2480_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_caseBlock2483  */
static	ANTLR3_BITWORD FOLLOW_140_in_caseBlock2483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_caseBlock2483	= { FOLLOW_140_in_caseBlock2483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_caseClause2520  */
static	ANTLR3_BITWORD FOLLOW_157_in_caseClause2520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_caseClause2520	= { FOLLOW_157_in_caseClause2520_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2522  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2522	= { FOLLOW_LTERM_in_caseClause2522_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2525  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2525	= { FOLLOW_expression_in_caseClause2525_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2527  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2527	= { FOLLOW_LTERM_in_caseClause2527_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_caseClause2530  */
static	ANTLR3_BITWORD FOLLOW_155_in_caseClause2530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_caseClause2530	= { FOLLOW_155_in_caseClause2530_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2532  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2532	= { FOLLOW_LTERM_in_caseClause2532_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2535  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2535	= { FOLLOW_statementList_in_caseClause2535_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_defaultClause2560  */
static	ANTLR3_BITWORD FOLLOW_158_in_defaultClause2560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_defaultClause2560	= { FOLLOW_158_in_defaultClause2560_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2562  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2562_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2562	= { FOLLOW_LTERM_in_defaultClause2562_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_defaultClause2565  */
static	ANTLR3_BITWORD FOLLOW_155_in_defaultClause2565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_defaultClause2565	= { FOLLOW_155_in_defaultClause2565_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2567  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2567	= { FOLLOW_LTERM_in_defaultClause2567_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2570  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2570	= { FOLLOW_statementList_in_defaultClause2570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_throwStatement2592  */
static	ANTLR3_BITWORD FOLLOW_159_in_throwStatement2592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_throwStatement2592	= { FOLLOW_159_in_throwStatement2592_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2594  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2594	= { FOLLOW_expression_in_throwStatement2594_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement2597  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement2597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement2597	= { FOLLOW_LTERM_in_throwStatement2597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_throwStatement2601  */
static	ANTLR3_BITWORD FOLLOW_141_in_throwStatement2601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_throwStatement2601	= { FOLLOW_141_in_throwStatement2601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_tryStatement2629  */
static	ANTLR3_BITWORD FOLLOW_160_in_tryStatement2629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_tryStatement2629	= { FOLLOW_160_in_tryStatement2629_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2631  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2631	= { FOLLOW_LTERM_in_tryStatement2631_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2634  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2634	= { FOLLOW_statementBlock_in_tryStatement2634_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2636  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2636	= { FOLLOW_LTERM_in_tryStatement2636_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement2639  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement2639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement2639	= { FOLLOW_catchFinallyBlock_in_tryStatement2639_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock2674  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock2674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock2674	= { FOLLOW_catchBlock_in_catchFinallyBlock2674_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchFinallyBlock2676  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchFinallyBlock2676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000600000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchFinallyBlock2676	= { FOLLOW_LTERM_in_catchFinallyBlock2676_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock2679  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock2679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock2679	= { FOLLOW_finallyBlock_in_catchFinallyBlock2679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock2700  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock2700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock2700	= { FOLLOW_finallyBlock_in_catchFinallyBlock2700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_catchBlock2749  */
static	ANTLR3_BITWORD FOLLOW_161_in_catchBlock2749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_catchBlock2749	= { FOLLOW_161_in_catchBlock2749_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2751  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2751	= { FOLLOW_LTERM_in_catchBlock2751_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_catchBlock2754  */
static	ANTLR3_BITWORD FOLLOW_136_in_catchBlock2754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_catchBlock2754	= { FOLLOW_136_in_catchBlock2754_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2756  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2756	= { FOLLOW_LTERM_in_catchBlock2756_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock2759  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock2759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock2759	= { FOLLOW_Identifier_in_catchBlock2759_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2761  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2761	= { FOLLOW_LTERM_in_catchBlock2761_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_catchBlock2764  */
static	ANTLR3_BITWORD FOLLOW_137_in_catchBlock2764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_catchBlock2764	= { FOLLOW_137_in_catchBlock2764_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2766  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2766	= { FOLLOW_LTERM_in_catchBlock2766_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock2769  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock2769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock2769	= { FOLLOW_statementBlock_in_catchBlock2769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_finallyBlock2805  */
static	ANTLR3_BITWORD FOLLOW_162_in_finallyBlock2805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_finallyBlock2805	= { FOLLOW_162_in_finallyBlock2805_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyBlock2807  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyBlock2807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyBlock2807	= { FOLLOW_LTERM_in_finallyBlock2807_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock2811  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock2811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock2811	= { FOLLOW_statementBlock_in_finallyBlock2811_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2842  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2842	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2842_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2845  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2845	= { FOLLOW_LTERM_in_msgSendStatement2845_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_msgSendStatement2848  */
static	ANTLR3_BITWORD FOLLOW_163_in_msgSendStatement2848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_msgSendStatement2848	= { FOLLOW_163_in_msgSendStatement2848_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2853  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2853	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2853_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2856  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2856	= { FOLLOW_LTERM_in_msgSendStatement2856_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_msgSendStatement2860  */
static	ANTLR3_BITWORD FOLLOW_141_in_msgSendStatement2860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_msgSendStatement2860	= { FOLLOW_141_in_msgSendStatement2860_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_msgSendStatement2879  */
static	ANTLR3_BITWORD FOLLOW_163_in_msgSendStatement2879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_msgSendStatement2879	= { FOLLOW_163_in_msgSendStatement2879_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement2881  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement2881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement2881	= { FOLLOW_memberExpression_in_msgSendStatement2881_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression2907  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression2907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression2907	= { FOLLOW_callExpression_in_memAndCallExpression2907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression2916  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression2916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression2916	= { FOLLOW_memberExpression_in_memAndCallExpression2916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement2934  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement2934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement2934	= { FOLLOW_memAndCallExpression_in_msgRecvStatement2934_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2936  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2936	= { FOLLOW_LTERM_in_msgRecvStatement2936_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_msgRecvStatement2938  */
static	ANTLR3_BITWORD FOLLOW_164_in_msgRecvStatement2938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_msgRecvStatement2938	= { FOLLOW_164_in_msgRecvStatement2938_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2942  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2942	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2942_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2945  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2945	= { FOLLOW_LTERM_in_msgRecvStatement2945_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_msgRecvStatement2949  */
static	ANTLR3_BITWORD FOLLOW_141_in_msgRecvStatement2949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_msgRecvStatement2949	= { FOLLOW_141_in_msgRecvStatement2949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement2970  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement2970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement2970	= { FOLLOW_memAndCallExpression_in_msgRecvStatement2970_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2972  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2972	= { FOLLOW_LTERM_in_msgRecvStatement2972_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_msgRecvStatement2974  */
static	ANTLR3_BITWORD FOLLOW_164_in_msgRecvStatement2974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_msgRecvStatement2974	= { FOLLOW_164_in_msgRecvStatement2974_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2978  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2978_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2978	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2978_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2980  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2980	= { FOLLOW_LTERM_in_msgRecvStatement2980_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_msgRecvStatement2983  */
static	ANTLR3_BITWORD FOLLOW_164_in_msgRecvStatement2983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_msgRecvStatement2983	= { FOLLOW_164_in_msgRecvStatement2983_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_msgRecvStatement2987  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_msgRecvStatement2987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_msgRecvStatement2987	= { FOLLOW_memAndCallExpression_in_msgRecvStatement2987_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2990  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2990	= { FOLLOW_LTERM_in_msgRecvStatement2990_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_msgRecvStatement2994  */
static	ANTLR3_BITWORD FOLLOW_141_in_msgRecvStatement2994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_msgRecvStatement2994	= { FOLLOW_141_in_msgRecvStatement2994_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression3021  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression3021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression3021	= { FOLLOW_assignmentExpression_in_expression3021_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3043  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3043	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression3069  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression3069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression3069	= { FOLLOW_conditionalExpression_in_assignmentExpression3069_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression3082  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression3082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x000FFE0000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression3082	= { FOLLOW_leftHandSideExpression_in_assignmentExpression3082_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression3084  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression3084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x000FFE0000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression3084	= { FOLLOW_LTERM_in_assignmentExpression3084_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression3087  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression3087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression3087	= { FOLLOW_assignmentOperator_in_assignmentExpression3087_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression3089  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression3089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression3089	= { FOLLOW_LTERM_in_assignmentExpression3089_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression3092  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression3092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression3092	= { FOLLOW_assignmentExpression_in_assignmentExpression3092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3116  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3116	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3129  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x000FFE0000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3129	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3129_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn3131  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn3131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x000FFE0000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn3131	= { FOLLOW_LTERM_in_assignmentExpressionNoIn3131_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3134  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3134	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3134_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn3136  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn3136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn3136	= { FOLLOW_LTERM_in_assignmentExpressionNoIn3136_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3139  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3139	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression3164  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression3164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression3164	= { FOLLOW_callExpression_in_leftHandSideExpression3164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression3173  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression3173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression3173	= { FOLLOW_newExpression_in_leftHandSideExpression3173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression3189  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression3189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression3189	= { FOLLOW_memberExpression_in_newExpression3189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_newExpression3198  */
static	ANTLR3_BITWORD FOLLOW_165_in_newExpression3198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_newExpression3198	= { FOLLOW_165_in_newExpression3198_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression3200  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression3200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression3200	= { FOLLOW_LTERM_in_newExpression3200_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression3203  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression3203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression3203	= { FOLLOW_newExpression_in_newExpression3203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_indexSuffix13225  */
static	ANTLR3_BITWORD FOLLOW_166_in_indexSuffix13225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_indexSuffix13225	= { FOLLOW_166_in_indexSuffix13225_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13227  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13227	= { FOLLOW_LTERM_in_indexSuffix13227_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix13230  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix13230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix13230	= { FOLLOW_expression_in_indexSuffix13230_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13232  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13232	= { FOLLOW_LTERM_in_indexSuffix13232_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_indexSuffix13235  */
static	ANTLR3_BITWORD FOLLOW_167_in_indexSuffix13235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_indexSuffix13235	= { FOLLOW_167_in_indexSuffix13235_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_propertyReferenceSuffix13252  */
static	ANTLR3_BITWORD FOLLOW_168_in_propertyReferenceSuffix13252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_propertyReferenceSuffix13252	= { FOLLOW_168_in_propertyReferenceSuffix13252_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix13254  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix13254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix13254	= { FOLLOW_LTERM_in_propertyReferenceSuffix13254_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix13257  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix13257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix13257	= { FOLLOW_Identifier_in_propertyReferenceSuffix13257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression3274  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression3274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression3274	= { FOLLOW_primaryExpression_in_memberExpression3274_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3283  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3283	= { FOLLOW_LTERM_in_memberExpression3283_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3286  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3286	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3286_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3303  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3303	= { FOLLOW_LTERM_in_memberExpression3303_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3306  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3306	= { FOLLOW_indexSuffix1_in_memberExpression3306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression3325  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression3325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression3325	= { FOLLOW_functionExpression_in_memberExpression3325_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3333  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3333	= { FOLLOW_LTERM_in_memberExpression3333_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3336  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3336	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3336_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3352  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3352	= { FOLLOW_LTERM_in_memberExpression3352_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3355  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3355	= { FOLLOW_indexSuffix1_in_memberExpression3355_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_memberExpression3374  */
static	ANTLR3_BITWORD FOLLOW_165_in_memberExpression3374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_memberExpression3374	= { FOLLOW_165_in_memberExpression3374_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3376  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3376	= { FOLLOW_LTERM_in_memberExpression3376_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression3381  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression3381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression3381	= { FOLLOW_memberExpression_in_memberExpression3381_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3383  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3383	= { FOLLOW_LTERM_in_memberExpression3383_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression3386  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression3386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression3386	= { FOLLOW_arguments_in_memberExpression3386_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3401  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3401	= { FOLLOW_LTERM_in_memberExpression3401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3404  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3404	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3404_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3417  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3417	= { FOLLOW_LTERM_in_memberExpression3417_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3420  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3420	= { FOLLOW_indexSuffix1_in_memberExpression3420_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix3455  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix3455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix3455	= { FOLLOW_indexSuffix_in_memberExpressionSuffix3455_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3465  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3465	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression3485  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression3485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression3485	= { FOLLOW_memberExpression_in_callExpression3485_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3487  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3487	= { FOLLOW_LTERM_in_callExpression3487_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3490  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3490	= { FOLLOW_arguments_in_callExpression3490_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3504  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3504	= { FOLLOW_LTERM_in_callExpression3504_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3507  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3507	= { FOLLOW_arguments_in_callExpression3507_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3522  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3522	= { FOLLOW_LTERM_in_callExpression3522_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression3525  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression3525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression3525	= { FOLLOW_indexSuffix1_in_callExpression3525_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3540  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3540	= { FOLLOW_LTERM_in_callExpression3540_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression3543  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression3543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression3543	= { FOLLOW_propertyReferenceSuffix1_in_callExpression3543_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix3570  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix3570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix3570	= { FOLLOW_arguments_in_callExpressionSuffix3570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix3579  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix3579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix3579	= { FOLLOW_indexSuffix_in_callExpressionSuffix3579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3588  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3588	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_arguments3610  */
static	ANTLR3_BITWORD FOLLOW_136_in_arguments3610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000B80), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_arguments3610	= { FOLLOW_136_in_arguments3610_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3612  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000B80), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3612	= { FOLLOW_LTERM_in_arguments3612_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3616  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3616	= { FOLLOW_assignmentExpression_in_arguments3616_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3620  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3620	= { FOLLOW_LTERM_in_arguments3620_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_arguments3623  */
static	ANTLR3_BITWORD FOLLOW_137_in_arguments3623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_arguments3623	= { FOLLOW_137_in_arguments3623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_arguments3637  */
static	ANTLR3_BITWORD FOLLOW_136_in_arguments3637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_arguments3637	= { FOLLOW_136_in_arguments3637_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3639  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3639	= { FOLLOW_LTERM_in_arguments3639_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3644  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000600) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3644	= { FOLLOW_assignmentExpression_in_arguments3644_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_arguments3647  */
static	ANTLR3_BITWORD FOLLOW_138_in_arguments3647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_arguments3647	= { FOLLOW_138_in_arguments3647_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3649  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3649	= { FOLLOW_LTERM_in_arguments3649_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3654  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000600) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3654	= { FOLLOW_assignmentExpression_in_arguments3654_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3658  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3658	= { FOLLOW_LTERM_in_arguments3658_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_arguments3661  */
static	ANTLR3_BITWORD FOLLOW_137_in_arguments3661_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_arguments3661	= { FOLLOW_137_in_arguments3661_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_indexSuffix3695  */
static	ANTLR3_BITWORD FOLLOW_166_in_indexSuffix3695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_indexSuffix3695	= { FOLLOW_166_in_indexSuffix3695_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3697  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3697	= { FOLLOW_LTERM_in_indexSuffix3697_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix3700  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix3700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix3700	= { FOLLOW_expression_in_indexSuffix3700_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3702  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3702	= { FOLLOW_LTERM_in_indexSuffix3702_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_indexSuffix3705  */
static	ANTLR3_BITWORD FOLLOW_167_in_indexSuffix3705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_indexSuffix3705	= { FOLLOW_167_in_indexSuffix3705_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_propertyReferenceSuffix3726  */
static	ANTLR3_BITWORD FOLLOW_168_in_propertyReferenceSuffix3726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_propertyReferenceSuffix3726	= { FOLLOW_168_in_propertyReferenceSuffix3726_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix3728  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix3728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix3728	= { FOLLOW_LTERM_in_propertyReferenceSuffix3728_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix3731  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix3731_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix3731	= { FOLLOW_Identifier_in_propertyReferenceSuffix3731_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_assignmentOperator3759  */
static	ANTLR3_BITWORD FOLLOW_143_in_assignmentOperator3759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_assignmentOperator3759	= { FOLLOW_143_in_assignmentOperator3759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_assignmentOperator3768  */
static	ANTLR3_BITWORD FOLLOW_169_in_assignmentOperator3768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_assignmentOperator3768	= { FOLLOW_169_in_assignmentOperator3768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_assignmentOperator3777  */
static	ANTLR3_BITWORD FOLLOW_170_in_assignmentOperator3777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_assignmentOperator3777	= { FOLLOW_170_in_assignmentOperator3777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_assignmentOperator3787  */
static	ANTLR3_BITWORD FOLLOW_171_in_assignmentOperator3787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_assignmentOperator3787	= { FOLLOW_171_in_assignmentOperator3787_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_assignmentOperator3796  */
static	ANTLR3_BITWORD FOLLOW_172_in_assignmentOperator3796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_assignmentOperator3796	= { FOLLOW_172_in_assignmentOperator3796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_assignmentOperator3805  */
static	ANTLR3_BITWORD FOLLOW_173_in_assignmentOperator3805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_assignmentOperator3805	= { FOLLOW_173_in_assignmentOperator3805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_assignmentOperator3814  */
static	ANTLR3_BITWORD FOLLOW_174_in_assignmentOperator3814_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_assignmentOperator3814	= { FOLLOW_174_in_assignmentOperator3814_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_assignmentOperator3823  */
static	ANTLR3_BITWORD FOLLOW_175_in_assignmentOperator3823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_assignmentOperator3823	= { FOLLOW_175_in_assignmentOperator3823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_assignmentOperator3832  */
static	ANTLR3_BITWORD FOLLOW_176_in_assignmentOperator3832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_assignmentOperator3832	= { FOLLOW_176_in_assignmentOperator3832_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_assignmentOperator3841  */
static	ANTLR3_BITWORD FOLLOW_177_in_assignmentOperator3841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_assignmentOperator3841	= { FOLLOW_177_in_assignmentOperator3841_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_assignmentOperator3849  */
static	ANTLR3_BITWORD FOLLOW_178_in_assignmentOperator3849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_assignmentOperator3849	= { FOLLOW_178_in_assignmentOperator3849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_assignmentOperator3858  */
static	ANTLR3_BITWORD FOLLOW_179_in_assignmentOperator3858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_assignmentOperator3858	= { FOLLOW_179_in_assignmentOperator3858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression3876  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression3876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression3876	= { FOLLOW_logicalORExpression_in_conditionalExpression3876_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3884  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3884	= { FOLLOW_LTERM_in_conditionalExpression3884_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_conditionalExpression3887  */
static	ANTLR3_BITWORD FOLLOW_180_in_conditionalExpression3887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_conditionalExpression3887	= { FOLLOW_180_in_conditionalExpression3887_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3889  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3889	= { FOLLOW_LTERM_in_conditionalExpression3889_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3894  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3894	= { FOLLOW_assignmentExpression_in_conditionalExpression3894_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3896  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3896	= { FOLLOW_LTERM_in_conditionalExpression3896_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_conditionalExpression3899  */
static	ANTLR3_BITWORD FOLLOW_155_in_conditionalExpression3899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_conditionalExpression3899	= { FOLLOW_155_in_conditionalExpression3899_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3901  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3901	= { FOLLOW_LTERM_in_conditionalExpression3901_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3906  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3906	= { FOLLOW_assignmentExpression_in_conditionalExpression3906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3937  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3937	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3937_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3944  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3944	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3944_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_conditionalExpressionNoIn3947  */
static	ANTLR3_BITWORD FOLLOW_180_in_conditionalExpressionNoIn3947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_conditionalExpressionNoIn3947	= { FOLLOW_180_in_conditionalExpressionNoIn3947_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3949  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3949	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3949_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3954  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3954	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3954_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3956  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3956	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3956_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_conditionalExpressionNoIn3959  */
static	ANTLR3_BITWORD FOLLOW_155_in_conditionalExpressionNoIn3959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_conditionalExpressionNoIn3959	= { FOLLOW_155_in_conditionalExpressionNoIn3959_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3961  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3961	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3961_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3966  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3966	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3966_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3996  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3996	= { FOLLOW_logicalANDExpression_in_logicalORExpression3996_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression4003  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression4003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression4003	= { FOLLOW_LTERM_in_logicalORExpression4003_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_logicalORExpression4006  */
static	ANTLR3_BITWORD FOLLOW_181_in_logicalORExpression4006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_logicalORExpression4006	= { FOLLOW_181_in_logicalORExpression4006_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression4008  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression4008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression4008	= { FOLLOW_LTERM_in_logicalORExpression4008_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression4011  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression4011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression4011	= { FOLLOW_logicalANDExpression_in_logicalORExpression4011_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression4038  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression4038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression4038	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression4038_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression4045  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression4045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression4045	= { FOLLOW_LTERM_in_logicalANDExpression4045_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_logicalANDExpression4048  */
static	ANTLR3_BITWORD FOLLOW_182_in_logicalANDExpression4048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_logicalANDExpression4048	= { FOLLOW_182_in_logicalANDExpression4048_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression4050  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression4050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression4050	= { FOLLOW_LTERM_in_logicalANDExpression4050_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression4053  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression4053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression4053	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression4053_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4081  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4081	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4081_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn4088  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn4088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn4088	= { FOLLOW_LTERM_in_logicalORExpressionNoIn4088_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_logicalORExpressionNoIn4091  */
static	ANTLR3_BITWORD FOLLOW_181_in_logicalORExpressionNoIn4091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_logicalORExpressionNoIn4091	= { FOLLOW_181_in_logicalORExpressionNoIn4091_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn4093  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn4093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn4093	= { FOLLOW_LTERM_in_logicalORExpressionNoIn4093_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4096  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4096	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4096_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4125  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4125	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4125_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn4133  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn4133_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn4133	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn4133_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_logicalANDExpressionNoIn4136  */
static	ANTLR3_BITWORD FOLLOW_182_in_logicalANDExpressionNoIn4136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_logicalANDExpressionNoIn4136	= { FOLLOW_182_in_logicalANDExpressionNoIn4136_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn4138  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn4138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn4138	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn4138_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4141  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4141	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4141_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4168  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4168	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4168_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression4176  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression4176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression4176	= { FOLLOW_LTERM_in_bitwiseORExpression4176_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_bitwiseORExpression4179  */
static	ANTLR3_BITWORD FOLLOW_183_in_bitwiseORExpression4179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_bitwiseORExpression4179	= { FOLLOW_183_in_bitwiseORExpression4179_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression4181  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression4181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression4181	= { FOLLOW_LTERM_in_bitwiseORExpression4181_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4184  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4184	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4184_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4211  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4211	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4211_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4219  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4219	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4219_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_bitwiseORExpressionNoIn4222  */
static	ANTLR3_BITWORD FOLLOW_183_in_bitwiseORExpressionNoIn4222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_bitwiseORExpressionNoIn4222	= { FOLLOW_183_in_bitwiseORExpressionNoIn4222_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4224  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4224	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4224_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4227  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4227	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4227_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4253  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4253	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4253_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4261  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4261	= { FOLLOW_LTERM_in_bitwiseXORExpression4261_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_bitwiseXORExpression4264  */
static	ANTLR3_BITWORD FOLLOW_184_in_bitwiseXORExpression4264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_bitwiseXORExpression4264	= { FOLLOW_184_in_bitwiseXORExpression4264_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4266  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4266	= { FOLLOW_LTERM_in_bitwiseXORExpression4266_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4269  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4269	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4269_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4296  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4296	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4296_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4303  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4303	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4303_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_bitwiseXORExpressionNoIn4306  */
static	ANTLR3_BITWORD FOLLOW_184_in_bitwiseXORExpressionNoIn4306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_bitwiseXORExpressionNoIn4306	= { FOLLOW_184_in_bitwiseXORExpressionNoIn4306_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4308  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4308	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4308_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4311  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4311	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4311_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4339  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4339	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4339_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4347  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4347	= { FOLLOW_LTERM_in_bitwiseANDExpression4347_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_bitwiseANDExpression4350  */
static	ANTLR3_BITWORD FOLLOW_185_in_bitwiseANDExpression4350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_bitwiseANDExpression4350	= { FOLLOW_185_in_bitwiseANDExpression4350_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4352  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4352	= { FOLLOW_LTERM_in_bitwiseANDExpression4352_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4355  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4355	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4355_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4383  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4383	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4383_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4391  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4391	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4391_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_bitwiseANDExpressionNoIn4394  */
static	ANTLR3_BITWORD FOLLOW_185_in_bitwiseANDExpressionNoIn4394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_bitwiseANDExpressionNoIn4394	= { FOLLOW_185_in_bitwiseANDExpressionNoIn4394_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4396  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4396	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4396_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4399  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4399	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4399_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4426  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x3C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4426	= { FOLLOW_relationalExpression_in_equalityExpression4426_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4433  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x3C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4433	= { FOLLOW_LTERM_in_equalityExpression4433_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression4436  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression4436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression4436	= { FOLLOW_equalityOps_in_equalityExpression4436_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4438  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4438	= { FOLLOW_LTERM_in_equalityExpression4438_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4441  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x3C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4441	= { FOLLOW_relationalExpression_in_equalityExpression4441_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_equalityOps4467  */
static	ANTLR3_BITWORD FOLLOW_186_in_equalityOps4467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_equalityOps4467	= { FOLLOW_186_in_equalityOps4467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_equalityOps4477  */
static	ANTLR3_BITWORD FOLLOW_187_in_equalityOps4477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_equalityOps4477	= { FOLLOW_187_in_equalityOps4477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_equalityOps4487  */
static	ANTLR3_BITWORD FOLLOW_188_in_equalityOps4487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_equalityOps4487	= { FOLLOW_188_in_equalityOps4487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_equalityOps4497  */
static	ANTLR3_BITWORD FOLLOW_189_in_equalityOps4497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_equalityOps4497	= { FOLLOW_189_in_equalityOps4497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4514  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x3C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4514	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4514_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4521  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x3C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4521	= { FOLLOW_LTERM_in_equalityExpressionNoIn4521_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn4524  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn4524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn4524	= { FOLLOW_equalityOps_in_equalityExpressionNoIn4524_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4526  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4526	= { FOLLOW_LTERM_in_equalityExpressionNoIn4526_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4529  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x3C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4529	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4529_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_relationalOps4554  */
static	ANTLR3_BITWORD FOLLOW_190_in_relationalOps4554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_relationalOps4554	= { FOLLOW_190_in_relationalOps4554_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_relationalOps4565  */
static	ANTLR3_BITWORD FOLLOW_191_in_relationalOps4565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_relationalOps4565	= { FOLLOW_191_in_relationalOps4565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_relationalOps4576  */
static	ANTLR3_BITWORD FOLLOW_192_in_relationalOps4576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_relationalOps4576	= { FOLLOW_192_in_relationalOps4576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_relationalOps4586  */
static	ANTLR3_BITWORD FOLLOW_193_in_relationalOps4586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_relationalOps4586	= { FOLLOW_193_in_relationalOps4586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_relationalOps4596  */
static	ANTLR3_BITWORD FOLLOW_194_in_relationalOps4596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_relationalOps4596	= { FOLLOW_194_in_relationalOps4596_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_relationalOps4606  */
static	ANTLR3_BITWORD FOLLOW_150_in_relationalOps4606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_relationalOps4606	= { FOLLOW_150_in_relationalOps4606_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4631  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0xC000000000400000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4631	= { FOLLOW_shiftExpression_in_relationalExpression4631_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4639  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0xC000000000400000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4639	= { FOLLOW_LTERM_in_relationalExpression4639_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression4642  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression4642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression4642	= { FOLLOW_relationalOps_in_relationalExpression4642_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4644  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4644	= { FOLLOW_LTERM_in_relationalExpression4644_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4647  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0xC000000000400000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4647	= { FOLLOW_shiftExpression_in_relationalExpression4647_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_relationalOpsNoIn4671  */
static	ANTLR3_BITWORD FOLLOW_190_in_relationalOpsNoIn4671_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_relationalOpsNoIn4671	= { FOLLOW_190_in_relationalOpsNoIn4671_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_relationalOpsNoIn4682  */
static	ANTLR3_BITWORD FOLLOW_191_in_relationalOpsNoIn4682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_relationalOpsNoIn4682	= { FOLLOW_191_in_relationalOpsNoIn4682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_relationalOpsNoIn4693  */
static	ANTLR3_BITWORD FOLLOW_192_in_relationalOpsNoIn4693_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_relationalOpsNoIn4693	= { FOLLOW_192_in_relationalOpsNoIn4693_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_relationalOpsNoIn4703  */
static	ANTLR3_BITWORD FOLLOW_193_in_relationalOpsNoIn4703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_relationalOpsNoIn4703	= { FOLLOW_193_in_relationalOpsNoIn4703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_relationalOpsNoIn4713  */
static	ANTLR3_BITWORD FOLLOW_194_in_relationalOpsNoIn4713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_relationalOpsNoIn4713	= { FOLLOW_194_in_relationalOpsNoIn4713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4730  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0xC000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4730	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4730_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4738  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0xC000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4738	= { FOLLOW_LTERM_in_relationalExpressionNoIn4738_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4741  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4741	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4741_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4743  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4743	= { FOLLOW_LTERM_in_relationalExpressionNoIn4743_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4746  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0xC000000000000000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4746	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4746_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_shiftOps4769  */
static	ANTLR3_BITWORD FOLLOW_195_in_shiftOps4769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_shiftOps4769	= { FOLLOW_195_in_shiftOps4769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_shiftOps4779  */
static	ANTLR3_BITWORD FOLLOW_196_in_shiftOps4779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_shiftOps4779	= { FOLLOW_196_in_shiftOps4779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_shiftOps4788  */
static	ANTLR3_BITWORD FOLLOW_197_in_shiftOps4788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_shiftOps4788	= { FOLLOW_197_in_shiftOps4788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4805  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000038) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4805	= { FOLLOW_additiveExpression_in_shiftExpression4805_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4812  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000038) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4812	= { FOLLOW_LTERM_in_shiftExpression4812_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftOps_in_shiftExpression4815  */
static	ANTLR3_BITWORD FOLLOW_shiftOps_in_shiftExpression4815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftOps_in_shiftExpression4815	= { FOLLOW_shiftOps_in_shiftExpression4815_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4817  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4817	= { FOLLOW_LTERM_in_shiftExpression4817_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4820  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000038) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4820	= { FOLLOW_additiveExpression_in_shiftExpression4820_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_addOps4846  */
static	ANTLR3_BITWORD FOLLOW_198_in_addOps4846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_addOps4846	= { FOLLOW_198_in_addOps4846_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_addOps4856  */
static	ANTLR3_BITWORD FOLLOW_199_in_addOps4856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_addOps4856	= { FOLLOW_199_in_addOps4856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4874  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000000C0) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4874	= { FOLLOW_multiplicativeExpression_in_additiveExpression4874_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4881  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000000C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4881	= { FOLLOW_LTERM_in_additiveExpression4881_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression4884  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression4884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression4884	= { FOLLOW_addOps_in_additiveExpression4884_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4886  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4886	= { FOLLOW_LTERM_in_additiveExpression4886_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4889  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000000C0) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4889	= { FOLLOW_multiplicativeExpression_in_additiveExpression4889_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_multOps4914  */
static	ANTLR3_BITWORD FOLLOW_200_in_multOps4914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_multOps4914	= { FOLLOW_200_in_multOps4914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_multOps4924  */
static	ANTLR3_BITWORD FOLLOW_201_in_multOps4924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_multOps4924	= { FOLLOW_201_in_multOps4924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_multOps4934  */
static	ANTLR3_BITWORD FOLLOW_202_in_multOps4934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_multOps4934	= { FOLLOW_202_in_multOps4934_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4951  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000700) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4951	= { FOLLOW_unaryExpression_in_multiplicativeExpression4951_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4960  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000700) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4960	= { FOLLOW_LTERM_in_multiplicativeExpression4960_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression4963  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression4963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression4963	= { FOLLOW_multOps_in_multiplicativeExpression4963_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4965  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4965	= { FOLLOW_LTERM_in_multiplicativeExpression4965_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4968  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000700) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4968	= { FOLLOW_unaryExpression_in_multiplicativeExpression4968_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression4993  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression4993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression4993	= { FOLLOW_leftHandSideExpression_in_postfixExpression4993_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_postfixExpression4995  */
static	ANTLR3_BITWORD FOLLOW_203_in_postfixExpression4995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_postfixExpression4995	= { FOLLOW_203_in_postfixExpression4995_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5009  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5009	= { FOLLOW_leftHandSideExpression_in_postfixExpression5009_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_postfixExpression5011  */
static	ANTLR3_BITWORD FOLLOW_204_in_postfixExpression5011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_postfixExpression5011	= { FOLLOW_204_in_postfixExpression5011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5023  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5023	= { FOLLOW_leftHandSideExpression_in_postfixExpression5023_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_205_in_unaryOps5040  */
static	ANTLR3_BITWORD FOLLOW_205_in_unaryOps5040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_205_in_unaryOps5040	= { FOLLOW_205_in_unaryOps5040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_206_in_unaryOps5050  */
static	ANTLR3_BITWORD FOLLOW_206_in_unaryOps5050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_206_in_unaryOps5050	= { FOLLOW_206_in_unaryOps5050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_207_in_unaryOps5060  */
static	ANTLR3_BITWORD FOLLOW_207_in_unaryOps5060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_207_in_unaryOps5060	= { FOLLOW_207_in_unaryOps5060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_unaryOps5070  */
static	ANTLR3_BITWORD FOLLOW_204_in_unaryOps5070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_unaryOps5070	= { FOLLOW_204_in_unaryOps5070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_unaryOps5081  */
static	ANTLR3_BITWORD FOLLOW_203_in_unaryOps5081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_unaryOps5081	= { FOLLOW_203_in_unaryOps5081_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_unaryOps5092  */
static	ANTLR3_BITWORD FOLLOW_198_in_unaryOps5092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_unaryOps5092	= { FOLLOW_198_in_unaryOps5092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_unaryOps5104  */
static	ANTLR3_BITWORD FOLLOW_199_in_unaryOps5104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_unaryOps5104	= { FOLLOW_199_in_unaryOps5104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_208_in_unaryOps5116  */
static	ANTLR3_BITWORD FOLLOW_208_in_unaryOps5116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_208_in_unaryOps5116	= { FOLLOW_208_in_unaryOps5116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_209_in_unaryOps5128  */
static	ANTLR3_BITWORD FOLLOW_209_in_unaryOps5128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_209_in_unaryOps5128	= { FOLLOW_209_in_unaryOps5128_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression5147  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression5147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression5147	= { FOLLOW_postfixExpression_in_unaryExpression5147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression5156  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression5156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression5156	= { FOLLOW_unaryOps_in_unaryExpression5156_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression5160  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression5160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression5160	= { FOLLOW_unaryExpression_in_unaryExpression5160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_210_in_primaryExpression5185  */
static	ANTLR3_BITWORD FOLLOW_210_in_primaryExpression5185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_210_in_primaryExpression5185	= { FOLLOW_210_in_primaryExpression5185_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression5193  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression5193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression5193	= { FOLLOW_vectorLiteral_in_primaryExpression5193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression5202  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression5202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression5202	= { FOLLOW_Identifier_in_primaryExpression5202_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression5210  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression5210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression5210	= { FOLLOW_dollarExpression_in_primaryExpression5210_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression5218  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression5218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression5218	= { FOLLOW_literal_in_primaryExpression5218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression5226  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression5226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression5226	= { FOLLOW_arrayLiteral_in_primaryExpression5226_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression5234  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression5234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression5234	= { FOLLOW_objectLiteral_in_primaryExpression5234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_primaryExpression5242  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_primaryExpression5242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_primaryExpression5242	= { FOLLOW_patternLiteral_in_primaryExpression5242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_primaryExpression5250  */
static	ANTLR3_BITWORD FOLLOW_136_in_primaryExpression5250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_primaryExpression5250	= { FOLLOW_136_in_primaryExpression5250_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5252  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5252	= { FOLLOW_LTERM_in_primaryExpression5252_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression5255  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression5255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression5255	= { FOLLOW_expression_in_primaryExpression5255_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5257  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5257	= { FOLLOW_LTERM_in_primaryExpression5257_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_primaryExpression5260  */
static	ANTLR3_BITWORD FOLLOW_137_in_primaryExpression5260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_primaryExpression5260	= { FOLLOW_137_in_primaryExpression5260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_vectorLiteral5291  */
static	ANTLR3_BITWORD FOLLOW_190_in_vectorLiteral5291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_vectorLiteral5291	= { FOLLOW_190_in_vectorLiteral5291_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5293  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5293	= { FOLLOW_LTERM_in_vectorLiteral5293_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_vectorLiteral5298  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_vectorLiteral5298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_vectorLiteral5298	= { FOLLOW_assignmentExpression_in_vectorLiteral5298_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5300  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5300	= { FOLLOW_LTERM_in_vectorLiteral5300_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_vectorLiteral5303  */
static	ANTLR3_BITWORD FOLLOW_138_in_vectorLiteral5303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_vectorLiteral5303	= { FOLLOW_138_in_vectorLiteral5303_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5305  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5305	= { FOLLOW_LTERM_in_vectorLiteral5305_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_vectorLiteral5310  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_vectorLiteral5310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_vectorLiteral5310	= { FOLLOW_assignmentExpression_in_vectorLiteral5310_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5312  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5312	= { FOLLOW_LTERM_in_vectorLiteral5312_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_vectorLiteral5315  */
static	ANTLR3_BITWORD FOLLOW_138_in_vectorLiteral5315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_vectorLiteral5315	= { FOLLOW_138_in_vectorLiteral5315_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5317  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5317	= { FOLLOW_LTERM_in_vectorLiteral5317_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_vectorLiteral5322  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_vectorLiteral5322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_vectorLiteral5322	= { FOLLOW_assignmentExpression_in_vectorLiteral5322_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5324  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5324	= { FOLLOW_LTERM_in_vectorLiteral5324_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_vectorLiteral5327  */
static	ANTLR3_BITWORD FOLLOW_191_in_vectorLiteral5327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_vectorLiteral5327	= { FOLLOW_191_in_vectorLiteral5327_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_211_in_dollarExpression5389  */
static	ANTLR3_BITWORD FOLLOW_211_in_dollarExpression5389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_211_in_dollarExpression5389	= { FOLLOW_211_in_dollarExpression5389_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression5391  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression5391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000300000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression5391	= { FOLLOW_LTERM_in_dollarExpression5391_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression5394  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression5394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression5394	= { FOLLOW_Identifier_in_dollarExpression5394_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression5396  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression5396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression5396	= { FOLLOW_LTERM_in_dollarExpression5396_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_211_in_dollarExpression5399  */
static	ANTLR3_BITWORD FOLLOW_211_in_dollarExpression5399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_211_in_dollarExpression5399	= { FOLLOW_211_in_dollarExpression5399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_arrayLiteral5435  */
static	ANTLR3_BITWORD FOLLOW_166_in_arrayLiteral5435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x400000E000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_arrayLiteral5435	= { FOLLOW_166_in_arrayLiteral5435_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5437  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x400000E000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5437	= { FOLLOW_LTERM_in_arrayLiteral5437_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral5441  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral5441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral5441	= { FOLLOW_assignmentExpression_in_arrayLiteral5441_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5445  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5445	= { FOLLOW_LTERM_in_arrayLiteral5445_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_arrayLiteral5448  */
static	ANTLR3_BITWORD FOLLOW_167_in_arrayLiteral5448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_arrayLiteral5448	= { FOLLOW_167_in_arrayLiteral5448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_arrayLiteral5462  */
static	ANTLR3_BITWORD FOLLOW_166_in_arrayLiteral5462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_arrayLiteral5462	= { FOLLOW_166_in_arrayLiteral5462_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5464  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5464	= { FOLLOW_LTERM_in_arrayLiteral5464_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral5469  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral5469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral5469	= { FOLLOW_assignmentExpression_in_arrayLiteral5469_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_arrayLiteral5472  */
static	ANTLR3_BITWORD FOLLOW_138_in_arrayLiteral5472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_arrayLiteral5472	= { FOLLOW_138_in_arrayLiteral5472_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5474  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5474	= { FOLLOW_LTERM_in_arrayLiteral5474_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral5479  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral5479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral5479	= { FOLLOW_assignmentExpression_in_arrayLiteral5479_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5483  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5483	= { FOLLOW_LTERM_in_arrayLiteral5483_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_arrayLiteral5486  */
static	ANTLR3_BITWORD FOLLOW_167_in_arrayLiteral5486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_arrayLiteral5486	= { FOLLOW_167_in_arrayLiteral5486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_objectLiteral5517  */
static	ANTLR3_BITWORD FOLLOW_139_in_objectLiteral5517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_objectLiteral5517	= { FOLLOW_139_in_objectLiteral5517_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5519  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5519	= { FOLLOW_LTERM_in_objectLiteral5519_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5522  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5522	= { FOLLOW_propertyNameAndValue_in_objectLiteral5522_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5525  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5525	= { FOLLOW_LTERM_in_objectLiteral5525_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_objectLiteral5528  */
static	ANTLR3_BITWORD FOLLOW_140_in_objectLiteral5528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_objectLiteral5528	= { FOLLOW_140_in_objectLiteral5528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_objectLiteral5542  */
static	ANTLR3_BITWORD FOLLOW_139_in_objectLiteral5542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_objectLiteral5542	= { FOLLOW_139_in_objectLiteral5542_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5544  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5544	= { FOLLOW_LTERM_in_objectLiteral5544_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5549  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001400) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5549	= { FOLLOW_propertyNameAndValue_in_objectLiteral5549_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_objectLiteral5552  */
static	ANTLR3_BITWORD FOLLOW_138_in_objectLiteral5552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_objectLiteral5552	= { FOLLOW_138_in_objectLiteral5552_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5554  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5554	= { FOLLOW_LTERM_in_objectLiteral5554_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5559  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001400) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5559	= { FOLLOW_propertyNameAndValue_in_objectLiteral5559_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5563  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5563	= { FOLLOW_LTERM_in_objectLiteral5563_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_objectLiteral5570  */
static	ANTLR3_BITWORD FOLLOW_140_in_objectLiteral5570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_objectLiteral5570	= { FOLLOW_140_in_objectLiteral5570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_patternLiteral5602  */
static	ANTLR3_BITWORD FOLLOW_139_in_patternLiteral5602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_patternLiteral5602	= { FOLLOW_139_in_patternLiteral5602_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteralInternal_in_patternLiteral5606  */
static	ANTLR3_BITWORD FOLLOW_patternLiteralInternal_in_patternLiteral5606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001400) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteralInternal_in_patternLiteral5606	= { FOLLOW_patternLiteralInternal_in_patternLiteral5606_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral5608  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral5608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral5608	= { FOLLOW_LTERM_in_patternLiteral5608_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_patternLiteral5613  */
static	ANTLR3_BITWORD FOLLOW_138_in_patternLiteral5613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_patternLiteral5613	= { FOLLOW_138_in_patternLiteral5613_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral5615  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral5615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral5615	= { FOLLOW_LTERM_in_patternLiteral5615_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteralInternal_in_patternLiteral5620  */
static	ANTLR3_BITWORD FOLLOW_patternLiteralInternal_in_patternLiteral5620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001400) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteralInternal_in_patternLiteral5620	= { FOLLOW_patternLiteralInternal_in_patternLiteral5620_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral5622  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral5622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral5622	= { FOLLOW_LTERM_in_patternLiteral5622_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_patternLiteral5628  */
static	ANTLR3_BITWORD FOLLOW_140_in_patternLiteral5628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_patternLiteral5628	= { FOLLOW_140_in_patternLiteral5628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5654  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5654	= { FOLLOW_LTERM_in_patternLiteralInternal5654_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_patternLiteralInternal5659  */
static	ANTLR3_BITWORD FOLLOW_expression_in_patternLiteralInternal5659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_patternLiteralInternal5659	= { FOLLOW_expression_in_patternLiteralInternal5659_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5662  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5662	= { FOLLOW_LTERM_in_patternLiteralInternal5662_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_patternLiteralInternal5666  */
static	ANTLR3_BITWORD FOLLOW_155_in_patternLiteralInternal5666_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_patternLiteralInternal5666	= { FOLLOW_155_in_patternLiteralInternal5666_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5668  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5668	= { FOLLOW_LTERM_in_patternLiteralInternal5668_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_patternLiteralInternal5673  */
static	ANTLR3_BITWORD FOLLOW_expression_in_patternLiteralInternal5673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_patternLiteralInternal5673	= { FOLLOW_expression_in_patternLiteralInternal5673_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5676  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5676	= { FOLLOW_LTERM_in_patternLiteralInternal5676_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_patternLiteralInternal5680  */
static	ANTLR3_BITWORD FOLLOW_155_in_patternLiteralInternal5680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_patternLiteralInternal5680	= { FOLLOW_155_in_patternLiteralInternal5680_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5682  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5682	= { FOLLOW_LTERM_in_patternLiteralInternal5682_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_patternLiteralInternal5687  */
static	ANTLR3_BITWORD FOLLOW_expression_in_patternLiteralInternal5687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_patternLiteralInternal5687	= { FOLLOW_expression_in_patternLiteralInternal5687_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5689  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5689	= { FOLLOW_LTERM_in_patternLiteralInternal5689_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5725  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5725	= { FOLLOW_LTERM_in_patternLiteralInternal5725_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_patternLiteralInternal5730  */
static	ANTLR3_BITWORD FOLLOW_expression_in_patternLiteralInternal5730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_patternLiteralInternal5730	= { FOLLOW_expression_in_patternLiteralInternal5730_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5733  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5733	= { FOLLOW_LTERM_in_patternLiteralInternal5733_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_patternLiteralInternal5736  */
static	ANTLR3_BITWORD FOLLOW_155_in_patternLiteralInternal5736_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_patternLiteralInternal5736	= { FOLLOW_155_in_patternLiteralInternal5736_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5738  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5738	= { FOLLOW_LTERM_in_patternLiteralInternal5738_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_patternLiteralInternal5742  */
static	ANTLR3_BITWORD FOLLOW_155_in_patternLiteralInternal5742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_patternLiteralInternal5742	= { FOLLOW_155_in_patternLiteralInternal5742_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5744  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5744	= { FOLLOW_LTERM_in_patternLiteralInternal5744_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_patternLiteralInternal5749  */
static	ANTLR3_BITWORD FOLLOW_expression_in_patternLiteralInternal5749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_patternLiteralInternal5749	= { FOLLOW_expression_in_patternLiteralInternal5749_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteralInternal5751  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteralInternal5751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteralInternal5751	= { FOLLOW_LTERM_in_patternLiteralInternal5751_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue5781  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue5781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue5781	= { FOLLOW_propertyName_in_propertyNameAndValue5781_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue5783  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue5783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue5783	= { FOLLOW_LTERM_in_propertyNameAndValue5783_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_propertyNameAndValue5786  */
static	ANTLR3_BITWORD FOLLOW_155_in_propertyNameAndValue5786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_propertyNameAndValue5786	= { FOLLOW_155_in_propertyNameAndValue5786_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue5788  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue5788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue5788	= { FOLLOW_LTERM_in_propertyNameAndValue5788_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue5791  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue5791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue5791	= { FOLLOW_assignmentExpression_in_propertyNameAndValue5791_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_nameValueProto5817  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_nameValueProto5817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_nameValueProto5817	= { FOLLOW_propertyName_in_nameValueProto5817_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto5819  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto5819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto5819	= { FOLLOW_LTERM_in_nameValueProto5819_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_nameValueProto5823  */
static	ANTLR3_BITWORD FOLLOW_155_in_nameValueProto5823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006008000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_nameValueProto5823	= { FOLLOW_155_in_nameValueProto5823_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto5826  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto5826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006008000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto5826	= { FOLLOW_LTERM_in_nameValueProto5826_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_nameValueProto5832  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_nameValueProto5832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_nameValueProto5832	= { FOLLOW_assignmentExpression_in_nameValueProto5832_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto5834  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto5834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto5834	= { FOLLOW_LTERM_in_nameValueProto5834_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_nameValueProto5839  */
static	ANTLR3_BITWORD FOLLOW_155_in_nameValueProto5839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_nameValueProto5839	= { FOLLOW_155_in_nameValueProto5839_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto5841  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto5841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto5841	= { FOLLOW_LTERM_in_nameValueProto5841_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_nameValueProto5848  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_nameValueProto5848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_nameValueProto5848	= { FOLLOW_assignmentExpression_in_nameValueProto5848_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred1_Emerson854  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred1_Emerson854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred1_Emerson854	= { FOLLOW_LTERM_in_synpred1_Emerson854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred4_Emerson888  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred4_Emerson888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred4_Emerson888	= { FOLLOW_LTERM_in_synpred4_Emerson888_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred8_Emerson945  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred8_Emerson945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred8_Emerson945	= { FOLLOW_LTERM_in_synpred8_Emerson945_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred11_Emerson982  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred11_Emerson982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred11_Emerson982	= { FOLLOW_LTERM_in_synpred11_Emerson982_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred14_Emerson993  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred14_Emerson993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred14_Emerson993	= { FOLLOW_LTERM_in_synpred14_Emerson993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred22_Emerson1084  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred22_Emerson1084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred22_Emerson1084	= { FOLLOW_LTERM_in_synpred22_Emerson1084_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_synpred24_Emerson1117  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_synpred24_Emerson1117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_synpred24_Emerson1117	= { FOLLOW_noOpStatement_in_synpred24_Emerson1117_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_synpred25_Emerson1129  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_synpred25_Emerson1129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_synpred25_Emerson1129	= { FOLLOW_msgSendStatement_in_synpred25_Emerson1129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_synpred26_Emerson1134  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_synpred26_Emerson1134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_synpred26_Emerson1134	= { FOLLOW_msgRecvStatement_in_synpred26_Emerson1134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred27_Emerson1146  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred27_Emerson1146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred27_Emerson1146	= { FOLLOW_statementBlock_in_synpred27_Emerson1146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_synpred29_Emerson1170  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_synpred29_Emerson1170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_synpred29_Emerson1170	= { FOLLOW_emptyStatement_in_synpred29_Emerson1170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred30_Emerson1182  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred30_Emerson1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred30_Emerson1182	= { FOLLOW_expressionStatement_in_synpred30_Emerson1182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_synpred37_Emerson1238  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_synpred37_Emerson1238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_synpred37_Emerson1238	= { FOLLOW_labelledStatement_in_synpred37_Emerson1238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred43_Emerson1312  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred43_Emerson1312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred43_Emerson1312	= { FOLLOW_LTERM_in_synpred43_Emerson1312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred45_Emerson1386  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred45_Emerson1386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred45_Emerson1386	= { FOLLOW_LTERM_in_synpred45_Emerson1386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred55_Emerson1508  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred55_Emerson1508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred55_Emerson1508	= { FOLLOW_LTERM_in_synpred55_Emerson1508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred57_Emerson1537  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred57_Emerson1537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred57_Emerson1537	= { FOLLOW_LTERM_in_synpred57_Emerson1537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_synpred72_Emerson1789  */
static	ANTLR3_BITWORD FOLLOW_138_in_synpred72_Emerson1789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_synpred72_Emerson1789	= { FOLLOW_138_in_synpred72_Emerson1789_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred72_Emerson1791  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred72_Emerson1791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred72_Emerson1791	= { FOLLOW_LTERM_in_synpred72_Emerson1791_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1796  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1796	= { FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred76_Emerson1846  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred76_Emerson1846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred76_Emerson1846	= { FOLLOW_LTERM_in_synpred76_Emerson1846_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred78_Emerson1859  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred78_Emerson1859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred78_Emerson1859	= { FOLLOW_LTERM_in_synpred78_Emerson1859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred79_Emerson1854  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred79_Emerson1854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred79_Emerson1854	= { FOLLOW_LTERM_in_synpred79_Emerson1854_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_synpred79_Emerson1857  */
static	ANTLR3_BITWORD FOLLOW_146_in_synpred79_Emerson1857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_synpred79_Emerson1857	= { FOLLOW_146_in_synpred79_Emerson1857_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred79_Emerson1859  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred79_Emerson1859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006197BB6980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred79_Emerson1859	= { FOLLOW_LTERM_in_synpred79_Emerson1859_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred79_Emerson1864  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred79_Emerson1864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred79_Emerson1864	= { FOLLOW_statement_in_synpred79_Emerson1864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred82_Emerson1906  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred82_Emerson1906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred82_Emerson1906	= { FOLLOW_forStatement_in_synpred82_Emerson1906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred83_Emerson1925  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred83_Emerson1925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred83_Emerson1925	= { FOLLOW_LTERM_in_synpred83_Emerson1925_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred90_Emerson1992  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred90_Emerson1992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred90_Emerson1992	= { FOLLOW_LTERM_in_synpred90_Emerson1992_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred101_Emerson2070  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred101_Emerson2070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred101_Emerson2070	= { FOLLOW_LTERM_in_synpred101_Emerson2070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred109_Emerson2179  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred109_Emerson2179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred109_Emerson2179	= { FOLLOW_LTERM_in_synpred109_Emerson2179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred121_Emerson2351  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred121_Emerson2351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred121_Emerson2351	= { FOLLOW_LTERM_in_synpred121_Emerson2351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2382  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2382	= { FOLLOW_LTERM_in_synpred123_Emerson2382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred137_Emerson2532  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred137_Emerson2532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred137_Emerson2532	= { FOLLOW_LTERM_in_synpred137_Emerson2532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred140_Emerson2567  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred140_Emerson2567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred140_Emerson2567	= { FOLLOW_LTERM_in_synpred140_Emerson2567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred145_Emerson2676  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred145_Emerson2676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred145_Emerson2676	= { FOLLOW_LTERM_in_synpred145_Emerson2676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred156_Emerson2907  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred156_Emerson2907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred156_Emerson2907	= { FOLLOW_callExpression_in_synpred156_Emerson2907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memAndCallExpression_in_synpred159_Emerson2934  */
static	ANTLR3_BITWORD FOLLOW_memAndCallExpression_in_synpred159_Emerson2934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memAndCallExpression_in_synpred159_Emerson2934	= { FOLLOW_memAndCallExpression_in_synpred159_Emerson2934_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred159_Emerson2936  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred159_Emerson2936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred159_Emerson2936	= { FOLLOW_LTERM_in_synpred159_Emerson2936_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_synpred159_Emerson2938  */
static	ANTLR3_BITWORD FOLLOW_164_in_synpred159_Emerson2938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000E00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_synpred159_Emerson2938	= { FOLLOW_164_in_synpred159_Emerson2938_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred159_Emerson2942  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred159_Emerson2942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred159_Emerson2942	= { FOLLOW_leftHandSideExpression_in_synpred159_Emerson2942_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred159_Emerson2944  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred159_Emerson2944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred159_Emerson2944	= { FOLLOW_set_in_synpred159_Emerson2944_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred163_Emerson3069  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred163_Emerson3069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred163_Emerson3069	= { FOLLOW_conditionalExpression_in_synpred163_Emerson3069_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred166_Emerson3116  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred166_Emerson3116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred166_Emerson3116	= { FOLLOW_conditionalExpressionNoIn_in_synpred166_Emerson3116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred169_Emerson3164  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred169_Emerson3164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred169_Emerson3164	= { FOLLOW_callExpression_in_synpred169_Emerson3164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred170_Emerson3189  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred170_Emerson3189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred170_Emerson3189	= { FOLLOW_memberExpression_in_synpred170_Emerson3189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred176_Emerson3283  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred176_Emerson3283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred176_Emerson3283	= { FOLLOW_LTERM_in_synpred176_Emerson3283_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred176_Emerson3286  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred176_Emerson3286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred176_Emerson3286	= { FOLLOW_propertyReferenceSuffix1_in_synpred176_Emerson3286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred178_Emerson3303  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred178_Emerson3303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred178_Emerson3303	= { FOLLOW_LTERM_in_synpred178_Emerson3303_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred178_Emerson3306  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred178_Emerson3306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred178_Emerson3306	= { FOLLOW_indexSuffix1_in_synpred178_Emerson3306_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred181_Emerson3333  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred181_Emerson3333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred181_Emerson3333	= { FOLLOW_LTERM_in_synpred181_Emerson3333_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3336  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3336	= { FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3336_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred183_Emerson3352  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred183_Emerson3352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred183_Emerson3352	= { FOLLOW_LTERM_in_synpred183_Emerson3352_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred183_Emerson3355  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred183_Emerson3355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred183_Emerson3355	= { FOLLOW_indexSuffix1_in_synpred183_Emerson3355_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred188_Emerson3401  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred188_Emerson3401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred188_Emerson3401	= { FOLLOW_LTERM_in_synpred188_Emerson3401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3404  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3404	= { FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred190_Emerson3417  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred190_Emerson3417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred190_Emerson3417	= { FOLLOW_LTERM_in_synpred190_Emerson3417_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred190_Emerson3420  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred190_Emerson3420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred190_Emerson3420	= { FOLLOW_indexSuffix1_in_synpred190_Emerson3420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred194_Emerson3504  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred194_Emerson3504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred194_Emerson3504	= { FOLLOW_LTERM_in_synpred194_Emerson3504_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred194_Emerson3507  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred194_Emerson3507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred194_Emerson3507	= { FOLLOW_arguments_in_synpred194_Emerson3507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred196_Emerson3522  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred196_Emerson3522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000014000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred196_Emerson3522	= { FOLLOW_LTERM_in_synpred196_Emerson3522_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred196_Emerson3525  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred196_Emerson3525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred196_Emerson3525	= { FOLLOW_indexSuffix1_in_synpred196_Emerson3525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred198_Emerson3540  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred198_Emerson3540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred198_Emerson3540	= { FOLLOW_LTERM_in_synpred198_Emerson3540_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred198_Emerson3543  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred198_Emerson3543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred198_Emerson3543	= { FOLLOW_propertyReferenceSuffix1_in_synpred198_Emerson3543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred201_Emerson3612  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred201_Emerson3612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred201_Emerson3612	= { FOLLOW_LTERM_in_synpred201_Emerson3612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_synpred204_Emerson3610  */
static	ANTLR3_BITWORD FOLLOW_136_in_synpred204_Emerson3610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000B80), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_synpred204_Emerson3610	= { FOLLOW_136_in_synpred204_Emerson3610_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred204_Emerson3612  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred204_Emerson3612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000B80), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred204_Emerson3612	= { FOLLOW_LTERM_in_synpred204_Emerson3612_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred204_Emerson3616  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred204_Emerson3616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred204_Emerson3616	= { FOLLOW_assignmentExpression_in_synpred204_Emerson3616_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred204_Emerson3620  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred204_Emerson3620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred204_Emerson3620	= { FOLLOW_LTERM_in_synpred204_Emerson3620_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_synpred204_Emerson3623  */
static	ANTLR3_BITWORD FOLLOW_137_in_synpred204_Emerson3623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_synpred204_Emerson3623	= { FOLLOW_137_in_synpred204_Emerson3623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred279_Emerson4639  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred279_Emerson4639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0xC000000000400000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred279_Emerson4639	= { FOLLOW_LTERM_in_synpred279_Emerson4639_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_synpred279_Emerson4642  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_synpred279_Emerson4642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_synpred279_Emerson4642	= { FOLLOW_relationalOps_in_synpred279_Emerson4642_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred279_Emerson4644  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred279_Emerson4644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred279_Emerson4644	= { FOLLOW_LTERM_in_synpred279_Emerson4644_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_synpred279_Emerson4647  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_synpred279_Emerson4647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_synpred279_Emerson4647	= { FOLLOW_shiftExpression_in_synpred279_Emerson4647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred295_Emerson4881  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred295_Emerson4881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000000C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred295_Emerson4881	= { FOLLOW_LTERM_in_synpred295_Emerson4881_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred295_Emerson4884  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred295_Emerson4884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred295_Emerson4884	= { FOLLOW_addOps_in_synpred295_Emerson4884_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred295_Emerson4886  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred295_Emerson4886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred295_Emerson4886	= { FOLLOW_LTERM_in_synpred295_Emerson4886_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred295_Emerson4889  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred295_Emerson4889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred295_Emerson4889	= { FOLLOW_multiplicativeExpression_in_synpred295_Emerson4889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred301_Emerson4993  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred301_Emerson4993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred301_Emerson4993	= { FOLLOW_leftHandSideExpression_in_synpred301_Emerson4993_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_synpred301_Emerson4995  */
static	ANTLR3_BITWORD FOLLOW_203_in_synpred301_Emerson4995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_synpred301_Emerson4995	= { FOLLOW_203_in_synpred301_Emerson4995_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred302_Emerson5009  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred302_Emerson5009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred302_Emerson5009	= { FOLLOW_leftHandSideExpression_in_synpred302_Emerson5009_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_synpred302_Emerson5011  */
static	ANTLR3_BITWORD FOLLOW_204_in_synpred302_Emerson5011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_synpred302_Emerson5011	= { FOLLOW_204_in_synpred302_Emerson5011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_synpred318_Emerson5234  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_synpred318_Emerson5234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_synpred318_Emerson5234	= { FOLLOW_objectLiteral_in_synpred318_Emerson5234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_synpred319_Emerson5242  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_synpred319_Emerson5242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_synpred319_Emerson5242	= { FOLLOW_patternLiteral_in_synpred319_Emerson5242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred330_Emerson5437  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred330_Emerson5437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred330_Emerson5437	= { FOLLOW_LTERM_in_synpred330_Emerson5437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_synpred333_Emerson5435  */
static	ANTLR3_BITWORD FOLLOW_166_in_synpred333_Emerson5435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x400000E000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_synpred333_Emerson5435	= { FOLLOW_166_in_synpred333_Emerson5435_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred333_Emerson5437  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred333_Emerson5437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x400000E000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred333_Emerson5437	= { FOLLOW_LTERM_in_synpred333_Emerson5437_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred333_Emerson5441  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred333_Emerson5441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred333_Emerson5441	= { FOLLOW_assignmentExpression_in_synpred333_Emerson5441_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred333_Emerson5445  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred333_Emerson5445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred333_Emerson5445	= { FOLLOW_LTERM_in_synpred333_Emerson5445_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_synpred333_Emerson5448  */
static	ANTLR3_BITWORD FOLLOW_167_in_synpred333_Emerson5448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_synpred333_Emerson5448	= { FOLLOW_167_in_synpred333_Emerson5448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred338_Emerson5519  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred338_Emerson5519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred338_Emerson5519	= { FOLLOW_LTERM_in_synpred338_Emerson5519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_synpred341_Emerson5517  */
static	ANTLR3_BITWORD FOLLOW_139_in_synpred341_Emerson5517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_synpred341_Emerson5517	= { FOLLOW_139_in_synpred341_Emerson5517_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred341_Emerson5519  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred341_Emerson5519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred341_Emerson5519	= { FOLLOW_LTERM_in_synpred341_Emerson5519_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred341_Emerson5522  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred341_Emerson5522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred341_Emerson5522	= { FOLLOW_propertyNameAndValue_in_synpred341_Emerson5522_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred341_Emerson5525  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred341_Emerson5525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred341_Emerson5525	= { FOLLOW_LTERM_in_synpred341_Emerson5525_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_synpred341_Emerson5528  */
static	ANTLR3_BITWORD FOLLOW_140_in_synpred341_Emerson5528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_synpred341_Emerson5528	= { FOLLOW_140_in_synpred341_Emerson5528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred347_Emerson5615  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred347_Emerson5615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred347_Emerson5615	= { FOLLOW_LTERM_in_synpred347_Emerson5615_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred351_Emerson5662  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred351_Emerson5662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred351_Emerson5662	= { FOLLOW_LTERM_in_synpred351_Emerson5662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson5676  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson5676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson5676	= { FOLLOW_LTERM_in_synpred353_Emerson5676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred355_Emerson5689  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred355_Emerson5689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred355_Emerson5689	= { FOLLOW_LTERM_in_synpred355_Emerson5689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred358_Emerson5654  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred358_Emerson5654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred358_Emerson5654	= { FOLLOW_LTERM_in_synpred358_Emerson5654_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred358_Emerson5659  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred358_Emerson5659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred358_Emerson5659	= { FOLLOW_expression_in_synpred358_Emerson5659_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred358_Emerson5662  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred358_Emerson5662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred358_Emerson5662	= { FOLLOW_LTERM_in_synpred358_Emerson5662_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_synpred358_Emerson5666  */
static	ANTLR3_BITWORD FOLLOW_155_in_synpred358_Emerson5666_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_synpred358_Emerson5666	= { FOLLOW_155_in_synpred358_Emerson5666_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred358_Emerson5668  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred358_Emerson5668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred358_Emerson5668	= { FOLLOW_LTERM_in_synpred358_Emerson5668_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred358_Emerson5673  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred358_Emerson5673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred358_Emerson5673	= { FOLLOW_expression_in_synpred358_Emerson5673_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred358_Emerson5676  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred358_Emerson5676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred358_Emerson5676	= { FOLLOW_LTERM_in_synpred358_Emerson5676_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_synpred358_Emerson5680  */
static	ANTLR3_BITWORD FOLLOW_155_in_synpred358_Emerson5680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_synpred358_Emerson5680	= { FOLLOW_155_in_synpred358_Emerson5680_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred358_Emerson5682  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred358_Emerson5682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000F00000000000), ANTLR3_UINT64_LIT(0x4000006000000980), ANTLR3_UINT64_LIT(0x00000000007FF8C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred358_Emerson5682	= { FOLLOW_LTERM_in_synpred358_Emerson5682_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred358_Emerson5687  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred358_Emerson5687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred358_Emerson5687	= { FOLLOW_expression_in_synpred358_Emerson5687_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred358_Emerson5689  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred358_Emerson5689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred358_Emerson5689	= { FOLLOW_LTERM_in_synpred358_Emerson5689_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred363_Emerson5751  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred363_Emerson5751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred363_Emerson5751	= { FOLLOW_LTERM_in_synpred363_Emerson5751_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    141:14: ( sourceElements )?
 */
static const ANTLR3_INT32 dfa2_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_eof[4] =
    {
	3, -1, 3, -1
    };
static const ANTLR3_INT32 dfa2_min[4] =
    {
	108, -1, 108, -1
    };
static const ANTLR3_INT32 dfa2_max[4] =
    {
	214, -1, 141, -1
    };
static const ANTLR3_INT32 dfa2_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa2_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa2_T_empty	    NULL

static const ANTLR3_INT32 dfa2_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa2_T1[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa2_transitions[] =
{
    dfa2_T1, dfa2_T_empty, dfa2_T0, dfa2_T_empty	
};


/* Declare tracking structure for Cyclic DFA 2
 */
static
ANTLR3_CYCLIC_DFA cdfa2
    =	{
	    2,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"141:14: ( sourceElements )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa2_eot,	    /* EOT table			    */
	    dfa2_eof,	    /* EOF table			    */
	    dfa2_min,	    /* Minimum tokens for each state    */
	    dfa2_max,	    /* Maximum tokens for each state    */
	    dfa2_accept,	/* Accept table			    */
	    dfa2_special,	/* Special transition states	    */
	    dfa2_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 2
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 145:18: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa5_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[4] =
    {
	214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa5_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T0, dfa5_T0, dfa5_T_empty, dfa5_T_empty	
};


/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 145:18: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    148:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa6_eot[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_eof[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_min[7] =
    {
	108, 108, -1, 108, 108, 108, -1
    };
static const ANTLR3_INT32 dfa6_max[7] =
    {
	214, 136, -1, 136, 139, 139, -1
    };
static const ANTLR3_INT32 dfa6_accept[7] =
    {
	-1, -1, 2, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa6_special[7] =
    {	
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa6_T_empty	    NULL

static const ANTLR3_INT32 dfa6_T0[] =
    {
	5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 6
    };static const ANTLR3_INT32 dfa6_T1[] =
    {
	3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa6_T2[] =
    {
	2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, 2, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa6_transitions[] =
{
    dfa6_T2, dfa6_T1, dfa6_T_empty, dfa6_T1, dfa6_T0, dfa6_T0, dfa6_T_empty	
};


/* Declare tracking structure for Cyclic DFA 6
 */
static
ANTLR3_CYCLIC_DFA cdfa6
    =	{
	    6,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"148:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa6_eot,	    /* EOT table			    */
	    dfa6_eof,	    /* EOF table			    */
	    dfa6_min,	    /* Minimum tokens for each state    */
	    dfa6_max,	    /* Maximum tokens for each state    */
	    dfa6_accept,	/* Accept table			    */
	    dfa6_special,	/* Special transition states	    */
	    dfa6_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 6
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    166:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa23_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[5] =
    {
	139, 108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[5] =
    {
	139, 214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa23_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	2, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, 3, 4, 4, -1, 4, 4, -1, 
	4, 4, 4, -1, 4, 4, 4, 4, -1, 4, -1, -1, 4, 4, -1, -1, -1, -1, 4, 4, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T1, dfa23_T0, dfa23_T0, dfa23_T_empty, dfa23_T_empty	
};


/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"166:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    172:1: statement : ( noOpStatement | msgSendStatement | msgRecvStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement );
 */
static const ANTLR3_INT32 dfa24_eot[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_eof[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_min[40] =
    {
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa24_max[40] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa24_accept[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 7, -1, -1, -1, -1, 
	-1, -1, -1, -1, 8, 9, -1, -1, 10, 11, 12, 13, 15, 16, 17, 18, 1, 2, 3, 
	14, 4
    };
static const ANTLR3_INT32 dfa24_special[40] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa24_T_empty	    NULL

static const ANTLR3_INT32 dfa24_T0[] =
    {
	13, 4, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, 8, -1, 1, 12, -1, 33, 23, 
	-1, 24, 24, 24, -1, 27, 28, 29, 30, -1, 31, -1, -1, 32, 34, -1, -1, -1, 
	-1, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 14, 14, 
	-1, -1, -1, 14, 14, 14, 14, 14, 14, 14, 2, 5, 6, 6, 6
    };static const ANTLR3_INT32 dfa24_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa24_transitions[] =
{
    dfa24_T0, dfa24_T1, dfa24_T1, dfa24_T1, dfa24_T1, dfa24_T1, dfa24_T1, 
    dfa24_T1, dfa24_T1, dfa24_T1, dfa24_T1, dfa24_T1, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty	
};

static ANTLR3_INT32 dfa24_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA24_1;

    	    ANTLR3_MARKER index24_1;


    		LA24_1 = LA(1);

    	 
    	    index24_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred24_Emerson(ctx)) )
    	    {
    	        s = 35;
    	    }

    	    else if ( (synpred29_Emerson(ctx)) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index24_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA24_2;

    	    ANTLR3_MARKER index24_2;


    		LA24_2 = LA(1);

    	 
    	    index24_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA24_3;

    	    ANTLR3_MARKER index24_3;


    		LA24_3 = LA(1);

    	 
    	    index24_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA24_4;

    	    ANTLR3_MARKER index24_4;


    		LA24_4 = LA(1);

    	 
    	    index24_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 38;
    	    }

    	 
    		SEEK(index24_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA24_5;

    	    ANTLR3_MARKER index24_5;


    		LA24_5 = LA(1);

    	 
    	    index24_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA24_6;

    	    ANTLR3_MARKER index24_6;


    		LA24_6 = LA(1);

    	 
    	    index24_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA24_7;

    	    ANTLR3_MARKER index24_7;


    		LA24_7 = LA(1);

    	 
    	    index24_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA24_8;

    	    ANTLR3_MARKER index24_8;


    		LA24_8 = LA(1);

    	 
    	    index24_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred27_Emerson(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA24_9;

    	    ANTLR3_MARKER index24_9;


    		LA24_9 = LA(1);

    	 
    	    index24_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA24_10;

    	    ANTLR3_MARKER index24_10;


    		LA24_10 = LA(1);

    	 
    	    index24_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA24_11;

    	    ANTLR3_MARKER index24_11;


    		LA24_11 = LA(1);

    	 
    	    index24_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_Emerson(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 37;
    	    }

    	    else if ( (synpred30_Emerson(ctx)) )
    	    {
    	        s = 14;
    	    }

    	 
    		SEEK(index24_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"172:1: statement : ( noOpStatement | msgSendStatement | msgRecvStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement );";
    EXCEPTION->decisionNum  = 24;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 24
 */
static
ANTLR3_CYCLIC_DFA cdfa24
    =	{
	    24,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"172:1: statement : ( noOpStatement | msgSendStatement | msgRecvStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa24_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa24_eot,	    /* EOT table			    */
	    dfa24_eof,	    /* EOF table			    */
	    dfa24_min,	    /* Minimum tokens for each state    */
	    dfa24_max,	    /* Maximum tokens for each state    */
	    dfa24_accept,	/* Accept table			    */
	    dfa24_special,	/* Special transition states	    */
	    dfa24_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 24
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    194:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa28_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa28_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa28_min[5] =
    {
	139, 108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa28_max[5] =
    {
	139, 214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa28_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa28_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa28_T_empty	    NULL

static const ANTLR3_INT32 dfa28_T0[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa28_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa28_transitions[] =
{
    dfa28_T1, dfa28_T0, dfa28_T0, dfa28_T_empty, dfa28_T_empty	
};


/* Declare tracking structure for Cyclic DFA 28
 */
static
ANTLR3_CYCLIC_DFA cdfa28
    =	{
	    28,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"194:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa28_eot,	    /* EOT table			    */
	    dfa28_eof,	    /* EOF table			    */
	    dfa28_min,	    /* Minimum tokens for each state    */
	    dfa28_max,	    /* Maximum tokens for each state    */
	    dfa28_accept,	/* Accept table			    */
	    dfa28_special,	/* Special transition states	    */
	    dfa28_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 28
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()+ loopback of 205:4: ( ( LTERM )* statement )+
 */
static const ANTLR3_INT32 dfa30_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa30_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa30_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa30_max[4] =
    {
	214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa30_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa30_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa30_T_empty	    NULL

static const ANTLR3_INT32 dfa30_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 2, 2, 3, 3, -1, -1, -1, -1, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa30_transitions[] =
{
    dfa30_T0, dfa30_T0, dfa30_T_empty, dfa30_T_empty	
};


/* Declare tracking structure for Cyclic DFA 30
 */
static
ANTLR3_CYCLIC_DFA cdfa30
    =	{
	    30,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()+ loopback of 205:4: ( ( LTERM )* statement )+",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa30_eot,	    /* EOT table			    */
	    dfa30_eof,	    /* EOF table			    */
	    dfa30_min,	    /* Minimum tokens for each state    */
	    dfa30_max,	    /* Maximum tokens for each state    */
	    dfa30_accept,	/* Accept table			    */
	    dfa30_special,	/* Special transition states	    */
	    dfa30_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 30
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 213:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa35_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa35_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa35_max[5] =
    {
	141, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa35_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa35_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa35_T_empty	    NULL

static const ANTLR3_INT32 dfa35_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa35_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa35_transitions[] =
{
    dfa35_T1, dfa35_T0, dfa35_T_empty, dfa35_T_empty, dfa35_T0	
};


/* Declare tracking structure for Cyclic DFA 35
 */
static
ANTLR3_CYCLIC_DFA cdfa35
    =	{
	    35,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 213:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa35_eot,	    /* EOT table			    */
	    dfa35_eof,	    /* EOF table			    */
	    dfa35_min,	    /* Minimum tokens for each state    */
	    dfa35_max,	    /* Maximum tokens for each state    */
	    dfa35_accept,	/* Accept table			    */
	    dfa35_special,	/* Special transition states	    */
	    dfa35_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 35
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 217:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa38_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa38_max[4] =
    {
	141, 141, -1, -1
    };
static const ANTLR3_INT32 dfa38_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa38_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa38_T_empty	    NULL

static const ANTLR3_INT32 dfa38_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa38_transitions[] =
{
    dfa38_T0, dfa38_T0, dfa38_T_empty, dfa38_T_empty	
};


/* Declare tracking structure for Cyclic DFA 38
 */
static
ANTLR3_CYCLIC_DFA cdfa38
    =	{
	    38,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 217:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa38_eot,	    /* EOT table			    */
	    dfa38_eof,	    /* EOF table			    */
	    dfa38_min,	    /* Minimum tokens for each state    */
	    dfa38_max,	    /* Maximum tokens for each state    */
	    dfa38_accept,	/* Accept table			    */
	    dfa38_special,	/* Special transition states	    */
	    dfa38_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 38
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    284:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa75_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa75_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa75_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa75_max[4] =
    {
	214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa75_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa75_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa75_T_empty	    NULL

static const ANTLR3_INT32 dfa75_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa75_transitions[] =
{
    dfa75_T0, dfa75_T0, dfa75_T_empty, dfa75_T_empty	
};


/* Declare tracking structure for Cyclic DFA 75
 */
static
ANTLR3_CYCLIC_DFA cdfa75
    =	{
	    75,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"284:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa75_eot,	    /* EOT table			    */
	    dfa75_eof,	    /* EOF table			    */
	    dfa75_min,	    /* Minimum tokens for each state    */
	    dfa75_max,	    /* Maximum tokens for each state    */
	    dfa75_accept,	/* Accept table			    */
	    dfa75_special,	/* Special transition states	    */
	    dfa75_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 75
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    284:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa78_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa78_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa78_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa78_max[4] =
    {
	214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa78_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa78_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa78_T_empty	    NULL

static const ANTLR3_INT32 dfa78_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa78_transitions[] =
{
    dfa78_T0, dfa78_T0, dfa78_T_empty, dfa78_T_empty	
};


/* Declare tracking structure for Cyclic DFA 78
 */
static
ANTLR3_CYCLIC_DFA cdfa78
    =	{
	    78,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"284:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa78_eot,	    /* EOT table			    */
	    dfa78_eof,	    /* EOF table			    */
	    dfa78_min,	    /* Minimum tokens for each state    */
	    dfa78_max,	    /* Maximum tokens for each state    */
	    dfa78_accept,	/* Accept table			    */
	    dfa78_special,	/* Special transition states	    */
	    dfa78_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 78
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    284:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa81_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa81_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa81_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa81_max[4] =
    {
	214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa81_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa81_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa81_T_empty	    NULL

static const ANTLR3_INT32 dfa81_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa81_transitions[] =
{
    dfa81_T0, dfa81_T0, dfa81_T_empty, dfa81_T_empty	
};


/* Declare tracking structure for Cyclic DFA 81
 */
static
ANTLR3_CYCLIC_DFA cdfa81
    =	{
	    81,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"284:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa81_eot,	    /* EOT table			    */
	    dfa81_eof,	    /* EOF table			    */
	    dfa81_min,	    /* Minimum tokens for each state    */
	    dfa81_max,	    /* Maximum tokens for each state    */
	    dfa81_accept,	/* Accept table			    */
	    dfa81_special,	/* Special transition states	    */
	    dfa81_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 81
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 326:8: ( ( LTERM )* case1= caseClause )*
 */
static const ANTLR3_INT32 dfa111_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa111_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa111_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa111_max[4] =
    {
	158, 158, -1, -1
    };
static const ANTLR3_INT32 dfa111_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa111_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa111_T_empty	    NULL

static const ANTLR3_INT32 dfa111_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa111_transitions[] =
{
    dfa111_T0, dfa111_T0, dfa111_T_empty, dfa111_T_empty	
};


/* Declare tracking structure for Cyclic DFA 111
 */
static
ANTLR3_CYCLIC_DFA cdfa111
    =	{
	    111,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 326:8: ( ( LTERM )* case1= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa111_eot,	    /* EOT table			    */
	    dfa111_eof,	    /* EOF table			    */
	    dfa111_min,	    /* Minimum tokens for each state    */
	    dfa111_max,	    /* Maximum tokens for each state    */
	    dfa111_accept,	/* Accept table			    */
	    dfa111_special,	/* Special transition states	    */
	    dfa111_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 111
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    326:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
 */
static const ANTLR3_INT32 dfa115_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa115_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa115_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa115_max[4] =
    {
	158, 158, -1, -1
    };
static const ANTLR3_INT32 dfa115_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa115_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa115_T_empty	    NULL

static const ANTLR3_INT32 dfa115_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa115_transitions[] =
{
    dfa115_T0, dfa115_T0, dfa115_T_empty, dfa115_T_empty	
};


/* Declare tracking structure for Cyclic DFA 115
 */
static
ANTLR3_CYCLIC_DFA cdfa115
    =	{
	    115,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"326:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa115_eot,	    /* EOT table			    */
	    dfa115_eof,	    /* EOF table			    */
	    dfa115_min,	    /* Minimum tokens for each state    */
	    dfa115_max,	    /* Maximum tokens for each state    */
	    dfa115_accept,	/* Accept table			    */
	    dfa115_special,	/* Special transition states	    */
	    dfa115_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 115
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 326:57: ( ( LTERM )* case2= caseClause )*
 */
static const ANTLR3_INT32 dfa114_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa114_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa114_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa114_max[4] =
    {
	157, 157, -1, -1
    };
static const ANTLR3_INT32 dfa114_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa114_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa114_T_empty	    NULL

static const ANTLR3_INT32 dfa114_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa114_transitions[] =
{
    dfa114_T0, dfa114_T0, dfa114_T_empty, dfa114_T_empty	
};


/* Declare tracking structure for Cyclic DFA 114
 */
static
ANTLR3_CYCLIC_DFA cdfa114
    =	{
	    114,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 326:57: ( ( LTERM )* case2= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa114_eot,	    /* EOT table			    */
	    dfa114_eof,	    /* EOF table			    */
	    dfa114_min,	    /* Minimum tokens for each state    */
	    dfa114_max,	    /* Maximum tokens for each state    */
	    dfa114_accept,	/* Accept table			    */
	    dfa114_special,	/* Special transition states	    */
	    dfa114_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 114
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    330:47: ( statementList )?
 */
static const ANTLR3_INT32 dfa120_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa120_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa120_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa120_max[4] =
    {
	214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa120_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa120_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa120_T_empty	    NULL

static const ANTLR3_INT32 dfa120_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, -1, 2, 3, 3, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa120_transitions[] =
{
    dfa120_T0, dfa120_T0, dfa120_T_empty, dfa120_T_empty	
};


/* Declare tracking structure for Cyclic DFA 120
 */
static
ANTLR3_CYCLIC_DFA cdfa120
    =	{
	    120,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"330:47: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa120_eot,	    /* EOT table			    */
	    dfa120_eof,	    /* EOF table			    */
	    dfa120_min,	    /* Minimum tokens for each state    */
	    dfa120_max,	    /* Maximum tokens for each state    */
	    dfa120_accept,	/* Accept table			    */
	    dfa120_special,	/* Special transition states	    */
	    dfa120_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 120
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    334:32: ( statementList )?
 */
static const ANTLR3_INT32 dfa123_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa123_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa123_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa123_max[4] =
    {
	214, 214, -1, -1
    };
static const ANTLR3_INT32 dfa123_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa123_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa123_T_empty	    NULL

static const ANTLR3_INT32 dfa123_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, -1, 2, 3, -1, 2, 2, -1, -1, -1, -1, 2, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa123_transitions[] =
{
    dfa123_T0, dfa123_T0, dfa123_T_empty, dfa123_T_empty	
};


/* Declare tracking structure for Cyclic DFA 123
 */
static
ANTLR3_CYCLIC_DFA cdfa123
    =	{
	    123,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"334:32: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa123_eot,	    /* EOT table			    */
	    dfa123_eof,	    /* EOF table			    */
	    dfa123_min,	    /* Minimum tokens for each state    */
	    dfa123_max,	    /* Maximum tokens for each state    */
	    dfa123_accept,	/* Accept table			    */
	    dfa123_special,	/* Special transition states	    */
	    dfa123_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 123
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    368:2: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );
 */
static const ANTLR3_INT32 dfa138_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa138_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa138_min[13] =
    {
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa138_max[13] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa138_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa138_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa138_T_empty	    NULL

static const ANTLR3_INT32 dfa138_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa138_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa138_transitions[] =
{
    dfa138_T0, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, 
    dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T_empty, dfa138_T_empty	
};

static ANTLR3_INT32 dfa138_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA138_1;

    	    ANTLR3_MARKER index138_1;


    		LA138_1 = LA(1);

    	 
    	    index138_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA138_2;

    	    ANTLR3_MARKER index138_2;


    		LA138_2 = LA(1);

    	 
    	    index138_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA138_3;

    	    ANTLR3_MARKER index138_3;


    		LA138_3 = LA(1);

    	 
    	    index138_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA138_4;

    	    ANTLR3_MARKER index138_4;


    		LA138_4 = LA(1);

    	 
    	    index138_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA138_5;

    	    ANTLR3_MARKER index138_5;


    		LA138_5 = LA(1);

    	 
    	    index138_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA138_6;

    	    ANTLR3_MARKER index138_6;


    		LA138_6 = LA(1);

    	 
    	    index138_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA138_7;

    	    ANTLR3_MARKER index138_7;


    		LA138_7 = LA(1);

    	 
    	    index138_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA138_8;

    	    ANTLR3_MARKER index138_8;


    		LA138_8 = LA(1);

    	 
    	    index138_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA138_9;

    	    ANTLR3_MARKER index138_9;


    		LA138_9 = LA(1);

    	 
    	    index138_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA138_10;

    	    ANTLR3_MARKER index138_10;


    		LA138_10 = LA(1);

    	 
    	    index138_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"368:2: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );";
    EXCEPTION->decisionNum  = 138;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 138
 */
static
ANTLR3_CYCLIC_DFA cdfa138
    =	{
	    138,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"368:2: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa138_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa138_eot,	    /* EOT table			    */
	    dfa138_eof,	    /* EOF table			    */
	    dfa138_min,	    /* Minimum tokens for each state    */
	    dfa138_max,	    /* Maximum tokens for each state    */
	    dfa138_accept,	/* Accept table			    */
	    dfa138_special,	/* Special transition states	    */
	    dfa138_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 138
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    373:2: msgRecvStatement : (e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memAndCallExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static const ANTLR3_INT32 dfa144_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa144_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa144_min[13] =
    {
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa144_max[13] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa144_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa144_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa144_T_empty	    NULL

static const ANTLR3_INT32 dfa144_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa144_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa144_transitions[] =
{
    dfa144_T0, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, 
    dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T_empty, dfa144_T_empty	
};

static ANTLR3_INT32 dfa144_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA144_1;

    	    ANTLR3_MARKER index144_1;


    		LA144_1 = LA(1);

    	 
    	    index144_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA144_2;

    	    ANTLR3_MARKER index144_2;


    		LA144_2 = LA(1);

    	 
    	    index144_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA144_3;

    	    ANTLR3_MARKER index144_3;


    		LA144_3 = LA(1);

    	 
    	    index144_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA144_4;

    	    ANTLR3_MARKER index144_4;


    		LA144_4 = LA(1);

    	 
    	    index144_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA144_5;

    	    ANTLR3_MARKER index144_5;


    		LA144_5 = LA(1);

    	 
    	    index144_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA144_6;

    	    ANTLR3_MARKER index144_6;


    		LA144_6 = LA(1);

    	 
    	    index144_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA144_7;

    	    ANTLR3_MARKER index144_7;


    		LA144_7 = LA(1);

    	 
    	    index144_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA144_8;

    	    ANTLR3_MARKER index144_8;


    		LA144_8 = LA(1);

    	 
    	    index144_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA144_9;

    	    ANTLR3_MARKER index144_9;


    		LA144_9 = LA(1);

    	 
    	    index144_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA144_10;

    	    ANTLR3_MARKER index144_10;


    		LA144_10 = LA(1);

    	 
    	    index144_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index144_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"373:2: msgRecvStatement : (e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memAndCallExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );";
    EXCEPTION->decisionNum  = 144;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 144
 */
static
ANTLR3_CYCLIC_DFA cdfa144
    =	{
	    144,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"373:2: msgRecvStatement : (e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memAndCallExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );",	
	    (CDFA_SPECIAL_FUNC) dfa144_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa144_eot,	    /* EOT table			    */
	    dfa144_eof,	    /* EOF table			    */
	    dfa144_min,	    /* Minimum tokens for each state    */
	    dfa144_max,	    /* Maximum tokens for each state    */
	    dfa144_accept,	/* Accept table			    */
	    dfa144_special,	/* Special transition states	    */
	    dfa144_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 144
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    388:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa147_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa147_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa147_min[21] =
    {
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa147_max[21] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa147_accept[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa147_special[21] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa147_T_empty	    NULL

static const ANTLR3_INT32 dfa147_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 
	-1, -1, 11, 11, 11, 11, 11, 11, 11, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa147_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa147_transitions[] =
{
    dfa147_T0, dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T1, 
    dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty	
};

static ANTLR3_INT32 dfa147_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA147_1;

    	    ANTLR3_MARKER index147_1;


    		LA147_1 = LA(1);

    	 
    	    index147_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA147_2;

    	    ANTLR3_MARKER index147_2;


    		LA147_2 = LA(1);

    	 
    	    index147_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA147_3;

    	    ANTLR3_MARKER index147_3;


    		LA147_3 = LA(1);

    	 
    	    index147_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA147_4;

    	    ANTLR3_MARKER index147_4;


    		LA147_4 = LA(1);

    	 
    	    index147_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA147_5;

    	    ANTLR3_MARKER index147_5;


    		LA147_5 = LA(1);

    	 
    	    index147_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA147_6;

    	    ANTLR3_MARKER index147_6;


    		LA147_6 = LA(1);

    	 
    	    index147_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA147_7;

    	    ANTLR3_MARKER index147_7;


    		LA147_7 = LA(1);

    	 
    	    index147_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA147_8;

    	    ANTLR3_MARKER index147_8;


    		LA147_8 = LA(1);

    	 
    	    index147_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA147_9;

    	    ANTLR3_MARKER index147_9;


    		LA147_9 = LA(1);

    	 
    	    index147_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA147_10;

    	    ANTLR3_MARKER index147_10;


    		LA147_10 = LA(1);

    	 
    	    index147_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred163_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index147_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"388:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 147;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 147
 */
static
ANTLR3_CYCLIC_DFA cdfa147
    =	{
	    147,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"388:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa147_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa147_eot,	    /* EOT table			    */
	    dfa147_eof,	    /* EOF table			    */
	    dfa147_min,	    /* Minimum tokens for each state    */
	    dfa147_max,	    /* Maximum tokens for each state    */
	    dfa147_accept,	/* Accept table			    */
	    dfa147_special,	/* Special transition states	    */
	    dfa147_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 147
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    393:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa150_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa150_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa150_min[21] =
    {
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa150_max[21] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa150_accept[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa150_special[21] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa150_T_empty	    NULL

static const ANTLR3_INT32 dfa150_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 
	-1, -1, 11, 11, 11, 11, 11, 11, 11, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa150_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa150_transitions[] =
{
    dfa150_T0, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, 
    dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T_empty, dfa150_T_empty, 
    dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, 
    dfa150_T_empty, dfa150_T_empty, dfa150_T_empty	
};

static ANTLR3_INT32 dfa150_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA150_1;

    	    ANTLR3_MARKER index150_1;


    		LA150_1 = LA(1);

    	 
    	    index150_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA150_2;

    	    ANTLR3_MARKER index150_2;


    		LA150_2 = LA(1);

    	 
    	    index150_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA150_3;

    	    ANTLR3_MARKER index150_3;


    		LA150_3 = LA(1);

    	 
    	    index150_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA150_4;

    	    ANTLR3_MARKER index150_4;


    		LA150_4 = LA(1);

    	 
    	    index150_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA150_5;

    	    ANTLR3_MARKER index150_5;


    		LA150_5 = LA(1);

    	 
    	    index150_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA150_6;

    	    ANTLR3_MARKER index150_6;


    		LA150_6 = LA(1);

    	 
    	    index150_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA150_7;

    	    ANTLR3_MARKER index150_7;


    		LA150_7 = LA(1);

    	 
    	    index150_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA150_8;

    	    ANTLR3_MARKER index150_8;


    		LA150_8 = LA(1);

    	 
    	    index150_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA150_9;

    	    ANTLR3_MARKER index150_9;


    		LA150_9 = LA(1);

    	 
    	    index150_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA150_10;

    	    ANTLR3_MARKER index150_10;


    		LA150_10 = LA(1);

    	 
    	    index150_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index150_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"393:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 150;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 150
 */
static
ANTLR3_CYCLIC_DFA cdfa150
    =	{
	    150,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"393:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa150_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa150_eot,	    /* EOT table			    */
	    dfa150_eof,	    /* EOF table			    */
	    dfa150_min,	    /* Minimum tokens for each state    */
	    dfa150_max,	    /* Maximum tokens for each state    */
	    dfa150_accept,	/* Accept table			    */
	    dfa150_special,	/* Special transition states	    */
	    dfa150_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 150
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    399:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa151_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa151_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa151_min[13] =
    {
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa151_max[13] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa151_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa151_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa151_T_empty	    NULL

static const ANTLR3_INT32 dfa151_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa151_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa151_transitions[] =
{
    dfa151_T0, dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T1, 
    dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T1, dfa151_T_empty, dfa151_T_empty	
};

static ANTLR3_INT32 dfa151_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA151_1;

    	    ANTLR3_MARKER index151_1;


    		LA151_1 = LA(1);

    	 
    	    index151_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA151_2;

    	    ANTLR3_MARKER index151_2;


    		LA151_2 = LA(1);

    	 
    	    index151_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA151_3;

    	    ANTLR3_MARKER index151_3;


    		LA151_3 = LA(1);

    	 
    	    index151_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA151_4;

    	    ANTLR3_MARKER index151_4;


    		LA151_4 = LA(1);

    	 
    	    index151_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA151_5;

    	    ANTLR3_MARKER index151_5;


    		LA151_5 = LA(1);

    	 
    	    index151_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA151_6;

    	    ANTLR3_MARKER index151_6;


    		LA151_6 = LA(1);

    	 
    	    index151_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA151_7;

    	    ANTLR3_MARKER index151_7;


    		LA151_7 = LA(1);

    	 
    	    index151_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA151_8;

    	    ANTLR3_MARKER index151_8;


    		LA151_8 = LA(1);

    	 
    	    index151_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA151_9;

    	    ANTLR3_MARKER index151_9;


    		LA151_9 = LA(1);

    	 
    	    index151_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA151_10;

    	    ANTLR3_MARKER index151_10;


    		LA151_10 = LA(1);

    	 
    	    index151_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index151_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"399:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 151;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 151
 */
static
ANTLR3_CYCLIC_DFA cdfa151
    =	{
	    151,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"399:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa151_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa151_eot,	    /* EOT table			    */
	    dfa151_eof,	    /* EOF table			    */
	    dfa151_min,	    /* Minimum tokens for each state    */
	    dfa151_max,	    /* Maximum tokens for each state    */
	    dfa151_accept,	/* Accept table			    */
	    dfa151_special,	/* Special transition states	    */
	    dfa151_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 151
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    404:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa153_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_eof[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_min[12] =
    {
	109, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa153_max[12] =
    {
	214, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa153_accept[12] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa153_special[12] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa153_T_empty	    NULL

static const ANTLR3_INT32 dfa153_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa153_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa153_transitions[] =
{
    dfa153_T0, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T1, dfa153_T_empty	
};

static ANTLR3_INT32 dfa153_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA153_10;

    	    ANTLR3_MARKER index153_10;


    		LA153_10 = LA(1);

    	 
    	    index153_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index153_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"404:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 153;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 153
 */
static
ANTLR3_CYCLIC_DFA cdfa153
    =	{
	    153,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"404:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa153_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa153_eot,	    /* EOT table			    */
	    dfa153_eof,	    /* EOF table			    */
	    dfa153_min,	    /* Minimum tokens for each state    */
	    dfa153_max,	    /* Maximum tokens for each state    */
	    dfa153_accept,	/* Accept table			    */
	    dfa153_special,	/* Special transition states	    */
	    dfa153_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 153
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 421:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa159_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_min[81] =
    {
	108, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_max[81] =
    {
	214, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa159_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa159_T_empty	    NULL

static const ANTLR3_INT32 dfa159_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa159_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa159_transitions[] =
{
    dfa159_T0, dfa159_T1, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T1, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty	
};

static ANTLR3_INT32 dfa159_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA159_1;

    	    ANTLR3_MARKER index159_1;


    		LA159_1 = LA(1);

    	 
    	    index159_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred176_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred178_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index159_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA159_9;

    	    ANTLR3_MARKER index159_9;


    		LA159_9 = LA(1);

    	 
    	    index159_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred178_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index159_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 421:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 159;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 159
 */
static
ANTLR3_CYCLIC_DFA cdfa159
    =	{
	    159,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 421:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa159_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa159_eot,	    /* EOT table			    */
	    dfa159_eof,	    /* EOF table			    */
	    dfa159_min,	    /* Minimum tokens for each state    */
	    dfa159_max,	    /* Maximum tokens for each state    */
	    dfa159_accept,	/* Accept table			    */
	    dfa159_special,	/* Special transition states	    */
	    dfa159_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 159
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 422:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa162_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_min[81] =
    {
	108, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_max[81] =
    {
	214, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa162_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa162_T_empty	    NULL

static const ANTLR3_INT32 dfa162_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa162_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa162_transitions[] =
{
    dfa162_T0, dfa162_T1, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T1, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty	
};

static ANTLR3_INT32 dfa162_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA162_1;

    	    ANTLR3_MARKER index162_1;


    		LA162_1 = LA(1);

    	 
    	    index162_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred181_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred183_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index162_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA162_9;

    	    ANTLR3_MARKER index162_9;


    		LA162_9 = LA(1);

    	 
    	    index162_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred183_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index162_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 422:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 162;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 162
 */
static
ANTLR3_CYCLIC_DFA cdfa162
    =	{
	    162,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 422:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa162_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa162_eot,	    /* EOT table			    */
	    dfa162_eof,	    /* EOF table			    */
	    dfa162_min,	    /* Minimum tokens for each state    */
	    dfa162_max,	    /* Maximum tokens for each state    */
	    dfa162_accept,	/* Accept table			    */
	    dfa162_special,	/* Special transition states	    */
	    dfa162_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 162
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 423:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa167_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa167_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa167_min[81] =
    {
	108, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa167_max[81] =
    {
	214, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa167_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa167_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa167_T_empty	    NULL

static const ANTLR3_INT32 dfa167_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa167_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa167_transitions[] =
{
    dfa167_T0, dfa167_T1, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T1, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty	
};

static ANTLR3_INT32 dfa167_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA167_1;

    	    ANTLR3_MARKER index167_1;


    		LA167_1 = LA(1);

    	 
    	    index167_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred188_Emerson(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred190_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index167_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA167_9;

    	    ANTLR3_MARKER index167_9;


    		LA167_9 = LA(1);

    	 
    	    index167_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred190_Emerson(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index167_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 423:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 167;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 167
 */
static
ANTLR3_CYCLIC_DFA cdfa167
    =	{
	    167,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 423:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa167_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa167_eot,	    /* EOT table			    */
	    dfa167_eof,	    /* EOF table			    */
	    dfa167_min,	    /* Minimum tokens for each state    */
	    dfa167_max,	    /* Maximum tokens for each state    */
	    dfa167_accept,	/* Accept table			    */
	    dfa167_special,	/* Special transition states	    */
	    dfa167_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 167
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 432:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa174_eot[52] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa174_eof[52] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa174_min[52] =
    {
	108, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa174_max[52] =
    {
	204, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa174_accept[52] =
    {
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa174_special[52] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa174_T_empty	    NULL

static const ANTLR3_INT32 dfa174_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 2, 2, -1, 2, 2, -1, 2, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, 50, 2, 51, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa174_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa174_transitions[] =
{
    dfa174_T0, dfa174_T1, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, dfa174_T_empty, 
    dfa174_T_empty, dfa174_T_empty	
};

static ANTLR3_INT32 dfa174_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA174_1;

    	    ANTLR3_MARKER index174_1;


    		LA174_1 = LA(1);

    	 
    	    index174_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred194_Emerson(ctx)) )
    	    {
    	        s = 49;
    	    }

    	    else if ( (synpred196_Emerson(ctx)) )
    	    {
    	        s = 50;
    	    }

    	    else if ( (synpred198_Emerson(ctx)) )
    	    {
    	        s = 51;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index174_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 432:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 174;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 174
 */
static
ANTLR3_CYCLIC_DFA cdfa174
    =	{
	    174,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 432:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa174_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa174_eot,	    /* EOT table			    */
	    dfa174_eof,	    /* EOF table			    */
	    dfa174_min,	    /* Minimum tokens for each state    */
	    dfa174_max,	    /* Maximum tokens for each state    */
	    dfa174_accept,	/* Accept table			    */
	    dfa174_special,	/* Special transition states	    */
	    dfa174_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 174
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    462:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa192_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa192_eof[5] =
    {
	3, 3, -1, -1, 3
    };
static const ANTLR3_INT32 dfa192_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa192_max[5] =
    {
	191, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa192_accept[5] =
    {
	-1, -1, 1, 2, -1
    };
static const ANTLR3_INT32 dfa192_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa192_T_empty	    NULL

static const ANTLR3_INT32 dfa192_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };static const ANTLR3_INT32 dfa192_T1[] =
    {
	4, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 
	3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, 3, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, 3, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa192_transitions[] =
{
    dfa192_T0, dfa192_T1, dfa192_T_empty, dfa192_T_empty, dfa192_T1	
};


/* Declare tracking structure for Cyclic DFA 192
 */
static
ANTLR3_CYCLIC_DFA cdfa192
    =	{
	    192,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"462:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa192_eot,	    /* EOT table			    */
	    dfa192_eof,	    /* EOF table			    */
	    dfa192_min,	    /* Minimum tokens for each state    */
	    dfa192_max,	    /* Maximum tokens for each state    */
	    dfa192_accept,	/* Accept table			    */
	    dfa192_special,	/* Special transition states	    */
	    dfa192_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 192
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    466:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa197_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa197_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa197_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa197_max[4] =
    {
	180, 180, -1, -1
    };
static const ANTLR3_INT32 dfa197_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa197_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa197_T_empty	    NULL

static const ANTLR3_INT32 dfa197_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa197_transitions[] =
{
    dfa197_T0, dfa197_T0, dfa197_T_empty, dfa197_T_empty	
};


/* Declare tracking structure for Cyclic DFA 197
 */
static
ANTLR3_CYCLIC_DFA cdfa197
    =	{
	    197,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"466:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa197_eot,	    /* EOT table			    */
	    dfa197_eof,	    /* EOF table			    */
	    dfa197_min,	    /* Minimum tokens for each state    */
	    dfa197_max,	    /* Maximum tokens for each state    */
	    dfa197_accept,	/* Accept table			    */
	    dfa197_special,	/* Special transition states	    */
	    dfa197_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 197
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 471:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa200_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa200_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa200_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa200_max[5] =
    {
	191, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa200_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa200_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa200_T_empty	    NULL

static const ANTLR3_INT32 dfa200_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa200_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa200_transitions[] =
{
    dfa200_T1, dfa200_T0, dfa200_T_empty, dfa200_T_empty, dfa200_T0	
};


/* Declare tracking structure for Cyclic DFA 200
 */
static
ANTLR3_CYCLIC_DFA cdfa200
    =	{
	    200,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 471:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa200_eot,	    /* EOT table			    */
	    dfa200_eof,	    /* EOF table			    */
	    dfa200_min,	    /* Minimum tokens for each state    */
	    dfa200_max,	    /* Maximum tokens for each state    */
	    dfa200_accept,	/* Accept table			    */
	    dfa200_special,	/* Special transition states	    */
	    dfa200_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 200
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 475:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa203_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa203_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa203_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa203_max[5] =
    {
	191, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa203_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa203_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa203_T_empty	    NULL

static const ANTLR3_INT32 dfa203_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa203_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa203_transitions[] =
{
    dfa203_T0, dfa203_T1, dfa203_T_empty, dfa203_T_empty, dfa203_T1	
};


/* Declare tracking structure for Cyclic DFA 203
 */
static
ANTLR3_CYCLIC_DFA cdfa203
    =	{
	    203,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 475:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa203_eot,	    /* EOT table			    */
	    dfa203_eof,	    /* EOF table			    */
	    dfa203_min,	    /* Minimum tokens for each state    */
	    dfa203_max,	    /* Maximum tokens for each state    */
	    dfa203_accept,	/* Accept table			    */
	    dfa203_special,	/* Special transition states	    */
	    dfa203_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 203
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 479:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa206_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa206_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa206_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa206_max[4] =
    {
	181, 181, -1, -1
    };
static const ANTLR3_INT32 dfa206_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa206_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa206_T_empty	    NULL

static const ANTLR3_INT32 dfa206_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa206_transitions[] =
{
    dfa206_T0, dfa206_T0, dfa206_T_empty, dfa206_T_empty	
};


/* Declare tracking structure for Cyclic DFA 206
 */
static
ANTLR3_CYCLIC_DFA cdfa206
    =	{
	    206,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 479:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa206_eot,	    /* EOT table			    */
	    dfa206_eof,	    /* EOF table			    */
	    dfa206_min,	    /* Minimum tokens for each state    */
	    dfa206_max,	    /* Maximum tokens for each state    */
	    dfa206_accept,	/* Accept table			    */
	    dfa206_special,	/* Special transition states	    */
	    dfa206_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 206
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 484:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa209_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa209_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa209_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa209_max[4] =
    {
	182, 182, -1, -1
    };
static const ANTLR3_INT32 dfa209_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa209_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa209_T_empty	    NULL

static const ANTLR3_INT32 dfa209_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa209_transitions[] =
{
    dfa209_T0, dfa209_T0, dfa209_T_empty, dfa209_T_empty	
};


/* Declare tracking structure for Cyclic DFA 209
 */
static
ANTLR3_CYCLIC_DFA cdfa209
    =	{
	    209,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 484:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa209_eot,	    /* EOT table			    */
	    dfa209_eof,	    /* EOF table			    */
	    dfa209_min,	    /* Minimum tokens for each state    */
	    dfa209_max,	    /* Maximum tokens for each state    */
	    dfa209_accept,	/* Accept table			    */
	    dfa209_special,	/* Special transition states	    */
	    dfa209_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 209
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 488:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa212_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa212_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa212_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa212_max[5] =
    {
	191, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa212_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa212_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa212_T_empty	    NULL

static const ANTLR3_INT32 dfa212_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 3, -1, -1, -1, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa212_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa212_transitions[] =
{
    dfa212_T0, dfa212_T1, dfa212_T_empty, dfa212_T_empty, dfa212_T1	
};


/* Declare tracking structure for Cyclic DFA 212
 */
static
ANTLR3_CYCLIC_DFA cdfa212
    =	{
	    212,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 488:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa212_eot,	    /* EOT table			    */
	    dfa212_eof,	    /* EOF table			    */
	    dfa212_min,	    /* Minimum tokens for each state    */
	    dfa212_max,	    /* Maximum tokens for each state    */
	    dfa212_accept,	/* Accept table			    */
	    dfa212_special,	/* Special transition states	    */
	    dfa212_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 212
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 492:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa215_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa215_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa215_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa215_max[4] =
    {
	183, 183, -1, -1
    };
static const ANTLR3_INT32 dfa215_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa215_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa215_T_empty	    NULL

static const ANTLR3_INT32 dfa215_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa215_transitions[] =
{
    dfa215_T0, dfa215_T0, dfa215_T_empty, dfa215_T_empty	
};


/* Declare tracking structure for Cyclic DFA 215
 */
static
ANTLR3_CYCLIC_DFA cdfa215
    =	{
	    215,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 492:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa215_eot,	    /* EOT table			    */
	    dfa215_eof,	    /* EOF table			    */
	    dfa215_min,	    /* Minimum tokens for each state    */
	    dfa215_max,	    /* Maximum tokens for each state    */
	    dfa215_accept,	/* Accept table			    */
	    dfa215_special,	/* Special transition states	    */
	    dfa215_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 215
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 496:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa218_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa218_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa218_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa218_max[5] =
    {
	191, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa218_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa218_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa218_T_empty	    NULL

static const ANTLR3_INT32 dfa218_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa218_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 3, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa218_transitions[] =
{
    dfa218_T1, dfa218_T0, dfa218_T_empty, dfa218_T_empty, dfa218_T0	
};


/* Declare tracking structure for Cyclic DFA 218
 */
static
ANTLR3_CYCLIC_DFA cdfa218
    =	{
	    218,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 496:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa218_eot,	    /* EOT table			    */
	    dfa218_eof,	    /* EOF table			    */
	    dfa218_min,	    /* Minimum tokens for each state    */
	    dfa218_max,	    /* Maximum tokens for each state    */
	    dfa218_accept,	/* Accept table			    */
	    dfa218_special,	/* Special transition states	    */
	    dfa218_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 218
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 500:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa221_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa221_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa221_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa221_max[4] =
    {
	184, 184, -1, -1
    };
static const ANTLR3_INT32 dfa221_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa221_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa221_T_empty	    NULL

static const ANTLR3_INT32 dfa221_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa221_transitions[] =
{
    dfa221_T0, dfa221_T0, dfa221_T_empty, dfa221_T_empty	
};


/* Declare tracking structure for Cyclic DFA 221
 */
static
ANTLR3_CYCLIC_DFA cdfa221
    =	{
	    221,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 500:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa221_eot,	    /* EOT table			    */
	    dfa221_eof,	    /* EOF table			    */
	    dfa221_min,	    /* Minimum tokens for each state    */
	    dfa221_max,	    /* Maximum tokens for each state    */
	    dfa221_accept,	/* Accept table			    */
	    dfa221_special,	/* Special transition states	    */
	    dfa221_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 221
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 504:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa224_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa224_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa224_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa224_max[5] =
    {
	191, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa224_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa224_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa224_T_empty	    NULL

static const ANTLR3_INT32 dfa224_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa224_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 2, 3, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa224_transitions[] =
{
    dfa224_T1, dfa224_T0, dfa224_T_empty, dfa224_T_empty, dfa224_T0	
};


/* Declare tracking structure for Cyclic DFA 224
 */
static
ANTLR3_CYCLIC_DFA cdfa224
    =	{
	    224,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 504:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa224_eot,	    /* EOT table			    */
	    dfa224_eof,	    /* EOF table			    */
	    dfa224_min,	    /* Minimum tokens for each state    */
	    dfa224_max,	    /* Maximum tokens for each state    */
	    dfa224_accept,	/* Accept table			    */
	    dfa224_special,	/* Special transition states	    */
	    dfa224_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 224
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 508:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa227_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa227_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa227_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa227_max[4] =
    {
	185, 185, -1, -1
    };
static const ANTLR3_INT32 dfa227_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa227_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa227_T_empty	    NULL

static const ANTLR3_INT32 dfa227_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa227_transitions[] =
{
    dfa227_T0, dfa227_T0, dfa227_T_empty, dfa227_T_empty	
};


/* Declare tracking structure for Cyclic DFA 227
 */
static
ANTLR3_CYCLIC_DFA cdfa227
    =	{
	    227,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 508:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa227_eot,	    /* EOT table			    */
	    dfa227_eof,	    /* EOF table			    */
	    dfa227_min,	    /* Minimum tokens for each state    */
	    dfa227_max,	    /* Maximum tokens for each state    */
	    dfa227_accept,	/* Accept table			    */
	    dfa227_special,	/* Special transition states	    */
	    dfa227_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 227
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 512:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa230_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa230_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa230_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa230_max[5] =
    {
	191, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa230_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa230_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa230_T_empty	    NULL

static const ANTLR3_INT32 dfa230_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 3, 3, 3, 3, -1, 2
    };static const ANTLR3_INT32 dfa230_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 
	2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa230_transitions[] =
{
    dfa230_T0, dfa230_T1, dfa230_T_empty, dfa230_T_empty, dfa230_T1	
};


/* Declare tracking structure for Cyclic DFA 230
 */
static
ANTLR3_CYCLIC_DFA cdfa230
    =	{
	    230,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 512:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa230_eot,	    /* EOT table			    */
	    dfa230_eof,	    /* EOF table			    */
	    dfa230_min,	    /* Minimum tokens for each state    */
	    dfa230_max,	    /* Maximum tokens for each state    */
	    dfa230_accept,	/* Accept table			    */
	    dfa230_special,	/* Special transition states	    */
	    dfa230_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 230
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 524:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa234_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa234_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa234_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa234_max[4] =
    {
	189, 189, -1, -1
    };
static const ANTLR3_INT32 dfa234_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa234_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa234_T_empty	    NULL

static const ANTLR3_INT32 dfa234_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa234_transitions[] =
{
    dfa234_T0, dfa234_T0, dfa234_T_empty, dfa234_T_empty	
};


/* Declare tracking structure for Cyclic DFA 234
 */
static
ANTLR3_CYCLIC_DFA cdfa234
    =	{
	    234,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 524:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa234_eot,	    /* EOT table			    */
	    dfa234_eof,	    /* EOF table			    */
	    dfa234_min,	    /* Minimum tokens for each state    */
	    dfa234_max,	    /* Maximum tokens for each state    */
	    dfa234_accept,	/* Accept table			    */
	    dfa234_special,	/* Special transition states	    */
	    dfa234_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 234
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 538:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa238_eot[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_eof[25] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_min[25] =
    {
	108, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_max[25] =
    {
	194, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_accept[25] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa238_special[25] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa238_T_empty	    NULL

static const ANTLR3_INT32 dfa238_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 20, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 20, 19, 20, 20, 20
    };static const ANTLR3_INT32 dfa238_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa238_transitions[] =
{
    dfa238_T0, dfa238_T1, dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, 
    dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, 
    dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, 
    dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, dfa238_T1, 
    dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, dfa238_T_empty, dfa238_T_empty	
};

static ANTLR3_INT32 dfa238_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA238_1;

    	    ANTLR3_MARKER index238_1;


    		LA238_1 = LA(1);

    	 
    	    index238_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred279_Emerson(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index238_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA238_19;

    	    ANTLR3_MARKER index238_19;


    		LA238_19 = LA(1);

    	 
    	    index238_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred279_Emerson(ctx)) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index238_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 538:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*";
    EXCEPTION->decisionNum  = 238;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 238
 */
static
ANTLR3_CYCLIC_DFA cdfa238
    =	{
	    238,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 538:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa238_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa238_eot,	    /* EOT table			    */
	    dfa238_eof,	    /* EOF table			    */
	    dfa238_min,	    /* Minimum tokens for each state    */
	    dfa238_max,	    /* Maximum tokens for each state    */
	    dfa238_accept,	/* Accept table			    */
	    dfa238_special,	/* Special transition states	    */
	    dfa238_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 238
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 550:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa242_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa242_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa242_min[4] =
    {
	108, 108, -1, -1
    };
static const ANTLR3_INT32 dfa242_max[4] =
    {
	194, 194, -1, -1
    };
static const ANTLR3_INT32 dfa242_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa242_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa242_T_empty	    NULL

static const ANTLR3_INT32 dfa242_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa242_transitions[] =
{
    dfa242_T0, dfa242_T0, dfa242_T_empty, dfa242_T_empty	
};


/* Declare tracking structure for Cyclic DFA 242
 */
static
ANTLR3_CYCLIC_DFA cdfa242
    =	{
	    242,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 550:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa242_eot,	    /* EOT table			    */
	    dfa242_eof,	    /* EOF table			    */
	    dfa242_min,	    /* Minimum tokens for each state    */
	    dfa242_max,	    /* Maximum tokens for each state    */
	    dfa242_accept,	/* Accept table			    */
	    dfa242_special,	/* Special transition states	    */
	    dfa242_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 242
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 560:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa246_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa246_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa246_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa246_max[5] =
    {
	197, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa246_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa246_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa246_T_empty	    NULL

static const ANTLR3_INT32 dfa246_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3
    };static const ANTLR3_INT32 dfa246_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 3, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa246_transitions[] =
{
    dfa246_T0, dfa246_T1, dfa246_T_empty, dfa246_T_empty, dfa246_T1	
};


/* Declare tracking structure for Cyclic DFA 246
 */
static
ANTLR3_CYCLIC_DFA cdfa246
    =	{
	    246,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 560:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa246_eot,	    /* EOT table			    */
	    dfa246_eof,	    /* EOF table			    */
	    dfa246_min,	    /* Minimum tokens for each state    */
	    dfa246_max,	    /* Maximum tokens for each state    */
	    dfa246_accept,	/* Accept table			    */
	    dfa246_special,	/* Special transition states	    */
	    dfa246_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 246
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 571:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa250_eot[30] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_eof[30] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_min[30] =
    {
	108, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_max[30] =
    {
	199, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_accept[30] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1
    };
static const ANTLR3_INT32 dfa250_special[30] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa250_T_empty	    NULL

static const ANTLR3_INT32 dfa250_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 28, 28
    };static const ANTLR3_INT32 dfa250_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa250_transitions[] =
{
    dfa250_T0, dfa250_T1, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, 
    dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, 
    dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, 
    dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, 
    dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, 
    dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty, dfa250_T_empty	
};

static ANTLR3_INT32 dfa250_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA250_1;

    	    ANTLR3_MARKER index250_1;


    		LA250_1 = LA(1);

    	 
    	    index250_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred295_Emerson(ctx)) )
    	    {
    	        s = 28;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index250_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 571:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 250;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 250
 */
static
ANTLR3_CYCLIC_DFA cdfa250
    =	{
	    250,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 571:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa250_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa250_eot,	    /* EOT table			    */
	    dfa250_eof,	    /* EOF table			    */
	    dfa250_min,	    /* Minimum tokens for each state    */
	    dfa250_max,	    /* Maximum tokens for each state    */
	    dfa250_accept,	/* Accept table			    */
	    dfa250_special,	/* Special transition states	    */
	    dfa250_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 250
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 581:42: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa254_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa254_min[5] =
    {
	108, 108, -1, -1, 108
    };
static const ANTLR3_INT32 dfa254_max[5] =
    {
	202, 214, -1, -1, 214
    };
static const ANTLR3_INT32 dfa254_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa254_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa254_T_empty	    NULL

static const ANTLR3_INT32 dfa254_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3
    };static const ANTLR3_INT32 dfa254_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa254_transitions[] =
{
    dfa254_T0, dfa254_T1, dfa254_T_empty, dfa254_T_empty, dfa254_T1	
};


/* Declare tracking structure for Cyclic DFA 254
 */
static
ANTLR3_CYCLIC_DFA cdfa254
    =	{
	    254,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 581:42: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa254_eot,	    /* EOT table			    */
	    dfa254_eof,	    /* EOF table			    */
	    dfa254_min,	    /* Minimum tokens for each state    */
	    dfa254_max,	    /* Maximum tokens for each state    */
	    dfa254_accept,	/* Accept table			    */
	    dfa254_special,	/* Special transition states	    */
	    dfa254_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 254
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    585:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static const ANTLR3_INT32 dfa255_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa255_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa255_min[14] =
    {
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa255_max[14] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa255_accept[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa255_special[14] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa255_T_empty	    NULL

static const ANTLR3_INT32 dfa255_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa255_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa255_transitions[] =
{
    dfa255_T0, dfa255_T1, dfa255_T1, dfa255_T1, dfa255_T1, dfa255_T1, dfa255_T1, 
    dfa255_T1, dfa255_T1, dfa255_T1, dfa255_T1, dfa255_T_empty, dfa255_T_empty, 
    dfa255_T_empty	
};

static ANTLR3_INT32 dfa255_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA255_1;

    	    ANTLR3_MARKER index255_1;


    		LA255_1 = LA(1);

    	 
    	    index255_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA255_2;

    	    ANTLR3_MARKER index255_2;


    		LA255_2 = LA(1);

    	 
    	    index255_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA255_3;

    	    ANTLR3_MARKER index255_3;


    		LA255_3 = LA(1);

    	 
    	    index255_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA255_4;

    	    ANTLR3_MARKER index255_4;


    		LA255_4 = LA(1);

    	 
    	    index255_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA255_5;

    	    ANTLR3_MARKER index255_5;


    		LA255_5 = LA(1);

    	 
    	    index255_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA255_6;

    	    ANTLR3_MARKER index255_6;


    		LA255_6 = LA(1);

    	 
    	    index255_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA255_7;

    	    ANTLR3_MARKER index255_7;


    		LA255_7 = LA(1);

    	 
    	    index255_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA255_8;

    	    ANTLR3_MARKER index255_8;


    		LA255_8 = LA(1);

    	 
    	    index255_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA255_9;

    	    ANTLR3_MARKER index255_9;


    		LA255_9 = LA(1);

    	 
    	    index255_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA255_10;

    	    ANTLR3_MARKER index255_10;


    		LA255_10 = LA(1);

    	 
    	    index255_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred302_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index255_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"585:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );";
    EXCEPTION->decisionNum  = 255;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 255
 */
static
ANTLR3_CYCLIC_DFA cdfa255
    =	{
	    255,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"585:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa255_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa255_eot,	    /* EOT table			    */
	    dfa255_eof,	    /* EOF table			    */
	    dfa255_min,	    /* Minimum tokens for each state    */
	    dfa255_max,	    /* Maximum tokens for each state    */
	    dfa255_accept,	/* Accept table			    */
	    dfa255_special,	/* Special transition states	    */
	    dfa255_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 255
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    612:1: primaryExpression : ( 'this' | vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static const ANTLR3_INT32 dfa260_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa260_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa260_min[11] =
    {
	109, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa260_max[11] =
    {
	214, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa260_accept[11] =
    {
	-1, 1, 2, 3, 4, 5, 6, -1, 9, 7, 8
    };
static const ANTLR3_INT32 dfa260_special[11] =
    {	
	-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa260_T_empty	    NULL

static const ANTLR3_INT32 dfa260_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa260_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa260_transitions[] =
{
    dfa260_T0, dfa260_T_empty, dfa260_T_empty, dfa260_T_empty, dfa260_T_empty, 
    dfa260_T_empty, dfa260_T_empty, dfa260_T1, dfa260_T_empty, dfa260_T_empty, 
    dfa260_T_empty	
};

static ANTLR3_INT32 dfa260_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA260_7;

    	    ANTLR3_MARKER index260_7;


    		LA260_7 = LA(1);

    	 
    	    index260_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred318_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (synpred319_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index260_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"612:1: primaryExpression : ( 'this' | vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );";
    EXCEPTION->decisionNum  = 260;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 260
 */
static
ANTLR3_CYCLIC_DFA cdfa260
    =	{
	    260,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"612:1: primaryExpression : ( 'this' | vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa260_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa260_eot,	    /* EOT table			    */
	    dfa260_eof,	    /* EOF table			    */
	    dfa260_min,	    /* Minimum tokens for each state    */
	    dfa260_max,	    /* Maximum tokens for each state    */
	    dfa260_accept,	/* Accept table			    */
	    dfa260_special,	/* Special transition states	    */
	    dfa260_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 260
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    664:1: patternLiteralInternal : ( ( LTERM )* name= expression ( LTERM )* ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )? -> ^( PATTERN_LITERAL_INTERNAL $name ( $val ( $proto)? )? ) | ( LTERM )* name= expression ( LTERM )* ':' ( LTERM )* ':' ( LTERM )* proto= expression ( LTERM )* -> ^( PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL $name $proto) );
 */
static const ANTLR3_INT32 dfa302_eot[23] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa302_eof[23] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa302_min[23] =
    {
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa302_max[23] =
    {
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa302_accept[23] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa302_special[23] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa302_T_empty	    NULL

static const ANTLR3_INT32 dfa302_T0[] =
    {
	1, 4, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, 8, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 17, 18, 
	-1, -1, -1, 16, 15, 12, 13, 14, 19, 20, 2, 5, 6, 6, 6
    };static const ANTLR3_INT32 dfa302_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa302_transitions[] =
{
    dfa302_T0, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, 
    dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, 
    dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, dfa302_T1, 
    dfa302_T_empty, dfa302_T_empty	
};

static ANTLR3_INT32 dfa302_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA302_1;

    	    ANTLR3_MARKER index302_1;


    		LA302_1 = LA(1);

    	 
    	    index302_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA302_2;

    	    ANTLR3_MARKER index302_2;


    		LA302_2 = LA(1);

    	 
    	    index302_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA302_3;

    	    ANTLR3_MARKER index302_3;


    		LA302_3 = LA(1);

    	 
    	    index302_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA302_4;

    	    ANTLR3_MARKER index302_4;


    		LA302_4 = LA(1);

    	 
    	    index302_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA302_5;

    	    ANTLR3_MARKER index302_5;


    		LA302_5 = LA(1);

    	 
    	    index302_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA302_6;

    	    ANTLR3_MARKER index302_6;


    		LA302_6 = LA(1);

    	 
    	    index302_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA302_7;

    	    ANTLR3_MARKER index302_7;


    		LA302_7 = LA(1);

    	 
    	    index302_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA302_8;

    	    ANTLR3_MARKER index302_8;


    		LA302_8 = LA(1);

    	 
    	    index302_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA302_9;

    	    ANTLR3_MARKER index302_9;


    		LA302_9 = LA(1);

    	 
    	    index302_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA302_10;

    	    ANTLR3_MARKER index302_10;


    		LA302_10 = LA(1);

    	 
    	    index302_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA302_11;

    	    ANTLR3_MARKER index302_11;


    		LA302_11 = LA(1);

    	 
    	    index302_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA302_12;

    	    ANTLR3_MARKER index302_12;


    		LA302_12 = LA(1);

    	 
    	    index302_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA302_13;

    	    ANTLR3_MARKER index302_13;


    		LA302_13 = LA(1);

    	 
    	    index302_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA302_14;

    	    ANTLR3_MARKER index302_14;


    		LA302_14 = LA(1);

    	 
    	    index302_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA302_15;

    	    ANTLR3_MARKER index302_15;


    		LA302_15 = LA(1);

    	 
    	    index302_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA302_16;

    	    ANTLR3_MARKER index302_16;


    		LA302_16 = LA(1);

    	 
    	    index302_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA302_17;

    	    ANTLR3_MARKER index302_17;


    		LA302_17 = LA(1);

    	 
    	    index302_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA302_18;

    	    ANTLR3_MARKER index302_18;


    		LA302_18 = LA(1);

    	 
    	    index302_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA302_19;

    	    ANTLR3_MARKER index302_19;


    		LA302_19 = LA(1);

    	 
    	    index302_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 19:
        
    	{
    	    ANTLR3_UINT32 LA302_20;

    	    ANTLR3_MARKER index302_20;


    		LA302_20 = LA(1);

    	 
    	    index302_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index302_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"664:1: patternLiteralInternal : ( ( LTERM )* name= expression ( LTERM )* ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )? -> ^( PATTERN_LITERAL_INTERNAL $name ( $val ( $proto)? )? ) | ( LTERM )* name= expression ( LTERM )* ':' ( LTERM )* ':' ( LTERM )* proto= expression ( LTERM )* -> ^( PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL $name $proto) );";
    EXCEPTION->decisionNum  = 302;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 302
 */
static
ANTLR3_CYCLIC_DFA cdfa302
    =	{
	    302,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"664:1: patternLiteralInternal : ( ( LTERM )* name= expression ( LTERM )* ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )? -> ^( PATTERN_LITERAL_INTERNAL $name ( $val ( $proto)? )? ) | ( LTERM )* name= expression ( LTERM )* ':' ( LTERM )* ':' ( LTERM )* proto= expression ( LTERM )* -> ^( PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL $name $proto) );",	
	    (CDFA_SPECIAL_FUNC) dfa302_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa302_eot,	    /* EOT table			    */
	    dfa302_eof,	    /* EOF table			    */
	    dfa302_min,	    /* Minimum tokens for each state    */
	    dfa302_max,	    /* Maximum tokens for each state    */
	    dfa302_accept,	/* Accept table			    */
	    dfa302_special,	/* Special transition states	    */
	    dfa302_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 302
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//Emerson.g:140:1: program : (a= LTERM )* ( sourceElements )? ( LTERM )* EOF -> ^( PROG ( sourceElements )? ) ;
 */
static EmersonParser_program_return
program(pEmersonParser ctx)
{   
    EmersonParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    EmersonParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:141:2: ( (a= LTERM )* ( sourceElements )? ( LTERM )* EOF -> ^( PROG ( sourceElements )? ) )
        // .//Emerson.g:141:4: (a= LTERM )* ( sourceElements )? ( LTERM )* EOF
        {

            // .//Emerson.g:141:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA1_2 = LA(2);
                            if ( (synpred1_Emerson(ctx)) ) 
                            {
                                alt1=1;
                            }

                        }
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program854); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:141:14: ( sourceElements )?
            {
                int alt2=2;
                alt2 = cdfa2.predict(ctx, RECOGNIZER, ISTREAM, &cdfa2);
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt2) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: sourceElements
            	    {
            	        FOLLOWPUSH(FOLLOW_sourceElements_in_program858);
            	        sourceElements1=sourceElements(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:141:30: ( LTERM )*

            for (;;)
            {
                int alt3=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA3_0 = LA(1);
                    if ( (LA3_0 == LTERM) ) 
                    {
                        alt3=1;
                    }

                }
                switch (alt3) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program861); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program864); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 141:41: -> ^( PROG ( sourceElements )? )
            	{
            	    // .//Emerson.g:141:44: ^( PROG ( sourceElements )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        // .//Emerson.g:141:51: ( sourceElements )?
            	        {
            	        	if ( (stream_sourceElements != NULL && stream_sourceElements->hasNext(stream_sourceElements))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        	}
            	        	if ( stream_sourceElements != NULL) stream_sourceElements->reset(stream_sourceElements);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//Emerson.g:144:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static EmersonParser_sourceElements_return
sourceElements(pEmersonParser ctx)
{   
    EmersonParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    EmersonParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 EmersonParser_sourceElement_return

    EmersonParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 EmersonParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:145:2: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//Emerson.g:145:4: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements885);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//Emerson.g:145:18: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt5=2;
                alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt5) 
                {
            	case 1:
            	    // .//Emerson.g:145:19: ( LTERM )* sourceElement
            	    {

            	        // .//Emerson.g:145:19: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt4=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA4_0 = LA(1);
            	                if ( (LA4_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA4_2 = LA(2);
            	                        if ( (synpred4_Emerson(ctx)) ) 
            	                        {
            	                            alt4=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt4) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements888); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop4;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop4: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements891);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 145:42: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//Emerson.g:148:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static EmersonParser_sourceElement_return
sourceElement(pEmersonParser ctx)
{   
    EmersonParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 EmersonParser_functionDeclaration_return

    EmersonParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 EmersonParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:149:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt6;

            alt6=2;

            alt6 = cdfa6.predict(ctx, RECOGNIZER, ISTREAM, &cdfa6);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt6) 
            {
        	case 1:
        	    // .//Emerson.g:149:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement912);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 149:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:150:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement921);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 150:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//Emerson.g:154:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionDeclaration_return
functionDeclaration(pEmersonParser ctx)
{   
    EmersonParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    EmersonParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:155:2: ( 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//Emerson.g:155:4: 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_functionDeclaration938); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, string_literal9, NULL); }


            // .//Emerson.g:155:15: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration940); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration943); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//Emerson.g:155:33: ( LTERM )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA8_2 = LA(2);
                            if ( (synpred8_Emerson(ctx)) ) 
                            {
                                alt8=1;
                            }

                        }
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration945); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:155:41: ( formalParameterList )?
            {
                int alt9=2;
                {
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == Identifier) ) 
                    {
                        alt9=1;
                    }
                }
                switch (alt9) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration949);
            	        formalParameterList13=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:155:62: ( LTERM )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == LTERM) ) 
                    {
                        alt10=1;
                    }

                }
                switch (alt10) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration952); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration955);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, formalParameterList, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 155:82: -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:155:85: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:155:109: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//Emerson.g:158:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionExpression_return
functionExpression(pEmersonParser ctx)
{   
    EmersonParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    char_literal20;
    pANTLR3_COMMON_TOKEN    LTERM21;
    pANTLR3_COMMON_TOKEN    LTERM23;
    pANTLR3_COMMON_TOKEN    char_literal24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    EmersonParser_formalParameterList_return formalParameterList22;
    #undef	RETURN_TYPE_formalParameterList22
    #define	RETURN_TYPE_formalParameterList22 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody26;
    #undef	RETURN_TYPE_functionBody26
    #define	RETURN_TYPE_functionBody26 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE char_literal20_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_BASE_TREE LTERM23_tree;
    pANTLR3_BASE_TREE char_literal24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    char_literal20       = NULL;
    LTERM21       = NULL;
    LTERM23       = NULL;
    char_literal24       = NULL;
    LTERM25       = NULL;
    formalParameterList22.tree = NULL;

    functionBody26.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    char_literal20_tree   = NULL;
    LTERM21_tree   = NULL;
    LTERM23_tree   = NULL;
    char_literal24_tree   = NULL;
    LTERM25_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:159:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//Emerson.g:159:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_functionExpression980); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, string_literal16, NULL); }


            // .//Emerson.g:159:15: ( LTERM )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA11_2 = LA(2);
                            if ( (synpred11_Emerson(ctx)) ) 
                            {
                                alt11=1;
                            }

                        }
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression982); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:159:22: ( Identifier )?
            {
                int alt12=2;
                {
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == Identifier) ) 
                    {
                        alt12=1;
                    }
                }
                switch (alt12) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression985); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:159:34: ( LTERM )*

            for (;;)
            {
                int alt13=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA13_0 = LA(1);
                    if ( (LA13_0 == LTERM) ) 
                    {
                        alt13=1;
                    }

                }
                switch (alt13) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression988); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */

            char_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_functionExpression991); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal20, NULL); }


            // .//Emerson.g:159:45: ( LTERM )*

            for (;;)
            {
                int alt14=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA14_2 = LA(2);
                            if ( (synpred14_Emerson(ctx)) ) 
                            {
                                alt14=1;
                            }

                        }
                    }

                }
                switch (alt14) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression993); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:159:52: ( formalParameterList )?
            {
                int alt15=2;
                {
                    int LA15_0 = LA(1);
                    if ( (LA15_0 == Identifier) ) 
                    {
                        alt15=1;
                    }
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression996);
            	        formalParameterList22=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList22.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:159:73: ( LTERM )*

            for (;;)
            {
                int alt16=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA16_0 = LA(1);
                    if ( (LA16_0 == LTERM) ) 
                    {
                        alt16=1;
                    }

                }
                switch (alt16) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM23 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression999); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM23, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */

            char_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_functionExpression1002); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal24, NULL); }


            // .//Emerson.g:159:84: ( LTERM )*

            for (;;)
            {
                int alt17=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA17_0 = LA(1);
                    if ( (LA17_0 == LTERM) ) 
                    {
                        alt17=1;
                    }

                }
                switch (alt17) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1004); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression1007);
            functionBody26=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody26.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, functionBody, formalParameterList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 159:104: -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:159:107: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//Emerson.g:159:120: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        // .//Emerson.g:159:133: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//Emerson.g:162:1: formalParameterList : Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) ;
 */
static EmersonParser_formalParameterList_return
formalParameterList(pEmersonParser ctx)
{   
    EmersonParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier27;
    pANTLR3_COMMON_TOKEN    char_literal28;
    pANTLR3_COMMON_TOKEN    LTERM29;
    pANTLR3_COMMON_TOKEN    Identifier30;

    pANTLR3_BASE_TREE Identifier27_tree;
    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_BASE_TREE LTERM29_tree;
    pANTLR3_BASE_TREE Identifier30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier27       = NULL;
    char_literal28       = NULL;
    LTERM29       = NULL;
    Identifier30       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Identifier27_tree   = NULL;
    char_literal28_tree   = NULL;
    LTERM29_tree   = NULL;
    Identifier30_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:163:2: ( Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) )
        // .//Emerson.g:163:4: Identifier ( ',' ( LTERM )* Identifier )*
        {
            Identifier27 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList1035); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier27, NULL); }


            // .//Emerson.g:163:15: ( ',' ( LTERM )* Identifier )*

            for (;;)
            {
                int alt19=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == 138) ) 
                    {
                        alt19=1;
                    }

                }
                switch (alt19) 
                {
            	case 1:
            	    // .//Emerson.g:163:16: ',' ( LTERM )* Identifier
            	    {
            	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_formalParameterList1038); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal28, NULL); }


            	        // .//Emerson.g:163:20: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt18=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA18_0 = LA(1);
            	                if ( (LA18_0 == LTERM) ) 
            	                {
            	                    alt18=1;
            	                }

            	            }
            	            switch (alt18) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM29 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList1040); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM29, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop18;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop18: ; /* Jump out to here if this rule does not match */

            	        Identifier30 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList1043); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier30, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 163:40: -> ^( FUNC_PARAMS ( Identifier )+ )
            	{
            	    // .//Emerson.g:163:43: ^( FUNC_PARAMS ( Identifier )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        if ((stream_Identifier == NULL || !stream_Identifier->hasNext(stream_Identifier))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_Identifier->hasNext(stream_Identifier))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//Emerson.g:166:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static EmersonParser_functionBody_return
functionBody(pEmersonParser ctx)
{   
    EmersonParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal31;
    pANTLR3_COMMON_TOKEN    LTERM32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    LTERM35;
    pANTLR3_COMMON_TOKEN    LTERM37;
    pANTLR3_COMMON_TOKEN    char_literal38;
    EmersonParser_sourceElements_return sourceElements36;
    #undef	RETURN_TYPE_sourceElements36
    #define	RETURN_TYPE_sourceElements36 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal31_tree;
    pANTLR3_BASE_TREE LTERM32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE LTERM35_tree;
    pANTLR3_BASE_TREE LTERM37_tree;
    pANTLR3_BASE_TREE char_literal38_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal31       = NULL;
    LTERM32       = NULL;
    char_literal33       = NULL;
    char_literal34       = NULL;
    LTERM35       = NULL;
    LTERM37       = NULL;
    char_literal38       = NULL;
    sourceElements36.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal31_tree   = NULL;
    LTERM32_tree   = NULL;
    char_literal33_tree   = NULL;
    char_literal34_tree   = NULL;
    LTERM35_tree   = NULL;
    LTERM37_tree   = NULL;
    char_literal38_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:167:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt23;

            alt23=2;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//Emerson.g:167:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_functionBody1066); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal31, NULL); }


        	        // .//Emerson.g:167:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    alt20=1;
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM32 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1068); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM32, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_functionBody1071); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal33, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 167:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//Emerson.g:167:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:168:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_functionBody1082); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal34, NULL); }


        	        // .//Emerson.g:168:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA21_2 = LA(2);
        	                        if ( (synpred22_Emerson(ctx)) ) 
        	                        {
        	                            alt21=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM35 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1084); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM35, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:168:15: ( sourceElements -> sourceElements )
        	        // .//Emerson.g:168:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody1088);
        	            sourceElements36=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements36.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 168:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:168:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt22=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA22_0 = LA(1);
        	                if ( (LA22_0 == LTERM) ) 
        	                {
        	                    alt22=1;
        	                }

        	            }
        	            switch (alt22) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM37 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1095); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM37, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop22;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop22: ; /* Jump out to here if this rule does not match */

        	        char_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_functionBody1098); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal38, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//Emerson.g:172:1: statement : ( noOpStatement | msgSendStatement | msgRecvStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement );
 */
static EmersonParser_statement_return
statement(pEmersonParser ctx)
{   
    EmersonParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_noOpStatement_return noOpStatement39;
    #undef	RETURN_TYPE_noOpStatement39
    #define	RETURN_TYPE_noOpStatement39 EmersonParser_noOpStatement_return

    EmersonParser_msgSendStatement_return msgSendStatement40;
    #undef	RETURN_TYPE_msgSendStatement40
    #define	RETURN_TYPE_msgSendStatement40 EmersonParser_msgSendStatement_return

    EmersonParser_msgRecvStatement_return msgRecvStatement41;
    #undef	RETURN_TYPE_msgRecvStatement41
    #define	RETURN_TYPE_msgRecvStatement41 EmersonParser_msgRecvStatement_return

    EmersonParser_statementBlock_return statementBlock42;
    #undef	RETURN_TYPE_statementBlock42
    #define	RETURN_TYPE_statementBlock42 EmersonParser_statementBlock_return

    EmersonParser_variableStatement_return variableStatement43;
    #undef	RETURN_TYPE_variableStatement43
    #define	RETURN_TYPE_variableStatement43 EmersonParser_variableStatement_return

    EmersonParser_emptyStatement_return emptyStatement44;
    #undef	RETURN_TYPE_emptyStatement44
    #define	RETURN_TYPE_emptyStatement44 EmersonParser_emptyStatement_return

    EmersonParser_expressionStatement_return expressionStatement45;
    #undef	RETURN_TYPE_expressionStatement45
    #define	RETURN_TYPE_expressionStatement45 EmersonParser_expressionStatement_return

    EmersonParser_ifStatement_return ifStatement46;
    #undef	RETURN_TYPE_ifStatement46
    #define	RETURN_TYPE_ifStatement46 EmersonParser_ifStatement_return

    EmersonParser_iterationStatement_return iterationStatement47;
    #undef	RETURN_TYPE_iterationStatement47
    #define	RETURN_TYPE_iterationStatement47 EmersonParser_iterationStatement_return

    EmersonParser_continueStatement_return continueStatement48;
    #undef	RETURN_TYPE_continueStatement48
    #define	RETURN_TYPE_continueStatement48 EmersonParser_continueStatement_return

    EmersonParser_breakStatement_return breakStatement49;
    #undef	RETURN_TYPE_breakStatement49
    #define	RETURN_TYPE_breakStatement49 EmersonParser_breakStatement_return

    EmersonParser_returnStatement_return returnStatement50;
    #undef	RETURN_TYPE_returnStatement50
    #define	RETURN_TYPE_returnStatement50 EmersonParser_returnStatement_return

    EmersonParser_withStatement_return withStatement51;
    #undef	RETURN_TYPE_withStatement51
    #define	RETURN_TYPE_withStatement51 EmersonParser_withStatement_return

    EmersonParser_labelledStatement_return labelledStatement52;
    #undef	RETURN_TYPE_labelledStatement52
    #define	RETURN_TYPE_labelledStatement52 EmersonParser_labelledStatement_return

    EmersonParser_switchStatement_return switchStatement53;
    #undef	RETURN_TYPE_switchStatement53
    #define	RETURN_TYPE_switchStatement53 EmersonParser_switchStatement_return

    EmersonParser_throwStatement_return throwStatement54;
    #undef	RETURN_TYPE_throwStatement54
    #define	RETURN_TYPE_throwStatement54 EmersonParser_throwStatement_return

    EmersonParser_whenStatement_return whenStatement55;
    #undef	RETURN_TYPE_whenStatement55
    #define	RETURN_TYPE_whenStatement55 EmersonParser_whenStatement_return

    EmersonParser_tryStatement_return tryStatement56;
    #undef	RETURN_TYPE_tryStatement56
    #define	RETURN_TYPE_tryStatement56 EmersonParser_tryStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    noOpStatement39.tree = NULL;

    msgSendStatement40.tree = NULL;

    msgRecvStatement41.tree = NULL;

    statementBlock42.tree = NULL;

    variableStatement43.tree = NULL;

    emptyStatement44.tree = NULL;

    expressionStatement45.tree = NULL;

    ifStatement46.tree = NULL;

    iterationStatement47.tree = NULL;

    continueStatement48.tree = NULL;

    breakStatement49.tree = NULL;

    returnStatement50.tree = NULL;

    withStatement51.tree = NULL;

    labelledStatement52.tree = NULL;

    switchStatement53.tree = NULL;

    throwStatement54.tree = NULL;

    whenStatement55.tree = NULL;

    tryStatement56.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:173:9: ( noOpStatement | msgSendStatement | msgRecvStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement )
            
            ANTLR3_UINT32 alt24;

            alt24=18;

            alt24 = cdfa24.predict(ctx, RECOGNIZER, ISTREAM, &cdfa24);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt24) 
            {
        	case 1:
        	    // .//Emerson.g:173:11: noOpStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement1117);
        	        noOpStatement39=noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, noOpStatement39.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:174:11: msgSendStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement1129);
        	        msgSendStatement40=msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgSendStatement40.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:175:4: msgRecvStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_statement1134);
        	        msgRecvStatement41=msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvStatement41.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:176:11: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement1146);
        	        statementBlock42=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock42.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:177:11: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement1158);
        	        variableStatement43=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement43.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:178:11: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement1170);
        	        emptyStatement44=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement44.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:179:11: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement1182);
        	        expressionStatement45=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement45.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:180:11: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement1194);
        	        ifStatement46=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement46.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:181:11: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement1206);
        	        iterationStatement47=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement47.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:182:11: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement1218);
        	        continueStatement48=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement48.tree);

        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:183:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement1223);
        	        breakStatement49=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement49.tree);

        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:184:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1228);
        	        returnStatement50=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement50.tree);

        	    }
        	    break;
        	case 13:
        	    // .//Emerson.g:185:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement1233);
        	        withStatement51=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement51.tree);

        	    }
        	    break;
        	case 14:
        	    // .//Emerson.g:186:4: labelledStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement1238);
        	        labelledStatement52=labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, labelledStatement52.tree);

        	    }
        	    break;
        	case 15:
        	    // .//Emerson.g:187:4: switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement1243);
        	        switchStatement53=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement53.tree);

        	    }
        	    break;
        	case 16:
        	    // .//Emerson.g:188:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement1248);
        	        throwStatement54=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement54.tree);

        	    }
        	    break;
        	case 17:
        	    // .//Emerson.g:189:11: whenStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whenStatement_in_statement1260);
        	        whenStatement55=whenStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whenStatement55.tree);

        	    }
        	    break;
        	case 18:
        	    // .//Emerson.g:190:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement1265);
        	        tryStatement56=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement56.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//Emerson.g:194:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static EmersonParser_statementBlock_return
statementBlock(pEmersonParser ctx)
{   
    EmersonParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    LTERM58;
    pANTLR3_COMMON_TOKEN    char_literal59;
    pANTLR3_COMMON_TOKEN    char_literal60;
    pANTLR3_COMMON_TOKEN    LTERM61;
    pANTLR3_COMMON_TOKEN    LTERM63;
    pANTLR3_COMMON_TOKEN    char_literal64;
    EmersonParser_statementList_return statementList62;
    #undef	RETURN_TYPE_statementList62
    #define	RETURN_TYPE_statementList62 EmersonParser_statementList_return

    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE LTERM58_tree;
    pANTLR3_BASE_TREE char_literal59_tree;
    pANTLR3_BASE_TREE char_literal60_tree;
    pANTLR3_BASE_TREE LTERM61_tree;
    pANTLR3_BASE_TREE LTERM63_tree;
    pANTLR3_BASE_TREE char_literal64_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal57       = NULL;
    LTERM58       = NULL;
    char_literal59       = NULL;
    char_literal60       = NULL;
    LTERM61       = NULL;
    LTERM63       = NULL;
    char_literal64       = NULL;
    statementList62.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal57_tree   = NULL;
    LTERM58_tree   = NULL;
    char_literal59_tree   = NULL;
    char_literal60_tree   = NULL;
    LTERM61_tree   = NULL;
    LTERM63_tree   = NULL;
    char_literal64_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:195:9: ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt28;

            alt28=2;

            alt28 = cdfa28.predict(ctx, RECOGNIZER, ISTREAM, &cdfa28);
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt28) 
            {
        	case 1:
        	    // .//Emerson.g:195:11: '{' ( LTERM )* '}'
        	    {
        	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_statementBlock1292); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal57, NULL); }


        	        // .//Emerson.g:195:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA25_0 = LA(1);
        	                if ( (LA25_0 == LTERM) ) 
        	                {
        	                    alt25=1;
        	                }

        	            }
        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM58 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1294); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM58, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */

        	        char_literal59 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_statementBlock1297); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal59, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 195:28: -> ^( NOOP )
        	        	{
        	        	    // .//Emerson.g:195:31: ^( NOOP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOOP, (pANTLR3_UINT8)"NOOP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:196:4: '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}'
        	    {
        	        char_literal60 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_statementBlock1310); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal60, NULL); }


        	        // .//Emerson.g:196:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (LA26_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA26_1 = LA(2);
        	                        if ( (synpred43_Emerson(ctx)) ) 
        	                        {
        	                            alt26=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM61 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1312); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM61, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:196:15: ( statementList -> statementList )
        	        // .//Emerson.g:196:16: statementList
        	        {
        	            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock1316);
        	            statementList62=statementList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList62.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : statementList
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 196:29: -> statementList
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:196:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt27=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA27_0 = LA(1);
        	                if ( (LA27_0 == LTERM) ) 
        	                {
        	                    alt27=1;
        	                }

        	            }
        	            switch (alt27) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM63 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1321); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM63, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop27;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop27: ; /* Jump out to here if this rule does not match */

        	        char_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_statementBlock1324); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal64, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start noOpStatement
 * .//Emerson.g:199:1: noOpStatement : ';' -> ^( NOOP ) ;
 */
static EmersonParser_noOpStatement_return
noOpStatement(pEmersonParser ctx)
{   
    EmersonParser_noOpStatement_return retval;
    ANTLR3_UINT32 noOpStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal65;

    pANTLR3_BASE_TREE char_literal65_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;

    /* Initialize rule variables
     */
    noOpStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal65       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal65_tree   = NULL;

    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:200:9: ( ';' -> ^( NOOP ) )
        // .//Emerson.g:200:11: ';'
        {
            char_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_noOpStatement1344); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal65, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 200:15: -> ^( NOOP )
            	{
            	    // .//Emerson.g:200:18: ^( NOOP )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOOP, (pANTLR3_UINT8)"NOOP"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_141 != NULL) stream_141->free(stream_141);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, noOpStatement_StartIndex); }
    return retval;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementList
 * .//Emerson.g:204:1: statementList : ( ( LTERM )* statement )+ -> ^( SLIST ( statement )+ ) ;
 */
static EmersonParser_statementList_return
statementList(pEmersonParser ctx)
{   
    EmersonParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM66;
    EmersonParser_statement_return statement67;
    #undef	RETURN_TYPE_statement67
    #define	RETURN_TYPE_statement67 EmersonParser_statement_return

    pANTLR3_BASE_TREE LTERM66_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM66       = NULL;
    statement67.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM66_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:205:2: ( ( ( LTERM )* statement )+ -> ^( SLIST ( statement )+ ) )
        // .//Emerson.g:205:4: ( ( LTERM )* statement )+
        {
            // .//Emerson.g:205:4: ( ( LTERM )* statement )+
            {
                int cnt30=0;

                for (;;)
                {
                    int alt30=2;
            	alt30 = cdfa30.predict(ctx, RECOGNIZER, ISTREAM, &cdfa30);
            	if  (HASEXCEPTION())
            	{
            	    goto rulestatementListEx;
            	}
            	if (HASFAILED())
            	{
            	    return retval;
            	}
            	switch (alt30) 
            	{
            	    case 1:
            	        // .//Emerson.g:205:5: ( LTERM )* statement
            	        {

            	            // .//Emerson.g:205:5: ( LTERM )*

            	            for (;;)
            	            {
            	                int alt29=2;
            	                {
            	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                    */
            	                    int LA29_0 = LA(1);
            	                    if ( (LA29_0 == LTERM) ) 
            	                    {
            	                        {
            	                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                            */
            	                            int LA29_2 = LA(2);
            	                            if ( (synpred45_Emerson(ctx)) ) 
            	                            {
            	                                alt29=1;
            	                            }

            	                        }
            	                    }

            	                }
            	                switch (alt29) 
            	                {
            	            	case 1:
            	            	    // .//Emerson.g:0:0: LTERM
            	            	    {
            	            	        LTERM66 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList1386); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto rulestatementListEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM66, NULL); }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop29;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop29: ; /* Jump out to here if this rule does not match */

            	            FOLLOWPUSH(FOLLOW_statement_in_statementList1389);
            	            statement67=statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulestatementListEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement67.tree, NULL); }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt30 >= 1 )
            		{
            		    goto loop30;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulestatementListEx;
            	}
            	cnt30++;
                }
                loop30: ;	/* Jump to here if this rule does not match */
            }

             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 205:24: -> ^( SLIST ( statement )+ )
            	{
            	    // .//Emerson.g:205:27: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//Emerson.g:208:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static EmersonParser_variableStatement_return
variableStatement(pEmersonParser ctx)
{   
    EmersonParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal68;
    pANTLR3_COMMON_TOKEN    LTERM69;
    pANTLR3_COMMON_TOKEN    LTERM71;
    pANTLR3_COMMON_TOKEN    char_literal72;
    EmersonParser_variableDeclarationList_return variableDeclarationList70;
    #undef	RETURN_TYPE_variableDeclarationList70
    #define	RETURN_TYPE_variableDeclarationList70 EmersonParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal68_tree;
    pANTLR3_BASE_TREE LTERM69_tree;
    pANTLR3_BASE_TREE LTERM71_tree;
    pANTLR3_BASE_TREE char_literal72_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal68       = NULL;
    LTERM69       = NULL;
    LTERM71       = NULL;
    char_literal72       = NULL;
    variableDeclarationList70.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal68_tree   = NULL;
    LTERM69_tree   = NULL;
    LTERM71_tree   = NULL;
    char_literal72_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:209:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//Emerson.g:209:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal68 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_variableStatement1412); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal68, NULL); }


            // .//Emerson.g:209:10: ( LTERM )*

            for (;;)
            {
                int alt31=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }

                }
                switch (alt31) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM69 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1414); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM69, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1417);
            variableDeclarationList70=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList70.tree, NULL); }

            // .//Emerson.g:209:41: ( LTERM | ';' )
            {
                int alt32=2;

                {
                    int LA32_0 = LA(1);
                    if ( (LA32_0 == LTERM) ) 
                    {
                        alt32=1;
                    }
                    else if ( (LA32_0 == 141) ) 
                    {
                        alt32=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 32;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt32) 
                {
            	case 1:
            	    // .//Emerson.g:209:42: LTERM
            	    {
            	        LTERM71 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1420); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM71, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:209:50: ';'
            	    {
            	        char_literal72 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_variableStatement1424); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal72, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 209:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//Emerson.g:209:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//Emerson.g:212:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static EmersonParser_variableDeclarationList_return
variableDeclarationList(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM74;
    pANTLR3_COMMON_TOKEN    char_literal75;
    pANTLR3_COMMON_TOKEN    LTERM76;
    EmersonParser_variableDeclaration_return variableDeclaration73;
    #undef	RETURN_TYPE_variableDeclaration73
    #define	RETURN_TYPE_variableDeclaration73 EmersonParser_variableDeclaration_return

    EmersonParser_variableDeclaration_return variableDeclaration77;
    #undef	RETURN_TYPE_variableDeclaration77
    #define	RETURN_TYPE_variableDeclaration77 EmersonParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM74_tree;
    pANTLR3_BASE_TREE char_literal75_tree;
    pANTLR3_BASE_TREE LTERM76_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM74       = NULL;
    char_literal75       = NULL;
    LTERM76       = NULL;
    variableDeclaration73.tree = NULL;

    variableDeclaration77.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM74_tree   = NULL;
    char_literal75_tree   = NULL;
    LTERM76_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:213:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//Emerson.g:213:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1446);
            variableDeclaration73=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration73.tree, NULL); }

            // .//Emerson.g:213:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt35=2;
                alt35 = cdfa35.predict(ctx, RECOGNIZER, ISTREAM, &cdfa35);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt35) 
                {
            	case 1:
            	    // .//Emerson.g:213:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//Emerson.g:213:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM74 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1449); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM74, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        char_literal75 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_variableDeclarationList1452); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal75, NULL); }


            	        // .//Emerson.g:213:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt34=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA34_0 = LA(1);
            	                if ( (LA34_0 == LTERM) ) 
            	                {
            	                    alt34=1;
            	                }

            	            }
            	            switch (alt34) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM76 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1454); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM76, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop34;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop34: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1457);
            	        variableDeclaration77=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration77.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop35;	/* break out of the loop */
            	    break;
                }
            }
            loop35: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 213:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//Emerson.g:216:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static EmersonParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM79;
    pANTLR3_COMMON_TOKEN    char_literal80;
    pANTLR3_COMMON_TOKEN    LTERM81;
    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn78;
    #undef	RETURN_TYPE_variableDeclarationNoIn78
    #define	RETURN_TYPE_variableDeclarationNoIn78 EmersonParser_variableDeclarationNoIn_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn82;
    #undef	RETURN_TYPE_variableDeclarationNoIn82
    #define	RETURN_TYPE_variableDeclarationNoIn82 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM79_tree;
    pANTLR3_BASE_TREE char_literal80_tree;
    pANTLR3_BASE_TREE LTERM81_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM79       = NULL;
    char_literal80       = NULL;
    LTERM81       = NULL;
    variableDeclarationNoIn78.tree = NULL;

    variableDeclarationNoIn82.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM79_tree   = NULL;
    char_literal80_tree   = NULL;
    LTERM81_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:217:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//Emerson.g:217:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1476);
            variableDeclarationNoIn78=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn78.tree, NULL); }

            // .//Emerson.g:217:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt38=2;
                alt38 = cdfa38.predict(ctx, RECOGNIZER, ISTREAM, &cdfa38);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt38) 
                {
            	case 1:
            	    // .//Emerson.g:217:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//Emerson.g:217:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM79 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1479); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM79, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        char_literal80 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_variableDeclarationListNoIn1482); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal80, NULL); }


            	        // .//Emerson.g:217:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt37=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA37_0 = LA(1);
            	                if ( (LA37_0 == LTERM) ) 
            	                {
            	                    alt37=1;
            	                }

            	            }
            	            switch (alt37) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM81 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1484); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM81, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop37;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop37: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1487);
            	        variableDeclarationNoIn82=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn82.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 217:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//Emerson.g:220:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static EmersonParser_variableDeclaration_return
variableDeclaration(pEmersonParser ctx)
{   
    EmersonParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier83;
    pANTLR3_COMMON_TOKEN    LTERM84;
    EmersonParser_initialiser_return initialiser85;
    #undef	RETURN_TYPE_initialiser85
    #define	RETURN_TYPE_initialiser85 EmersonParser_initialiser_return

    pANTLR3_BASE_TREE Identifier83_tree;
    pANTLR3_BASE_TREE LTERM84_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier83       = NULL;
    LTERM84       = NULL;
    initialiser85.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier83_tree   = NULL;
    LTERM84_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:221:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//Emerson.g:221:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier83 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1506); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier83, NULL); }


            // .//Emerson.g:221:15: ( LTERM )*

            for (;;)
            {
                int alt39=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA39_2 = LA(2);
                            if ( (synpred55_Emerson(ctx)) ) 
                            {
                                alt39=1;
                            }

                        }
                    }

                }
                switch (alt39) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM84 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1508); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM84, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:221:22: ( initialiser )?
            {
                int alt40=2;
                {
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == 143) ) 
                    {
                        alt40=1;
                    }
                }
                switch (alt40) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1511);
            	        initialiser85=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser85.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiser, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 221:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//Emerson.g:221:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:221:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//Emerson.g:224:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static EmersonParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier86;
    pANTLR3_COMMON_TOKEN    LTERM87;
    EmersonParser_initialiserNoIn_return initialiserNoIn88;
    #undef	RETURN_TYPE_initialiserNoIn88
    #define	RETURN_TYPE_initialiserNoIn88 EmersonParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier86_tree;
    pANTLR3_BASE_TREE LTERM87_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier86       = NULL;
    LTERM87       = NULL;
    initialiserNoIn88.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier86_tree   = NULL;
    LTERM87_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:225:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//Emerson.g:225:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier86 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1535); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier86, NULL); }


            // .//Emerson.g:225:15: ( LTERM )*

            for (;;)
            {
                int alt41=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA41_2 = LA(2);
                            if ( (synpred57_Emerson(ctx)) ) 
                            {
                                alt41=1;
                            }

                        }
                    }

                }
                switch (alt41) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM87 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1537); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM87, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:225:22: ( initialiserNoIn )?
            {
                int alt42=2;
                {
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == 143) ) 
                    {
                        alt42=1;
                    }
                }
                switch (alt42) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1540);
            	        initialiserNoIn88=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn88.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiserNoIn, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 225:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//Emerson.g:225:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:225:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//Emerson.g:228:1: initialiser : '=' ( LTERM )* assignmentExpression -> assignmentExpression ;
 */
static EmersonParser_initialiser_return
initialiser(pEmersonParser ctx)
{   
    EmersonParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal89;
    pANTLR3_COMMON_TOKEN    LTERM90;
    EmersonParser_assignmentExpression_return assignmentExpression91;
    #undef	RETURN_TYPE_assignmentExpression91
    #define	RETURN_TYPE_assignmentExpression91 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal89_tree;
    pANTLR3_BASE_TREE LTERM90_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal89       = NULL;
    LTERM90       = NULL;
    assignmentExpression91.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal89_tree   = NULL;
    LTERM90_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:229:2: ( '=' ( LTERM )* assignmentExpression -> assignmentExpression )
        // .//Emerson.g:229:4: '=' ( LTERM )* assignmentExpression
        {
            char_literal89 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_initialiser1565); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal89, NULL); }


            // .//Emerson.g:229:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM90 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1567); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM90, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_initialiser1570);
            assignmentExpression91=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression91.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 229:36: -> assignmentExpression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//Emerson.g:232:1: initialiserNoIn : '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn ;
 */
static EmersonParser_initialiserNoIn_return
initialiserNoIn(pEmersonParser ctx)
{   
    EmersonParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal92;
    pANTLR3_COMMON_TOKEN    LTERM93;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn94;
    #undef	RETURN_TYPE_assignmentExpressionNoIn94
    #define	RETURN_TYPE_assignmentExpressionNoIn94 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE char_literal92_tree;
    pANTLR3_BASE_TREE LTERM93_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal92       = NULL;
    LTERM93       = NULL;
    assignmentExpressionNoIn94.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal92_tree   = NULL;
    LTERM93_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:233:2: ( '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn )
        // .//Emerson.g:233:4: '=' ( LTERM )* assignmentExpressionNoIn
        {
            char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_initialiserNoIn1587); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal92, NULL); }


            // .//Emerson.g:233:8: ( LTERM )*

            for (;;)
            {
                int alt44=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }

                }
                switch (alt44) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM93 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1589); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM93, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop44;	/* break out of the loop */
            	    break;
                }
            }
            loop44: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1592);
            assignmentExpressionNoIn94=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn94.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 233:40: -> assignmentExpressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start emptyStatement
 * .//Emerson.g:236:1: emptyStatement : ( LTERM )* ';' ;
 */
static EmersonParser_emptyStatement_return
emptyStatement(pEmersonParser ctx)
{   
    EmersonParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM95;
    pANTLR3_COMMON_TOKEN    char_literal96;

    pANTLR3_BASE_TREE LTERM95_tree;
    pANTLR3_BASE_TREE char_literal96_tree;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM95       = NULL;
    char_literal96       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LTERM95_tree   = NULL;
    char_literal96_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:237:9: ( ( LTERM )* ';' )
        // .//Emerson.g:237:11: ( LTERM )* ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // .//Emerson.g:237:11: ( LTERM )*

            for (;;)
            {
                int alt45=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }

                }
                switch (alt45) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM95 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_emptyStatement1615); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleemptyStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        LTERM95_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM95));
            	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM95_tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */

            char_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_emptyStatement1618); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal96_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal96));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal96_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start expressionStatement
 * .//Emerson.g:240:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static EmersonParser_expressionStatement_return
expressionStatement(pEmersonParser ctx)
{   
    EmersonParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM98;
    pANTLR3_COMMON_TOKEN    char_literal99;
    EmersonParser_expression_return expression97;
    #undef	RETURN_TYPE_expression97
    #define	RETURN_TYPE_expression97 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM98_tree;
    pANTLR3_BASE_TREE char_literal99_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM98       = NULL;
    char_literal99       = NULL;
    expression97.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM98_tree   = NULL;
    char_literal99_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:241:2: ( expression ( LTERM | ';' ) -> expression )
        // .//Emerson.g:241:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1630);
            expression97=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression97.tree, NULL); }

            // .//Emerson.g:241:15: ( LTERM | ';' )
            {
                int alt46=2;

                {
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }
                    else if ( (LA46_0 == 141) ) 
                    {
                        alt46=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 46;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt46) 
                {
            	case 1:
            	    // .//Emerson.g:241:16: LTERM
            	    {
            	        LTERM98 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1633); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM98, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:241:24: ';'
            	    {
            	        char_literal99 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_expressionStatement1637); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal99, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 241:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start whenStatement
 * .//Emerson.g:244:1: whenStatement : 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody -> ^( WHEN whenPred functionBody ) ;
 */
static EmersonParser_whenStatement_return
whenStatement(pEmersonParser ctx)
{   
    EmersonParser_whenStatement_return retval;
    ANTLR3_UINT32 whenStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal100;
    pANTLR3_COMMON_TOKEN    LTERM101;
    pANTLR3_COMMON_TOKEN    char_literal102;
    pANTLR3_COMMON_TOKEN    LTERM103;
    pANTLR3_COMMON_TOKEN    LTERM105;
    pANTLR3_COMMON_TOKEN    char_literal106;
    pANTLR3_COMMON_TOKEN    LTERM107;
    EmersonParser_whenPred_return whenPred104;
    #undef	RETURN_TYPE_whenPred104
    #define	RETURN_TYPE_whenPred104 EmersonParser_whenPred_return

    EmersonParser_functionBody_return functionBody108;
    #undef	RETURN_TYPE_functionBody108
    #define	RETURN_TYPE_functionBody108 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal100_tree;
    pANTLR3_BASE_TREE LTERM101_tree;
    pANTLR3_BASE_TREE char_literal102_tree;
    pANTLR3_BASE_TREE LTERM103_tree;
    pANTLR3_BASE_TREE LTERM105_tree;
    pANTLR3_BASE_TREE char_literal106_tree;
    pANTLR3_BASE_TREE LTERM107_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenPred;
    /* Initialize rule variables
     */
    whenStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal100       = NULL;
    LTERM101       = NULL;
    char_literal102       = NULL;
    LTERM103       = NULL;
    LTERM105       = NULL;
    char_literal106       = NULL;
    LTERM107       = NULL;
    whenPred104.tree = NULL;

    functionBody108.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal100_tree   = NULL;
    LTERM101_tree   = NULL;
    char_literal102_tree   = NULL;
    LTERM103_tree   = NULL;
    LTERM105_tree   = NULL;
    char_literal106_tree   = NULL;
    LTERM107_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_whenPred   = NULL;
    #define CREATE_stream_whenPred  if (stream_whenPred == NULL) {stream_whenPred = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenPred"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:246:5: ( 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody -> ^( WHEN whenPred functionBody ) )
        // .//Emerson.g:246:7: 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody
        {
            string_literal100 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_whenStatement1657); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal100, NULL); }


            // .//Emerson.g:246:14: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM101 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1659); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM101, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            char_literal102 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_whenStatement1662); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal102, NULL); }


            // .//Emerson.g:246:25: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM103 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1664); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM103, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_whenPred_in_whenStatement1667);
            whenPred104=whenPred(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_whenPred; stream_whenPred->add(stream_whenPred, whenPred104.tree, NULL); }

            // .//Emerson.g:246:41: ( LTERM )*

            for (;;)
            {
                int alt49=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == LTERM) ) 
                    {
                        alt49=1;
                    }

                }
                switch (alt49) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM105 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1669); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM105, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */

            char_literal106 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_whenStatement1672); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal106, NULL); }


            // .//Emerson.g:246:52: ( LTERM )*

            for (;;)
            {
                int alt50=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA50_0 = LA(1);
                    if ( (LA50_0 == LTERM) ) 
                    {
                        alt50=1;
                    }

                }
                switch (alt50) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM107 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1674); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM107, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop50;	/* break out of the loop */
            	    break;
                }
            }
            loop50: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_whenStatement1677);
            functionBody108=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody108.tree, NULL); }

             
            /* AST REWRITE
             * elements          : functionBody, whenPred
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 246:72: -> ^( WHEN whenPred functionBody )
            	{
            	    // .//Emerson.g:246:75: ^( WHEN whenPred functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN, (pANTLR3_UINT8)"WHEN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_whenPred == NULL ? NULL : stream_whenPred->nextTree(stream_whenPred));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenStatementEx; /* Prevent compiler warnings */
    rulewhenStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_whenPred != NULL) stream_whenPred->free(stream_whenPred);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, whenStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whenStatement */

/** 
 * $ANTLR start whenPred
 * .//Emerson.g:251:1: whenPred : expression -> ^( WHEN_PRED expression ) ;
 */
static EmersonParser_whenPred_return
whenPred(pEmersonParser ctx)
{   
    EmersonParser_whenPred_return retval;
    ANTLR3_UINT32 whenPred_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_expression_return expression109;
    #undef	RETURN_TYPE_expression109
    #define	RETURN_TYPE_expression109 EmersonParser_expression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    whenPred_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    expression109.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:252:5: ( expression -> ^( WHEN_PRED expression ) )
        // .//Emerson.g:252:7: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenPred1706);
            expression109=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression109.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 252:18: -> ^( WHEN_PRED expression )
            	{
            	    // .//Emerson.g:252:21: ^( WHEN_PRED expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_PRED, (pANTLR3_UINT8)"WHEN_PRED"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenPredEx; /* Prevent compiler warnings */
    rulewhenPredEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, whenPred_StartIndex); }
    return retval;
}
/* $ANTLR end whenPred */

/** 
 * $ANTLR start whenCheckedListFirst
 * .//Emerson.g:255:1: whenCheckedListFirst : s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )? -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? ) ;
 */
static EmersonParser_whenCheckedListFirst_return
whenCheckedListFirst(pEmersonParser ctx)
{   
    EmersonParser_whenCheckedListFirst_return retval;
    ANTLR3_UINT32 whenCheckedListFirst_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM110;
    pANTLR3_COMMON_TOKEN    char_literal111;
    pANTLR3_COMMON_TOKEN    LTERM112;
    EmersonParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_expression_return

    EmersonParser_whenCheckedListSubsequent_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    pANTLR3_BASE_TREE LTERM110_tree;
    pANTLR3_BASE_TREE char_literal111_tree;
    pANTLR3_BASE_TREE LTERM112_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListSubsequent;
    /* Initialize rule variables
     */
    whenCheckedListFirst_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM110       = NULL;
    char_literal111       = NULL;
    LTERM112       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM110_tree   = NULL;
    char_literal111_tree   = NULL;
    LTERM112_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListSubsequent   = NULL;
    #define CREATE_stream_whenCheckedListSubsequent  if (stream_whenCheckedListSubsequent == NULL) {stream_whenCheckedListSubsequent = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListSubsequent"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:256:5: (s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )? -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? ) )
        // .//Emerson.g:256:7: s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )?
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListFirst1733);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//Emerson.g:256:21: ( LTERM )*

            for (;;)
            {
                int alt51=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA51_0 = LA(1);
                    if ( (LA51_0 == LTERM) ) 
                    {
                        alt51=1;
                    }

                }
                switch (alt51) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM110 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListFirst1735); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM110, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop51;	/* break out of the loop */
            	    break;
                }
            }
            loop51: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:256:28: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )?
            {
                int alt53=2;
                {
                    int LA53_0 = LA(1);
                    if ( (LA53_0 == 138) ) 
                    {
                        alt53=1;
                    }
                }
                switch (alt53) 
                {
            	case 1:
            	    // .//Emerson.g:256:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
            	    {
            	        char_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_whenCheckedListFirst1739); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal111, NULL); }


            	        // .//Emerson.g:256:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt52=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA52_0 = LA(1);
            	                if ( (LA52_0 == LTERM) ) 
            	                {
            	                    alt52=1;
            	                }

            	            }
            	            switch (alt52) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM112 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListFirst1741); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListFirstEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM112, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop52;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop52: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1746);
            	        s2=whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListSubsequent; stream_whenCheckedListSubsequent->add(stream_whenCheckedListSubsequent, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s2, s1
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 256:71: -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:256:77: ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST_FIRST, (pANTLR3_UINT8)"WHEN_CHECKED_LIST_FIRST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:256:107: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListFirstEx; /* Prevent compiler warnings */
    rulewhenCheckedListFirstEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListSubsequent != NULL) stream_whenCheckedListSubsequent->free(stream_whenCheckedListSubsequent);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, whenCheckedListFirst_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedListFirst */

/** 
 * $ANTLR start whenCheckedListSubsequent
 * .//Emerson.g:259:1: whenCheckedListSubsequent : s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )* -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* ) ;
 */
static EmersonParser_whenCheckedListSubsequent_return
whenCheckedListSubsequent(pEmersonParser ctx)
{   
    EmersonParser_whenCheckedListSubsequent_return retval;
    ANTLR3_UINT32 whenCheckedListSubsequent_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM113;
    pANTLR3_COMMON_TOKEN    char_literal114;
    pANTLR3_COMMON_TOKEN    LTERM115;
    EmersonParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_expression_return

    EmersonParser_whenCheckedListSubsequent_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    pANTLR3_BASE_TREE LTERM113_tree;
    pANTLR3_BASE_TREE char_literal114_tree;
    pANTLR3_BASE_TREE LTERM115_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListSubsequent;
    /* Initialize rule variables
     */
    whenCheckedListSubsequent_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM113       = NULL;
    char_literal114       = NULL;
    LTERM115       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM113_tree   = NULL;
    char_literal114_tree   = NULL;
    LTERM115_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListSubsequent   = NULL;
    #define CREATE_stream_whenCheckedListSubsequent  if (stream_whenCheckedListSubsequent == NULL) {stream_whenCheckedListSubsequent = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListSubsequent"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:260:5: (s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )* -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* ) )
        // .//Emerson.g:260:7: s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListSubsequent1783);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//Emerson.g:260:21: ( LTERM )*

            for (;;)
            {
                int alt54=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA54_0 = LA(1);
                    if ( (LA54_0 == LTERM) ) 
                    {
                        alt54=1;
                    }

                }
                switch (alt54) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM113 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListSubsequent1785); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM113, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:260:28: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )*

            for (;;)
            {
                int alt56=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA56_0 = LA(1);
                    if ( (LA56_0 == 138) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA56_2 = LA(2);
                            if ( (synpred72_Emerson(ctx)) ) 
                            {
                                alt56=1;
                            }

                        }
                    }

                }
                switch (alt56) 
                {
            	case 1:
            	    // .//Emerson.g:260:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
            	    {
            	        char_literal114 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_whenCheckedListSubsequent1789); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal114, NULL); }


            	        // .//Emerson.g:260:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt55=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA55_0 = LA(1);
            	                if ( (LA55_0 == LTERM) ) 
            	                {
            	                    alt55=1;
            	                }

            	            }
            	            switch (alt55) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM115 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListSubsequent1791); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListSubsequentEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM115, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop55;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop55: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1796);
            	        s2=whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListSubsequent; stream_whenCheckedListSubsequent->add(stream_whenCheckedListSubsequent, s2.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : s2, s1
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 260:71: -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* )
            	{
            	    // .//Emerson.g:260:74: ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST_SUBSEQUENT, (pANTLR3_UINT8)"WHEN_CHECKED_LIST_SUBSEQUENT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:260:109: ( $s2)*
            	        {
            	        	while ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if (stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListSubsequentEx; /* Prevent compiler warnings */
    rulewhenCheckedListSubsequentEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListSubsequent != NULL) stream_whenCheckedListSubsequent->free(stream_whenCheckedListSubsequent);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, whenCheckedListSubsequent_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedListSubsequent */

/** 
 * $ANTLR start ifStatement
 * .//Emerson.g:264:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static EmersonParser_ifStatement_return
ifStatement(pEmersonParser ctx)
{   
    EmersonParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal116;
    pANTLR3_COMMON_TOKEN    LTERM117;
    pANTLR3_COMMON_TOKEN    char_literal118;
    pANTLR3_COMMON_TOKEN    LTERM119;
    pANTLR3_COMMON_TOKEN    LTERM121;
    pANTLR3_COMMON_TOKEN    char_literal122;
    pANTLR3_COMMON_TOKEN    LTERM123;
    pANTLR3_COMMON_TOKEN    LTERM124;
    pANTLR3_COMMON_TOKEN    string_literal125;
    pANTLR3_COMMON_TOKEN    LTERM126;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_statement_return

    EmersonParser_expression_return expression120;
    #undef	RETURN_TYPE_expression120
    #define	RETURN_TYPE_expression120 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal116_tree;
    pANTLR3_BASE_TREE LTERM117_tree;
    pANTLR3_BASE_TREE char_literal118_tree;
    pANTLR3_BASE_TREE LTERM119_tree;
    pANTLR3_BASE_TREE LTERM121_tree;
    pANTLR3_BASE_TREE char_literal122_tree;
    pANTLR3_BASE_TREE LTERM123_tree;
    pANTLR3_BASE_TREE LTERM124_tree;
    pANTLR3_BASE_TREE string_literal125_tree;
    pANTLR3_BASE_TREE LTERM126_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal116       = NULL;
    LTERM117       = NULL;
    char_literal118       = NULL;
    LTERM119       = NULL;
    LTERM121       = NULL;
    char_literal122       = NULL;
    LTERM123       = NULL;
    LTERM124       = NULL;
    string_literal125       = NULL;
    LTERM126       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression120.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal116_tree   = NULL;
    LTERM117_tree   = NULL;
    char_literal118_tree   = NULL;
    LTERM119_tree   = NULL;
    LTERM121_tree   = NULL;
    char_literal122_tree   = NULL;
    LTERM123_tree   = NULL;
    LTERM124_tree   = NULL;
    string_literal125_tree   = NULL;
    LTERM126_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:265:5: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//Emerson.g:265:7: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal116 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_ifStatement1829); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, string_literal116, NULL); }


            // .//Emerson.g:265:12: ( LTERM )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == LTERM) ) 
                    {
                        alt57=1;
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM117 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1831); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM117, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */

            char_literal118 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_ifStatement1834); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal118, NULL); }


            // .//Emerson.g:265:23: ( LTERM )*

            for (;;)
            {
                int alt58=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }

                }
                switch (alt58) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM119 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1836); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM119, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop58;	/* break out of the loop */
            	    break;
                }
            }
            loop58: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1839);
            expression120=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression120.tree, NULL); }

            // .//Emerson.g:265:41: ( LTERM )*

            for (;;)
            {
                int alt59=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA59_0 = LA(1);
                    if ( (LA59_0 == LTERM) ) 
                    {
                        alt59=1;
                    }

                }
                switch (alt59) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM121 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1841); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM121, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */

            char_literal122 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_ifStatement1844); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal122, NULL); }


            // .//Emerson.g:265:52: ( LTERM )*

            for (;;)
            {
                int alt60=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA60_0 = LA(1);
                    if ( (LA60_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA60_2 = LA(2);
                            if ( (synpred76_Emerson(ctx)) ) 
                            {
                                alt60=1;
                            }

                        }
                    }

                }
                switch (alt60) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM123 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1846); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM123, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop60;	/* break out of the loop */
            	    break;
                }
            }
            loop60: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1851);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//Emerson.g:265:72: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt63=2;
                {
                    int LA63_0 = LA(1);
                    if ( (LA63_0 == LTERM) ) 
                    {
                        {
                            int LA63_1 = LA(2);
                            if ( (synpred79_Emerson(ctx)) ) 
                            {
                                alt63=1;
                            }
                        }
                    }
                    else if ( (LA63_0 == 146) ) 
                    {
                        {
                            int LA63_2 = LA(2);
                            if ( (synpred79_Emerson(ctx)) ) 
                            {
                                alt63=1;
                            }
                        }
                    }
                }
                switch (alt63) 
                {
            	case 1:
            	    // .//Emerson.g:265:73: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//Emerson.g:265:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt61=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA61_0 = LA(1);
            	                if ( (LA61_0 == LTERM) ) 
            	                {
            	                    alt61=1;
            	                }

            	            }
            	            switch (alt61) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM124 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1854); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM124, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop61;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop61: ; /* Jump out to here if this rule does not match */

            	        string_literal125 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_ifStatement1857); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, string_literal125, NULL); }


            	        // .//Emerson.g:265:87: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt62=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA62_0 = LA(1);
            	                if ( (LA62_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA62_2 = LA(2);
            	                        if ( (synpred78_Emerson(ctx)) ) 
            	                        {
            	                            alt62=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt62) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM126 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1859); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM126, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop62;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop62: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1864);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, s2, s1
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 265:109: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:265:112: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:265:132: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//Emerson.g:268:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static EmersonParser_iterationStatement_return
iterationStatement(pEmersonParser ctx)
{   
    EmersonParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_doWhileStatement_return doWhileStatement127;
    #undef	RETURN_TYPE_doWhileStatement127
    #define	RETURN_TYPE_doWhileStatement127 EmersonParser_doWhileStatement_return

    EmersonParser_whileStatement_return whileStatement128;
    #undef	RETURN_TYPE_whileStatement128
    #define	RETURN_TYPE_whileStatement128 EmersonParser_whileStatement_return

    EmersonParser_forStatement_return forStatement129;
    #undef	RETURN_TYPE_forStatement129
    #define	RETURN_TYPE_forStatement129 EmersonParser_forStatement_return

    EmersonParser_forInStatement_return forInStatement130;
    #undef	RETURN_TYPE_forInStatement130
    #define	RETURN_TYPE_forInStatement130 EmersonParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement127.tree = NULL;

    whileStatement128.tree = NULL;

    forStatement129.tree = NULL;

    forInStatement130.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:269:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt64;

            alt64=4;

            switch ( LA(1) ) 
            {
            case 147:
            	{
            		alt64=1;
            	}
                break;
            case 148:
            	{
            		alt64=2;
            	}
                break;
            case 149:
            	{

            		{
            		    int LA64_3 = LA(2);
            		    if ( (synpred82_Emerson(ctx)) ) 
            		    {
            		        alt64=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt64=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 64;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 64;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt64) 
            {
        	case 1:
        	    // .//Emerson.g:269:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1896);
        	        doWhileStatement127=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement127.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:270:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1901);
        	        whileStatement128=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement128.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:271:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1906);
        	        forStatement129=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement129.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:272:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1911);
        	        forInStatement130=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement130.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//Emerson.g:275:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static EmersonParser_doWhileStatement_return
doWhileStatement(pEmersonParser ctx)
{   
    EmersonParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal131;
    pANTLR3_COMMON_TOKEN    LTERM132;
    pANTLR3_COMMON_TOKEN    LTERM134;
    pANTLR3_COMMON_TOKEN    string_literal135;
    pANTLR3_COMMON_TOKEN    LTERM136;
    pANTLR3_COMMON_TOKEN    char_literal137;
    pANTLR3_COMMON_TOKEN    char_literal139;
    pANTLR3_COMMON_TOKEN    LTERM140;
    pANTLR3_COMMON_TOKEN    char_literal141;
    EmersonParser_statement_return statement133;
    #undef	RETURN_TYPE_statement133
    #define	RETURN_TYPE_statement133 EmersonParser_statement_return

    EmersonParser_expression_return expression138;
    #undef	RETURN_TYPE_expression138
    #define	RETURN_TYPE_expression138 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal131_tree;
    pANTLR3_BASE_TREE LTERM132_tree;
    pANTLR3_BASE_TREE LTERM134_tree;
    pANTLR3_BASE_TREE string_literal135_tree;
    pANTLR3_BASE_TREE LTERM136_tree;
    pANTLR3_BASE_TREE char_literal137_tree;
    pANTLR3_BASE_TREE char_literal139_tree;
    pANTLR3_BASE_TREE LTERM140_tree;
    pANTLR3_BASE_TREE char_literal141_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal131       = NULL;
    LTERM132       = NULL;
    LTERM134       = NULL;
    string_literal135       = NULL;
    LTERM136       = NULL;
    char_literal137       = NULL;
    char_literal139       = NULL;
    LTERM140       = NULL;
    char_literal141       = NULL;
    statement133.tree = NULL;

    expression138.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal131_tree   = NULL;
    LTERM132_tree   = NULL;
    LTERM134_tree   = NULL;
    string_literal135_tree   = NULL;
    LTERM136_tree   = NULL;
    char_literal137_tree   = NULL;
    char_literal139_tree   = NULL;
    LTERM140_tree   = NULL;
    char_literal141_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:276:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//Emerson.g:276:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal131 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_doWhileStatement1923); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, string_literal131, NULL); }


            // .//Emerson.g:276:9: ( LTERM )*

            for (;;)
            {
                int alt65=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA65_0 = LA(1);
                    if ( (LA65_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA65_2 = LA(2);
                            if ( (synpred83_Emerson(ctx)) ) 
                            {
                                alt65=1;
                            }

                        }
                    }

                }
                switch (alt65) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM132 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1925); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM132, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop65;	/* break out of the loop */
            	    break;
                }
            }
            loop65: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1928);
            statement133=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement133.tree, NULL); }

            // .//Emerson.g:276:26: ( LTERM )*

            for (;;)
            {
                int alt66=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA66_0 = LA(1);
                    if ( (LA66_0 == LTERM) ) 
                    {
                        alt66=1;
                    }

                }
                switch (alt66) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM134 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1930); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM134, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop66;	/* break out of the loop */
            	    break;
                }
            }
            loop66: ; /* Jump out to here if this rule does not match */

            string_literal135 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_doWhileStatement1933); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal135, NULL); }


            // .//Emerson.g:276:41: ( LTERM )*

            for (;;)
            {
                int alt67=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA67_0 = LA(1);
                    if ( (LA67_0 == LTERM) ) 
                    {
                        alt67=1;
                    }

                }
                switch (alt67) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM136 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1935); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM136, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop67;	/* break out of the loop */
            	    break;
                }
            }
            loop67: ; /* Jump out to here if this rule does not match */

            char_literal137 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_doWhileStatement1938); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal137, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1940);
            expression138=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression138.tree, NULL); }
            char_literal139 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_doWhileStatement1942); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal139, NULL); }


            // .//Emerson.g:276:67: ( LTERM | ';' )
            {
                int alt68=2;

                {
                    int LA68_0 = LA(1);
                    if ( (LA68_0 == LTERM) ) 
                    {
                        alt68=1;
                    }
                    else if ( (LA68_0 == 141) ) 
                    {
                        alt68=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 68;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt68) 
                {
            	case 1:
            	    // .//Emerson.g:276:68: LTERM
            	    {
            	        LTERM140 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1945); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM140, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:276:76: ';'
            	    {
            	        char_literal141 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_doWhileStatement1949); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal141, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 276:81: -> ^( DO statement expression )
            	{
            	    // .//Emerson.g:276:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//Emerson.g:279:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static EmersonParser_whileStatement_return
whileStatement(pEmersonParser ctx)
{   
    EmersonParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal142;
    pANTLR3_COMMON_TOKEN    LTERM143;
    pANTLR3_COMMON_TOKEN    char_literal144;
    pANTLR3_COMMON_TOKEN    LTERM145;
    pANTLR3_COMMON_TOKEN    LTERM147;
    pANTLR3_COMMON_TOKEN    char_literal148;
    pANTLR3_COMMON_TOKEN    LTERM149;
    EmersonParser_expression_return expression146;
    #undef	RETURN_TYPE_expression146
    #define	RETURN_TYPE_expression146 EmersonParser_expression_return

    EmersonParser_statement_return statement150;
    #undef	RETURN_TYPE_statement150
    #define	RETURN_TYPE_statement150 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal142_tree;
    pANTLR3_BASE_TREE LTERM143_tree;
    pANTLR3_BASE_TREE char_literal144_tree;
    pANTLR3_BASE_TREE LTERM145_tree;
    pANTLR3_BASE_TREE LTERM147_tree;
    pANTLR3_BASE_TREE char_literal148_tree;
    pANTLR3_BASE_TREE LTERM149_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal142       = NULL;
    LTERM143       = NULL;
    char_literal144       = NULL;
    LTERM145       = NULL;
    LTERM147       = NULL;
    char_literal148       = NULL;
    LTERM149       = NULL;
    expression146.tree = NULL;

    statement150.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal142_tree   = NULL;
    LTERM143_tree   = NULL;
    char_literal144_tree   = NULL;
    LTERM145_tree   = NULL;
    LTERM147_tree   = NULL;
    char_literal148_tree   = NULL;
    LTERM149_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:280:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//Emerson.g:280:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_whileStatement1975); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal142, NULL); }


            // .//Emerson.g:280:12: ( LTERM )*

            for (;;)
            {
                int alt69=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA69_0 = LA(1);
                    if ( (LA69_0 == LTERM) ) 
                    {
                        alt69=1;
                    }

                }
                switch (alt69) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM143 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1977); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM143, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop69;	/* break out of the loop */
            	    break;
                }
            }
            loop69: ; /* Jump out to here if this rule does not match */

            char_literal144 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_whileStatement1980); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal144, NULL); }


            // .//Emerson.g:280:23: ( LTERM )*

            for (;;)
            {
                int alt70=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA70_0 = LA(1);
                    if ( (LA70_0 == LTERM) ) 
                    {
                        alt70=1;
                    }

                }
                switch (alt70) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM145 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1982); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM145, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop70;	/* break out of the loop */
            	    break;
                }
            }
            loop70: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1985);
            expression146=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression146.tree, NULL); }

            // .//Emerson.g:280:41: ( LTERM )*

            for (;;)
            {
                int alt71=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA71_0 = LA(1);
                    if ( (LA71_0 == LTERM) ) 
                    {
                        alt71=1;
                    }

                }
                switch (alt71) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM147 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1987); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM147, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop71;	/* break out of the loop */
            	    break;
                }
            }
            loop71: ; /* Jump out to here if this rule does not match */

            char_literal148 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_whileStatement1990); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal148, NULL); }


            // .//Emerson.g:280:52: ( LTERM )*

            for (;;)
            {
                int alt72=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA72_0 = LA(1);
                    if ( (LA72_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA72_2 = LA(2);
                            if ( (synpred90_Emerson(ctx)) ) 
                            {
                                alt72=1;
                            }

                        }
                    }

                }
                switch (alt72) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM149 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1992); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM149, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop72;	/* break out of the loop */
            	    break;
                }
            }
            loop72: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1995);
            statement150=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement150.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 280:69: -> ^( WHILE expression statement )
            	{
            	    // .//Emerson.g:280:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//Emerson.g:283:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static EmersonParser_forStatement_return
forStatement(pEmersonParser ctx)
{   
    EmersonParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal151;
    pANTLR3_COMMON_TOKEN    LTERM152;
    pANTLR3_COMMON_TOKEN    char_literal153;
    pANTLR3_COMMON_TOKEN    LTERM154;
    pANTLR3_COMMON_TOKEN    LTERM155;
    pANTLR3_COMMON_TOKEN    char_literal156;
    pANTLR3_COMMON_TOKEN    LTERM157;
    pANTLR3_COMMON_TOKEN    LTERM158;
    pANTLR3_COMMON_TOKEN    char_literal159;
    pANTLR3_COMMON_TOKEN    LTERM160;
    pANTLR3_COMMON_TOKEN    LTERM161;
    pANTLR3_COMMON_TOKEN    char_literal162;
    pANTLR3_COMMON_TOKEN    LTERM163;
    EmersonParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init EmersonParser_forStatementInitialiserPart_return

    EmersonParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond EmersonParser_expression_return

    EmersonParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter EmersonParser_expression_return

    EmersonParser_statement_return statement164;
    #undef	RETURN_TYPE_statement164
    #define	RETURN_TYPE_statement164 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal151_tree;
    pANTLR3_BASE_TREE LTERM152_tree;
    pANTLR3_BASE_TREE char_literal153_tree;
    pANTLR3_BASE_TREE LTERM154_tree;
    pANTLR3_BASE_TREE LTERM155_tree;
    pANTLR3_BASE_TREE char_literal156_tree;
    pANTLR3_BASE_TREE LTERM157_tree;
    pANTLR3_BASE_TREE LTERM158_tree;
    pANTLR3_BASE_TREE char_literal159_tree;
    pANTLR3_BASE_TREE LTERM160_tree;
    pANTLR3_BASE_TREE LTERM161_tree;
    pANTLR3_BASE_TREE char_literal162_tree;
    pANTLR3_BASE_TREE LTERM163_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal151       = NULL;
    LTERM152       = NULL;
    char_literal153       = NULL;
    LTERM154       = NULL;
    LTERM155       = NULL;
    char_literal156       = NULL;
    LTERM157       = NULL;
    LTERM158       = NULL;
    char_literal159       = NULL;
    LTERM160       = NULL;
    LTERM161       = NULL;
    char_literal162       = NULL;
    LTERM163       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement164.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal151_tree   = NULL;
    LTERM152_tree   = NULL;
    char_literal153_tree   = NULL;
    LTERM154_tree   = NULL;
    LTERM155_tree   = NULL;
    char_literal156_tree   = NULL;
    LTERM157_tree   = NULL;
    LTERM158_tree   = NULL;
    char_literal159_tree   = NULL;
    LTERM160_tree   = NULL;
    LTERM161_tree   = NULL;
    char_literal162_tree   = NULL;
    LTERM163_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:284:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//Emerson.g:284:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal151 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_forStatement2018); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal151, NULL); }


            // .//Emerson.g:284:10: ( LTERM )*

            for (;;)
            {
                int alt73=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA73_0 = LA(1);
                    if ( (LA73_0 == LTERM) ) 
                    {
                        alt73=1;
                    }

                }
                switch (alt73) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM152 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement2020); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM152, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop73;	/* break out of the loop */
            	    break;
                }
            }
            loop73: ; /* Jump out to here if this rule does not match */

            char_literal153 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_forStatement2023); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal153, NULL); }


            // .//Emerson.g:284:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt75=2;
                alt75 = cdfa75.predict(ctx, RECOGNIZER, ISTREAM, &cdfa75);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt75) 
                {
            	case 1:
            	    // .//Emerson.g:284:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//Emerson.g:284:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt74=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA74_0 = LA(1);
            	                if ( (LA74_0 == LTERM) ) 
            	                {
            	                    alt74=1;
            	                }

            	            }
            	            switch (alt74) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM154 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement2026); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM154, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop74;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop74: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement2031);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:284:64: ( LTERM )*

            for (;;)
            {
                int alt76=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA76_0 = LA(1);
                    if ( (LA76_0 == LTERM) ) 
                    {
                        alt76=1;
                    }

                }
                switch (alt76) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM155 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement2035); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM155, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop76;	/* break out of the loop */
            	    break;
                }
            }
            loop76: ; /* Jump out to here if this rule does not match */

            char_literal156 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forStatement2038); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal156, NULL); }


            // .//Emerson.g:284:75: ( ( LTERM )* cond= expression )?
            {
                int alt78=2;
                alt78 = cdfa78.predict(ctx, RECOGNIZER, ISTREAM, &cdfa78);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt78) 
                {
            	case 1:
            	    // .//Emerson.g:284:76: ( LTERM )* cond= expression
            	    {

            	        // .//Emerson.g:284:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt77=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA77_0 = LA(1);
            	                if ( (LA77_0 == LTERM) ) 
            	                {
            	                    alt77=1;
            	                }

            	            }
            	            switch (alt77) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM157 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement2041); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM157, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop77;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop77: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2046);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:284:101: ( LTERM )*

            for (;;)
            {
                int alt79=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA79_0 = LA(1);
                    if ( (LA79_0 == LTERM) ) 
                    {
                        alt79=1;
                    }

                }
                switch (alt79) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM158 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement2050); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM158, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop79;	/* break out of the loop */
            	    break;
                }
            }
            loop79: ; /* Jump out to here if this rule does not match */

            char_literal159 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forStatement2053); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal159, NULL); }


            // .//Emerson.g:284:112: ( ( LTERM )* iter= expression )?
            {
                int alt81=2;
                alt81 = cdfa81.predict(ctx, RECOGNIZER, ISTREAM, &cdfa81);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt81) 
                {
            	case 1:
            	    // .//Emerson.g:284:113: ( LTERM )* iter= expression
            	    {

            	        // .//Emerson.g:284:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt80=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA80_0 = LA(1);
            	                if ( (LA80_0 == LTERM) ) 
            	                {
            	                    alt80=1;
            	                }

            	            }
            	            switch (alt80) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM160 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement2056); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM160, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop80;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop80: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement2061);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:284:138: ( LTERM )*

            for (;;)
            {
                int alt82=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA82_0 = LA(1);
                    if ( (LA82_0 == LTERM) ) 
                    {
                        alt82=1;
                    }

                }
                switch (alt82) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM161 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement2065); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM161, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop82;	/* break out of the loop */
            	    break;
                }
            }
            loop82: ; /* Jump out to here if this rule does not match */

            char_literal162 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_forStatement2068); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal162, NULL); }


            // .//Emerson.g:284:149: ( LTERM )*

            for (;;)
            {
                int alt83=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA83_0 = LA(1);
                    if ( (LA83_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA83_2 = LA(2);
                            if ( (synpred101_Emerson(ctx)) ) 
                            {
                                alt83=1;
                            }

                        }
                    }

                }
                switch (alt83) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM163 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement2070); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM163, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop83;	/* break out of the loop */
            	    break;
                }
            }
            loop83: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement2073);
            statement164=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement164.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, iter, cond, init
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 284:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//Emerson.g:284:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//Emerson.g:284:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//Emerson.g:284:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//Emerson.g:284:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//Emerson.g:284:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//Emerson.g:284:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//Emerson.g:284:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//Emerson.g:287:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static EmersonParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal166;
    pANTLR3_COMMON_TOKEN    LTERM167;
    EmersonParser_expressionNoIn_return expressionNoIn165;
    #undef	RETURN_TYPE_expressionNoIn165
    #define	RETURN_TYPE_expressionNoIn165 EmersonParser_expressionNoIn_return

    EmersonParser_variableDeclarationListNoIn_return variableDeclarationListNoIn168;
    #undef	RETURN_TYPE_variableDeclarationListNoIn168
    #define	RETURN_TYPE_variableDeclarationListNoIn168 EmersonParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal166_tree;
    pANTLR3_BASE_TREE LTERM167_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal166       = NULL;
    LTERM167       = NULL;
    expressionNoIn165.tree = NULL;

    variableDeclarationListNoIn168.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal166_tree   = NULL;
    LTERM167_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:288:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt85;

            alt85=2;


            {
                int LA85_0 = LA(1);
                if ( (((LA85_0 >= Identifier) && (LA85_0 <= NumericLiteral)) || ((LA85_0 >= 135) && (LA85_0 <= 136)) || LA85_0 == 139 || ((LA85_0 >= 165) && (LA85_0 <= 166)) || LA85_0 == 190 || ((LA85_0 >= 198) && (LA85_0 <= 199)) || ((LA85_0 >= 203) && (LA85_0 <= 214))) ) 
                {
                    alt85=1;
                }
                else if ( (LA85_0 == 142) ) 
                {
                    alt85=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 85;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt85) 
            {
        	case 1:
        	    // .//Emerson.g:288:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart2122);
        	        expressionNoIn165=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn165.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:289:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal166 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_forStatementInitialiserPart2127); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal166, NULL); }


        	        // .//Emerson.g:289:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt84=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA84_0 = LA(1);
        	                if ( (LA84_0 == LTERM) ) 
        	                {
        	                    alt84=1;
        	                }

        	            }
        	            switch (alt84) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM167 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart2129); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM167, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop84;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop84: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart2132);
        	        variableDeclarationListNoIn168=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn168.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 289:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//Emerson.g:289:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//Emerson.g:292:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static EmersonParser_forInStatement_return
forInStatement(pEmersonParser ctx)
{   
    EmersonParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal169;
    pANTLR3_COMMON_TOKEN    LTERM170;
    pANTLR3_COMMON_TOKEN    char_literal171;
    pANTLR3_COMMON_TOKEN    LTERM172;
    pANTLR3_COMMON_TOKEN    LTERM174;
    pANTLR3_COMMON_TOKEN    string_literal175;
    pANTLR3_COMMON_TOKEN    LTERM176;
    pANTLR3_COMMON_TOKEN    LTERM178;
    pANTLR3_COMMON_TOKEN    char_literal179;
    pANTLR3_COMMON_TOKEN    LTERM180;
    EmersonParser_forInStatementInitialiserPart_return forInStatementInitialiserPart173;
    #undef	RETURN_TYPE_forInStatementInitialiserPart173
    #define	RETURN_TYPE_forInStatementInitialiserPart173 EmersonParser_forInStatementInitialiserPart_return

    EmersonParser_expression_return expression177;
    #undef	RETURN_TYPE_expression177
    #define	RETURN_TYPE_expression177 EmersonParser_expression_return

    EmersonParser_statement_return statement181;
    #undef	RETURN_TYPE_statement181
    #define	RETURN_TYPE_statement181 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal169_tree;
    pANTLR3_BASE_TREE LTERM170_tree;
    pANTLR3_BASE_TREE char_literal171_tree;
    pANTLR3_BASE_TREE LTERM172_tree;
    pANTLR3_BASE_TREE LTERM174_tree;
    pANTLR3_BASE_TREE string_literal175_tree;
    pANTLR3_BASE_TREE LTERM176_tree;
    pANTLR3_BASE_TREE LTERM178_tree;
    pANTLR3_BASE_TREE char_literal179_tree;
    pANTLR3_BASE_TREE LTERM180_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal169       = NULL;
    LTERM170       = NULL;
    char_literal171       = NULL;
    LTERM172       = NULL;
    LTERM174       = NULL;
    string_literal175       = NULL;
    LTERM176       = NULL;
    LTERM178       = NULL;
    char_literal179       = NULL;
    LTERM180       = NULL;
    forInStatementInitialiserPart173.tree = NULL;

    expression177.tree = NULL;

    statement181.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal169_tree   = NULL;
    LTERM170_tree   = NULL;
    char_literal171_tree   = NULL;
    LTERM172_tree   = NULL;
    LTERM174_tree   = NULL;
    string_literal175_tree   = NULL;
    LTERM176_tree   = NULL;
    LTERM178_tree   = NULL;
    char_literal179_tree   = NULL;
    LTERM180_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:293:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//Emerson.g:293:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal169 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_forInStatement2152); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal169, NULL); }


            // .//Emerson.g:293:10: ( LTERM )*

            for (;;)
            {
                int alt86=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA86_0 = LA(1);
                    if ( (LA86_0 == LTERM) ) 
                    {
                        alt86=1;
                    }

                }
                switch (alt86) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM170 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2154); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM170, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop86;	/* break out of the loop */
            	    break;
                }
            }
            loop86: ; /* Jump out to here if this rule does not match */

            char_literal171 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_forInStatement2157); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal171, NULL); }


            // .//Emerson.g:293:21: ( LTERM )*

            for (;;)
            {
                int alt87=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA87_0 = LA(1);
                    if ( (LA87_0 == LTERM) ) 
                    {
                        alt87=1;
                    }

                }
                switch (alt87) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM172 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2159); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM172, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop87;	/* break out of the loop */
            	    break;
                }
            }
            loop87: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement2162);
            forInStatementInitialiserPart173=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart173.tree, NULL); }

            // .//Emerson.g:293:58: ( LTERM )*

            for (;;)
            {
                int alt88=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA88_0 = LA(1);
                    if ( (LA88_0 == LTERM) ) 
                    {
                        alt88=1;
                    }

                }
                switch (alt88) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM174 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2164); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM174, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop88;	/* break out of the loop */
            	    break;
                }
            }
            loop88: ; /* Jump out to here if this rule does not match */

            string_literal175 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_forInStatement2167); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal175, NULL); }


            // .//Emerson.g:293:70: ( LTERM )*

            for (;;)
            {
                int alt89=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }

                }
                switch (alt89) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM176 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2169); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM176, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop89;	/* break out of the loop */
            	    break;
                }
            }
            loop89: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement2172);
            expression177=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression177.tree, NULL); }

            // .//Emerson.g:293:88: ( LTERM )*

            for (;;)
            {
                int alt90=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA90_0 = LA(1);
                    if ( (LA90_0 == LTERM) ) 
                    {
                        alt90=1;
                    }

                }
                switch (alt90) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM178 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2174); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM178, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop90;	/* break out of the loop */
            	    break;
                }
            }
            loop90: ; /* Jump out to here if this rule does not match */

            char_literal179 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_forInStatement2177); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal179, NULL); }


            // .//Emerson.g:293:99: ( LTERM )*

            for (;;)
            {
                int alt91=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA91_0 = LA(1);
                    if ( (LA91_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA91_2 = LA(2);
                            if ( (synpred109_Emerson(ctx)) ) 
                            {
                                alt91=1;
                            }

                        }
                    }

                }
                switch (alt91) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM180 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement2179); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM180, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop91;	/* break out of the loop */
            	    break;
                }
            }
            loop91: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement2182);
            statement181=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement181.tree, NULL); }

             
            /* AST REWRITE
             * elements          : forInStatementInitialiserPart, statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 293:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//Emerson.g:293:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//Emerson.g:296:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static EmersonParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal183;
    pANTLR3_COMMON_TOKEN    LTERM184;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression182;
    #undef	RETURN_TYPE_leftHandSideExpression182
    #define	RETURN_TYPE_leftHandSideExpression182 EmersonParser_leftHandSideExpression_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn185;
    #undef	RETURN_TYPE_variableDeclarationNoIn185
    #define	RETURN_TYPE_variableDeclarationNoIn185 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal183_tree;
    pANTLR3_BASE_TREE LTERM184_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal183       = NULL;
    LTERM184       = NULL;
    leftHandSideExpression182.tree = NULL;

    variableDeclarationNoIn185.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal183_tree   = NULL;
    LTERM184_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:297:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt93;

            alt93=2;


            {
                int LA93_0 = LA(1);
                if ( (((LA93_0 >= Identifier) && (LA93_0 <= NumericLiteral)) || ((LA93_0 >= 135) && (LA93_0 <= 136)) || LA93_0 == 139 || ((LA93_0 >= 165) && (LA93_0 <= 166)) || LA93_0 == 190 || ((LA93_0 >= 210) && (LA93_0 <= 214))) ) 
                {
                    alt93=1;
                }
                else if ( (LA93_0 == 142) ) 
                {
                    alt93=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 93;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt93) 
            {
        	case 1:
        	    // .//Emerson.g:297:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart2206);
        	        leftHandSideExpression182=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression182.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 297:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:298:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal183 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_forInStatementInitialiserPart2215); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal183, NULL); }


        	        // .//Emerson.g:298:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt92=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA92_0 = LA(1);
        	                if ( (LA92_0 == LTERM) ) 
        	                {
        	                    alt92=1;
        	                }

        	            }
        	            switch (alt92) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM184 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart2217); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM184, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop92;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop92: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2220);
        	        variableDeclarationNoIn185=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn185.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 298:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//Emerson.g:298:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//Emerson.g:301:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static EmersonParser_continueStatement_return
continueStatement(pEmersonParser ctx)
{   
    EmersonParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal186;
    pANTLR3_COMMON_TOKEN    Identifier187;
    pANTLR3_COMMON_TOKEN    LTERM188;
    pANTLR3_COMMON_TOKEN    char_literal189;

    pANTLR3_BASE_TREE string_literal186_tree;
    pANTLR3_BASE_TREE Identifier187_tree;
    pANTLR3_BASE_TREE LTERM188_tree;
    pANTLR3_BASE_TREE char_literal189_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal186       = NULL;
    Identifier187       = NULL;
    LTERM188       = NULL;
    char_literal189       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal186_tree   = NULL;
    Identifier187_tree   = NULL;
    LTERM188_tree   = NULL;
    char_literal189_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:302:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//Emerson.g:302:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal186 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_continueStatement2239); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal186, NULL); }


            // .//Emerson.g:302:15: ( Identifier )?
            {
                int alt94=2;
                {
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == Identifier) ) 
                    {
                        alt94=1;
                    }
                }
                switch (alt94) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier187 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2241); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier187, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:302:27: ( LTERM | ';' )
            {
                int alt95=2;

                {
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == LTERM) ) 
                    {
                        alt95=1;
                    }
                    else if ( (LA95_0 == 141) ) 
                    {
                        alt95=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 95;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt95) 
                {
            	case 1:
            	    // .//Emerson.g:302:28: LTERM
            	    {
            	        LTERM188 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement2245); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM188, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:302:36: ';'
            	    {
            	        char_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_continueStatement2249); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal189, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 302:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//Emerson.g:302:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//Emerson.g:302:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_141 != NULL) stream_141->free(stream_141);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//Emerson.g:305:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static EmersonParser_breakStatement_return
breakStatement(pEmersonParser ctx)
{   
    EmersonParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal190;
    pANTLR3_COMMON_TOKEN    Identifier191;
    pANTLR3_COMMON_TOKEN    LTERM192;
    pANTLR3_COMMON_TOKEN    char_literal193;

    pANTLR3_BASE_TREE string_literal190_tree;
    pANTLR3_BASE_TREE Identifier191_tree;
    pANTLR3_BASE_TREE LTERM192_tree;
    pANTLR3_BASE_TREE char_literal193_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal190       = NULL;
    Identifier191       = NULL;
    LTERM192       = NULL;
    char_literal193       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal190_tree   = NULL;
    Identifier191_tree   = NULL;
    LTERM192_tree   = NULL;
    char_literal193_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:306:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//Emerson.g:306:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal190 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_breakStatement2271); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal190, NULL); }


            // .//Emerson.g:306:12: ( Identifier )?
            {
                int alt96=2;
                {
                    int LA96_0 = LA(1);
                    if ( (LA96_0 == Identifier) ) 
                    {
                        alt96=1;
                    }
                }
                switch (alt96) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier191 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2273); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier191, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:306:24: ( LTERM | ';' )
            {
                int alt97=2;

                {
                    int LA97_0 = LA(1);
                    if ( (LA97_0 == LTERM) ) 
                    {
                        alt97=1;
                    }
                    else if ( (LA97_0 == 141) ) 
                    {
                        alt97=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 97;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt97) 
                {
            	case 1:
            	    // .//Emerson.g:306:25: LTERM
            	    {
            	        LTERM192 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement2277); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM192, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:306:33: ';'
            	    {
            	        char_literal193 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_breakStatement2281); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal193, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 306:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//Emerson.g:306:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//Emerson.g:306:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_141 != NULL) stream_141->free(stream_141);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//Emerson.g:309:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static EmersonParser_returnStatement_return
returnStatement(pEmersonParser ctx)
{   
    EmersonParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal194;
    pANTLR3_COMMON_TOKEN    LTERM196;
    pANTLR3_COMMON_TOKEN    char_literal197;
    EmersonParser_expression_return expression195;
    #undef	RETURN_TYPE_expression195
    #define	RETURN_TYPE_expression195 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal194_tree;
    pANTLR3_BASE_TREE LTERM196_tree;
    pANTLR3_BASE_TREE char_literal197_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal194       = NULL;
    LTERM196       = NULL;
    char_literal197       = NULL;
    expression195.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal194_tree   = NULL;
    LTERM196_tree   = NULL;
    char_literal197_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:310:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//Emerson.g:310:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal194 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_returnStatement2302); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal194, NULL); }


            // .//Emerson.g:310:13: ( expression )?
            {
                int alt98=2;
                {
                    int LA98_0 = LA(1);
                    if ( (((LA98_0 >= Identifier) && (LA98_0 <= NumericLiteral)) || ((LA98_0 >= 135) && (LA98_0 <= 136)) || LA98_0 == 139 || ((LA98_0 >= 165) && (LA98_0 <= 166)) || LA98_0 == 190 || ((LA98_0 >= 198) && (LA98_0 <= 199)) || ((LA98_0 >= 203) && (LA98_0 <= 214))) ) 
                    {
                        alt98=1;
                    }
                }
                switch (alt98) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2304);
            	        expression195=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression195.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:310:25: ( LTERM | ';' )
            {
                int alt99=2;

                {
                    int LA99_0 = LA(1);
                    if ( (LA99_0 == LTERM) ) 
                    {
                        alt99=1;
                    }
                    else if ( (LA99_0 == 141) ) 
                    {
                        alt99=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 99;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt99) 
                {
            	case 1:
            	    // .//Emerson.g:310:26: LTERM
            	    {
            	        LTERM196 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement2308); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM196, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:310:34: ';'
            	    {
            	        char_literal197 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_returnStatement2312); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal197, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 310:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//Emerson.g:310:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//Emerson.g:310:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//Emerson.g:313:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static EmersonParser_withStatement_return
withStatement(pEmersonParser ctx)
{   
    EmersonParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal198;
    pANTLR3_COMMON_TOKEN    LTERM199;
    pANTLR3_COMMON_TOKEN    char_literal200;
    pANTLR3_COMMON_TOKEN    LTERM201;
    pANTLR3_COMMON_TOKEN    LTERM203;
    pANTLR3_COMMON_TOKEN    char_literal204;
    pANTLR3_COMMON_TOKEN    LTERM205;
    EmersonParser_expression_return expression202;
    #undef	RETURN_TYPE_expression202
    #define	RETURN_TYPE_expression202 EmersonParser_expression_return

    EmersonParser_statement_return statement206;
    #undef	RETURN_TYPE_statement206
    #define	RETURN_TYPE_statement206 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal198_tree;
    pANTLR3_BASE_TREE LTERM199_tree;
    pANTLR3_BASE_TREE char_literal200_tree;
    pANTLR3_BASE_TREE LTERM201_tree;
    pANTLR3_BASE_TREE LTERM203_tree;
    pANTLR3_BASE_TREE char_literal204_tree;
    pANTLR3_BASE_TREE LTERM205_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal198       = NULL;
    LTERM199       = NULL;
    char_literal200       = NULL;
    LTERM201       = NULL;
    LTERM203       = NULL;
    char_literal204       = NULL;
    LTERM205       = NULL;
    expression202.tree = NULL;

    statement206.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal198_tree   = NULL;
    LTERM199_tree   = NULL;
    char_literal200_tree   = NULL;
    LTERM201_tree   = NULL;
    LTERM203_tree   = NULL;
    char_literal204_tree   = NULL;
    LTERM205_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:314:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//Emerson.g:314:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal198 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_withStatement2334); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal198, NULL); }


            // .//Emerson.g:314:11: ( LTERM )*

            for (;;)
            {
                int alt100=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA100_0 = LA(1);
                    if ( (LA100_0 == LTERM) ) 
                    {
                        alt100=1;
                    }

                }
                switch (alt100) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM199 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2336); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM199, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop100;	/* break out of the loop */
            	    break;
                }
            }
            loop100: ; /* Jump out to here if this rule does not match */

            char_literal200 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_withStatement2339); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal200, NULL); }


            // .//Emerson.g:314:22: ( LTERM )*

            for (;;)
            {
                int alt101=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA101_0 = LA(1);
                    if ( (LA101_0 == LTERM) ) 
                    {
                        alt101=1;
                    }

                }
                switch (alt101) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM201 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2341); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM201, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop101;	/* break out of the loop */
            	    break;
                }
            }
            loop101: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement2344);
            expression202=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression202.tree, NULL); }

            // .//Emerson.g:314:40: ( LTERM )*

            for (;;)
            {
                int alt102=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA102_0 = LA(1);
                    if ( (LA102_0 == LTERM) ) 
                    {
                        alt102=1;
                    }

                }
                switch (alt102) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM203 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2346); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM203, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop102;	/* break out of the loop */
            	    break;
                }
            }
            loop102: ; /* Jump out to here if this rule does not match */

            char_literal204 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_withStatement2349); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal204, NULL); }


            // .//Emerson.g:314:51: ( LTERM )*

            for (;;)
            {
                int alt103=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA103_0 = LA(1);
                    if ( (LA103_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA103_2 = LA(2);
                            if ( (synpred121_Emerson(ctx)) ) 
                            {
                                alt103=1;
                            }

                        }
                    }

                }
                switch (alt103) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM205 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2351); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM205, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement2354);
            statement206=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement206.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 314:68: -> ^( WITH expression statement )
            	{
            	    // .//Emerson.g:314:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_154 != NULL) stream_154->free(stream_154);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//Emerson.g:317:1: labelledStatement : Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) ;
 */
static EmersonParser_labelledStatement_return
labelledStatement(pEmersonParser ctx)
{   
    EmersonParser_labelledStatement_return retval;
    ANTLR3_UINT32 labelledStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier207;
    pANTLR3_COMMON_TOKEN    LTERM208;
    pANTLR3_COMMON_TOKEN    char_literal209;
    pANTLR3_COMMON_TOKEN    LTERM210;
    EmersonParser_statement_return statement211;
    #undef	RETURN_TYPE_statement211
    #define	RETURN_TYPE_statement211 EmersonParser_statement_return

    pANTLR3_BASE_TREE Identifier207_tree;
    pANTLR3_BASE_TREE LTERM208_tree;
    pANTLR3_BASE_TREE char_literal209_tree;
    pANTLR3_BASE_TREE LTERM210_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    labelledStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier207       = NULL;
    LTERM208       = NULL;
    char_literal209       = NULL;
    LTERM210       = NULL;
    statement211.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier207_tree   = NULL;
    LTERM208_tree   = NULL;
    char_literal209_tree   = NULL;
    LTERM210_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:318:2: ( Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) )
        // .//Emerson.g:318:4: Identifier ( LTERM )* ':' ( LTERM )* statement
        {
            Identifier207 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement2375); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier207, NULL); }


            // .//Emerson.g:318:15: ( LTERM )*

            for (;;)
            {
                int alt104=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA104_0 = LA(1);
                    if ( (LA104_0 == LTERM) ) 
                    {
                        alt104=1;
                    }

                }
                switch (alt104) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM208 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2377); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM208, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop104;	/* break out of the loop */
            	    break;
                }
            }
            loop104: ; /* Jump out to here if this rule does not match */

            char_literal209 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_labelledStatement2380); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal209, NULL); }


            // .//Emerson.g:318:26: ( LTERM )*

            for (;;)
            {
                int alt105=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA105_0 = LA(1);
                    if ( (LA105_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA105_2 = LA(2);
                            if ( (synpred123_Emerson(ctx)) ) 
                            {
                                alt105=1;
                            }

                        }
                    }

                }
                switch (alt105) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM210 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2382); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM210, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop105;	/* break out of the loop */
            	    break;
                }
            }
            loop105: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement2385);
            statement211=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement211.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 318:43: -> ^( LABEL Identifier statement )
            	{
            	    // .//Emerson.g:318:46: ^( LABEL Identifier statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LABEL, (pANTLR3_UINT8)"LABEL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, labelledStatement_StartIndex); }
    return retval;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//Emerson.g:321:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static EmersonParser_switchStatement_return
switchStatement(pEmersonParser ctx)
{   
    EmersonParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal212;
    pANTLR3_COMMON_TOKEN    LTERM213;
    pANTLR3_COMMON_TOKEN    char_literal214;
    pANTLR3_COMMON_TOKEN    LTERM215;
    pANTLR3_COMMON_TOKEN    LTERM217;
    pANTLR3_COMMON_TOKEN    char_literal218;
    pANTLR3_COMMON_TOKEN    LTERM219;
    EmersonParser_expression_return expression216;
    #undef	RETURN_TYPE_expression216
    #define	RETURN_TYPE_expression216 EmersonParser_expression_return

    EmersonParser_caseBlock_return caseBlock220;
    #undef	RETURN_TYPE_caseBlock220
    #define	RETURN_TYPE_caseBlock220 EmersonParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal212_tree;
    pANTLR3_BASE_TREE LTERM213_tree;
    pANTLR3_BASE_TREE char_literal214_tree;
    pANTLR3_BASE_TREE LTERM215_tree;
    pANTLR3_BASE_TREE LTERM217_tree;
    pANTLR3_BASE_TREE char_literal218_tree;
    pANTLR3_BASE_TREE LTERM219_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal212       = NULL;
    LTERM213       = NULL;
    char_literal214       = NULL;
    LTERM215       = NULL;
    LTERM217       = NULL;
    char_literal218       = NULL;
    LTERM219       = NULL;
    expression216.tree = NULL;

    caseBlock220.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal212_tree   = NULL;
    LTERM213_tree   = NULL;
    char_literal214_tree   = NULL;
    LTERM215_tree   = NULL;
    LTERM217_tree   = NULL;
    char_literal218_tree   = NULL;
    LTERM219_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:322:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//Emerson.g:322:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal212 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_switchStatement2408); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal212, NULL); }


            // .//Emerson.g:322:13: ( LTERM )*

            for (;;)
            {
                int alt106=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA106_0 = LA(1);
                    if ( (LA106_0 == LTERM) ) 
                    {
                        alt106=1;
                    }

                }
                switch (alt106) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM213 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2410); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM213, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */

            char_literal214 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_switchStatement2413); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal214, NULL); }


            // .//Emerson.g:322:24: ( LTERM )*

            for (;;)
            {
                int alt107=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA107_0 = LA(1);
                    if ( (LA107_0 == LTERM) ) 
                    {
                        alt107=1;
                    }

                }
                switch (alt107) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM215 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2415); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM215, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop107;	/* break out of the loop */
            	    break;
                }
            }
            loop107: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2418);
            expression216=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression216.tree, NULL); }

            // .//Emerson.g:322:42: ( LTERM )*

            for (;;)
            {
                int alt108=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA108_0 = LA(1);
                    if ( (LA108_0 == LTERM) ) 
                    {
                        alt108=1;
                    }

                }
                switch (alt108) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM217 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2420); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM217, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop108;	/* break out of the loop */
            	    break;
                }
            }
            loop108: ; /* Jump out to here if this rule does not match */

            char_literal218 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_switchStatement2423); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal218, NULL); }


            // .//Emerson.g:322:53: ( LTERM )*

            for (;;)
            {
                int alt109=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA109_0 = LA(1);
                    if ( (LA109_0 == LTERM) ) 
                    {
                        alt109=1;
                    }

                }
                switch (alt109) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM219 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2425); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM219, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop109;	/* break out of the loop */
            	    break;
                }
            }
            loop109: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2428);
            caseBlock220=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock220.tree, NULL); }

             
            /* AST REWRITE
             * elements          : caseBlock, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 322:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//Emerson.g:322:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//Emerson.g:325:1: caseBlock : '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? ;
 */
static EmersonParser_caseBlock_return
caseBlock(pEmersonParser ctx)
{   
    EmersonParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal221;
    pANTLR3_COMMON_TOKEN    LTERM222;
    pANTLR3_COMMON_TOKEN    LTERM223;
    pANTLR3_COMMON_TOKEN    LTERM225;
    pANTLR3_COMMON_TOKEN    LTERM226;
    pANTLR3_COMMON_TOKEN    char_literal227;
    EmersonParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 EmersonParser_caseClause_return

    EmersonParser_caseClause_return case2;
    #undef	RETURN_TYPE_case2
    #define	RETURN_TYPE_case2 EmersonParser_caseClause_return

    EmersonParser_defaultClause_return defaultClause224;
    #undef	RETURN_TYPE_defaultClause224
    #define	RETURN_TYPE_defaultClause224 EmersonParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal221_tree;
    pANTLR3_BASE_TREE LTERM222_tree;
    pANTLR3_BASE_TREE LTERM223_tree;
    pANTLR3_BASE_TREE LTERM225_tree;
    pANTLR3_BASE_TREE LTERM226_tree;
    pANTLR3_BASE_TREE char_literal227_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal221       = NULL;
    LTERM222       = NULL;
    LTERM223       = NULL;
    LTERM225       = NULL;
    LTERM226       = NULL;
    char_literal227       = NULL;
    case1.tree = NULL;

    case2.tree = NULL;

    defaultClause224.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal221_tree   = NULL;
    LTERM222_tree   = NULL;
    LTERM223_tree   = NULL;
    LTERM225_tree   = NULL;
    LTERM226_tree   = NULL;
    char_literal227_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:326:2: ( '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? )
        // .//Emerson.g:326:4: '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}'
        {
            char_literal221 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_caseBlock2450); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal221, NULL); }


            // .//Emerson.g:326:8: ( ( LTERM )* case1= caseClause )*

            for (;;)
            {
                int alt111=2;
                alt111 = cdfa111.predict(ctx, RECOGNIZER, ISTREAM, &cdfa111);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt111) 
                {
            	case 1:
            	    // .//Emerson.g:326:9: ( LTERM )* case1= caseClause
            	    {

            	        // .//Emerson.g:326:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt110=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA110_0 = LA(1);
            	                if ( (LA110_0 == LTERM) ) 
            	                {
            	                    alt110=1;
            	                }

            	            }
            	            switch (alt110) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM222 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2453); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM222, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop110;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop110: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2458);
            	        case1=caseClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop111;	/* break out of the loop */
            	    break;
                }
            }
            loop111: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:326:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
            {
                int alt115=2;
                alt115 = cdfa115.predict(ctx, RECOGNIZER, ISTREAM, &cdfa115);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt115) 
                {
            	case 1:
            	    // .//Emerson.g:326:36: ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )*
            	    {

            	        // .//Emerson.g:326:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt112=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA112_0 = LA(1);
            	                if ( (LA112_0 == LTERM) ) 
            	                {
            	                    alt112=1;
            	                }

            	            }
            	            switch (alt112) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM223 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2463); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM223, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop112;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop112: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2466);
            	        defaultClause224=defaultClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause224.tree, NULL); }

            	        // .//Emerson.g:326:57: ( ( LTERM )* case2= caseClause )*

            	        for (;;)
            	        {
            	            int alt114=2;
            	            alt114 = cdfa114.predict(ctx, RECOGNIZER, ISTREAM, &cdfa114);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulecaseBlockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt114) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:326:58: ( LTERM )* case2= caseClause
            	        	    {

            	        	        // .//Emerson.g:326:58: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt113=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA113_0 = LA(1);
            	        	                if ( (LA113_0 == LTERM) ) 
            	        	                {
            	        	                    alt113=1;
            	        	                }

            	        	            }
            	        	            switch (alt113) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM225 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2469); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulecaseBlockEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM225, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop113;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop113: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2474);
            	        	        case2=caseClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case2.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop114;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop114: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:326:86: ( LTERM )*

            for (;;)
            {
                int alt116=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA116_0 = LA(1);
                    if ( (LA116_0 == LTERM) ) 
                    {
                        alt116=1;
                    }

                }
                switch (alt116) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM226 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2480); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM226, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */

            char_literal227 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_caseBlock2483); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal227, NULL); }


             
            /* AST REWRITE
             * elements          : case2, defaultClause, case1
             * token labels      : 
             * rule labels       : case2, retval, case1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

            	stream_case2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case2", case2.tree != NULL ? case2.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 326:97: -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )?
            	{
            	    // .//Emerson.g:326:101: ( ^( $case1) )*
            	    {
            	    	while ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
            	    	{
            	    		// .//Emerson.g:326:101: ^( $case1)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case1 == NULL ? NULL : stream_case1->nextNode(stream_case1), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_case1 != NULL) stream_case1->reset(stream_case1);

            	    }
            	    // .//Emerson.g:326:112: ( ( ^( defaultClause ) )* )?
            	    {
            	    	if ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    	{
            	    		// .//Emerson.g:326:113: ( ^( defaultClause ) )*
            	    		{
            	    			while ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    			{
            	    				// .//Emerson.g:326:113: ^( defaultClause )
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextNode(stream_defaultClause), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    		}

            	    	}
            	    	if ( stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    }
            	    // .//Emerson.g:326:133: ( ( ^( $case2) )* )?
            	    {
            	    	if ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    	{
            	    		// .//Emerson.g:326:134: ( ^( $case2) )*
            	    		{
            	    			while ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    			{
            	    				// .//Emerson.g:326:134: ^( $case2)
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case2 == NULL ? NULL : stream_case2->nextNode(stream_case2), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    		}

            	    	}
            	    	if ( stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_case2 != NULL) stream_case2->free(stream_case2);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_case1 != NULL) stream_case1->free(stream_case1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//Emerson.g:329:1: caseClause : 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) ;
 */
static EmersonParser_caseClause_return
caseClause(pEmersonParser ctx)
{   
    EmersonParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal228;
    pANTLR3_COMMON_TOKEN    LTERM229;
    pANTLR3_COMMON_TOKEN    LTERM231;
    pANTLR3_COMMON_TOKEN    char_literal232;
    pANTLR3_COMMON_TOKEN    LTERM233;
    EmersonParser_expression_return expression230;
    #undef	RETURN_TYPE_expression230
    #define	RETURN_TYPE_expression230 EmersonParser_expression_return

    EmersonParser_statementList_return statementList234;
    #undef	RETURN_TYPE_statementList234
    #define	RETURN_TYPE_statementList234 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal228_tree;
    pANTLR3_BASE_TREE LTERM229_tree;
    pANTLR3_BASE_TREE LTERM231_tree;
    pANTLR3_BASE_TREE char_literal232_tree;
    pANTLR3_BASE_TREE LTERM233_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal228       = NULL;
    LTERM229       = NULL;
    LTERM231       = NULL;
    char_literal232       = NULL;
    LTERM233       = NULL;
    expression230.tree = NULL;

    statementList234.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal228_tree   = NULL;
    LTERM229_tree   = NULL;
    LTERM231_tree   = NULL;
    char_literal232_tree   = NULL;
    LTERM233_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:330:2: ( 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) )
        // .//Emerson.g:330:4: 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal228 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_caseClause2520); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal228, NULL); }


            // .//Emerson.g:330:11: ( LTERM )*

            for (;;)
            {
                int alt117=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA117_0 = LA(1);
                    if ( (LA117_0 == LTERM) ) 
                    {
                        alt117=1;
                    }

                }
                switch (alt117) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM229 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2522); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM229, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_caseClause2525);
            expression230=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression230.tree, NULL); }

            // .//Emerson.g:330:29: ( LTERM )*

            for (;;)
            {
                int alt118=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA118_0 = LA(1);
                    if ( (LA118_0 == LTERM) ) 
                    {
                        alt118=1;
                    }

                }
                switch (alt118) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM231 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2527); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM231, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop118;	/* break out of the loop */
            	    break;
                }
            }
            loop118: ; /* Jump out to here if this rule does not match */

            char_literal232 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_caseClause2530); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal232, NULL); }


            // .//Emerson.g:330:40: ( LTERM )*

            for (;;)
            {
                int alt119=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA119_1 = LA(2);
                            if ( (synpred137_Emerson(ctx)) ) 
                            {
                                alt119=1;
                            }

                        }
                    }

                }
                switch (alt119) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM233 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2532); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM233, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop119;	/* break out of the loop */
            	    break;
                }
            }
            loop119: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:330:47: ( statementList )?
            {
                int alt120=2;
                alt120 = cdfa120.predict(ctx, RECOGNIZER, ISTREAM, &cdfa120);
                if  (HASEXCEPTION())
                {
                    goto rulecaseClauseEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt120) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2535);
            	        statementList234=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList234.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 330:62: -> ^( CASE expression ( statementList )? )
            	{
            	    // .//Emerson.g:330:65: ^( CASE expression ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        // .//Emerson.g:330:84: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//Emerson.g:333:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) ;
 */
static EmersonParser_defaultClause_return
defaultClause(pEmersonParser ctx)
{   
    EmersonParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal235;
    pANTLR3_COMMON_TOKEN    LTERM236;
    pANTLR3_COMMON_TOKEN    char_literal237;
    pANTLR3_COMMON_TOKEN    LTERM238;
    EmersonParser_statementList_return statementList239;
    #undef	RETURN_TYPE_statementList239
    #define	RETURN_TYPE_statementList239 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal235_tree;
    pANTLR3_BASE_TREE LTERM236_tree;
    pANTLR3_BASE_TREE char_literal237_tree;
    pANTLR3_BASE_TREE LTERM238_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal235       = NULL;
    LTERM236       = NULL;
    char_literal237       = NULL;
    LTERM238       = NULL;
    statementList239.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal235_tree   = NULL;
    LTERM236_tree   = NULL;
    char_literal237_tree   = NULL;
    LTERM238_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:334:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) )
        // .//Emerson.g:334:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal235 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_defaultClause2560); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, string_literal235, NULL); }


            // .//Emerson.g:334:14: ( LTERM )*

            for (;;)
            {
                int alt121=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA121_0 = LA(1);
                    if ( (LA121_0 == LTERM) ) 
                    {
                        alt121=1;
                    }

                }
                switch (alt121) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM236 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2562); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM236, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop121;	/* break out of the loop */
            	    break;
                }
            }
            loop121: ; /* Jump out to here if this rule does not match */

            char_literal237 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_defaultClause2565); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal237, NULL); }


            // .//Emerson.g:334:25: ( LTERM )*

            for (;;)
            {
                int alt122=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA122_0 = LA(1);
                    if ( (LA122_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA122_1 = LA(2);
                            if ( (synpred140_Emerson(ctx)) ) 
                            {
                                alt122=1;
                            }

                        }
                    }

                }
                switch (alt122) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM238 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2567); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM238, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop122;	/* break out of the loop */
            	    break;
                }
            }
            loop122: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:334:32: ( statementList )?
            {
                int alt123=2;
                alt123 = cdfa123.predict(ctx, RECOGNIZER, ISTREAM, &cdfa123);
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt123) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2570);
            	        statementList239=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList239.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 334:47: -> ^( DEFAULT ( statementList )? )
            	{
            	    // .//Emerson.g:334:50: ^( DEFAULT ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//Emerson.g:334:60: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//Emerson.g:337:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static EmersonParser_throwStatement_return
throwStatement(pEmersonParser ctx)
{   
    EmersonParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal240;
    pANTLR3_COMMON_TOKEN    LTERM242;
    pANTLR3_COMMON_TOKEN    char_literal243;
    EmersonParser_expression_return expression241;
    #undef	RETURN_TYPE_expression241
    #define	RETURN_TYPE_expression241 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal240_tree;
    pANTLR3_BASE_TREE LTERM242_tree;
    pANTLR3_BASE_TREE char_literal243_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal240       = NULL;
    LTERM242       = NULL;
    char_literal243       = NULL;
    expression241.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal240_tree   = NULL;
    LTERM242_tree   = NULL;
    char_literal243_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:338:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//Emerson.g:338:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal240 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_throwStatement2592); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, string_literal240, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2594);
            expression241=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression241.tree, NULL); }

            // .//Emerson.g:338:23: ( LTERM | ';' )
            {
                int alt124=2;

                {
                    int LA124_0 = LA(1);
                    if ( (LA124_0 == LTERM) ) 
                    {
                        alt124=1;
                    }
                    else if ( (LA124_0 == 141) ) 
                    {
                        alt124=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 124;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt124) 
                {
            	case 1:
            	    // .//Emerson.g:338:24: LTERM
            	    {
            	        LTERM242 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement2597); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM242, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:338:32: ';'
            	    {
            	        char_literal243 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_throwStatement2601); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal243, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 338:37: -> ^( THROW expression )
            	{
            	    // .//Emerson.g:338:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//Emerson.g:342:1: tryStatement : 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock -> ^( TRY statementBlock catchFinallyBlock ) ;
 */
static EmersonParser_tryStatement_return
tryStatement(pEmersonParser ctx)
{   
    EmersonParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal244;
    pANTLR3_COMMON_TOKEN    LTERM245;
    pANTLR3_COMMON_TOKEN    LTERM247;
    EmersonParser_statementBlock_return statementBlock246;
    #undef	RETURN_TYPE_statementBlock246
    #define	RETURN_TYPE_statementBlock246 EmersonParser_statementBlock_return

    EmersonParser_catchFinallyBlock_return catchFinallyBlock248;
    #undef	RETURN_TYPE_catchFinallyBlock248
    #define	RETURN_TYPE_catchFinallyBlock248 EmersonParser_catchFinallyBlock_return

    pANTLR3_BASE_TREE string_literal244_tree;
    pANTLR3_BASE_TREE LTERM245_tree;
    pANTLR3_BASE_TREE LTERM247_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchFinallyBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal244       = NULL;
    LTERM245       = NULL;
    LTERM247       = NULL;
    statementBlock246.tree = NULL;

    catchFinallyBlock248.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal244_tree   = NULL;
    LTERM245_tree   = NULL;
    LTERM247_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_catchFinallyBlock   = NULL;
    #define CREATE_stream_catchFinallyBlock  if (stream_catchFinallyBlock == NULL) {stream_catchFinallyBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchFinallyBlock"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:343:9: ( 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock -> ^( TRY statementBlock catchFinallyBlock ) )
        // .//Emerson.g:343:11: 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock
        {
            string_literal244 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_tryStatement2629); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, string_literal244, NULL); }


            // .//Emerson.g:343:17: ( LTERM )*

            for (;;)
            {
                int alt125=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA125_0 = LA(1);
                    if ( (LA125_0 == LTERM) ) 
                    {
                        alt125=1;
                    }

                }
                switch (alt125) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM245 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2631); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM245, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop125;	/* break out of the loop */
            	    break;
                }
            }
            loop125: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2634);
            statementBlock246=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock246.tree, NULL); }

            // .//Emerson.g:343:39: ( LTERM )*

            for (;;)
            {
                int alt126=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA126_0 = LA(1);
                    if ( (LA126_0 == LTERM) ) 
                    {
                        alt126=1;
                    }

                }
                switch (alt126) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM247 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2636); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM247, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop126;	/* break out of the loop */
            	    break;
                }
            }
            loop126: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement2639);
            catchFinallyBlock248=catchFinallyBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_catchFinallyBlock; stream_catchFinallyBlock->add(stream_catchFinallyBlock, catchFinallyBlock248.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock, catchFinallyBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 343:64: -> ^( TRY statementBlock catchFinallyBlock )
            	{
            	    // .//Emerson.g:343:67: ^( TRY statementBlock catchFinallyBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchFinallyBlock == NULL ? NULL : stream_catchFinallyBlock->nextTree(stream_catchFinallyBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_catchFinallyBlock != NULL) stream_catchFinallyBlock->free(stream_catchFinallyBlock);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//Emerson.g:346:1: catchFinallyBlock : ( catchBlock ( LTERM )* ( finallyBlock )? -> catchBlock ( finallyBlock )? | finallyBlock -> finallyBlock );
 */
static EmersonParser_catchFinallyBlock_return
catchFinallyBlock(pEmersonParser ctx)
{   
    EmersonParser_catchFinallyBlock_return retval;
    ANTLR3_UINT32 catchFinallyBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM250;
    EmersonParser_catchBlock_return catchBlock249;
    #undef	RETURN_TYPE_catchBlock249
    #define	RETURN_TYPE_catchBlock249 EmersonParser_catchBlock_return

    EmersonParser_finallyBlock_return finallyBlock251;
    #undef	RETURN_TYPE_finallyBlock251
    #define	RETURN_TYPE_finallyBlock251 EmersonParser_finallyBlock_return

    EmersonParser_finallyBlock_return finallyBlock252;
    #undef	RETURN_TYPE_finallyBlock252
    #define	RETURN_TYPE_finallyBlock252 EmersonParser_finallyBlock_return

    pANTLR3_BASE_TREE LTERM250_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyBlock;
    /* Initialize rule variables
     */
    catchFinallyBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM250       = NULL;
    catchBlock249.tree = NULL;

    finallyBlock251.tree = NULL;

    finallyBlock252.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM250_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_catchBlock   = NULL;
    #define CREATE_stream_catchBlock  if (stream_catchBlock == NULL) {stream_catchBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchBlock"); }
    stream_finallyBlock   = NULL;
    #define CREATE_stream_finallyBlock  if (stream_finallyBlock == NULL) {stream_finallyBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyBlock"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:347:9: ( catchBlock ( LTERM )* ( finallyBlock )? -> catchBlock ( finallyBlock )? | finallyBlock -> finallyBlock )
            
            ANTLR3_UINT32 alt129;

            alt129=2;


            {
                int LA129_0 = LA(1);
                if ( (LA129_0 == 161) ) 
                {
                    alt129=1;
                }
                else if ( (LA129_0 == 162) ) 
                {
                    alt129=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 129;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt129) 
            {
        	case 1:
        	    // .//Emerson.g:347:11: catchBlock ( LTERM )* ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock2674);
        	        catchBlock249=catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_catchBlock; stream_catchBlock->add(stream_catchBlock, catchBlock249.tree, NULL); }

        	        // .//Emerson.g:347:22: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt127=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA127_0 = LA(1);
        	                if ( (LA127_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA127_2 = LA(2);
        	                        if ( (synpred145_Emerson(ctx)) ) 
        	                        {
        	                            alt127=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt127) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM250 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchFinallyBlock2676); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM250, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop127;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop127: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:347:29: ( finallyBlock )?
        	        {
        	            int alt128=2;
        	            {
        	                int LA128_0 = LA(1);
        	                if ( (LA128_0 == 162) ) 
        	                {
        	                    alt128=1;
        	                }
        	            }
        	            switch (alt128) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock2679);
        	        	        finallyBlock251=finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyBlock; stream_finallyBlock->add(stream_finallyBlock, finallyBlock251.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : finallyBlock, catchBlock
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 347:44: -> catchBlock ( finallyBlock )?
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_catchBlock == NULL ? NULL : stream_catchBlock->nextTree(stream_catchBlock));
        	        	    // .//Emerson.g:347:58: ( finallyBlock )?
        	        	    {
        	        	    	if ( (stream_finallyBlock != NULL && stream_finallyBlock->hasNext(stream_finallyBlock))  )
        	        	    	{
        	        	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_finallyBlock == NULL ? NULL : stream_finallyBlock->nextTree(stream_finallyBlock));

        	        	    	}
        	        	    	if ( stream_finallyBlock != NULL) stream_finallyBlock->reset(stream_finallyBlock);

        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:348:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock2700);
        	        finallyBlock252=finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyBlock; stream_finallyBlock->add(stream_finallyBlock, finallyBlock252.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : finallyBlock
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 348:44: -> finallyBlock
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_finallyBlock == NULL ? NULL : stream_finallyBlock->nextTree(stream_finallyBlock));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_catchBlock != NULL) stream_catchBlock->free(stream_catchBlock);
        if (stream_finallyBlock != NULL) stream_finallyBlock->free(stream_finallyBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, catchFinallyBlock_StartIndex); }
    return retval;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//Emerson.g:351:1: catchBlock : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static EmersonParser_catchBlock_return
catchBlock(pEmersonParser ctx)
{   
    EmersonParser_catchBlock_return retval;
    ANTLR3_UINT32 catchBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal253;
    pANTLR3_COMMON_TOKEN    LTERM254;
    pANTLR3_COMMON_TOKEN    char_literal255;
    pANTLR3_COMMON_TOKEN    LTERM256;
    pANTLR3_COMMON_TOKEN    Identifier257;
    pANTLR3_COMMON_TOKEN    LTERM258;
    pANTLR3_COMMON_TOKEN    char_literal259;
    pANTLR3_COMMON_TOKEN    LTERM260;
    EmersonParser_statementBlock_return statementBlock261;
    #undef	RETURN_TYPE_statementBlock261
    #define	RETURN_TYPE_statementBlock261 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal253_tree;
    pANTLR3_BASE_TREE LTERM254_tree;
    pANTLR3_BASE_TREE char_literal255_tree;
    pANTLR3_BASE_TREE LTERM256_tree;
    pANTLR3_BASE_TREE Identifier257_tree;
    pANTLR3_BASE_TREE LTERM258_tree;
    pANTLR3_BASE_TREE char_literal259_tree;
    pANTLR3_BASE_TREE LTERM260_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal253       = NULL;
    LTERM254       = NULL;
    char_literal255       = NULL;
    LTERM256       = NULL;
    Identifier257       = NULL;
    LTERM258       = NULL;
    char_literal259       = NULL;
    LTERM260       = NULL;
    statementBlock261.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal253_tree   = NULL;
    LTERM254_tree   = NULL;
    char_literal255_tree   = NULL;
    LTERM256_tree   = NULL;
    Identifier257_tree   = NULL;
    LTERM258_tree   = NULL;
    char_literal259_tree   = NULL;
    LTERM260_tree   = NULL;

    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:352:9: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//Emerson.g:352:11: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal253 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_catchBlock2749); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal253, NULL); }


            // .//Emerson.g:352:19: ( LTERM )*

            for (;;)
            {
                int alt130=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA130_0 = LA(1);
                    if ( (LA130_0 == LTERM) ) 
                    {
                        alt130=1;
                    }

                }
                switch (alt130) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM254 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2751); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM254, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop130;	/* break out of the loop */
            	    break;
                }
            }
            loop130: ; /* Jump out to here if this rule does not match */

            char_literal255 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_catchBlock2754); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal255, NULL); }


            // .//Emerson.g:352:30: ( LTERM )*

            for (;;)
            {
                int alt131=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA131_0 = LA(1);
                    if ( (LA131_0 == LTERM) ) 
                    {
                        alt131=1;
                    }

                }
                switch (alt131) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM256 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2756); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM256, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop131;	/* break out of the loop */
            	    break;
                }
            }
            loop131: ; /* Jump out to here if this rule does not match */

            Identifier257 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock2759); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier257, NULL); }


            // .//Emerson.g:352:48: ( LTERM )*

            for (;;)
            {
                int alt132=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA132_0 = LA(1);
                    if ( (LA132_0 == LTERM) ) 
                    {
                        alt132=1;
                    }

                }
                switch (alt132) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM258 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2761); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM258, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop132;	/* break out of the loop */
            	    break;
                }
            }
            loop132: ; /* Jump out to here if this rule does not match */

            char_literal259 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_catchBlock2764); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal259, NULL); }


            // .//Emerson.g:352:59: ( LTERM )*

            for (;;)
            {
                int alt133=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA133_0 = LA(1);
                    if ( (LA133_0 == LTERM) ) 
                    {
                        alt133=1;
                    }

                }
                switch (alt133) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM260 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2766); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM260, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop133;	/* break out of the loop */
            	    break;
                }
            }
            loop133: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock2769);
            statementBlock261=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock261.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 352:81: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//Emerson.g:352:84: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, catchBlock_StartIndex); }
    return retval;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//Emerson.g:355:1: finallyBlock : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static EmersonParser_finallyBlock_return
finallyBlock(pEmersonParser ctx)
{   
    EmersonParser_finallyBlock_return retval;
    ANTLR3_UINT32 finallyBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal262;
    pANTLR3_COMMON_TOKEN    LTERM263;
    EmersonParser_statementBlock_return statementBlock264;
    #undef	RETURN_TYPE_statementBlock264
    #define	RETURN_TYPE_statementBlock264 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal262_tree;
    pANTLR3_BASE_TREE LTERM263_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal262       = NULL;
    LTERM263       = NULL;
    statementBlock264.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal262_tree   = NULL;
    LTERM263_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:356:9: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//Emerson.g:356:11: 'finally' ( LTERM )* statementBlock
        {
            string_literal262 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_finallyBlock2805); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, string_literal262, NULL); }


            // .//Emerson.g:356:21: ( LTERM )*

            for (;;)
            {
                int alt134=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA134_0 = LA(1);
                    if ( (LA134_0 == LTERM) ) 
                    {
                        alt134=1;
                    }

                }
                switch (alt134) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM263 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyBlock2807); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM263, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop134;	/* break out of the loop */
            	    break;
                }
            }
            loop134: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock2811);
            statementBlock264=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock264.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 356:45: -> ^( FINALLY statementBlock )
            	{
            	    // .//Emerson.g:356:48: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, finallyBlock_StartIndex); }
    return retval;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start msgSendStatement
 * .//Emerson.g:360:1: msgSendStatement : (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? ;
 */
static EmersonParser_msgSendStatement_return
msgSendStatement(pEmersonParser ctx)
{   
    EmersonParser_msgSendStatement_return retval;
    ANTLR3_UINT32 msgSendStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM265;
    pANTLR3_COMMON_TOKEN    string_literal266;
    pANTLR3_COMMON_TOKEN    LTERM267;
    pANTLR3_COMMON_TOKEN    char_literal268;
    pANTLR3_COMMON_TOKEN    string_literal269;
    EmersonParser_leftHandSideExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return memberExpression270;
    #undef	RETURN_TYPE_memberExpression270
    #define	RETURN_TYPE_memberExpression270 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM265_tree;
    pANTLR3_BASE_TREE string_literal266_tree;
    pANTLR3_BASE_TREE LTERM267_tree;
    pANTLR3_BASE_TREE char_literal268_tree;
    pANTLR3_BASE_TREE string_literal269_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgSendStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM265       = NULL;
    string_literal266       = NULL;
    LTERM267       = NULL;
    char_literal268       = NULL;
    string_literal269       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    memberExpression270.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM265_tree   = NULL;
    string_literal266_tree   = NULL;
    LTERM267_tree   = NULL;
    char_literal268_tree   = NULL;
    string_literal269_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:361:2: ( (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? )
        // .//Emerson.g:361:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
        {
            // .//Emerson.g:361:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) )
            // .//Emerson.g:361:5: e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' )
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2842);
                e1=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e1.tree, NULL); }

                // .//Emerson.g:361:32: ( LTERM )*

                for (;;)
                {
                    int alt135=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA135_0 = LA(1);
                        if ( (LA135_0 == LTERM) ) 
                        {
                            alt135=1;
                        }

                    }
                    switch (alt135) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM265 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2845); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM265, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop135;	/* break out of the loop */
                	    break;
                    }
                }
                loop135: ; /* Jump out to here if this rule does not match */

                string_literal266 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_msgSendStatement2848); 
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal266, NULL); }

                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2853);
                e2=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

                // .//Emerson.g:361:71: ( LTERM | ';' )
                {
                    int alt136=2;

                    {
                        int LA136_0 = LA(1);
                        if ( (LA136_0 == LTERM) ) 
                        {
                            alt136=1;
                        }
                        else if ( (LA136_0 == 141) ) 
                        {
                            alt136=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 136;
                            EXCEPTION->state        = 0;


                            goto rulemsgSendStatementEx;
                        }
                    }
                    switch (alt136) 
                    {
                	case 1:
                	    // .//Emerson.g:361:72: LTERM
                	    {
                	        LTERM267 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2856); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM267, NULL); }


                	    }
                	    break;
                	case 2:
                	    // .//Emerson.g:361:80: ';'
                	    {
                	        char_literal268 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_msgSendStatement2860); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal268, NULL); }


                	    }
                	    break;

                    }
                }

                 
                /* AST REWRITE
                 * elements          : e1, e2
                 * token labels      : 
                 * rule labels       : retval, e1, e2
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
                	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 361:85: -> ^( MESSAGE_SEND $e1 $e2)
                	{
                	    // .//Emerson.g:361:88: ^( MESSAGE_SEND $e1 $e2)
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_SEND, (pANTLR3_UINT8)"MESSAGE_SEND"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_e1 != NULL) stream_e1->free(stream_e1);
                	if (stream_e2 != NULL) stream_e2->free(stream_e2);


                }
            }


            // .//Emerson.g:361:114: ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
            {
                int alt137=2;
                {
                    int LA137_0 = LA(1);
                    if ( (LA137_0 == 163) ) 
                    {
                        alt137=1;
                    }
                }
                switch (alt137) 
                {
            	case 1:
            	    // .//Emerson.g:361:116: '->' memberExpression
            	    {
            	        string_literal269 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_msgSendStatement2879); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal269, NULL); }

            	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement2881);
            	        memberExpression270=memberExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression270.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : memberExpression, msgSendStatement
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 361:138: -> ^( $msgSendStatement memberExpression )
            	        	{
            	        	    // .//Emerson.g:361:141: ^( $msgSendStatement memberExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, msgSendStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start memAndCallExpression
 * .//Emerson.g:368:2: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );
 */
static EmersonParser_memAndCallExpression_return
memAndCallExpression(pEmersonParser ctx)
{   
    EmersonParser_memAndCallExpression_return retval;
    ANTLR3_UINT32 memAndCallExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression271;
    #undef	RETURN_TYPE_callExpression271
    #define	RETURN_TYPE_callExpression271 EmersonParser_callExpression_return

    EmersonParser_memberExpression_return memberExpression272;
    #undef	RETURN_TYPE_memberExpression272
    #define	RETURN_TYPE_memberExpression272 EmersonParser_memberExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    /* Initialize rule variables
     */
    memAndCallExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression271.tree = NULL;

    memberExpression272.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:369:2: ( callExpression -> callExpression | memberExpression -> memberExpression )
            
            ANTLR3_UINT32 alt138;

            alt138=2;

            alt138 = cdfa138.predict(ctx, RECOGNIZER, ISTREAM, &cdfa138);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt138) 
            {
        	case 1:
        	    // .//Emerson.g:369:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression2907);
        	        callExpression271=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression271.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 369:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:370:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression2916);
        	        memberExpression272=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression272.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 370:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, memAndCallExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start msgRecvStatement
 * .//Emerson.g:373:2: msgRecvStatement : (e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memAndCallExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static EmersonParser_msgRecvStatement_return
msgRecvStatement(pEmersonParser ctx)
{   
    EmersonParser_msgRecvStatement_return retval;
    ANTLR3_UINT32 msgRecvStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM273;
    pANTLR3_COMMON_TOKEN    string_literal274;
    pANTLR3_COMMON_TOKEN    LTERM275;
    pANTLR3_COMMON_TOKEN    char_literal276;
    pANTLR3_COMMON_TOKEN    LTERM277;
    pANTLR3_COMMON_TOKEN    string_literal278;
    pANTLR3_COMMON_TOKEN    LTERM279;
    pANTLR3_COMMON_TOKEN    string_literal280;
    pANTLR3_COMMON_TOKEN    LTERM281;
    pANTLR3_COMMON_TOKEN    char_literal282;
    EmersonParser_memAndCallExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_memAndCallExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memAndCallExpression_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_memAndCallExpression_return

    pANTLR3_BASE_TREE LTERM273_tree;
    pANTLR3_BASE_TREE string_literal274_tree;
    pANTLR3_BASE_TREE LTERM275_tree;
    pANTLR3_BASE_TREE char_literal276_tree;
    pANTLR3_BASE_TREE LTERM277_tree;
    pANTLR3_BASE_TREE string_literal278_tree;
    pANTLR3_BASE_TREE LTERM279_tree;
    pANTLR3_BASE_TREE string_literal280_tree;
    pANTLR3_BASE_TREE LTERM281_tree;
    pANTLR3_BASE_TREE char_literal282_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memAndCallExpression;
    /* Initialize rule variables
     */
    msgRecvStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM273       = NULL;
    string_literal274       = NULL;
    LTERM275       = NULL;
    char_literal276       = NULL;
    LTERM277       = NULL;
    string_literal278       = NULL;
    LTERM279       = NULL;
    string_literal280       = NULL;
    LTERM281       = NULL;
    char_literal282       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM273_tree   = NULL;
    string_literal274_tree   = NULL;
    LTERM275_tree   = NULL;
    char_literal276_tree   = NULL;
    LTERM277_tree   = NULL;
    string_literal278_tree   = NULL;
    LTERM279_tree   = NULL;
    string_literal280_tree   = NULL;
    LTERM281_tree   = NULL;
    char_literal282_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_memAndCallExpression   = NULL;
    #define CREATE_stream_memAndCallExpression  if (stream_memAndCallExpression == NULL) {stream_memAndCallExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memAndCallExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:374:2: (e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memAndCallExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) )
            
            ANTLR3_UINT32 alt144;

            alt144=2;

            alt144 = cdfa144.predict(ctx, RECOGNIZER, ISTREAM, &cdfa144);
            if  (HASEXCEPTION())
            {
                goto rulemsgRecvStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt144) 
            {
        	case 1:
        	    // .//Emerson.g:374:4: e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement2934);
        	        e1=memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memAndCallExpression; stream_memAndCallExpression->add(stream_memAndCallExpression, e1.tree, NULL); }

        	        // .//Emerson.g:374:28: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt139=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA139_0 = LA(1);
        	                if ( (LA139_0 == LTERM) ) 
        	                {
        	                    alt139=1;
        	                }

        	            }
        	            switch (alt139) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM273 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2936); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM273, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop139;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop139: ; /* Jump out to here if this rule does not match */

        	        string_literal274 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_msgRecvStatement2938); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal274, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2942);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:374:65: ( LTERM | ';' )
        	        {
        	            int alt140=2;

        	            {
        	                int LA140_0 = LA(1);
        	                if ( (LA140_0 == LTERM) ) 
        	                {
        	                    alt140=1;
        	                }
        	                else if ( (LA140_0 == 141) ) 
        	                {
        	                    alt140=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 140;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt140) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:374:66: LTERM
        	        	    {
        	        	        LTERM275 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2945); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM275, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:374:74: ';'
        	        	    {
        	        	        char_literal276 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_msgRecvStatement2949); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal276, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e2, e1
        	         * token labels      : 
        	         * rule labels       : retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 374:80: -> ^( MESSAGE_RECV $e1 $e2)
        	        	{
        	        	    // .//Emerson.g:374:83: ^( MESSAGE_RECV $e1 $e2)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:375:4: e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memAndCallExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement2970);
        	        e1=memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memAndCallExpression; stream_memAndCallExpression->add(stream_memAndCallExpression, e1.tree, NULL); }

        	        // .//Emerson.g:375:28: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt141=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA141_0 = LA(1);
        	                if ( (LA141_0 == LTERM) ) 
        	                {
        	                    alt141=1;
        	                }

        	            }
        	            switch (alt141) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM277 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2972); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM277, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop141;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop141: ; /* Jump out to here if this rule does not match */

        	        string_literal278 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_msgRecvStatement2974); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal278, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2978);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:375:65: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt142=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA142_0 = LA(1);
        	                if ( (LA142_0 == LTERM) ) 
        	                {
        	                    alt142=1;
        	                }

        	            }
        	            switch (alt142) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM279 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2980); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM279, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop142;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop142: ; /* Jump out to here if this rule does not match */

        	        string_literal280 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_msgRecvStatement2983); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal280, NULL); }

        	        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_msgRecvStatement2987);
        	        e3=memAndCallExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memAndCallExpression; stream_memAndCallExpression->add(stream_memAndCallExpression, e3.tree, NULL); }

        	        // .//Emerson.g:375:101: ( LTERM | ';' )
        	        {
        	            int alt143=2;

        	            {
        	                int LA143_0 = LA(1);
        	                if ( (LA143_0 == LTERM) ) 
        	                {
        	                    alt143=1;
        	                }
        	                else if ( (LA143_0 == 141) ) 
        	                {
        	                    alt143=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 143;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt143) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:375:102: LTERM
        	        	    {
        	        	        LTERM281 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2990); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM281, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:375:110: ';'
        	        	    {
        	        	        char_literal282 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_msgRecvStatement2994); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal282, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e2, e3, e1
        	         * token labels      : 
        	         * rule labels       : e3, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 375:115: -> ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	{
        	        	    // .//Emerson.g:375:118: ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_memAndCallExpression != NULL) stream_memAndCallExpression->free(stream_memAndCallExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, msgRecvStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start expression
 * .//Emerson.g:378:1: expression : assignmentExpression -> ^( EXPR_LIST assignmentExpression ) ;
 */
static EmersonParser_expression_return
expression(pEmersonParser ctx)
{   
    EmersonParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_assignmentExpression_return assignmentExpression283;
    #undef	RETURN_TYPE_assignmentExpression283
    #define	RETURN_TYPE_assignmentExpression283 EmersonParser_assignmentExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    assignmentExpression283.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:380:2: ( assignmentExpression -> ^( EXPR_LIST assignmentExpression ) )
        // .//Emerson.g:380:4: assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression3021);
            assignmentExpression283=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression283.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 380:25: -> ^( EXPR_LIST assignmentExpression )
            	{
            	    // .//Emerson.g:380:29: ^( EXPR_LIST assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//Emerson.g:383:1: expressionNoIn : assignmentExpressionNoIn -> ^( EXPR_LIST assignmentExpressionNoIn ) ;
 */
static EmersonParser_expressionNoIn_return
expressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn284;
    #undef	RETURN_TYPE_assignmentExpressionNoIn284
    #define	RETURN_TYPE_assignmentExpressionNoIn284 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    assignmentExpressionNoIn284.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:385:2: ( assignmentExpressionNoIn -> ^( EXPR_LIST assignmentExpressionNoIn ) )
        // .//Emerson.g:385:4: assignmentExpressionNoIn
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn3043);
            assignmentExpressionNoIn284=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn284.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 385:29: -> ^( EXPR_LIST assignmentExpressionNoIn )
            	{
            	    // .//Emerson.g:385:32: ^( EXPR_LIST assignmentExpressionNoIn )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//Emerson.g:388:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static EmersonParser_assignmentExpression_return
assignmentExpression(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM287;
    pANTLR3_COMMON_TOKEN    LTERM289;
    EmersonParser_conditionalExpression_return conditionalExpression285;
    #undef	RETURN_TYPE_conditionalExpression285
    #define	RETURN_TYPE_conditionalExpression285 EmersonParser_conditionalExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression286;
    #undef	RETURN_TYPE_leftHandSideExpression286
    #define	RETURN_TYPE_leftHandSideExpression286 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator288;
    #undef	RETURN_TYPE_assignmentOperator288
    #define	RETURN_TYPE_assignmentOperator288 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpression_return assignmentExpression290;
    #undef	RETURN_TYPE_assignmentExpression290
    #define	RETURN_TYPE_assignmentExpression290 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM287_tree;
    pANTLR3_BASE_TREE LTERM289_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM287       = NULL;
    LTERM289       = NULL;
    conditionalExpression285.tree = NULL;

    leftHandSideExpression286.tree = NULL;

    assignmentOperator288.tree = NULL;

    assignmentExpression290.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM287_tree   = NULL;
    LTERM289_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_conditionalExpression   = NULL;
    #define CREATE_stream_conditionalExpression  if (stream_conditionalExpression == NULL) {stream_conditionalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:389:9: ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt147;

            alt147=2;

            alt147 = cdfa147.predict(ctx, RECOGNIZER, ISTREAM, &cdfa147);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt147) 
            {
        	case 1:
        	    // .//Emerson.g:389:11: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression3069);
        	        conditionalExpression285=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpression; stream_conditionalExpression->add(stream_conditionalExpression, conditionalExpression285.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 389:33: -> ^( COND_EXPR conditionalExpression )
        	        	{
        	        	    // .//Emerson.g:389:36: ^( COND_EXPR conditionalExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR, (pANTLR3_UINT8)"COND_EXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpression == NULL ? NULL : stream_conditionalExpression->nextTree(stream_conditionalExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:390:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression3082);
        	        leftHandSideExpression286=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression286.tree, NULL); }

        	        // .//Emerson.g:390:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt145=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA145_0 = LA(1);
        	                if ( (LA145_0 == LTERM) ) 
        	                {
        	                    alt145=1;
        	                }

        	            }
        	            switch (alt145) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM287 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression3084); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM287, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop145;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop145: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression3087);
        	        assignmentOperator288=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator288.tree, NULL); }

        	        // .//Emerson.g:390:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt146=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA146_0 = LA(1);
        	                if ( (LA146_0 == LTERM) ) 
        	                {
        	                    alt146=1;
        	                }

        	            }
        	            switch (alt146) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM289 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression3089); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM289, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop146;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop146: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression3092);
        	        assignmentExpression290=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression290.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentOperator, assignmentExpression, leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 390:81: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//Emerson.g:390:85: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_conditionalExpression != NULL) stream_conditionalExpression->free(stream_conditionalExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//Emerson.g:393:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static EmersonParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM293;
    pANTLR3_COMMON_TOKEN    LTERM295;
    EmersonParser_conditionalExpressionNoIn_return conditionalExpressionNoIn291;
    #undef	RETURN_TYPE_conditionalExpressionNoIn291
    #define	RETURN_TYPE_conditionalExpressionNoIn291 EmersonParser_conditionalExpressionNoIn_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression292;
    #undef	RETURN_TYPE_leftHandSideExpression292
    #define	RETURN_TYPE_leftHandSideExpression292 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator294;
    #undef	RETURN_TYPE_assignmentOperator294
    #define	RETURN_TYPE_assignmentOperator294 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn296;
    #undef	RETURN_TYPE_assignmentExpressionNoIn296
    #define	RETURN_TYPE_assignmentExpressionNoIn296 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM293_tree;
    pANTLR3_BASE_TREE LTERM295_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpressionNoIn;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM293       = NULL;
    LTERM295       = NULL;
    conditionalExpressionNoIn291.tree = NULL;

    leftHandSideExpression292.tree = NULL;

    assignmentOperator294.tree = NULL;

    assignmentExpressionNoIn296.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM293_tree   = NULL;
    LTERM295_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_conditionalExpressionNoIn   = NULL;
    #define CREATE_stream_conditionalExpressionNoIn  if (stream_conditionalExpressionNoIn == NULL) {stream_conditionalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:394:2: ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt150;

            alt150=2;

            alt150 = cdfa150.predict(ctx, RECOGNIZER, ISTREAM, &cdfa150);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt150) 
            {
        	case 1:
        	    // .//Emerson.g:394:4: conditionalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3116);
        	        conditionalExpressionNoIn291=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpressionNoIn; stream_conditionalExpressionNoIn->add(stream_conditionalExpressionNoIn, conditionalExpressionNoIn291.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 394:30: -> ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:394:33: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR_NOIN, (pANTLR3_UINT8)"COND_EXPR_NOIN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpressionNoIn == NULL ? NULL : stream_conditionalExpressionNoIn->nextTree(stream_conditionalExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:395:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3129);
        	        leftHandSideExpression292=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression292.tree, NULL); }

        	        // .//Emerson.g:395:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt148=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA148_0 = LA(1);
        	                if ( (LA148_0 == LTERM) ) 
        	                {
        	                    alt148=1;
        	                }

        	            }
        	            switch (alt148) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM293 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn3131); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM293, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop148;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop148: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3134);
        	        assignmentOperator294=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator294.tree, NULL); }

        	        // .//Emerson.g:395:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt149=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA149_0 = LA(1);
        	                if ( (LA149_0 == LTERM) ) 
        	                {
        	                    alt149=1;
        	                }

        	            }
        	            switch (alt149) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM295 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn3136); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM295, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop149;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop149: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3139);
        	        assignmentExpressionNoIn296=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn296.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression, assignmentOperator, assignmentExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 395:85: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:395:89: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_conditionalExpressionNoIn != NULL) stream_conditionalExpressionNoIn->free(stream_conditionalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//Emerson.g:399:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static EmersonParser_leftHandSideExpression_return
leftHandSideExpression(pEmersonParser ctx)
{   
    EmersonParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression297;
    #undef	RETURN_TYPE_callExpression297
    #define	RETURN_TYPE_callExpression297 EmersonParser_callExpression_return

    EmersonParser_newExpression_return newExpression298;
    #undef	RETURN_TYPE_newExpression298
    #define	RETURN_TYPE_newExpression298 EmersonParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression297.tree = NULL;

    newExpression298.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:400:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt151;

            alt151=2;

            alt151 = cdfa151.predict(ctx, RECOGNIZER, ISTREAM, &cdfa151);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt151) 
            {
        	case 1:
        	    // .//Emerson.g:400:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression3164);
        	        callExpression297=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression297.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 400:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:401:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression3173);
        	        newExpression298=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression298.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 401:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//Emerson.g:404:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static EmersonParser_newExpression_return
newExpression(pEmersonParser ctx)
{   
    EmersonParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal300;
    pANTLR3_COMMON_TOKEN    LTERM301;
    EmersonParser_memberExpression_return memberExpression299;
    #undef	RETURN_TYPE_memberExpression299
    #define	RETURN_TYPE_memberExpression299 EmersonParser_memberExpression_return

    EmersonParser_newExpression_return newExpression302;
    #undef	RETURN_TYPE_newExpression302
    #define	RETURN_TYPE_newExpression302 EmersonParser_newExpression_return

    pANTLR3_BASE_TREE string_literal300_tree;
    pANTLR3_BASE_TREE LTERM301_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal300       = NULL;
    LTERM301       = NULL;
    memberExpression299.tree = NULL;

    newExpression302.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal300_tree   = NULL;
    LTERM301_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:405:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt153;

            alt153=2;

            alt153 = cdfa153.predict(ctx, RECOGNIZER, ISTREAM, &cdfa153);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt153) 
            {
        	case 1:
        	    // .//Emerson.g:405:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression3189);
        	        memberExpression299=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression299.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 405:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:406:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal300 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_newExpression3198); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, string_literal300, NULL); }


        	        // .//Emerson.g:406:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt152=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA152_0 = LA(1);
        	                if ( (LA152_0 == LTERM) ) 
        	                {
        	                    alt152=1;
        	                }

        	            }
        	            switch (alt152) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM301 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression3200); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM301, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop152;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop152: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression3203);
        	        newExpression302=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression302.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 406:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//Emerson.g:406:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//Emerson.g:410:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static EmersonParser_indexSuffix1_return
indexSuffix1(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal303;
    pANTLR3_COMMON_TOKEN    LTERM304;
    pANTLR3_COMMON_TOKEN    LTERM306;
    pANTLR3_COMMON_TOKEN    char_literal307;
    EmersonParser_expression_return expression305;
    #undef	RETURN_TYPE_expression305
    #define	RETURN_TYPE_expression305 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal303_tree;
    pANTLR3_BASE_TREE LTERM304_tree;
    pANTLR3_BASE_TREE LTERM306_tree;
    pANTLR3_BASE_TREE char_literal307_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal303       = NULL;
    LTERM304       = NULL;
    LTERM306       = NULL;
    char_literal307       = NULL;
    expression305.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal303_tree   = NULL;
    LTERM304_tree   = NULL;
    LTERM306_tree   = NULL;
    char_literal307_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:411:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//Emerson.g:411:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal303 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_indexSuffix13225); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, char_literal303, NULL); }


            // .//Emerson.g:411:8: ( LTERM )*

            for (;;)
            {
                int alt154=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA154_0 = LA(1);
                    if ( (LA154_0 == LTERM) ) 
                    {
                        alt154=1;
                    }

                }
                switch (alt154) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM304 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13227); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM304, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop154;	/* break out of the loop */
            	    break;
                }
            }
            loop154: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix13230);
            expression305=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression305.tree, NULL); }

            // .//Emerson.g:411:26: ( LTERM )*

            for (;;)
            {
                int alt155=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA155_0 = LA(1);
                    if ( (LA155_0 == LTERM) ) 
                    {
                        alt155=1;
                    }

                }
                switch (alt155) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM306 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13232); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM306, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop155;	/* break out of the loop */
            	    break;
                }
            }
            loop155: ; /* Jump out to here if this rule does not match */

            char_literal307 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_indexSuffix13235); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal307, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 411:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//Emerson.g:415:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static EmersonParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal308;
    pANTLR3_COMMON_TOKEN    LTERM309;
    pANTLR3_COMMON_TOKEN    Identifier310;

    pANTLR3_BASE_TREE char_literal308_tree;
    pANTLR3_BASE_TREE LTERM309_tree;
    pANTLR3_BASE_TREE Identifier310_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal308       = NULL;
    LTERM309       = NULL;
    Identifier310       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal308_tree   = NULL;
    LTERM309_tree   = NULL;
    Identifier310_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:416:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//Emerson.g:416:4: '.' ( LTERM )* Identifier
        {
            char_literal308 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_propertyReferenceSuffix13252); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, char_literal308, NULL); }


            // .//Emerson.g:416:8: ( LTERM )*

            for (;;)
            {
                int alt156=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA156_0 = LA(1);
                    if ( (LA156_0 == LTERM) ) 
                    {
                        alt156=1;
                    }

                }
                switch (alt156) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM309 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix13254); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM309, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop156;	/* break out of the loop */
            	    break;
                }
            }
            loop156: ; /* Jump out to here if this rule does not match */

            Identifier310 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix13257); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier310, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 416:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_168 != NULL) stream_168->free(stream_168);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//Emerson.g:420:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static EmersonParser_memberExpression_return
memberExpression(pEmersonParser ctx)
{   
    EmersonParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM312;
    pANTLR3_COMMON_TOKEN    LTERM314;
    pANTLR3_COMMON_TOKEN    LTERM317;
    pANTLR3_COMMON_TOKEN    LTERM319;
    pANTLR3_COMMON_TOKEN    string_literal321;
    pANTLR3_COMMON_TOKEN    LTERM322;
    pANTLR3_COMMON_TOKEN    LTERM323;
    pANTLR3_COMMON_TOKEN    LTERM325;
    pANTLR3_COMMON_TOKEN    LTERM327;
    EmersonParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr EmersonParser_memberExpression_return

    EmersonParser_primaryExpression_return primaryExpression311;
    #undef	RETURN_TYPE_primaryExpression311
    #define	RETURN_TYPE_primaryExpression311 EmersonParser_primaryExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1313;
    #undef	RETURN_TYPE_propertyReferenceSuffix1313
    #define	RETURN_TYPE_propertyReferenceSuffix1313 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1315;
    #undef	RETURN_TYPE_indexSuffix1315
    #define	RETURN_TYPE_indexSuffix1315 EmersonParser_indexSuffix1_return

    EmersonParser_functionExpression_return functionExpression316;
    #undef	RETURN_TYPE_functionExpression316
    #define	RETURN_TYPE_functionExpression316 EmersonParser_functionExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1318;
    #undef	RETURN_TYPE_propertyReferenceSuffix1318
    #define	RETURN_TYPE_propertyReferenceSuffix1318 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1320;
    #undef	RETURN_TYPE_indexSuffix1320
    #define	RETURN_TYPE_indexSuffix1320 EmersonParser_indexSuffix1_return

    EmersonParser_arguments_return arguments324;
    #undef	RETURN_TYPE_arguments324
    #define	RETURN_TYPE_arguments324 EmersonParser_arguments_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1326;
    #undef	RETURN_TYPE_propertyReferenceSuffix1326
    #define	RETURN_TYPE_propertyReferenceSuffix1326 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1328;
    #undef	RETURN_TYPE_indexSuffix1328
    #define	RETURN_TYPE_indexSuffix1328 EmersonParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM312_tree;
    pANTLR3_BASE_TREE LTERM314_tree;
    pANTLR3_BASE_TREE LTERM317_tree;
    pANTLR3_BASE_TREE LTERM319_tree;
    pANTLR3_BASE_TREE string_literal321_tree;
    pANTLR3_BASE_TREE LTERM322_tree;
    pANTLR3_BASE_TREE LTERM323_tree;
    pANTLR3_BASE_TREE LTERM325_tree;
    pANTLR3_BASE_TREE LTERM327_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM312       = NULL;
    LTERM314       = NULL;
    LTERM317       = NULL;
    LTERM319       = NULL;
    string_literal321       = NULL;
    LTERM322       = NULL;
    LTERM323       = NULL;
    LTERM325       = NULL;
    LTERM327       = NULL;
    expr.tree = NULL;

    primaryExpression311.tree = NULL;

    propertyReferenceSuffix1313.tree = NULL;

    indexSuffix1315.tree = NULL;

    functionExpression316.tree = NULL;

    propertyReferenceSuffix1318.tree = NULL;

    indexSuffix1320.tree = NULL;

    arguments324.tree = NULL;

    propertyReferenceSuffix1326.tree = NULL;

    indexSuffix1328.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM312_tree   = NULL;
    LTERM314_tree   = NULL;
    LTERM317_tree   = NULL;
    LTERM319_tree   = NULL;
    string_literal321_tree   = NULL;
    LTERM322_tree   = NULL;
    LTERM323_tree   = NULL;
    LTERM325_tree   = NULL;
    LTERM327_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:421:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt168;

            alt168=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 136:
            case 139:
            case 166:
            case 190:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            	{
            		alt168=1;
            	}
                break;
            case 135:
            	{
            		alt168=2;
            	}
                break;
            case 165:
            	{
            		alt168=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 168;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt168) 
            {
        	case 1:
        	    // .//Emerson.g:421:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:421:4: ( primaryExpression -> primaryExpression )
        	        // .//Emerson.g:421:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression3274);
        	            primaryExpression311=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression311.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 421:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:421:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt159=3;
        	            alt159 = cdfa159.predict(ctx, RECOGNIZER, ISTREAM, &cdfa159);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt159) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:421:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:421:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt157=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA157_0 = LA(1);
        	        	                if ( (LA157_0 == LTERM) ) 
        	        	                {
        	        	                    alt157=1;
        	        	                }

        	        	            }
        	        	            switch (alt157) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM312 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3283); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM312, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop157;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop157: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3286);
        	        	        propertyReferenceSuffix1313=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1313.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 421:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:421:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:421:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:421:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt158=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA158_0 = LA(1);
        	        	                if ( (LA158_0 == LTERM) ) 
        	        	                {
        	        	                    alt158=1;
        	        	                }

        	        	            }
        	        	            switch (alt158) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM314 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3303); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM314, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop158;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop158: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3306);
        	        	        indexSuffix1315=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1315.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 421:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:421:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop159;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop159: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:422:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:422:4: ( functionExpression -> functionExpression )
        	        // .//Emerson.g:422:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression3325);
        	            functionExpression316=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression316.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 422:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:422:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt162=3;
        	            alt162 = cdfa162.predict(ctx, RECOGNIZER, ISTREAM, &cdfa162);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt162) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:422:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:422:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt160=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA160_0 = LA(1);
        	        	                if ( (LA160_0 == LTERM) ) 
        	        	                {
        	        	                    alt160=1;
        	        	                }

        	        	            }
        	        	            switch (alt160) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM317 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3333); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM317, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop160;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop160: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3336);
        	        	        propertyReferenceSuffix1318=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1318.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 422:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:422:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:422:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:422:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt161=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA161_0 = LA(1);
        	        	                if ( (LA161_0 == LTERM) ) 
        	        	                {
        	        	                    alt161=1;
        	        	                }

        	        	            }
        	        	            switch (alt161) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM319 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3352); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM319, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop161;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop161: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3355);
        	        	        indexSuffix1320=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1320.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 422:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:422:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop162;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop162: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:423:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:423:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//Emerson.g:423:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal321 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_memberExpression3374); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, string_literal321, NULL); }


        	            // .//Emerson.g:423:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt163=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA163_0 = LA(1);
        	                    if ( (LA163_0 == LTERM) ) 
        	                    {
        	                        alt163=1;
        	                    }

        	                }
        	                switch (alt163) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM322 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3376); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM322, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop163;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop163: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression3381);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//Emerson.g:423:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt164=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA164_0 = LA(1);
        	                    if ( (LA164_0 == LTERM) ) 
        	                    {
        	                        alt164=1;
        	                    }

        	                }
        	                switch (alt164) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM323 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3383); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM323, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop164;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop164: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression3386);
        	            arguments324=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments324.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : expr, arguments
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 423:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//Emerson.g:423:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//Emerson.g:423:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt167=3;
        	            alt167 = cdfa167.predict(ctx, RECOGNIZER, ISTREAM, &cdfa167);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt167) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:423:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:423:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt165=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA165_0 = LA(1);
        	        	                if ( (LA165_0 == LTERM) ) 
        	        	                {
        	        	                    alt165=1;
        	        	                }

        	        	            }
        	        	            switch (alt165) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM325 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3401); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM325, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop165;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop165: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3404);
        	        	        propertyReferenceSuffix1326=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1326.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 423:117: -> ^( DOT $memberExpression)
        	        	        	{
        	        	        	    // .//Emerson.g:423:120: ^( DOT $memberExpression)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:423:147: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:423:147: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt166=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA166_0 = LA(1);
        	        	                if ( (LA166_0 == LTERM) ) 
        	        	                {
        	        	                    alt166=1;
        	        	                }

        	        	            }
        	        	            switch (alt166) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM327 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3417); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM327, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop166;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop166: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3420);
        	        	        indexSuffix1328=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1328.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 423:167: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:423:170: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop167;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop167: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//Emerson.g:426:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_memberExpressionSuffix_return
memberExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_indexSuffix_return indexSuffix329;
    #undef	RETURN_TYPE_indexSuffix329
    #define	RETURN_TYPE_indexSuffix329 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix330;
    #undef	RETURN_TYPE_propertyReferenceSuffix330
    #define	RETURN_TYPE_propertyReferenceSuffix330 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix329.tree = NULL;

    propertyReferenceSuffix330.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:427:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt169;

            alt169=2;


            {
                int LA169_0 = LA(1);
                if ( (LA169_0 == 166) ) 
                {
                    alt169=1;
                }
                else if ( (LA169_0 == 168) ) 
                {
                    alt169=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 169;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt169) 
            {
        	case 1:
        	    // .//Emerson.g:427:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix3455);
        	        indexSuffix329=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix329.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 427:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:428:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3465);
        	        propertyReferenceSuffix330=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix330.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//Emerson.g:431:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static EmersonParser_callExpression_return
callExpression(pEmersonParser ctx)
{   
    EmersonParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM332;
    pANTLR3_COMMON_TOKEN    LTERM334;
    pANTLR3_COMMON_TOKEN    LTERM336;
    pANTLR3_COMMON_TOKEN    LTERM338;
    EmersonParser_memberExpression_return memberExpression331;
    #undef	RETURN_TYPE_memberExpression331
    #define	RETURN_TYPE_memberExpression331 EmersonParser_memberExpression_return

    EmersonParser_arguments_return arguments333;
    #undef	RETURN_TYPE_arguments333
    #define	RETURN_TYPE_arguments333 EmersonParser_arguments_return

    EmersonParser_arguments_return arguments335;
    #undef	RETURN_TYPE_arguments335
    #define	RETURN_TYPE_arguments335 EmersonParser_arguments_return

    EmersonParser_indexSuffix1_return indexSuffix1337;
    #undef	RETURN_TYPE_indexSuffix1337
    #define	RETURN_TYPE_indexSuffix1337 EmersonParser_indexSuffix1_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1339;
    #undef	RETURN_TYPE_propertyReferenceSuffix1339
    #define	RETURN_TYPE_propertyReferenceSuffix1339 EmersonParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM332_tree;
    pANTLR3_BASE_TREE LTERM334_tree;
    pANTLR3_BASE_TREE LTERM336_tree;
    pANTLR3_BASE_TREE LTERM338_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM332       = NULL;
    LTERM334       = NULL;
    LTERM336       = NULL;
    LTERM338       = NULL;
    memberExpression331.tree = NULL;

    arguments333.tree = NULL;

    arguments335.tree = NULL;

    indexSuffix1337.tree = NULL;

    propertyReferenceSuffix1339.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM332_tree   = NULL;
    LTERM334_tree   = NULL;
    LTERM336_tree   = NULL;
    LTERM338_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:432:5: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//Emerson.g:432:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//Emerson.g:432:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//Emerson.g:432:8: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression3485);
                memberExpression331=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression331.tree, NULL); }

                // .//Emerson.g:432:25: ( LTERM )*

                for (;;)
                {
                    int alt170=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA170_0 = LA(1);
                        if ( (LA170_0 == LTERM) ) 
                        {
                            alt170=1;
                        }

                    }
                    switch (alt170) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM332 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3487); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM332, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop170;	/* break out of the loop */
                	    break;
                    }
                }
                loop170: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression3490);
                arguments333=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments333.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : memberExpression, arguments
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 432:42: -> ^( CALL memberExpression arguments )
                	{
                	    // .//Emerson.g:432:45: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:432:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt174=4;
                alt174 = cdfa174.predict(ctx, RECOGNIZER, ISTREAM, &cdfa174);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt174) 
                {
            	case 1:
            	    // .//Emerson.g:432:82: ( LTERM )* arguments
            	    {

            	        // .//Emerson.g:432:82: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt171=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA171_0 = LA(1);
            	                if ( (LA171_0 == LTERM) ) 
            	                {
            	                    alt171=1;
            	                }

            	            }
            	            switch (alt171) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM334 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3504); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM334, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop171;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop171: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression3507);
            	        arguments335=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments335.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, arguments
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 432:99: -> ^( CALL $callExpression arguments )
            	        	{
            	        	    // .//Emerson.g:432:102: ^( CALL $callExpression arguments )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:432:138: ( LTERM )* indexSuffix1
            	    {

            	        // .//Emerson.g:432:138: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt172=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA172_0 = LA(1);
            	                if ( (LA172_0 == LTERM) ) 
            	                {
            	                    alt172=1;
            	                }

            	            }
            	            switch (alt172) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM336 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3522); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM336, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop172;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop172: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression3525);
            	        indexSuffix1337=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1337.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : indexSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 432:158: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//Emerson.g:432:161: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//Emerson.g:432:207: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//Emerson.g:432:207: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt173=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA173_0 = LA(1);
            	                if ( (LA173_0 == LTERM) ) 
            	                {
            	                    alt173=1;
            	                }

            	            }
            	            switch (alt173) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM338 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3540); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM338, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop173;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop173: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression3543);
            	        propertyReferenceSuffix1339=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1339.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : propertyReferenceSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 432:239: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//Emerson.g:432:242: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop174;	/* break out of the loop */
            	    break;
                }
            }
            loop174: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//Emerson.g:435:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_callExpressionSuffix_return
callExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_arguments_return arguments340;
    #undef	RETURN_TYPE_arguments340
    #define	RETURN_TYPE_arguments340 EmersonParser_arguments_return

    EmersonParser_indexSuffix_return indexSuffix341;
    #undef	RETURN_TYPE_indexSuffix341
    #define	RETURN_TYPE_indexSuffix341 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix342;
    #undef	RETURN_TYPE_propertyReferenceSuffix342
    #define	RETURN_TYPE_propertyReferenceSuffix342 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments340.tree = NULL;

    indexSuffix341.tree = NULL;

    propertyReferenceSuffix342.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:436:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt175;

            alt175=3;

            switch ( LA(1) ) 
            {
            case 136:
            	{
            		alt175=1;
            	}
                break;
            case 166:
            	{
            		alt175=2;
            	}
                break;
            case 168:
            	{
            		alt175=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 175;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt175) 
            {
        	case 1:
        	    // .//Emerson.g:436:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix3570);
        	        arguments340=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments340.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 436:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:437:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix3579);
        	        indexSuffix341=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix341.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 437:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:438:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3588);
        	        propertyReferenceSuffix342=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix342.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//Emerson.g:441:1: arguments : ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )? ) | '(' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ')' -> ^( ARGLIST assignmentExpression ( assignmentExpression )* ) );
 */
static EmersonParser_arguments_return
arguments(pEmersonParser ctx)
{   
    EmersonParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal343;
    pANTLR3_COMMON_TOKEN    LTERM344;
    pANTLR3_COMMON_TOKEN    LTERM346;
    pANTLR3_COMMON_TOKEN    char_literal347;
    pANTLR3_COMMON_TOKEN    char_literal348;
    pANTLR3_COMMON_TOKEN    LTERM349;
    pANTLR3_COMMON_TOKEN    char_literal350;
    pANTLR3_COMMON_TOKEN    LTERM351;
    pANTLR3_COMMON_TOKEN    LTERM352;
    pANTLR3_COMMON_TOKEN    char_literal353;
    EmersonParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression345;
    #undef	RETURN_TYPE_assignmentExpression345
    #define	RETURN_TYPE_assignmentExpression345 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal343_tree;
    pANTLR3_BASE_TREE LTERM344_tree;
    pANTLR3_BASE_TREE LTERM346_tree;
    pANTLR3_BASE_TREE char_literal347_tree;
    pANTLR3_BASE_TREE char_literal348_tree;
    pANTLR3_BASE_TREE LTERM349_tree;
    pANTLR3_BASE_TREE char_literal350_tree;
    pANTLR3_BASE_TREE LTERM351_tree;
    pANTLR3_BASE_TREE LTERM352_tree;
    pANTLR3_BASE_TREE char_literal353_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal343       = NULL;
    LTERM344       = NULL;
    LTERM346       = NULL;
    char_literal347       = NULL;
    char_literal348       = NULL;
    LTERM349       = NULL;
    char_literal350       = NULL;
    LTERM351       = NULL;
    LTERM352       = NULL;
    char_literal353       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    assignmentExpression345.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal343_tree   = NULL;
    LTERM344_tree   = NULL;
    LTERM346_tree   = NULL;
    char_literal347_tree   = NULL;
    char_literal348_tree   = NULL;
    LTERM349_tree   = NULL;
    char_literal350_tree   = NULL;
    LTERM351_tree   = NULL;
    LTERM352_tree   = NULL;
    char_literal353_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:442:9: ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )? ) | '(' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ')' -> ^( ARGLIST assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt183;

            alt183=2;


            {
                int LA183_0 = LA(1);
                if ( (LA183_0 == 136) ) 
                {

                    {
                        int LA183_1 = LA(2);
                        if ( (synpred204_Emerson(ctx)) ) 
                        {
                            alt183=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt183=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 183;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 183;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt183) 
            {
        	case 1:
        	    // .//Emerson.g:442:11: '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')'
        	    {
        	        char_literal343 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_arguments3610); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal343, NULL); }


        	        // .//Emerson.g:442:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt176=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA176_0 = LA(1);
        	                if ( (LA176_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA176_2 = LA(2);
        	                        if ( (synpred201_Emerson(ctx)) ) 
        	                        {
        	                            alt176=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt176) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM344 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3612); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM344, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop176;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop176: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:442:22: ( assignmentExpression )?
        	        {
        	            int alt177=2;
        	            {
        	                int LA177_0 = LA(1);
        	                if ( (((LA177_0 >= Identifier) && (LA177_0 <= NumericLiteral)) || ((LA177_0 >= 135) && (LA177_0 <= 136)) || LA177_0 == 139 || ((LA177_0 >= 165) && (LA177_0 <= 166)) || LA177_0 == 190 || ((LA177_0 >= 198) && (LA177_0 <= 199)) || ((LA177_0 >= 203) && (LA177_0 <= 214))) ) 
        	                {
        	                    alt177=1;
        	                }
        	            }
        	            switch (alt177) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:442:23: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3616);
        	        	        assignmentExpression345=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression345.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:442:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt178=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA178_0 = LA(1);
        	                if ( (LA178_0 == LTERM) ) 
        	                {
        	                    alt178=1;
        	                }

        	            }
        	            switch (alt178) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM346 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3620); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM346, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop178;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop178: ; /* Jump out to here if this rule does not match */

        	        char_literal347 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_arguments3623); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal347, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 442:57: -> ^( ARGLIST ( assignmentExpression )? )
        	        	{
        	        	    // .//Emerson.g:442:60: ^( ARGLIST ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        // .//Emerson.g:442:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:443:4: '(' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ')'
        	    {
        	        char_literal348 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_arguments3637); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal348, NULL); }


        	        // .//Emerson.g:443:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt179=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA179_0 = LA(1);
        	                if ( (LA179_0 == LTERM) ) 
        	                {
        	                    alt179=1;
        	                }

        	            }
        	            switch (alt179) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM349 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3639); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM349, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop179;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop179: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3644);
        	        e1=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

        	        // .//Emerson.g:443:39: ( ',' ( LTERM )* e2= assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt181=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA181_0 = LA(1);
        	                if ( (LA181_0 == 138) ) 
        	                {
        	                    alt181=1;
        	                }

        	            }
        	            switch (alt181) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:443:40: ',' ( LTERM )* e2= assignmentExpression
        	        	    {
        	        	        char_literal350 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_arguments3647); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal350, NULL); }


        	        	        // .//Emerson.g:443:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt180=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA180_0 = LA(1);
        	        	                if ( (LA180_0 == LTERM) ) 
        	        	                {
        	        	                    alt180=1;
        	        	                }

        	        	            }
        	        	            switch (alt180) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM351 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3649); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleargumentsEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM351, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop180;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop180: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3654);
        	        	        e2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop181;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop181: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:443:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt182=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA182_0 = LA(1);
        	                if ( (LA182_0 == LTERM) ) 
        	                {
        	                    alt182=1;
        	                }

        	            }
        	            switch (alt182) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM352 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3658); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM352, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop182;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop182: ; /* Jump out to here if this rule does not match */

        	        char_literal353 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_arguments3661); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal353, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 443:88: -> ^( ARGLIST assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//Emerson.g:443:91: ^( ARGLIST assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//Emerson.g:443:122: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//Emerson.g:448:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static EmersonParser_indexSuffix_return
indexSuffix(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal354;
    pANTLR3_COMMON_TOKEN    LTERM355;
    pANTLR3_COMMON_TOKEN    LTERM357;
    pANTLR3_COMMON_TOKEN    char_literal358;
    EmersonParser_expression_return expression356;
    #undef	RETURN_TYPE_expression356
    #define	RETURN_TYPE_expression356 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal354_tree;
    pANTLR3_BASE_TREE LTERM355_tree;
    pANTLR3_BASE_TREE LTERM357_tree;
    pANTLR3_BASE_TREE char_literal358_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal354       = NULL;
    LTERM355       = NULL;
    LTERM357       = NULL;
    char_literal358       = NULL;
    expression356.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal354_tree   = NULL;
    LTERM355_tree   = NULL;
    LTERM357_tree   = NULL;
    char_literal358_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:449:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//Emerson.g:449:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal354 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_indexSuffix3695); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, char_literal354, NULL); }


            // .//Emerson.g:449:8: ( LTERM )*

            for (;;)
            {
                int alt184=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA184_0 = LA(1);
                    if ( (LA184_0 == LTERM) ) 
                    {
                        alt184=1;
                    }

                }
                switch (alt184) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM355 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3697); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM355, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop184;	/* break out of the loop */
            	    break;
                }
            }
            loop184: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix3700);
            expression356=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression356.tree, NULL); }

            // .//Emerson.g:449:26: ( LTERM )*

            for (;;)
            {
                int alt185=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA185_0 = LA(1);
                    if ( (LA185_0 == LTERM) ) 
                    {
                        alt185=1;
                    }

                }
                switch (alt185) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM357 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3702); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM357, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop185;	/* break out of the loop */
            	    break;
                }
            }
            loop185: ; /* Jump out to here if this rule does not match */

            char_literal358 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_indexSuffix3705); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal358, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 449:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//Emerson.g:449:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//Emerson.g:452:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static EmersonParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal359;
    pANTLR3_COMMON_TOKEN    LTERM360;
    pANTLR3_COMMON_TOKEN    Identifier361;

    pANTLR3_BASE_TREE char_literal359_tree;
    pANTLR3_BASE_TREE LTERM360_tree;
    pANTLR3_BASE_TREE Identifier361_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal359       = NULL;
    LTERM360       = NULL;
    Identifier361       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal359_tree   = NULL;
    LTERM360_tree   = NULL;
    Identifier361_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:453:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//Emerson.g:453:4: '.' ( LTERM )* Identifier
        {
            char_literal359 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_propertyReferenceSuffix3726); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, char_literal359, NULL); }


            // .//Emerson.g:453:8: ( LTERM )*

            for (;;)
            {
                int alt186=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA186_0 = LA(1);
                    if ( (LA186_0 == LTERM) ) 
                    {
                        alt186=1;
                    }

                }
                switch (alt186) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM360 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix3728); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM360, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop186;	/* break out of the loop */
            	    break;
                }
            }
            loop186: ; /* Jump out to here if this rule does not match */

            Identifier361 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix3731); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier361, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 453:26: -> ^( DOT Identifier )
            	{
            	    // .//Emerson.g:453:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_168 != NULL) stream_168->free(stream_168);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//Emerson.g:457:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static EmersonParser_assignmentOperator_return
assignmentOperator(pEmersonParser ctx)
{   
    EmersonParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal362;
    pANTLR3_COMMON_TOKEN    string_literal363;
    pANTLR3_COMMON_TOKEN    string_literal364;
    pANTLR3_COMMON_TOKEN    string_literal365;
    pANTLR3_COMMON_TOKEN    string_literal366;
    pANTLR3_COMMON_TOKEN    string_literal367;
    pANTLR3_COMMON_TOKEN    string_literal368;
    pANTLR3_COMMON_TOKEN    string_literal369;
    pANTLR3_COMMON_TOKEN    string_literal370;
    pANTLR3_COMMON_TOKEN    string_literal371;
    pANTLR3_COMMON_TOKEN    string_literal372;
    pANTLR3_COMMON_TOKEN    string_literal373;

    pANTLR3_BASE_TREE char_literal362_tree;
    pANTLR3_BASE_TREE string_literal363_tree;
    pANTLR3_BASE_TREE string_literal364_tree;
    pANTLR3_BASE_TREE string_literal365_tree;
    pANTLR3_BASE_TREE string_literal366_tree;
    pANTLR3_BASE_TREE string_literal367_tree;
    pANTLR3_BASE_TREE string_literal368_tree;
    pANTLR3_BASE_TREE string_literal369_tree;
    pANTLR3_BASE_TREE string_literal370_tree;
    pANTLR3_BASE_TREE string_literal371_tree;
    pANTLR3_BASE_TREE string_literal372_tree;
    pANTLR3_BASE_TREE string_literal373_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal362       = NULL;
    string_literal363       = NULL;
    string_literal364       = NULL;
    string_literal365       = NULL;
    string_literal366       = NULL;
    string_literal367       = NULL;
    string_literal368       = NULL;
    string_literal369       = NULL;
    string_literal370       = NULL;
    string_literal371       = NULL;
    string_literal372       = NULL;
    string_literal373       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal362_tree   = NULL;
    string_literal363_tree   = NULL;
    string_literal364_tree   = NULL;
    string_literal365_tree   = NULL;
    string_literal366_tree   = NULL;
    string_literal367_tree   = NULL;
    string_literal368_tree   = NULL;
    string_literal369_tree   = NULL;
    string_literal370_tree   = NULL;
    string_literal371_tree   = NULL;
    string_literal372_tree   = NULL;
    string_literal373_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:458:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt187;

            alt187=12;

            switch ( LA(1) ) 
            {
            case 143:
            	{
            		alt187=1;
            	}
                break;
            case 169:
            	{
            		alt187=2;
            	}
                break;
            case 170:
            	{
            		alt187=3;
            	}
                break;
            case 171:
            	{
            		alt187=4;
            	}
                break;
            case 172:
            	{
            		alt187=5;
            	}
                break;
            case 173:
            	{
            		alt187=6;
            	}
                break;
            case 174:
            	{
            		alt187=7;
            	}
                break;
            case 175:
            	{
            		alt187=8;
            	}
                break;
            case 176:
            	{
            		alt187=9;
            	}
                break;
            case 177:
            	{
            		alt187=10;
            	}
                break;
            case 178:
            	{
            		alt187=11;
            	}
                break;
            case 179:
            	{
            		alt187=12;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 187;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt187) 
            {
        	case 1:
        	    // .//Emerson.g:458:4: '='
        	    {
        	        char_literal362 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_assignmentOperator3759); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal362, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:458:22: '*='
        	    {
        	        string_literal363 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_assignmentOperator3768); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, string_literal363, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:458:46: '/='
        	    {
        	        string_literal364 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_assignmentOperator3777); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, string_literal364, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:458:70: '%='
        	    {
        	        string_literal365 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_assignmentOperator3787); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, string_literal365, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:458:93: '+='
        	    {
        	        string_literal366 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_assignmentOperator3796); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal366, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:458:116: '-='
        	    {
        	        string_literal367 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_assignmentOperator3805); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal367, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:458:139: '<<='
        	    {
        	        string_literal368 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_assignmentOperator3814); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal368, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:145: -> ^( LEFT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:148: ^( LEFT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT_ASSIGN, (pANTLR3_UINT8)"LEFT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:458:170: '>>='
        	    {
        	        string_literal369 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_assignmentOperator3823); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, string_literal369, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:176: -> ^( RIGHT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:179: ^( RIGHT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT_ASSIGN, (pANTLR3_UINT8)"RIGHT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:458:202: '>>>='
        	    {
        	        string_literal370 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_assignmentOperator3832); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal370, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:209: -> ^( TRIPLE_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:212: ^( TRIPLE_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT_ASSIGN, (pANTLR3_UINT8)"TRIPLE_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:458:236: '&='
        	    {
        	        string_literal371 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_assignmentOperator3841); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal371, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:240: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:243: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:458:258: '^='
        	    {
        	        string_literal372 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_assignmentOperator3849); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal372, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:262: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:265: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:458:281: '|='
        	    {
        	        string_literal373 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_assignmentOperator3858); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal373, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 458:286: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:458:289: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_176 != NULL) stream_176->free(stream_176);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//Emerson.g:461:1: conditionalExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpression_return
conditionalExpression(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM375;
    pANTLR3_COMMON_TOKEN    char_literal376;
    pANTLR3_COMMON_TOKEN    LTERM377;
    pANTLR3_COMMON_TOKEN    LTERM378;
    pANTLR3_COMMON_TOKEN    char_literal379;
    pANTLR3_COMMON_TOKEN    LTERM380;
    EmersonParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return

    EmersonParser_logicalORExpression_return logicalORExpression374;
    #undef	RETURN_TYPE_logicalORExpression374
    #define	RETURN_TYPE_logicalORExpression374 EmersonParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM375_tree;
    pANTLR3_BASE_TREE char_literal376_tree;
    pANTLR3_BASE_TREE LTERM377_tree;
    pANTLR3_BASE_TREE LTERM378_tree;
    pANTLR3_BASE_TREE char_literal379_tree;
    pANTLR3_BASE_TREE LTERM380_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM375       = NULL;
    char_literal376       = NULL;
    LTERM377       = NULL;
    LTERM378       = NULL;
    char_literal379       = NULL;
    LTERM380       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression374.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM375_tree   = NULL;
    char_literal376_tree   = NULL;
    LTERM377_tree   = NULL;
    LTERM378_tree   = NULL;
    char_literal379_tree   = NULL;
    LTERM380_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:462:2: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? )
        // .//Emerson.g:462:4: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
        {
            // .//Emerson.g:462:4: ( logicalORExpression -> logicalORExpression )
            // .//Emerson.g:462:5: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression3876);
                logicalORExpression374=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression374.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 462:25: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:462:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
            {
                int alt192=2;
                alt192 = cdfa192.predict(ctx, RECOGNIZER, ISTREAM, &cdfa192);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt192) 
                {
            	case 1:
            	    // .//Emerson.g:462:50: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//Emerson.g:462:50: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt188=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA188_0 = LA(1);
            	                if ( (LA188_0 == LTERM) ) 
            	                {
            	                    alt188=1;
            	                }

            	            }
            	            switch (alt188) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM375 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3884); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM375, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop188;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop188: ; /* Jump out to here if this rule does not match */

            	        char_literal376 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_conditionalExpression3887); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, char_literal376, NULL); }


            	        // .//Emerson.g:462:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt189=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA189_0 = LA(1);
            	                if ( (LA189_0 == LTERM) ) 
            	                {
            	                    alt189=1;
            	                }

            	            }
            	            switch (alt189) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM377 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3889); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM377, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop189;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop189: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3894);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//Emerson.g:462:95: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt190=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA190_0 = LA(1);
            	                if ( (LA190_0 == LTERM) ) 
            	                {
            	                    alt190=1;
            	                }

            	            }
            	            switch (alt190) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM378 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3896); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM378, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop190;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop190: ; /* Jump out to here if this rule does not match */

            	        char_literal379 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_conditionalExpression3899); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal379, NULL); }


            	        // .//Emerson.g:462:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt191=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA191_0 = LA(1);
            	                if ( (LA191_0 == LTERM) ) 
            	                {
            	                    alt191=1;
            	                }

            	            }
            	            switch (alt191) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM380 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3901); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM380, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop191;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop191: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3906);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : conditionalExpression, expr1, expr2
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 462:140: -> ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:462:143: ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//Emerson.g:465:1: conditionalExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM382;
    pANTLR3_COMMON_TOKEN    char_literal383;
    pANTLR3_COMMON_TOKEN    LTERM384;
    pANTLR3_COMMON_TOKEN    LTERM385;
    pANTLR3_COMMON_TOKEN    char_literal386;
    pANTLR3_COMMON_TOKEN    LTERM387;
    EmersonParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_logicalORExpressionNoIn_return logicalORExpressionNoIn381;
    #undef	RETURN_TYPE_logicalORExpressionNoIn381
    #define	RETURN_TYPE_logicalORExpressionNoIn381 EmersonParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM382_tree;
    pANTLR3_BASE_TREE char_literal383_tree;
    pANTLR3_BASE_TREE LTERM384_tree;
    pANTLR3_BASE_TREE LTERM385_tree;
    pANTLR3_BASE_TREE char_literal386_tree;
    pANTLR3_BASE_TREE LTERM387_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM382       = NULL;
    char_literal383       = NULL;
    LTERM384       = NULL;
    LTERM385       = NULL;
    char_literal386       = NULL;
    LTERM387       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn381.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM382_tree   = NULL;
    char_literal383_tree   = NULL;
    LTERM384_tree   = NULL;
    LTERM385_tree   = NULL;
    char_literal386_tree   = NULL;
    LTERM387_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:466:2: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? )
        // .//Emerson.g:466:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
        {
            // .//Emerson.g:466:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//Emerson.g:466:5: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3937);
                logicalORExpressionNoIn381=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn381.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 466:29: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:466:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
            {
                int alt197=2;
                alt197 = cdfa197.predict(ctx, RECOGNIZER, ISTREAM, &cdfa197);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt197) 
                {
            	case 1:
            	    // .//Emerson.g:466:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:466:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt193=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA193_0 = LA(1);
            	                if ( (LA193_0 == LTERM) ) 
            	                {
            	                    alt193=1;
            	                }

            	            }
            	            switch (alt193) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM382 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3944); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM382, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop193;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop193: ; /* Jump out to here if this rule does not match */

            	        char_literal383 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_conditionalExpressionNoIn3947); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, char_literal383, NULL); }


            	        // .//Emerson.g:466:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt194=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA194_0 = LA(1);
            	                if ( (LA194_0 == LTERM) ) 
            	                {
            	                    alt194=1;
            	                }

            	            }
            	            switch (alt194) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM384 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3949); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM384, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop194;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop194: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3954);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//Emerson.g:466:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM385 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3956); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM385, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        char_literal386 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_conditionalExpressionNoIn3959); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal386, NULL); }


            	        // .//Emerson.g:466:117: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt196=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA196_0 = LA(1);
            	                if ( (LA196_0 == LTERM) ) 
            	                {
            	                    alt196=1;
            	                }

            	            }
            	            switch (alt196) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM387 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3961); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM387, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop196;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop196: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3966);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr2, expr1, conditionalExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 466:155: -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:466:158: ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//Emerson.g:470:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static EmersonParser_logicalORExpression_return
logicalORExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM389;
    pANTLR3_COMMON_TOKEN    string_literal390;
    pANTLR3_COMMON_TOKEN    LTERM391;
    EmersonParser_logicalANDExpression_return logicalANDExpression388;
    #undef	RETURN_TYPE_logicalANDExpression388
    #define	RETURN_TYPE_logicalANDExpression388 EmersonParser_logicalANDExpression_return

    EmersonParser_logicalANDExpression_return logicalANDExpression392;
    #undef	RETURN_TYPE_logicalANDExpression392
    #define	RETURN_TYPE_logicalANDExpression392 EmersonParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM389_tree;
    pANTLR3_BASE_TREE string_literal390_tree;
    pANTLR3_BASE_TREE LTERM391_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM389       = NULL;
    string_literal390       = NULL;
    LTERM391       = NULL;
    logicalANDExpression388.tree = NULL;

    logicalANDExpression392.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM389_tree   = NULL;
    string_literal390_tree   = NULL;
    LTERM391_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:471:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//Emerson.g:471:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//Emerson.g:471:4: ( logicalANDExpression -> logicalANDExpression )
            // .//Emerson.g:471:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3996);
                logicalANDExpression388=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression388.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 471:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:471:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt200=2;
                alt200 = cdfa200.predict(ctx, RECOGNIZER, ISTREAM, &cdfa200);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt200) 
                {
            	case 1:
            	    // .//Emerson.g:471:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//Emerson.g:471:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt198=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA198_0 = LA(1);
            	                if ( (LA198_0 == LTERM) ) 
            	                {
            	                    alt198=1;
            	                }

            	            }
            	            switch (alt198) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM389 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression4003); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM389, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop198;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop198: ; /* Jump out to here if this rule does not match */

            	        string_literal390 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_logicalORExpression4006); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal390, NULL); }


            	        // .//Emerson.g:471:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM391 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression4008); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM391, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression4011);
            	        logicalANDExpression392=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression392.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, logicalORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 471:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//Emerson.g:471:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop200;	/* break out of the loop */
            	    break;
                }
            }
            loop200: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//Emerson.g:474:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static EmersonParser_logicalANDExpression_return
logicalANDExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM394;
    pANTLR3_COMMON_TOKEN    string_literal395;
    pANTLR3_COMMON_TOKEN    LTERM396;
    EmersonParser_bitwiseORExpression_return bitwiseORExpression393;
    #undef	RETURN_TYPE_bitwiseORExpression393
    #define	RETURN_TYPE_bitwiseORExpression393 EmersonParser_bitwiseORExpression_return

    EmersonParser_bitwiseORExpression_return bitwiseORExpression397;
    #undef	RETURN_TYPE_bitwiseORExpression397
    #define	RETURN_TYPE_bitwiseORExpression397 EmersonParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM394_tree;
    pANTLR3_BASE_TREE string_literal395_tree;
    pANTLR3_BASE_TREE LTERM396_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM394       = NULL;
    string_literal395       = NULL;
    LTERM396       = NULL;
    bitwiseORExpression393.tree = NULL;

    bitwiseORExpression397.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM394_tree   = NULL;
    string_literal395_tree   = NULL;
    LTERM396_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:475:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//Emerson.g:475:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//Emerson.g:475:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//Emerson.g:475:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression4038);
                bitwiseORExpression393=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression393.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 475:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:475:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt203=2;
                alt203 = cdfa203.predict(ctx, RECOGNIZER, ISTREAM, &cdfa203);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt203) 
                {
            	case 1:
            	    // .//Emerson.g:475:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//Emerson.g:475:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt201=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA201_0 = LA(1);
            	                if ( (LA201_0 == LTERM) ) 
            	                {
            	                    alt201=1;
            	                }

            	            }
            	            switch (alt201) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM394 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression4045); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM394, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop201;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop201: ; /* Jump out to here if this rule does not match */

            	        string_literal395 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_logicalANDExpression4048); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, string_literal395, NULL); }


            	        // .//Emerson.g:475:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt202=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA202_0 = LA(1);
            	                if ( (LA202_0 == LTERM) ) 
            	                {
            	                    alt202=1;
            	                }

            	            }
            	            switch (alt202) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM396 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression4050); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM396, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop202;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop202: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression4053);
            	        bitwiseORExpression397=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression397.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, logicalANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 475:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//Emerson.g:475:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop203;	/* break out of the loop */
            	    break;
                }
            }
            loop203: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//Emerson.g:478:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static EmersonParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM399;
    pANTLR3_COMMON_TOKEN    string_literal400;
    pANTLR3_COMMON_TOKEN    LTERM401;
    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn398;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn398
    #define	RETURN_TYPE_logicalANDExpressionNoIn398 EmersonParser_logicalANDExpressionNoIn_return

    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn402;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn402
    #define	RETURN_TYPE_logicalANDExpressionNoIn402 EmersonParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM399_tree;
    pANTLR3_BASE_TREE string_literal400_tree;
    pANTLR3_BASE_TREE LTERM401_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM399       = NULL;
    string_literal400       = NULL;
    LTERM401       = NULL;
    logicalANDExpressionNoIn398.tree = NULL;

    logicalANDExpressionNoIn402.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM399_tree   = NULL;
    string_literal400_tree   = NULL;
    LTERM401_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:479:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//Emerson.g:479:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//Emerson.g:479:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//Emerson.g:479:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4081);
                logicalANDExpressionNoIn398=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn398.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 479:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:479:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt206=2;
                alt206 = cdfa206.predict(ctx, RECOGNIZER, ISTREAM, &cdfa206);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt206) 
                {
            	case 1:
            	    // .//Emerson.g:479:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//Emerson.g:479:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt204=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA204_0 = LA(1);
            	                if ( (LA204_0 == LTERM) ) 
            	                {
            	                    alt204=1;
            	                }

            	            }
            	            switch (alt204) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM399 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn4088); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM399, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop204;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop204: ; /* Jump out to here if this rule does not match */

            	        string_literal400 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_logicalORExpressionNoIn4091); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal400, NULL); }


            	        // .//Emerson.g:479:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt205=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA205_0 = LA(1);
            	                if ( (LA205_0 == LTERM) ) 
            	                {
            	                    alt205=1;
            	                }

            	            }
            	            switch (alt205) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM401 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn4093); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM401, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop205;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop205: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4096);
            	        logicalANDExpressionNoIn402=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn402.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, logicalORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 479:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:479:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop206;	/* break out of the loop */
            	    break;
                }
            }
            loop206: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//Emerson.g:483:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static EmersonParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM404;
    pANTLR3_COMMON_TOKEN    string_literal405;
    pANTLR3_COMMON_TOKEN    LTERM406;
    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn403;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn403
    #define	RETURN_TYPE_bitwiseORExpressionNoIn403 EmersonParser_bitwiseORExpressionNoIn_return

    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn407;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn407
    #define	RETURN_TYPE_bitwiseORExpressionNoIn407 EmersonParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM404_tree;
    pANTLR3_BASE_TREE string_literal405_tree;
    pANTLR3_BASE_TREE LTERM406_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM404       = NULL;
    string_literal405       = NULL;
    LTERM406       = NULL;
    bitwiseORExpressionNoIn403.tree = NULL;

    bitwiseORExpressionNoIn407.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM404_tree   = NULL;
    string_literal405_tree   = NULL;
    LTERM406_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:484:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//Emerson.g:484:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//Emerson.g:484:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//Emerson.g:484:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4125);
                bitwiseORExpressionNoIn403=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn403.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 484:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:484:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt209=2;
                alt209 = cdfa209.predict(ctx, RECOGNIZER, ISTREAM, &cdfa209);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt209) 
                {
            	case 1:
            	    // .//Emerson.g:484:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//Emerson.g:484:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt207=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA207_0 = LA(1);
            	                if ( (LA207_0 == LTERM) ) 
            	                {
            	                    alt207=1;
            	                }

            	            }
            	            switch (alt207) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM404 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn4133); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM404, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop207;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop207: ; /* Jump out to here if this rule does not match */

            	        string_literal405 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_logicalANDExpressionNoIn4136); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, string_literal405, NULL); }


            	        // .//Emerson.g:484:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt208=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA208_0 = LA(1);
            	                if ( (LA208_0 == LTERM) ) 
            	                {
            	                    alt208=1;
            	                }

            	            }
            	            switch (alt208) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM406 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn4138); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM406, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop208;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop208: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4141);
            	        bitwiseORExpressionNoIn407=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn407.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, logicalANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 484:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:484:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop209;	/* break out of the loop */
            	    break;
                }
            }
            loop209: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//Emerson.g:487:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static EmersonParser_bitwiseORExpression_return
bitwiseORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM409;
    pANTLR3_COMMON_TOKEN    char_literal410;
    pANTLR3_COMMON_TOKEN    LTERM411;
    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression408;
    #undef	RETURN_TYPE_bitwiseXORExpression408
    #define	RETURN_TYPE_bitwiseXORExpression408 EmersonParser_bitwiseXORExpression_return

    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression412;
    #undef	RETURN_TYPE_bitwiseXORExpression412
    #define	RETURN_TYPE_bitwiseXORExpression412 EmersonParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM409_tree;
    pANTLR3_BASE_TREE char_literal410_tree;
    pANTLR3_BASE_TREE LTERM411_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM409       = NULL;
    char_literal410       = NULL;
    LTERM411       = NULL;
    bitwiseXORExpression408.tree = NULL;

    bitwiseXORExpression412.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM409_tree   = NULL;
    char_literal410_tree   = NULL;
    LTERM411_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:488:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//Emerson.g:488:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//Emerson.g:488:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//Emerson.g:488:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4168);
                bitwiseXORExpression408=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression408.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 488:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:488:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt212=2;
                alt212 = cdfa212.predict(ctx, RECOGNIZER, ISTREAM, &cdfa212);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt212) 
                {
            	case 1:
            	    // .//Emerson.g:488:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//Emerson.g:488:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt210=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA210_0 = LA(1);
            	                if ( (LA210_0 == LTERM) ) 
            	                {
            	                    alt210=1;
            	                }

            	            }
            	            switch (alt210) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM409 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression4176); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM409, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop210;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop210: ; /* Jump out to here if this rule does not match */

            	        char_literal410 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_bitwiseORExpression4179); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal410, NULL); }


            	        // .//Emerson.g:488:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt211=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA211_0 = LA(1);
            	                if ( (LA211_0 == LTERM) ) 
            	                {
            	                    alt211=1;
            	                }

            	            }
            	            switch (alt211) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM411 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression4181); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM411, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop211;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop211: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4184);
            	        bitwiseXORExpression412=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression412.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 488:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//Emerson.g:488:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop212;	/* break out of the loop */
            	    break;
                }
            }
            loop212: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//Emerson.g:491:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM414;
    pANTLR3_COMMON_TOKEN    char_literal415;
    pANTLR3_COMMON_TOKEN    LTERM416;
    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn413;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn413
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn413 EmersonParser_bitwiseXORExpressionNoIn_return

    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn417;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn417
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn417 EmersonParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM414_tree;
    pANTLR3_BASE_TREE char_literal415_tree;
    pANTLR3_BASE_TREE LTERM416_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM414       = NULL;
    char_literal415       = NULL;
    LTERM416       = NULL;
    bitwiseXORExpressionNoIn413.tree = NULL;

    bitwiseXORExpressionNoIn417.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM414_tree   = NULL;
    char_literal415_tree   = NULL;
    LTERM416_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:492:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//Emerson.g:492:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//Emerson.g:492:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//Emerson.g:492:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4211);
                bitwiseXORExpressionNoIn413=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn413.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 492:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:492:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt215=2;
                alt215 = cdfa215.predict(ctx, RECOGNIZER, ISTREAM, &cdfa215);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt215) 
                {
            	case 1:
            	    // .//Emerson.g:492:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//Emerson.g:492:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt213=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA213_0 = LA(1);
            	                if ( (LA213_0 == LTERM) ) 
            	                {
            	                    alt213=1;
            	                }

            	            }
            	            switch (alt213) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM414 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4219); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM414, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop213;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop213: ; /* Jump out to here if this rule does not match */

            	        char_literal415 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_bitwiseORExpressionNoIn4222); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal415, NULL); }


            	        // .//Emerson.g:492:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM416 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4224); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM416, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4227);
            	        bitwiseXORExpressionNoIn417=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn417.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 492:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:492:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop215;	/* break out of the loop */
            	    break;
                }
            }
            loop215: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//Emerson.g:495:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static EmersonParser_bitwiseXORExpression_return
bitwiseXORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM419;
    pANTLR3_COMMON_TOKEN    char_literal420;
    pANTLR3_COMMON_TOKEN    LTERM421;
    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression418;
    #undef	RETURN_TYPE_bitwiseANDExpression418
    #define	RETURN_TYPE_bitwiseANDExpression418 EmersonParser_bitwiseANDExpression_return

    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression422;
    #undef	RETURN_TYPE_bitwiseANDExpression422
    #define	RETURN_TYPE_bitwiseANDExpression422 EmersonParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM419_tree;
    pANTLR3_BASE_TREE char_literal420_tree;
    pANTLR3_BASE_TREE LTERM421_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM419       = NULL;
    char_literal420       = NULL;
    LTERM421       = NULL;
    bitwiseANDExpression418.tree = NULL;

    bitwiseANDExpression422.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM419_tree   = NULL;
    char_literal420_tree   = NULL;
    LTERM421_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:496:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//Emerson.g:496:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//Emerson.g:496:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//Emerson.g:496:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4253);
                bitwiseANDExpression418=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression418.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 496:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:496:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt218=2;
                alt218 = cdfa218.predict(ctx, RECOGNIZER, ISTREAM, &cdfa218);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt218) 
                {
            	case 1:
            	    // .//Emerson.g:496:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//Emerson.g:496:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt216=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA216_0 = LA(1);
            	                if ( (LA216_0 == LTERM) ) 
            	                {
            	                    alt216=1;
            	                }

            	            }
            	            switch (alt216) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM419 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4261); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM419, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop216;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop216: ; /* Jump out to here if this rule does not match */

            	        char_literal420 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_bitwiseXORExpression4264); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, char_literal420, NULL); }


            	        // .//Emerson.g:496:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt217=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA217_0 = LA(1);
            	                if ( (LA217_0 == LTERM) ) 
            	                {
            	                    alt217=1;
            	                }

            	            }
            	            switch (alt217) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM421 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4266); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM421, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop217;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop217: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4269);
            	        bitwiseANDExpression422=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression422.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 496:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//Emerson.g:496:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop218;	/* break out of the loop */
            	    break;
                }
            }
            loop218: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//Emerson.g:499:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM424;
    pANTLR3_COMMON_TOKEN    char_literal425;
    pANTLR3_COMMON_TOKEN    LTERM426;
    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn423;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn423
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn423 EmersonParser_bitwiseANDExpressionNoIn_return

    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn427;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn427
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn427 EmersonParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM424_tree;
    pANTLR3_BASE_TREE char_literal425_tree;
    pANTLR3_BASE_TREE LTERM426_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM424       = NULL;
    char_literal425       = NULL;
    LTERM426       = NULL;
    bitwiseANDExpressionNoIn423.tree = NULL;

    bitwiseANDExpressionNoIn427.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM424_tree   = NULL;
    char_literal425_tree   = NULL;
    LTERM426_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:500:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//Emerson.g:500:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//Emerson.g:500:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//Emerson.g:500:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4296);
                bitwiseANDExpressionNoIn423=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn423.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 500:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:500:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt221=2;
                alt221 = cdfa221.predict(ctx, RECOGNIZER, ISTREAM, &cdfa221);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt221) 
                {
            	case 1:
            	    // .//Emerson.g:500:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//Emerson.g:500:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt219=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA219_0 = LA(1);
            	                if ( (LA219_0 == LTERM) ) 
            	                {
            	                    alt219=1;
            	                }

            	            }
            	            switch (alt219) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM424 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4303); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM424, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop219;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop219: ; /* Jump out to here if this rule does not match */

            	        char_literal425 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_bitwiseXORExpressionNoIn4306); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, char_literal425, NULL); }


            	        // .//Emerson.g:500:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt220=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA220_0 = LA(1);
            	                if ( (LA220_0 == LTERM) ) 
            	                {
            	                    alt220=1;
            	                }

            	            }
            	            switch (alt220) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM426 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4308); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM426, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop220;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop220: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4311);
            	        bitwiseANDExpressionNoIn427=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn427.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 500:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:500:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop221;	/* break out of the loop */
            	    break;
                }
            }
            loop221: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//Emerson.g:503:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static EmersonParser_bitwiseANDExpression_return
bitwiseANDExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM429;
    pANTLR3_COMMON_TOKEN    char_literal430;
    pANTLR3_COMMON_TOKEN    LTERM431;
    EmersonParser_equalityExpression_return equalityExpression428;
    #undef	RETURN_TYPE_equalityExpression428
    #define	RETURN_TYPE_equalityExpression428 EmersonParser_equalityExpression_return

    EmersonParser_equalityExpression_return equalityExpression432;
    #undef	RETURN_TYPE_equalityExpression432
    #define	RETURN_TYPE_equalityExpression432 EmersonParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM429_tree;
    pANTLR3_BASE_TREE char_literal430_tree;
    pANTLR3_BASE_TREE LTERM431_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM429       = NULL;
    char_literal430       = NULL;
    LTERM431       = NULL;
    equalityExpression428.tree = NULL;

    equalityExpression432.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM429_tree   = NULL;
    char_literal430_tree   = NULL;
    LTERM431_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:504:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//Emerson.g:504:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//Emerson.g:504:4: ( equalityExpression -> equalityExpression )
            // .//Emerson.g:504:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4339);
                equalityExpression428=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression428.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 504:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:504:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt224=2;
                alt224 = cdfa224.predict(ctx, RECOGNIZER, ISTREAM, &cdfa224);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt224) 
                {
            	case 1:
            	    // .//Emerson.g:504:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//Emerson.g:504:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt222=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA222_0 = LA(1);
            	                if ( (LA222_0 == LTERM) ) 
            	                {
            	                    alt222=1;
            	                }

            	            }
            	            switch (alt222) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM429 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4347); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM429, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop222;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop222: ; /* Jump out to here if this rule does not match */

            	        char_literal430 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_bitwiseANDExpression4350); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, char_literal430, NULL); }


            	        // .//Emerson.g:504:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt223=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA223_0 = LA(1);
            	                if ( (LA223_0 == LTERM) ) 
            	                {
            	                    alt223=1;
            	                }

            	            }
            	            switch (alt223) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM431 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4352); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM431, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop223;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop223: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4355);
            	        equalityExpression432=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression432.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 504:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//Emerson.g:504:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop224;	/* break out of the loop */
            	    break;
                }
            }
            loop224: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//Emerson.g:507:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM434;
    pANTLR3_COMMON_TOKEN    char_literal435;
    pANTLR3_COMMON_TOKEN    LTERM436;
    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn433;
    #undef	RETURN_TYPE_equalityExpressionNoIn433
    #define	RETURN_TYPE_equalityExpressionNoIn433 EmersonParser_equalityExpressionNoIn_return

    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn437;
    #undef	RETURN_TYPE_equalityExpressionNoIn437
    #define	RETURN_TYPE_equalityExpressionNoIn437 EmersonParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM434_tree;
    pANTLR3_BASE_TREE char_literal435_tree;
    pANTLR3_BASE_TREE LTERM436_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM434       = NULL;
    char_literal435       = NULL;
    LTERM436       = NULL;
    equalityExpressionNoIn433.tree = NULL;

    equalityExpressionNoIn437.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM434_tree   = NULL;
    char_literal435_tree   = NULL;
    LTERM436_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:508:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//Emerson.g:508:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//Emerson.g:508:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//Emerson.g:508:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4383);
                equalityExpressionNoIn433=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn433.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 508:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:508:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt227=2;
                alt227 = cdfa227.predict(ctx, RECOGNIZER, ISTREAM, &cdfa227);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt227) 
                {
            	case 1:
            	    // .//Emerson.g:508:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//Emerson.g:508:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt225=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA225_0 = LA(1);
            	                if ( (LA225_0 == LTERM) ) 
            	                {
            	                    alt225=1;
            	                }

            	            }
            	            switch (alt225) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM434 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4391); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM434, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop225;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop225: ; /* Jump out to here if this rule does not match */

            	        char_literal435 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_bitwiseANDExpressionNoIn4394); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, char_literal435, NULL); }


            	        // .//Emerson.g:508:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt226=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA226_0 = LA(1);
            	                if ( (LA226_0 == LTERM) ) 
            	                {
            	                    alt226=1;
            	                }

            	            }
            	            switch (alt226) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM436 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4396); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM436, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop226;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop226: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4399);
            	        equalityExpressionNoIn437=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn437.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 508:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:508:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop227;	/* break out of the loop */
            	    break;
                }
            }
            loop227: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//Emerson.g:511:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static EmersonParser_equalityExpression_return
equalityExpression(pEmersonParser ctx)
{   
    EmersonParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM439;
    pANTLR3_COMMON_TOKEN    LTERM441;
    EmersonParser_relationalExpression_return relationalExpression438;
    #undef	RETURN_TYPE_relationalExpression438
    #define	RETURN_TYPE_relationalExpression438 EmersonParser_relationalExpression_return

    EmersonParser_equalityOps_return equalityOps440;
    #undef	RETURN_TYPE_equalityOps440
    #define	RETURN_TYPE_equalityOps440 EmersonParser_equalityOps_return

    EmersonParser_relationalExpression_return relationalExpression442;
    #undef	RETURN_TYPE_relationalExpression442
    #define	RETURN_TYPE_relationalExpression442 EmersonParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM439_tree;
    pANTLR3_BASE_TREE LTERM441_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM439       = NULL;
    LTERM441       = NULL;
    relationalExpression438.tree = NULL;

    equalityOps440.tree = NULL;

    relationalExpression442.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM439_tree   = NULL;
    LTERM441_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:512:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//Emerson.g:512:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//Emerson.g:512:4: ( relationalExpression -> relationalExpression )
            // .//Emerson.g:512:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4426);
                relationalExpression438=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression438.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 512:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:512:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt230=2;
                alt230 = cdfa230.predict(ctx, RECOGNIZER, ISTREAM, &cdfa230);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt230) 
                {
            	case 1:
            	    // .//Emerson.g:512:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//Emerson.g:512:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt228=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA228_0 = LA(1);
            	                if ( (LA228_0 == LTERM) ) 
            	                {
            	                    alt228=1;
            	                }

            	            }
            	            switch (alt228) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM439 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4433); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM439, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop228;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop228: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression4436);
            	        equalityOps440=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps440.tree, NULL); }

            	        // .//Emerson.g:512:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt229=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA229_0 = LA(1);
            	                if ( (LA229_0 == LTERM) ) 
            	                {
            	                    alt229=1;
            	                }

            	            }
            	            switch (alt229) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM441 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4438); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM441, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop229;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop229: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4441);
            	        relationalExpression442=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression442.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpression, equalityExpression, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 512:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//Emerson.g:512:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop230;	/* break out of the loop */
            	    break;
                }
            }
            loop230: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//Emerson.g:516:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static EmersonParser_equalityOps_return
equalityOps(pEmersonParser ctx)
{   
    EmersonParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal443;
    pANTLR3_COMMON_TOKEN    string_literal444;
    pANTLR3_COMMON_TOKEN    string_literal445;
    pANTLR3_COMMON_TOKEN    string_literal446;

    pANTLR3_BASE_TREE string_literal443_tree;
    pANTLR3_BASE_TREE string_literal444_tree;
    pANTLR3_BASE_TREE string_literal445_tree;
    pANTLR3_BASE_TREE string_literal446_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal443       = NULL;
    string_literal444       = NULL;
    string_literal445       = NULL;
    string_literal446       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal443_tree   = NULL;
    string_literal444_tree   = NULL;
    string_literal445_tree   = NULL;
    string_literal446_tree   = NULL;

    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:517:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt231;

            alt231=4;

            switch ( LA(1) ) 
            {
            case 186:
            	{
            		alt231=1;
            	}
                break;
            case 187:
            	{
            		alt231=2;
            	}
                break;
            case 188:
            	{
            		alt231=3;
            	}
                break;
            case 189:
            	{
            		alt231=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 231;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt231) 
            {
        	case 1:
        	    // .//Emerson.g:517:4: '=='
        	    {
        	        string_literal443 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_equalityOps4467); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, string_literal443, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 517:9: -> ^( EQUALS )
        	        	{
        	        	    // .//Emerson.g:517:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:518:3: '!='
        	    {
        	        string_literal444 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_equalityOps4477); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, string_literal444, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 518:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//Emerson.g:518:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:519:3: '==='
        	    {
        	        string_literal445 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_equalityOps4487); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, string_literal445, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 519:9: -> ^( IDENT )
        	        	{
        	        	    // .//Emerson.g:519:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:520:3: '!=='
        	    {
        	        string_literal446 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_equalityOps4497); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, string_literal446, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 520:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//Emerson.g:520:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_187 != NULL) stream_187->free(stream_187);
        if (stream_189 != NULL) stream_189->free(stream_189);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//Emerson.g:523:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static EmersonParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM448;
    pANTLR3_COMMON_TOKEN    LTERM450;
    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn447;
    #undef	RETURN_TYPE_relationalExpressionNoIn447
    #define	RETURN_TYPE_relationalExpressionNoIn447 EmersonParser_relationalExpressionNoIn_return

    EmersonParser_equalityOps_return equalityOps449;
    #undef	RETURN_TYPE_equalityOps449
    #define	RETURN_TYPE_equalityOps449 EmersonParser_equalityOps_return

    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn451;
    #undef	RETURN_TYPE_relationalExpressionNoIn451
    #define	RETURN_TYPE_relationalExpressionNoIn451 EmersonParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM448_tree;
    pANTLR3_BASE_TREE LTERM450_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM448       = NULL;
    LTERM450       = NULL;
    relationalExpressionNoIn447.tree = NULL;

    equalityOps449.tree = NULL;

    relationalExpressionNoIn451.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM448_tree   = NULL;
    LTERM450_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:524:2: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//Emerson.g:524:4: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//Emerson.g:524:4: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//Emerson.g:524:5: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4514);
                relationalExpressionNoIn447=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn447.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 524:30: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:524:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt234=2;
                alt234 = cdfa234.predict(ctx, RECOGNIZER, ISTREAM, &cdfa234);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt234) 
                {
            	case 1:
            	    // .//Emerson.g:524:59: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//Emerson.g:524:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt232=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA232_0 = LA(1);
            	                if ( (LA232_0 == LTERM) ) 
            	                {
            	                    alt232=1;
            	                }

            	            }
            	            switch (alt232) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM448 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4521); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM448, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop232;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop232: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn4524);
            	        equalityOps449=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps449.tree, NULL); }

            	        // .//Emerson.g:524:78: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt233=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA233_0 = LA(1);
            	                if ( (LA233_0 == LTERM) ) 
            	                {
            	                    alt233=1;
            	                }

            	            }
            	            switch (alt233) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM450 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4526); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM450, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop233;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop233: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4529);
            	        relationalExpressionNoIn451=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn451.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityOps, equalityExpressionNoIn, relationalExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 524:110: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:524:113: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop234;	/* break out of the loop */
            	    break;
                }
            }
            loop234: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//Emerson.g:528:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static EmersonParser_relationalOps_return
relationalOps(pEmersonParser ctx)
{   
    EmersonParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal452;
    pANTLR3_COMMON_TOKEN    char_literal453;
    pANTLR3_COMMON_TOKEN    string_literal454;
    pANTLR3_COMMON_TOKEN    string_literal455;
    pANTLR3_COMMON_TOKEN    string_literal456;
    pANTLR3_COMMON_TOKEN    string_literal457;

    pANTLR3_BASE_TREE char_literal452_tree;
    pANTLR3_BASE_TREE char_literal453_tree;
    pANTLR3_BASE_TREE string_literal454_tree;
    pANTLR3_BASE_TREE string_literal455_tree;
    pANTLR3_BASE_TREE string_literal456_tree;
    pANTLR3_BASE_TREE string_literal457_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal452       = NULL;
    char_literal453       = NULL;
    string_literal454       = NULL;
    string_literal455       = NULL;
    string_literal456       = NULL;
    string_literal457       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal452_tree   = NULL;
    char_literal453_tree   = NULL;
    string_literal454_tree   = NULL;
    string_literal455_tree   = NULL;
    string_literal456_tree   = NULL;
    string_literal457_tree   = NULL;

    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:529:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt235;

            alt235=6;

            switch ( LA(1) ) 
            {
            case 190:
            	{
            		alt235=1;
            	}
                break;
            case 191:
            	{
            		alt235=2;
            	}
                break;
            case 192:
            	{
            		alt235=3;
            	}
                break;
            case 193:
            	{
            		alt235=4;
            	}
                break;
            case 194:
            	{
            		alt235=5;
            	}
                break;
            case 150:
            	{
            		alt235=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 235;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt235) 
            {
        	case 1:
        	    // .//Emerson.g:529:3: '<'
        	    {
        	        char_literal452 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_relationalOps4554); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal452, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 529:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:529:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:530:3: '>'
        	    {
        	        char_literal453 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_relationalOps4565); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal453, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 530:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:530:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:531:3: '<='
        	    {
        	        string_literal454 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_relationalOps4576); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, string_literal454, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 531:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:531:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:532:3: '>='
        	    {
        	        string_literal455 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_relationalOps4586); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, string_literal455, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 532:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:532:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:533:3: 'instanceof'
        	    {
        	        string_literal456 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_relationalOps4596); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, string_literal456, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 533:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:533:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:534:3: 'in'
        	    {
        	        string_literal457 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_relationalOps4606); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal457, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 534:16: -> ^( IN )
        	        	{
        	        	    // .//Emerson.g:534:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//Emerson.g:537:1: relationalExpression : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* ;
 */
static EmersonParser_relationalExpression_return
relationalExpression(pEmersonParser ctx)
{   
    EmersonParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM459;
    pANTLR3_COMMON_TOKEN    LTERM461;
    EmersonParser_shiftExpression_return shiftExpression458;
    #undef	RETURN_TYPE_shiftExpression458
    #define	RETURN_TYPE_shiftExpression458 EmersonParser_shiftExpression_return

    EmersonParser_relationalOps_return relationalOps460;
    #undef	RETURN_TYPE_relationalOps460
    #define	RETURN_TYPE_relationalOps460 EmersonParser_relationalOps_return

    EmersonParser_shiftExpression_return shiftExpression462;
    #undef	RETURN_TYPE_shiftExpression462
    #define	RETURN_TYPE_shiftExpression462 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM459_tree;
    pANTLR3_BASE_TREE LTERM461_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM459       = NULL;
    LTERM461       = NULL;
    shiftExpression458.tree = NULL;

    relationalOps460.tree = NULL;

    shiftExpression462.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM459_tree   = NULL;
    LTERM461_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:538:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* )
        // .//Emerson.g:538:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
        {
            // .//Emerson.g:538:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:538:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4631);
                shiftExpression458=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression458.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 538:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:538:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*

            for (;;)
            {
                int alt238=2;
                alt238 = cdfa238.predict(ctx, RECOGNIZER, ISTREAM, &cdfa238);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt238) 
                {
            	case 1:
            	    // .//Emerson.g:538:42: ( LTERM )* relationalOps ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:538:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt236=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA236_0 = LA(1);
            	                if ( (LA236_0 == LTERM) ) 
            	                {
            	                    alt236=1;
            	                }

            	            }
            	            switch (alt236) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM459 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4639); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM459, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop236;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop236: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression4642);
            	        relationalOps460=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps460.tree, NULL); }

            	        // .//Emerson.g:538:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt237=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA237_0 = LA(1);
            	                if ( (LA237_0 == LTERM) ) 
            	                {
            	                    alt237=1;
            	                }

            	            }
            	            switch (alt237) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM461 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4644); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM461, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop237;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop237: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4647);
            	        shiftExpression462=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression462.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpression, relationalOps, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 538:86: -> ^( relationalOps $relationalExpression shiftExpression )
            	        	{
            	        	    // .//Emerson.g:538:89: ^( relationalOps $relationalExpression shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop238;	/* break out of the loop */
            	    break;
                }
            }
            loop238: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//Emerson.g:541:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static EmersonParser_relationalOpsNoIn_return
relationalOpsNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal463;
    pANTLR3_COMMON_TOKEN    char_literal464;
    pANTLR3_COMMON_TOKEN    string_literal465;
    pANTLR3_COMMON_TOKEN    string_literal466;
    pANTLR3_COMMON_TOKEN    string_literal467;

    pANTLR3_BASE_TREE char_literal463_tree;
    pANTLR3_BASE_TREE char_literal464_tree;
    pANTLR3_BASE_TREE string_literal465_tree;
    pANTLR3_BASE_TREE string_literal466_tree;
    pANTLR3_BASE_TREE string_literal467_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal463       = NULL;
    char_literal464       = NULL;
    string_literal465       = NULL;
    string_literal466       = NULL;
    string_literal467       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal463_tree   = NULL;
    char_literal464_tree   = NULL;
    string_literal465_tree   = NULL;
    string_literal466_tree   = NULL;
    string_literal467_tree   = NULL;

    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:542:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt239;

            alt239=5;

            switch ( LA(1) ) 
            {
            case 190:
            	{
            		alt239=1;
            	}
                break;
            case 191:
            	{
            		alt239=2;
            	}
                break;
            case 192:
            	{
            		alt239=3;
            	}
                break;
            case 193:
            	{
            		alt239=4;
            	}
                break;
            case 194:
            	{
            		alt239=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 239;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt239) 
            {
        	case 1:
        	    // .//Emerson.g:542:3: '<'
        	    {
        	        char_literal463 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_relationalOpsNoIn4671); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal463, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 542:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:542:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:543:3: '>'
        	    {
        	        char_literal464 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_relationalOpsNoIn4682); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal464, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 543:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:543:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:544:3: '<='
        	    {
        	        string_literal465 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_relationalOpsNoIn4693); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, string_literal465, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 544:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:544:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:545:3: '>='
        	    {
        	        string_literal466 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_relationalOpsNoIn4703); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, string_literal466, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 545:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:545:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:546:3: 'instanceof'
        	    {
        	        string_literal467 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_relationalOpsNoIn4713); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, string_literal467, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 546:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:546:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//Emerson.g:549:1: relationalExpressionNoIn : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* ;
 */
static EmersonParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM469;
    pANTLR3_COMMON_TOKEN    LTERM471;
    EmersonParser_shiftExpression_return shiftExpression468;
    #undef	RETURN_TYPE_shiftExpression468
    #define	RETURN_TYPE_shiftExpression468 EmersonParser_shiftExpression_return

    EmersonParser_relationalOpsNoIn_return relationalOpsNoIn470;
    #undef	RETURN_TYPE_relationalOpsNoIn470
    #define	RETURN_TYPE_relationalOpsNoIn470 EmersonParser_relationalOpsNoIn_return

    EmersonParser_shiftExpression_return shiftExpression472;
    #undef	RETURN_TYPE_shiftExpression472
    #define	RETURN_TYPE_shiftExpression472 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM469_tree;
    pANTLR3_BASE_TREE LTERM471_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM469       = NULL;
    LTERM471       = NULL;
    shiftExpression468.tree = NULL;

    relationalOpsNoIn470.tree = NULL;

    shiftExpression472.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM469_tree   = NULL;
    LTERM471_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:550:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* )
        // .//Emerson.g:550:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
        {
            // .//Emerson.g:550:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:550:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4730);
                shiftExpression468=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression468.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 550:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:550:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*

            for (;;)
            {
                int alt242=2;
                alt242 = cdfa242.predict(ctx, RECOGNIZER, ISTREAM, &cdfa242);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt242) 
                {
            	case 1:
            	    // .//Emerson.g:550:42: ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:550:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt240=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA240_0 = LA(1);
            	                if ( (LA240_0 == LTERM) ) 
            	                {
            	                    alt240=1;
            	                }

            	            }
            	            switch (alt240) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM469 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4738); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM469, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop240;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop240: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4741);
            	        relationalOpsNoIn470=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn470.tree, NULL); }

            	        // .//Emerson.g:550:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt241=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA241_0 = LA(1);
            	                if ( (LA241_0 == LTERM) ) 
            	                {
            	                    alt241=1;
            	                }

            	            }
            	            switch (alt241) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM471 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4743); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM471, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop241;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop241: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4746);
            	        shiftExpression472=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression472.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, relationalOpsNoIn, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 550:90: -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	{
            	        	    // .//Emerson.g:550:93: ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop242;	/* break out of the loop */
            	    break;
                }
            }
            loop242: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start shiftOps
 * .//Emerson.g:553:1: shiftOps : ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) );
 */
static EmersonParser_shiftOps_return
shiftOps(pEmersonParser ctx)
{   
    EmersonParser_shiftOps_return retval;
    ANTLR3_UINT32 shiftOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal473;
    pANTLR3_COMMON_TOKEN    string_literal474;
    pANTLR3_COMMON_TOKEN    string_literal475;

    pANTLR3_BASE_TREE string_literal473_tree;
    pANTLR3_BASE_TREE string_literal474_tree;
    pANTLR3_BASE_TREE string_literal475_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;

    /* Initialize rule variables
     */
    shiftOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal473       = NULL;
    string_literal474       = NULL;
    string_literal475       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal473_tree   = NULL;
    string_literal474_tree   = NULL;
    string_literal475_tree   = NULL;

    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:554:1: ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) )
            
            ANTLR3_UINT32 alt243;

            alt243=3;

            switch ( LA(1) ) 
            {
            case 195:
            	{
            		alt243=1;
            	}
                break;
            case 196:
            	{
            		alt243=2;
            	}
                break;
            case 197:
            	{
            		alt243=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 243;
                EXCEPTION->state        = 0;


                goto ruleshiftOpsEx;
            }

            switch (alt243) 
            {
        	case 1:
        	    // .//Emerson.g:554:2: '<<'
        	    {
        	        string_literal473 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_shiftOps4769); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal473, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 554:7: -> ^( LEFT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:554:10: ^( LEFT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT, (pANTLR3_UINT8)"LEFT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:555:3: '>>'
        	    {
        	        string_literal474 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_shiftOps4779); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal474, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 555:7: -> ^( RIGHT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:555:10: ^( RIGHT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT, (pANTLR3_UINT8)"RIGHT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:556:3: '>>>'
        	    {
        	        string_literal475 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_shiftOps4788); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, string_literal475, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 556:9: -> ^( TRIPLE_SHIFT )
        	        	{
        	        	    // .//Emerson.g:556:12: ^( TRIPLE_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT, (pANTLR3_UINT8)"TRIPLE_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftOpsEx; /* Prevent compiler warnings */
    ruleshiftOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_196 != NULL) stream_196->free(stream_196);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, shiftOps_StartIndex); }
    return retval;
}
/* $ANTLR end shiftOps */

/** 
 * $ANTLR start shiftExpression
 * .//Emerson.g:559:1: shiftExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* ;
 */
static EmersonParser_shiftExpression_return
shiftExpression(pEmersonParser ctx)
{   
    EmersonParser_shiftExpression_return retval;
    ANTLR3_UINT32 shiftExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM477;
    pANTLR3_COMMON_TOKEN    LTERM479;
    EmersonParser_additiveExpression_return additiveExpression476;
    #undef	RETURN_TYPE_additiveExpression476
    #define	RETURN_TYPE_additiveExpression476 EmersonParser_additiveExpression_return

    EmersonParser_shiftOps_return shiftOps478;
    #undef	RETURN_TYPE_shiftOps478
    #define	RETURN_TYPE_shiftOps478 EmersonParser_shiftOps_return

    EmersonParser_additiveExpression_return additiveExpression480;
    #undef	RETURN_TYPE_additiveExpression480
    #define	RETURN_TYPE_additiveExpression480 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM477_tree;
    pANTLR3_BASE_TREE LTERM479_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    shiftExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM477       = NULL;
    LTERM479       = NULL;
    additiveExpression476.tree = NULL;

    shiftOps478.tree = NULL;

    additiveExpression480.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM477_tree   = NULL;
    LTERM479_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftOps   = NULL;
    #define CREATE_stream_shiftOps  if (stream_shiftOps == NULL) {stream_shiftOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftOps"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:560:2: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* )
        // .//Emerson.g:560:4: ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
        {
            // .//Emerson.g:560:4: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:560:5: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4805);
                additiveExpression476=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression476.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 560:24: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:560:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*

            for (;;)
            {
                int alt246=2;
                alt246 = cdfa246.predict(ctx, RECOGNIZER, ISTREAM, &cdfa246);
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt246) 
                {
            	case 1:
            	    // .//Emerson.g:560:47: ( LTERM )* shiftOps ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:560:47: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt244=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA244_0 = LA(1);
            	                if ( (LA244_0 == LTERM) ) 
            	                {
            	                    alt244=1;
            	                }

            	            }
            	            switch (alt244) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM477 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4812); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM477, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop244;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop244: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftOps_in_shiftExpression4815);
            	        shiftOps478=shiftOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftOps; stream_shiftOps->add(stream_shiftOps, shiftOps478.tree, NULL); }

            	        // .//Emerson.g:560:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt245=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA245_0 = LA(1);
            	                if ( (LA245_0 == LTERM) ) 
            	                {
            	                    alt245=1;
            	                }

            	            }
            	            switch (alt245) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM479 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4817); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM479, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop245;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop245: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4820);
            	        additiveExpression480=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression480.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : additiveExpression, shiftExpression, shiftOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 560:89: -> ^( shiftOps $shiftExpression additiveExpression )
            	        	{
            	        	    // .//Emerson.g:560:92: ^( shiftOps $shiftExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_shiftOps == NULL ? NULL : stream_shiftOps->nextNode(stream_shiftOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop246;	/* break out of the loop */
            	    break;
                }
            }
            loop246: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftExpressionEx; /* Prevent compiler warnings */
    ruleshiftExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftOps != NULL) stream_shiftOps->free(stream_shiftOps);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, shiftExpression_StartIndex); }
    return retval;
}
/* $ANTLR end shiftExpression */

/** 
 * $ANTLR start addOps
 * .//Emerson.g:564:1: addOps : ( '+' -> ^( ADD_OP ) | '-' -> ^( SUB ) );
 */
static EmersonParser_addOps_return
addOps(pEmersonParser ctx)
{   
    EmersonParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal481;
    pANTLR3_COMMON_TOKEN    char_literal482;

    pANTLR3_BASE_TREE char_literal481_tree;
    pANTLR3_BASE_TREE char_literal482_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal481       = NULL;
    char_literal482       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal481_tree   = NULL;
    char_literal482_tree   = NULL;

    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:565:1: ( '+' -> ^( ADD_OP ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt247;

            alt247=2;


            {
                int LA247_0 = LA(1);
                if ( (LA247_0 == 198) ) 
                {
                    alt247=1;
                }
                else if ( (LA247_0 == 199) ) 
                {
                    alt247=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 247;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt247) 
            {
        	case 1:
        	    // .//Emerson.g:565:3: '+'
        	    {
        	        char_literal481 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_addOps4846); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, char_literal481, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 565:7: -> ^( ADD_OP )
        	        	{
        	        	    // .//Emerson.g:565:10: ^( ADD_OP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_OP, (pANTLR3_UINT8)"ADD_OP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:566:3: '-'
        	    {
        	        char_literal482 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_addOps4856); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, char_literal482, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 566:7: -> ^( SUB )
        	        	{
        	        	    // .//Emerson.g:566:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start additiveExpression
 * .//Emerson.g:570:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static EmersonParser_additiveExpression_return
additiveExpression(pEmersonParser ctx)
{   
    EmersonParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM484;
    pANTLR3_COMMON_TOKEN    LTERM486;
    EmersonParser_multiplicativeExpression_return multiplicativeExpression483;
    #undef	RETURN_TYPE_multiplicativeExpression483
    #define	RETURN_TYPE_multiplicativeExpression483 EmersonParser_multiplicativeExpression_return

    EmersonParser_addOps_return addOps485;
    #undef	RETURN_TYPE_addOps485
    #define	RETURN_TYPE_addOps485 EmersonParser_addOps_return

    EmersonParser_multiplicativeExpression_return multiplicativeExpression487;
    #undef	RETURN_TYPE_multiplicativeExpression487
    #define	RETURN_TYPE_multiplicativeExpression487 EmersonParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM484_tree;
    pANTLR3_BASE_TREE LTERM486_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM484       = NULL;
    LTERM486       = NULL;
    multiplicativeExpression483.tree = NULL;

    addOps485.tree = NULL;

    multiplicativeExpression487.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM484_tree   = NULL;
    LTERM486_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:571:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//Emerson.g:571:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//Emerson.g:571:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//Emerson.g:571:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4874);
                multiplicativeExpression483=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression483.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 571:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:571:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt250=2;
                alt250 = cdfa250.predict(ctx, RECOGNIZER, ISTREAM, &cdfa250);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt250) 
                {
            	case 1:
            	    // .//Emerson.g:571:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//Emerson.g:571:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt248=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA248_0 = LA(1);
            	                if ( (LA248_0 == LTERM) ) 
            	                {
            	                    alt248=1;
            	                }

            	            }
            	            switch (alt248) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM484 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4881); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM484, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop248;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop248: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression4884);
            	        addOps485=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps485.tree, NULL); }

            	        // .//Emerson.g:571:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt249=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA249_0 = LA(1);
            	                if ( (LA249_0 == LTERM) ) 
            	                {
            	                    alt249=1;
            	                }

            	            }
            	            switch (alt249) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM486 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4886); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM486, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop249;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop249: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4889);
            	        multiplicativeExpression487=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression487.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multiplicativeExpression, addOps, additiveExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 571:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//Emerson.g:571:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop250;	/* break out of the loop */
            	    break;
                }
            }
            loop250: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//Emerson.g:574:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static EmersonParser_multOps_return
multOps(pEmersonParser ctx)
{   
    EmersonParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal488;
    pANTLR3_COMMON_TOKEN    char_literal489;
    pANTLR3_COMMON_TOKEN    char_literal490;

    pANTLR3_BASE_TREE char_literal488_tree;
    pANTLR3_BASE_TREE char_literal489_tree;
    pANTLR3_BASE_TREE char_literal490_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_202;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_200;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_201;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal488       = NULL;
    char_literal489       = NULL;
    char_literal490       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal488_tree   = NULL;
    char_literal489_tree   = NULL;
    char_literal490_tree   = NULL;

    stream_202   = NULL;
    #define CREATE_stream_202  if (stream_202 == NULL) {stream_202 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 202"); } 
    stream_200   = NULL;
    #define CREATE_stream_200  if (stream_200 == NULL) {stream_200 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 200"); } 
    stream_201   = NULL;
    #define CREATE_stream_201  if (stream_201 == NULL) {stream_201 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 201"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:575:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt251;

            alt251=3;

            switch ( LA(1) ) 
            {
            case 200:
            	{
            		alt251=1;
            	}
                break;
            case 201:
            	{
            		alt251=2;
            	}
                break;
            case 202:
            	{
            		alt251=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 251;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt251) 
            {
        	case 1:
        	    // .//Emerson.g:575:3: '*'
        	    {
        	        char_literal488 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_multOps4914); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_200; stream_200->add(stream_200, char_literal488, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 575:7: -> ^( MULT )
        	        	{
        	        	    // .//Emerson.g:575:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:576:3: '/'
        	    {
        	        char_literal489 = (pANTLR3_COMMON_TOKEN) MATCHT(201, &FOLLOW_201_in_multOps4924); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_201; stream_201->add(stream_201, char_literal489, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 576:7: -> ^( DIV )
        	        	{
        	        	    // .//Emerson.g:576:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:577:3: '%'
        	    {
        	        char_literal490 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_multOps4934); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_202; stream_202->add(stream_202, char_literal490, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 577:7: -> ^( MOD )
        	        	{
        	        	    // .//Emerson.g:577:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_202 != NULL) stream_202->free(stream_202);
        if (stream_200 != NULL) stream_200->free(stream_200);
        if (stream_201 != NULL) stream_201->free(stream_201);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//Emerson.g:580:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static EmersonParser_multiplicativeExpression_return
multiplicativeExpression(pEmersonParser ctx)
{   
    EmersonParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM492;
    pANTLR3_COMMON_TOKEN    LTERM494;
    EmersonParser_unaryExpression_return unaryExpression491;
    #undef	RETURN_TYPE_unaryExpression491
    #define	RETURN_TYPE_unaryExpression491 EmersonParser_unaryExpression_return

    EmersonParser_multOps_return multOps493;
    #undef	RETURN_TYPE_multOps493
    #define	RETURN_TYPE_multOps493 EmersonParser_multOps_return

    EmersonParser_unaryExpression_return unaryExpression495;
    #undef	RETURN_TYPE_unaryExpression495
    #define	RETURN_TYPE_unaryExpression495 EmersonParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM492_tree;
    pANTLR3_BASE_TREE LTERM494_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM492       = NULL;
    LTERM494       = NULL;
    unaryExpression491.tree = NULL;

    multOps493.tree = NULL;

    unaryExpression495.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM492_tree   = NULL;
    LTERM494_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:581:2: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//Emerson.g:581:4: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//Emerson.g:581:4: ( unaryExpression -> unaryExpression )
            // .//Emerson.g:581:5: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4951);
                unaryExpression491=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression491.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 581:22: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:581:42: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt254=2;
                alt254 = cdfa254.predict(ctx, RECOGNIZER, ISTREAM, &cdfa254);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt254) 
                {
            	case 1:
            	    // .//Emerson.g:581:43: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//Emerson.g:581:43: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt252=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA252_0 = LA(1);
            	                if ( (LA252_0 == LTERM) ) 
            	                {
            	                    alt252=1;
            	                }

            	            }
            	            switch (alt252) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM492 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4960); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM492, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop252;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop252: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression4963);
            	        multOps493=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps493.tree, NULL); }

            	        // .//Emerson.g:581:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt253=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA253_0 = LA(1);
            	                if ( (LA253_0 == LTERM) ) 
            	                {
            	                    alt253=1;
            	                }

            	            }
            	            switch (alt253) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM494 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4965); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM494, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop253;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop253: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4968);
            	        unaryExpression495=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression495.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multiplicativeExpression, multOps, unaryExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 581:81: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//Emerson.g:581:84: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop254;	/* break out of the loop */
            	    break;
                }
            }
            loop254: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//Emerson.g:585:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static EmersonParser_postfixExpression_return
postfixExpression(pEmersonParser ctx)
{   
    EmersonParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal497;
    pANTLR3_COMMON_TOKEN    string_literal499;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression496;
    #undef	RETURN_TYPE_leftHandSideExpression496
    #define	RETURN_TYPE_leftHandSideExpression496 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression498;
    #undef	RETURN_TYPE_leftHandSideExpression498
    #define	RETURN_TYPE_leftHandSideExpression498 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression500;
    #undef	RETURN_TYPE_leftHandSideExpression500
    #define	RETURN_TYPE_leftHandSideExpression500 EmersonParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal497_tree;
    pANTLR3_BASE_TREE string_literal499_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_203;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_204;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal497       = NULL;
    string_literal499       = NULL;
    leftHandSideExpression496.tree = NULL;

    leftHandSideExpression498.tree = NULL;

    leftHandSideExpression500.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal497_tree   = NULL;
    string_literal499_tree   = NULL;

    stream_203   = NULL;
    #define CREATE_stream_203  if (stream_203 == NULL) {stream_203 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 203"); } 
    stream_204   = NULL;
    #define CREATE_stream_204  if (stream_204 == NULL) {stream_204 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 204"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:586:2: ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression )
            
            ANTLR3_UINT32 alt255;

            alt255=3;

            alt255 = cdfa255.predict(ctx, RECOGNIZER, ISTREAM, &cdfa255);
            if  (HASEXCEPTION())
            {
                goto rulepostfixExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt255) 
            {
        	case 1:
        	    // .//Emerson.g:586:4: leftHandSideExpression '--'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression4993);
        	        leftHandSideExpression496=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression496.tree, NULL); }
        	        string_literal497 = (pANTLR3_COMMON_TOKEN) MATCHT(203, &FOLLOW_203_in_postfixExpression4995); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_203; stream_203->add(stream_203, string_literal497, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 586:32: -> ^( MINUSMINUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:586:35: ^( MINUSMINUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:587:4: leftHandSideExpression '++'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5009);
        	        leftHandSideExpression498=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression498.tree, NULL); }
        	        string_literal499 = (pANTLR3_COMMON_TOKEN) MATCHT(204, &FOLLOW_204_in_postfixExpression5011); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_204; stream_204->add(stream_204, string_literal499, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 587:32: -> ^( PLUSPLUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:587:35: ^( PLUSPLUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:588:3: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5023);
        	        leftHandSideExpression500=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression500.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 588:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_203 != NULL) stream_203->free(stream_203);
        if (stream_204 != NULL) stream_204->free(stream_204);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//Emerson.g:593:1: unaryOps : ( 'delete' -> ^( DELETE_OP ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static EmersonParser_unaryOps_return
unaryOps(pEmersonParser ctx)
{   
    EmersonParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal501;
    pANTLR3_COMMON_TOKEN    string_literal502;
    pANTLR3_COMMON_TOKEN    string_literal503;
    pANTLR3_COMMON_TOKEN    string_literal504;
    pANTLR3_COMMON_TOKEN    string_literal505;
    pANTLR3_COMMON_TOKEN    char_literal506;
    pANTLR3_COMMON_TOKEN    char_literal507;
    pANTLR3_COMMON_TOKEN    char_literal508;
    pANTLR3_COMMON_TOKEN    char_literal509;

    pANTLR3_BASE_TREE string_literal501_tree;
    pANTLR3_BASE_TREE string_literal502_tree;
    pANTLR3_BASE_TREE string_literal503_tree;
    pANTLR3_BASE_TREE string_literal504_tree;
    pANTLR3_BASE_TREE string_literal505_tree;
    pANTLR3_BASE_TREE char_literal506_tree;
    pANTLR3_BASE_TREE char_literal507_tree;
    pANTLR3_BASE_TREE char_literal508_tree;
    pANTLR3_BASE_TREE char_literal509_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_203;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_204;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_205;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_206;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_207;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_208;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_209;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal501       = NULL;
    string_literal502       = NULL;
    string_literal503       = NULL;
    string_literal504       = NULL;
    string_literal505       = NULL;
    char_literal506       = NULL;
    char_literal507       = NULL;
    char_literal508       = NULL;
    char_literal509       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal501_tree   = NULL;
    string_literal502_tree   = NULL;
    string_literal503_tree   = NULL;
    string_literal504_tree   = NULL;
    string_literal505_tree   = NULL;
    char_literal506_tree   = NULL;
    char_literal507_tree   = NULL;
    char_literal508_tree   = NULL;
    char_literal509_tree   = NULL;

    stream_203   = NULL;
    #define CREATE_stream_203  if (stream_203 == NULL) {stream_203 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 203"); } 
    stream_204   = NULL;
    #define CREATE_stream_204  if (stream_204 == NULL) {stream_204 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 204"); } 
    stream_205   = NULL;
    #define CREATE_stream_205  if (stream_205 == NULL) {stream_205 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 205"); } 
    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_206   = NULL;
    #define CREATE_stream_206  if (stream_206 == NULL) {stream_206 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 206"); } 
    stream_207   = NULL;
    #define CREATE_stream_207  if (stream_207 == NULL) {stream_207 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 207"); } 
    stream_208   = NULL;
    #define CREATE_stream_208  if (stream_208 == NULL) {stream_208 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 208"); } 
    stream_209   = NULL;
    #define CREATE_stream_209  if (stream_209 == NULL) {stream_209 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 209"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:594:1: ( 'delete' -> ^( DELETE_OP ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt256;

            alt256=9;

            switch ( LA(1) ) 
            {
            case 205:
            	{
            		alt256=1;
            	}
                break;
            case 206:
            	{
            		alt256=2;
            	}
                break;
            case 207:
            	{
            		alt256=3;
            	}
                break;
            case 204:
            	{
            		alt256=4;
            	}
                break;
            case 203:
            	{
            		alt256=5;
            	}
                break;
            case 198:
            	{
            		alt256=6;
            	}
                break;
            case 199:
            	{
            		alt256=7;
            	}
                break;
            case 208:
            	{
            		alt256=8;
            	}
                break;
            case 209:
            	{
            		alt256=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 256;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt256) 
            {
        	case 1:
        	    // .//Emerson.g:594:2: 'delete'
        	    {
        	        string_literal501 = (pANTLR3_COMMON_TOKEN) MATCHT(205, &FOLLOW_205_in_unaryOps5040); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_205; stream_205->add(stream_205, string_literal501, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 594:11: -> ^( DELETE_OP )
        	        	{
        	        	    // .//Emerson.g:594:14: ^( DELETE_OP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE_OP, (pANTLR3_UINT8)"DELETE_OP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:595:3: 'void'
        	    {
        	        string_literal502 = (pANTLR3_COMMON_TOKEN) MATCHT(206, &FOLLOW_206_in_unaryOps5050); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_206; stream_206->add(stream_206, string_literal502, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 595:10: -> ^( VOID )
        	        	{
        	        	    // .//Emerson.g:595:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:596:3: 'typeof'
        	    {
        	        string_literal503 = (pANTLR3_COMMON_TOKEN) MATCHT(207, &FOLLOW_207_in_unaryOps5060); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_207; stream_207->add(stream_207, string_literal503, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 596:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//Emerson.g:596:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:597:3: '++'
        	    {
        	        string_literal504 = (pANTLR3_COMMON_TOKEN) MATCHT(204, &FOLLOW_204_in_unaryOps5070); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_204; stream_204->add(stream_204, string_literal504, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 597:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//Emerson.g:597:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:598:3: '--'
        	    {
        	        string_literal505 = (pANTLR3_COMMON_TOKEN) MATCHT(203, &FOLLOW_203_in_unaryOps5081); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_203; stream_203->add(stream_203, string_literal505, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 598:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//Emerson.g:598:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:599:3: '+'
        	    {
        	        char_literal506 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_unaryOps5092); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, char_literal506, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 599:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//Emerson.g:599:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:600:3: '-'
        	    {
        	        char_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_unaryOps5104); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, char_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 600:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//Emerson.g:600:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:601:3: '~'
        	    {
        	        char_literal508 = (pANTLR3_COMMON_TOKEN) MATCHT(208, &FOLLOW_208_in_unaryOps5116); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_208; stream_208->add(stream_208, char_literal508, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 601:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//Emerson.g:601:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:602:3: '!'
        	    {
        	        char_literal509 = (pANTLR3_COMMON_TOKEN) MATCHT(209, &FOLLOW_209_in_unaryOps5128); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_209; stream_209->add(stream_209, char_literal509, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 602:9: -> ^( NOT )
        	        	{
        	        	    // .//Emerson.g:602:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_203 != NULL) stream_203->free(stream_203);
        if (stream_204 != NULL) stream_204->free(stream_204);
        if (stream_205 != NULL) stream_205->free(stream_205);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_206 != NULL) stream_206->free(stream_206);
        if (stream_207 != NULL) stream_207->free(stream_207);
        if (stream_208 != NULL) stream_208->free(stream_208);
        if (stream_209 != NULL) stream_209->free(stream_209);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//Emerson.g:606:1: unaryExpression : ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static EmersonParser_unaryExpression_return
unaryExpression(pEmersonParser ctx)
{   
    EmersonParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e EmersonParser_unaryExpression_return

    EmersonParser_postfixExpression_return postfixExpression510;
    #undef	RETURN_TYPE_postfixExpression510
    #define	RETURN_TYPE_postfixExpression510 EmersonParser_postfixExpression_return

    EmersonParser_unaryOps_return unaryOps511;
    #undef	RETURN_TYPE_unaryOps511
    #define	RETURN_TYPE_unaryOps511 EmersonParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(93)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression510.tree = NULL;

    unaryOps511.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:607:2: ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt257;

            alt257=2;


            {
                int LA257_0 = LA(1);
                if ( (((LA257_0 >= Identifier) && (LA257_0 <= NumericLiteral)) || ((LA257_0 >= 135) && (LA257_0 <= 136)) || LA257_0 == 139 || ((LA257_0 >= 165) && (LA257_0 <= 166)) || LA257_0 == 190 || ((LA257_0 >= 210) && (LA257_0 <= 214))) ) 
                {
                    alt257=1;
                }
                else if ( (((LA257_0 >= 198) && (LA257_0 <= 199)) || ((LA257_0 >= 203) && (LA257_0 <= 209))) ) 
                {
                    alt257=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 257;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt257) 
            {
        	case 1:
        	    // .//Emerson.g:607:4: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression5147);
        	        postfixExpression510=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression510.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 607:22: -> postfixExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:608:4: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression5156);
        	        unaryOps511=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps511.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression5160);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : unaryOps, e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 608:31: -> ^( unaryOps $e)
        	        	{
        	        	    // .//Emerson.g:608:34: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(93, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//Emerson.g:612:1: primaryExpression : ( 'this' | vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static EmersonParser_primaryExpression_return
primaryExpression(pEmersonParser ctx)
{   
    EmersonParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal512;
    pANTLR3_COMMON_TOKEN    Identifier514;
    pANTLR3_COMMON_TOKEN    char_literal520;
    pANTLR3_COMMON_TOKEN    LTERM521;
    pANTLR3_COMMON_TOKEN    LTERM523;
    pANTLR3_COMMON_TOKEN    char_literal524;
    EmersonParser_vectorLiteral_return vectorLiteral513;
    #undef	RETURN_TYPE_vectorLiteral513
    #define	RETURN_TYPE_vectorLiteral513 EmersonParser_vectorLiteral_return

    EmersonParser_dollarExpression_return dollarExpression515;
    #undef	RETURN_TYPE_dollarExpression515
    #define	RETURN_TYPE_dollarExpression515 EmersonParser_dollarExpression_return

    EmersonParser_literal_return literal516;
    #undef	RETURN_TYPE_literal516
    #define	RETURN_TYPE_literal516 EmersonParser_literal_return

    EmersonParser_arrayLiteral_return arrayLiteral517;
    #undef	RETURN_TYPE_arrayLiteral517
    #define	RETURN_TYPE_arrayLiteral517 EmersonParser_arrayLiteral_return

    EmersonParser_objectLiteral_return objectLiteral518;
    #undef	RETURN_TYPE_objectLiteral518
    #define	RETURN_TYPE_objectLiteral518 EmersonParser_objectLiteral_return

    EmersonParser_patternLiteral_return patternLiteral519;
    #undef	RETURN_TYPE_patternLiteral519
    #define	RETURN_TYPE_patternLiteral519 EmersonParser_patternLiteral_return

    EmersonParser_expression_return expression522;
    #undef	RETURN_TYPE_expression522
    #define	RETURN_TYPE_expression522 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal512_tree;
    pANTLR3_BASE_TREE Identifier514_tree;
    pANTLR3_BASE_TREE char_literal520_tree;
    pANTLR3_BASE_TREE LTERM521_tree;
    pANTLR3_BASE_TREE LTERM523_tree;
    pANTLR3_BASE_TREE char_literal524_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(94)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal512       = NULL;
    Identifier514       = NULL;
    char_literal520       = NULL;
    LTERM521       = NULL;
    LTERM523       = NULL;
    char_literal524       = NULL;
    vectorLiteral513.tree = NULL;

    dollarExpression515.tree = NULL;

    literal516.tree = NULL;

    arrayLiteral517.tree = NULL;

    objectLiteral518.tree = NULL;

    patternLiteral519.tree = NULL;

    expression522.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal512_tree   = NULL;
    Identifier514_tree   = NULL;
    char_literal520_tree   = NULL;
    LTERM521_tree   = NULL;
    LTERM523_tree   = NULL;
    char_literal524_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:613:5: ( 'this' | vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt260;

            alt260=9;

            alt260 = cdfa260.predict(ctx, RECOGNIZER, ISTREAM, &cdfa260);
            if  (HASEXCEPTION())
            {
                goto ruleprimaryExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt260) 
            {
        	case 1:
        	    // .//Emerson.g:613:7: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal512 = (pANTLR3_COMMON_TOKEN) MATCHT(210, &FOLLOW_210_in_primaryExpression5185); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal512_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal512));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal512_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:614:7: vectorLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression5193);
        	        vectorLiteral513=vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, vectorLiteral513.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:615:7: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier514 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression5202); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier514_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier514));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier514_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:616:7: dollarExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression5210);
        	        dollarExpression515=dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, dollarExpression515.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:617:7: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression5218);
        	        literal516=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal516.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:618:7: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression5226);
        	        arrayLiteral517=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral517.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:619:7: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression5234);
        	        objectLiteral518=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral518.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:620:7: patternLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_patternLiteral_in_primaryExpression5242);
        	        patternLiteral519=patternLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, patternLiteral519.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:621:7: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal520 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_primaryExpression5250); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, char_literal520, NULL); }


        	        // .//Emerson.g:621:11: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt258=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA258_0 = LA(1);
        	                if ( (LA258_0 == LTERM) ) 
        	                {
        	                    alt258=1;
        	                }

        	            }
        	            switch (alt258) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM521 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5252); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM521, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop258;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop258: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression5255);
        	        expression522=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression522.tree, NULL); }

        	        // .//Emerson.g:621:29: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt259=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA259_0 = LA(1);
        	                if ( (LA259_0 == LTERM) ) 
        	                {
        	                    alt259=1;
        	                }

        	            }
        	            switch (alt259) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM523 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5257); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM523, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop259;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop259: ; /* Jump out to here if this rule does not match */

        	        char_literal524 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_primaryExpression5260); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, char_literal524, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 621:40: -> ^( PAREN expression )
        	        	{
        	        	    // .//Emerson.g:621:43: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(94, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//Emerson.g:624:1: vectorLiteral : '<' ( LTERM )* e1= assignmentExpression ( LTERM )* ',' ( LTERM )* e2= assignmentExpression ( LTERM )* ',' ( LTERM )* e3= assignmentExpression ( LTERM )* '>' -> ^( VECTOR $e1 $e2 $e3) ;
 */
static EmersonParser_vectorLiteral_return
vectorLiteral(pEmersonParser ctx)
{   
    EmersonParser_vectorLiteral_return retval;
    ANTLR3_UINT32 vectorLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal525;
    pANTLR3_COMMON_TOKEN    LTERM526;
    pANTLR3_COMMON_TOKEN    LTERM527;
    pANTLR3_COMMON_TOKEN    char_literal528;
    pANTLR3_COMMON_TOKEN    LTERM529;
    pANTLR3_COMMON_TOKEN    LTERM530;
    pANTLR3_COMMON_TOKEN    char_literal531;
    pANTLR3_COMMON_TOKEN    LTERM532;
    pANTLR3_COMMON_TOKEN    LTERM533;
    pANTLR3_COMMON_TOKEN    char_literal534;
    EmersonParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal525_tree;
    pANTLR3_BASE_TREE LTERM526_tree;
    pANTLR3_BASE_TREE LTERM527_tree;
    pANTLR3_BASE_TREE char_literal528_tree;
    pANTLR3_BASE_TREE LTERM529_tree;
    pANTLR3_BASE_TREE LTERM530_tree;
    pANTLR3_BASE_TREE char_literal531_tree;
    pANTLR3_BASE_TREE LTERM532_tree;
    pANTLR3_BASE_TREE LTERM533_tree;
    pANTLR3_BASE_TREE char_literal534_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    vectorLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(95)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal525       = NULL;
    LTERM526       = NULL;
    LTERM527       = NULL;
    char_literal528       = NULL;
    LTERM529       = NULL;
    LTERM530       = NULL;
    char_literal531       = NULL;
    LTERM532       = NULL;
    LTERM533       = NULL;
    char_literal534       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal525_tree   = NULL;
    LTERM526_tree   = NULL;
    LTERM527_tree   = NULL;
    char_literal528_tree   = NULL;
    LTERM529_tree   = NULL;
    LTERM530_tree   = NULL;
    char_literal531_tree   = NULL;
    LTERM532_tree   = NULL;
    LTERM533_tree   = NULL;
    char_literal534_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:625:9: ( '<' ( LTERM )* e1= assignmentExpression ( LTERM )* ',' ( LTERM )* e2= assignmentExpression ( LTERM )* ',' ( LTERM )* e3= assignmentExpression ( LTERM )* '>' -> ^( VECTOR $e1 $e2 $e3) )
        // .//Emerson.g:625:11: '<' ( LTERM )* e1= assignmentExpression ( LTERM )* ',' ( LTERM )* e2= assignmentExpression ( LTERM )* ',' ( LTERM )* e3= assignmentExpression ( LTERM )* '>'
        {
            char_literal525 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_vectorLiteral5291); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal525, NULL); }


            // .//Emerson.g:625:15: ( LTERM )*

            for (;;)
            {
                int alt261=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA261_0 = LA(1);
                    if ( (LA261_0 == LTERM) ) 
                    {
                        alt261=1;
                    }

                }
                switch (alt261) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM526 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5293); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM526, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop261;	/* break out of the loop */
            	    break;
                }
            }
            loop261: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_vectorLiteral5298);
            e1=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

            // .//Emerson.g:625:46: ( LTERM )*

            for (;;)
            {
                int alt262=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA262_0 = LA(1);
                    if ( (LA262_0 == LTERM) ) 
                    {
                        alt262=1;
                    }

                }
                switch (alt262) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM527 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5300); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM527, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop262;	/* break out of the loop */
            	    break;
                }
            }
            loop262: ; /* Jump out to here if this rule does not match */

            char_literal528 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_vectorLiteral5303); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal528, NULL); }


            // .//Emerson.g:625:57: ( LTERM )*

            for (;;)
            {
                int alt263=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA263_0 = LA(1);
                    if ( (LA263_0 == LTERM) ) 
                    {
                        alt263=1;
                    }

                }
                switch (alt263) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM529 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5305); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM529, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop263;	/* break out of the loop */
            	    break;
                }
            }
            loop263: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_vectorLiteral5310);
            e2=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

            // .//Emerson.g:625:88: ( LTERM )*

            for (;;)
            {
                int alt264=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA264_0 = LA(1);
                    if ( (LA264_0 == LTERM) ) 
                    {
                        alt264=1;
                    }

                }
                switch (alt264) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM530 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5312); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM530, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop264;	/* break out of the loop */
            	    break;
                }
            }
            loop264: ; /* Jump out to here if this rule does not match */

            char_literal531 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_vectorLiteral5315); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal531, NULL); }


            // .//Emerson.g:625:99: ( LTERM )*

            for (;;)
            {
                int alt265=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA265_0 = LA(1);
                    if ( (LA265_0 == LTERM) ) 
                    {
                        alt265=1;
                    }

                }
                switch (alt265) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM532 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5317); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM532, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop265;	/* break out of the loop */
            	    break;
                }
            }
            loop265: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_vectorLiteral5322);
            e3=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e3.tree, NULL); }

            // .//Emerson.g:625:130: ( LTERM )*

            for (;;)
            {
                int alt266=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA266_0 = LA(1);
                    if ( (LA266_0 == LTERM) ) 
                    {
                        alt266=1;
                    }

                }
                switch (alt266) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM533 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5324); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM533, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop266;	/* break out of the loop */
            	    break;
                }
            }
            loop266: ; /* Jump out to here if this rule does not match */

            char_literal534 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_vectorLiteral5327); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal534, NULL); }


             
            /* AST REWRITE
             * elements          : e3, e1, e2
             * token labels      : 
             * rule labels       : e3, retval, e1, e2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
            	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 625:141: -> ^( VECTOR $e1 $e2 $e3)
            	{
            	    // .//Emerson.g:625:144: ^( VECTOR $e1 $e2 $e3)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VECTOR, (pANTLR3_UINT8)"VECTOR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);
            	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(95, vectorLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start dollarExpression
 * .//Emerson.g:636:1: dollarExpression : '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static EmersonParser_dollarExpression_return
dollarExpression(pEmersonParser ctx)
{   
    EmersonParser_dollarExpression_return retval;
    ANTLR3_UINT32 dollarExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal535;
    pANTLR3_COMMON_TOKEN    LTERM536;
    pANTLR3_COMMON_TOKEN    Identifier537;
    pANTLR3_COMMON_TOKEN    LTERM538;
    pANTLR3_COMMON_TOKEN    char_literal539;

    pANTLR3_BASE_TREE char_literal535_tree;
    pANTLR3_BASE_TREE LTERM536_tree;
    pANTLR3_BASE_TREE Identifier537_tree;
    pANTLR3_BASE_TREE LTERM538_tree;
    pANTLR3_BASE_TREE char_literal539_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_211;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    dollarExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(96)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal535       = NULL;
    LTERM536       = NULL;
    Identifier537       = NULL;
    LTERM538       = NULL;
    char_literal539       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal535_tree   = NULL;
    LTERM536_tree   = NULL;
    Identifier537_tree   = NULL;
    LTERM538_tree   = NULL;
    char_literal539_tree   = NULL;

    stream_211   = NULL;
    #define CREATE_stream_211  if (stream_211 == NULL) {stream_211 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 211"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:637:9: ( '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) )
        // .//Emerson.g:637:11: '`' ( LTERM )* Identifier ( LTERM )* '`'
        {
            char_literal535 = (pANTLR3_COMMON_TOKEN) MATCHT(211, &FOLLOW_211_in_dollarExpression5389); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_211; stream_211->add(stream_211, char_literal535, NULL); }


            // .//Emerson.g:637:15: ( LTERM )*

            for (;;)
            {
                int alt267=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA267_0 = LA(1);
                    if ( (LA267_0 == LTERM) ) 
                    {
                        alt267=1;
                    }

                }
                switch (alt267) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM536 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression5391); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM536, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop267;	/* break out of the loop */
            	    break;
                }
            }
            loop267: ; /* Jump out to here if this rule does not match */

            Identifier537 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression5394); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier537, NULL); }


            // .//Emerson.g:637:33: ( LTERM )*

            for (;;)
            {
                int alt268=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA268_0 = LA(1);
                    if ( (LA268_0 == LTERM) ) 
                    {
                        alt268=1;
                    }

                }
                switch (alt268) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM538 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression5396); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM538, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop268;	/* break out of the loop */
            	    break;
                }
            }
            loop268: ; /* Jump out to here if this rule does not match */

            char_literal539 = (pANTLR3_COMMON_TOKEN) MATCHT(211, &FOLLOW_211_in_dollarExpression5399); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_211; stream_211->add(stream_211, char_literal539, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 637:44: -> ^( DOLLAR_EXPRESSION Identifier )
            	{
            	    // .//Emerson.g:637:47: ^( DOLLAR_EXPRESSION Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOLLAR_EXPRESSION, (pANTLR3_UINT8)"DOLLAR_EXPRESSION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_211 != NULL) stream_211->free(stream_211);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(96, dollarExpression_StartIndex); }
    return retval;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//Emerson.g:641:1: arrayLiteral : ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) );
 */
static EmersonParser_arrayLiteral_return
arrayLiteral(pEmersonParser ctx)
{   
    EmersonParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal540;
    pANTLR3_COMMON_TOKEN    LTERM541;
    pANTLR3_COMMON_TOKEN    LTERM543;
    pANTLR3_COMMON_TOKEN    char_literal544;
    pANTLR3_COMMON_TOKEN    char_literal545;
    pANTLR3_COMMON_TOKEN    LTERM546;
    pANTLR3_COMMON_TOKEN    char_literal547;
    pANTLR3_COMMON_TOKEN    LTERM548;
    pANTLR3_COMMON_TOKEN    LTERM549;
    pANTLR3_COMMON_TOKEN    char_literal550;
    EmersonParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression542;
    #undef	RETURN_TYPE_assignmentExpression542
    #define	RETURN_TYPE_assignmentExpression542 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal540_tree;
    pANTLR3_BASE_TREE LTERM541_tree;
    pANTLR3_BASE_TREE LTERM543_tree;
    pANTLR3_BASE_TREE char_literal544_tree;
    pANTLR3_BASE_TREE char_literal545_tree;
    pANTLR3_BASE_TREE LTERM546_tree;
    pANTLR3_BASE_TREE char_literal547_tree;
    pANTLR3_BASE_TREE LTERM548_tree;
    pANTLR3_BASE_TREE LTERM549_tree;
    pANTLR3_BASE_TREE char_literal550_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(97)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal540       = NULL;
    LTERM541       = NULL;
    LTERM543       = NULL;
    char_literal544       = NULL;
    char_literal545       = NULL;
    LTERM546       = NULL;
    char_literal547       = NULL;
    LTERM548       = NULL;
    LTERM549       = NULL;
    char_literal550       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    assignmentExpression542.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal540_tree   = NULL;
    LTERM541_tree   = NULL;
    LTERM543_tree   = NULL;
    char_literal544_tree   = NULL;
    char_literal545_tree   = NULL;
    LTERM546_tree   = NULL;
    char_literal547_tree   = NULL;
    LTERM548_tree   = NULL;
    LTERM549_tree   = NULL;
    char_literal550_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:642:3: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt276;

            alt276=2;


            {
                int LA276_0 = LA(1);
                if ( (LA276_0 == 166) ) 
                {

                    {
                        int LA276_1 = LA(2);
                        if ( (synpred333_Emerson(ctx)) ) 
                        {
                            alt276=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt276=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 276;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 276;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt276) 
            {
        	case 1:
        	    // .//Emerson.g:642:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
        	    {
        	        char_literal540 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_arrayLiteral5435); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, char_literal540, NULL); }


        	        // .//Emerson.g:642:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt269=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA269_0 = LA(1);
        	                if ( (LA269_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA269_2 = LA(2);
        	                        if ( (synpred330_Emerson(ctx)) ) 
        	                        {
        	                            alt269=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt269) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM541 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5437); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM541, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop269;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop269: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:642:16: ( assignmentExpression )?
        	        {
        	            int alt270=2;
        	            {
        	                int LA270_0 = LA(1);
        	                if ( (((LA270_0 >= Identifier) && (LA270_0 <= NumericLiteral)) || ((LA270_0 >= 135) && (LA270_0 <= 136)) || LA270_0 == 139 || ((LA270_0 >= 165) && (LA270_0 <= 166)) || LA270_0 == 190 || ((LA270_0 >= 198) && (LA270_0 <= 199)) || ((LA270_0 >= 203) && (LA270_0 <= 214))) ) 
        	                {
        	                    alt270=1;
        	                }
        	            }
        	            switch (alt270) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:642:17: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral5441);
        	        	        assignmentExpression542=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression542.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:642:40: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt271=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA271_0 = LA(1);
        	                if ( (LA271_0 == LTERM) ) 
        	                {
        	                    alt271=1;
        	                }

        	            }
        	            switch (alt271) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM543 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5445); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM543, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop271;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop271: ; /* Jump out to here if this rule does not match */

        	        char_literal544 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_arrayLiteral5448); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal544, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 642:51: -> ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	{
        	        	    // .//Emerson.g:642:54: ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//Emerson.g:642:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:643:4: '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']'
        	    {
        	        char_literal545 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_arrayLiteral5462); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, char_literal545, NULL); }


        	        // .//Emerson.g:643:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt272=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA272_0 = LA(1);
        	                if ( (LA272_0 == LTERM) ) 
        	                {
        	                    alt272=1;
        	                }

        	            }
        	            switch (alt272) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM546 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5464); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM546, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop272;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop272: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral5469);
        	        e1=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

        	        // .//Emerson.g:643:39: ( ',' ( LTERM )* e2= assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt274=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA274_0 = LA(1);
        	                if ( (LA274_0 == 138) ) 
        	                {
        	                    alt274=1;
        	                }

        	            }
        	            switch (alt274) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:643:40: ',' ( LTERM )* e2= assignmentExpression
        	        	    {
        	        	        char_literal547 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_arrayLiteral5472); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal547, NULL); }


        	        	        // .//Emerson.g:643:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt273=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA273_0 = LA(1);
        	        	                if ( (LA273_0 == LTERM) ) 
        	        	                {
        	        	                    alt273=1;
        	        	                }

        	        	            }
        	        	            switch (alt273) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM548 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5474); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM548, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop273;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop273: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral5479);
        	        	        e2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop274;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop274: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:643:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt275=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA275_0 = LA(1);
        	                if ( (LA275_0 == LTERM) ) 
        	                {
        	                    alt275=1;
        	                }

        	            }
        	            switch (alt275) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM549 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5483); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM549, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop275;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop275: ; /* Jump out to here if this rule does not match */

        	        char_literal550 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_arrayLiteral5486); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal550, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 643:88: -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//Emerson.g:643:91: ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//Emerson.g:643:128: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(97, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//Emerson.g:647:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static EmersonParser_objectLiteral_return
objectLiteral(pEmersonParser ctx)
{   
    EmersonParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal551;
    pANTLR3_COMMON_TOKEN    LTERM552;
    pANTLR3_COMMON_TOKEN    LTERM554;
    pANTLR3_COMMON_TOKEN    char_literal555;
    pANTLR3_COMMON_TOKEN    char_literal556;
    pANTLR3_COMMON_TOKEN    LTERM557;
    pANTLR3_COMMON_TOKEN    char_literal558;
    pANTLR3_COMMON_TOKEN    LTERM559;
    pANTLR3_COMMON_TOKEN    LTERM560;
    pANTLR3_COMMON_TOKEN    char_literal561;
    EmersonParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return propertyNameAndValue553;
    #undef	RETURN_TYPE_propertyNameAndValue553
    #define	RETURN_TYPE_propertyNameAndValue553 EmersonParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal551_tree;
    pANTLR3_BASE_TREE LTERM552_tree;
    pANTLR3_BASE_TREE LTERM554_tree;
    pANTLR3_BASE_TREE char_literal555_tree;
    pANTLR3_BASE_TREE char_literal556_tree;
    pANTLR3_BASE_TREE LTERM557_tree;
    pANTLR3_BASE_TREE char_literal558_tree;
    pANTLR3_BASE_TREE LTERM559_tree;
    pANTLR3_BASE_TREE LTERM560_tree;
    pANTLR3_BASE_TREE char_literal561_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(98)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal551       = NULL;
    LTERM552       = NULL;
    LTERM554       = NULL;
    char_literal555       = NULL;
    char_literal556       = NULL;
    LTERM557       = NULL;
    char_literal558       = NULL;
    LTERM559       = NULL;
    LTERM560       = NULL;
    char_literal561       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue553.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal551_tree   = NULL;
    LTERM552_tree   = NULL;
    LTERM554_tree   = NULL;
    char_literal555_tree   = NULL;
    char_literal556_tree   = NULL;
    LTERM557_tree   = NULL;
    char_literal558_tree   = NULL;
    LTERM559_tree   = NULL;
    LTERM560_tree   = NULL;
    char_literal561_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:648:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt284;

            alt284=2;


            {
                int LA284_0 = LA(1);
                if ( (LA284_0 == 139) ) 
                {

                    {
                        int LA284_1 = LA(2);
                        if ( (synpred341_Emerson(ctx)) ) 
                        {
                            alt284=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt284=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 284;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 284;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt284) 
            {
        	case 1:
        	    // .//Emerson.g:648:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal551 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_objectLiteral5517); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal551, NULL); }


        	        // .//Emerson.g:648:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt277=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA277_0 = LA(1);
        	                if ( (LA277_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA277_2 = LA(2);
        	                        if ( (synpred338_Emerson(ctx)) ) 
        	                        {
        	                            alt277=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt277) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM552 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5519); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM552, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop277;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop277: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:648:16: ( propertyNameAndValue )?
        	        {
        	            int alt278=2;
        	            {
        	                int LA278_0 = LA(1);
        	                if ( (((LA278_0 >= Identifier) && (LA278_0 <= NumericLiteral))) ) 
        	                {
        	                    alt278=1;
        	                }
        	            }
        	            switch (alt278) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5522);
        	        	        propertyNameAndValue553=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue553.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:648:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt279=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA279_0 = LA(1);
        	                if ( (LA279_0 == LTERM) ) 
        	                {
        	                    alt279=1;
        	                }

        	            }
        	            switch (alt279) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM554 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5525); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM554, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop279;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop279: ; /* Jump out to here if this rule does not match */

        	        char_literal555 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_objectLiteral5528); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal555, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 648:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//Emerson.g:648:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//Emerson.g:648:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:649:4: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}'
        	    {
        	        char_literal556 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_objectLiteral5542); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal556, NULL); }


        	        // .//Emerson.g:649:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt280=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA280_0 = LA(1);
        	                if ( (LA280_0 == LTERM) ) 
        	                {
        	                    alt280=1;
        	                }

        	            }
        	            switch (alt280) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM557 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5544); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM557, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop280;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop280: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5549);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//Emerson.g:649:39: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt282=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA282_0 = LA(1);
        	                if ( (LA282_0 == 138) ) 
        	                {
        	                    alt282=1;
        	                }

        	            }
        	            switch (alt282) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:649:40: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal558 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_objectLiteral5552); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal558, NULL); }


        	        	        // .//Emerson.g:649:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt281=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA281_0 = LA(1);
        	        	                if ( (LA281_0 == LTERM) ) 
        	        	                {
        	        	                    alt281=1;
        	        	                }

        	        	            }
        	        	            switch (alt281) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM559 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5554); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM559, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop281;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop281: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5559);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop282;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop282: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:649:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt283=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA283_0 = LA(1);
        	                if ( (LA283_0 == LTERM) ) 
        	                {
        	                    alt283=1;
        	                }

        	            }
        	            switch (alt283) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM560 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5563); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM560, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop283;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop283: ; /* Jump out to here if this rule does not match */

        	        char_literal561 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_objectLiteral5570); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal561, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 649:92: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//Emerson.g:649:95: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//Emerson.g:649:130: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(98, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start patternLiteral
 * .//Emerson.g:660:1: patternLiteral : '{' firstLiteral= patternLiteralInternal ( LTERM )* ( ',' ( LTERM )* secondLiteral= patternLiteralInternal ( LTERM )* )* '}' -> ^( PATTERN_LITERAL $firstLiteral ( $secondLiteral)* ) ;
 */
static EmersonParser_patternLiteral_return
patternLiteral(pEmersonParser ctx)
{   
    EmersonParser_patternLiteral_return retval;
    ANTLR3_UINT32 patternLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal562;
    pANTLR3_COMMON_TOKEN    LTERM563;
    pANTLR3_COMMON_TOKEN    char_literal564;
    pANTLR3_COMMON_TOKEN    LTERM565;
    pANTLR3_COMMON_TOKEN    LTERM566;
    pANTLR3_COMMON_TOKEN    char_literal567;
    EmersonParser_patternLiteralInternal_return firstLiteral;
    #undef	RETURN_TYPE_firstLiteral
    #define	RETURN_TYPE_firstLiteral EmersonParser_patternLiteralInternal_return

    EmersonParser_patternLiteralInternal_return secondLiteral;
    #undef	RETURN_TYPE_secondLiteral
    #define	RETURN_TYPE_secondLiteral EmersonParser_patternLiteralInternal_return

    pANTLR3_BASE_TREE char_literal562_tree;
    pANTLR3_BASE_TREE LTERM563_tree;
    pANTLR3_BASE_TREE char_literal564_tree;
    pANTLR3_BASE_TREE LTERM565_tree;
    pANTLR3_BASE_TREE LTERM566_tree;
    pANTLR3_BASE_TREE char_literal567_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_patternLiteralInternal;
    /* Initialize rule variables
     */
    patternLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(99)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal562       = NULL;
    LTERM563       = NULL;
    char_literal564       = NULL;
    LTERM565       = NULL;
    LTERM566       = NULL;
    char_literal567       = NULL;
    firstLiteral.tree = NULL;

    secondLiteral.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal562_tree   = NULL;
    LTERM563_tree   = NULL;
    char_literal564_tree   = NULL;
    LTERM565_tree   = NULL;
    LTERM566_tree   = NULL;
    char_literal567_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_patternLiteralInternal   = NULL;
    #define CREATE_stream_patternLiteralInternal  if (stream_patternLiteralInternal == NULL) {stream_patternLiteralInternal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule patternLiteralInternal"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:661:3: ( '{' firstLiteral= patternLiteralInternal ( LTERM )* ( ',' ( LTERM )* secondLiteral= patternLiteralInternal ( LTERM )* )* '}' -> ^( PATTERN_LITERAL $firstLiteral ( $secondLiteral)* ) )
        // .//Emerson.g:661:5: '{' firstLiteral= patternLiteralInternal ( LTERM )* ( ',' ( LTERM )* secondLiteral= patternLiteralInternal ( LTERM )* )* '}'
        {
            char_literal562 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_patternLiteral5602); 
            if  (HASEXCEPTION())
            {
                goto rulepatternLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal562, NULL); }

            FOLLOWPUSH(FOLLOW_patternLiteralInternal_in_patternLiteral5606);
            firstLiteral=patternLiteralInternal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepatternLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_patternLiteralInternal; stream_patternLiteralInternal->add(stream_patternLiteralInternal, firstLiteral.tree, NULL); }

            // .//Emerson.g:661:45: ( LTERM )*

            for (;;)
            {
                int alt285=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA285_0 = LA(1);
                    if ( (LA285_0 == LTERM) ) 
                    {
                        alt285=1;
                    }

                }
                switch (alt285) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM563 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral5608); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepatternLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM563, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop285;	/* break out of the loop */
            	    break;
                }
            }
            loop285: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:661:52: ( ',' ( LTERM )* secondLiteral= patternLiteralInternal ( LTERM )* )*

            for (;;)
            {
                int alt288=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA288_0 = LA(1);
                    if ( (LA288_0 == 138) ) 
                    {
                        alt288=1;
                    }

                }
                switch (alt288) 
                {
            	case 1:
            	    // .//Emerson.g:661:54: ',' ( LTERM )* secondLiteral= patternLiteralInternal ( LTERM )*
            	    {
            	        char_literal564 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_patternLiteral5613); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepatternLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal564, NULL); }


            	        // .//Emerson.g:661:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt286=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA286_0 = LA(1);
            	                if ( (LA286_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA286_1 = LA(2);
            	                        if ( (synpred347_Emerson(ctx)) ) 
            	                        {
            	                            alt286=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt286) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM565 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral5615); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulepatternLiteralEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM565, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop286;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop286: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_patternLiteralInternal_in_patternLiteral5620);
            	        secondLiteral=patternLiteralInternal(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepatternLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_patternLiteralInternal; stream_patternLiteralInternal->add(stream_patternLiteralInternal, secondLiteral.tree, NULL); }

            	        // .//Emerson.g:661:102: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt287=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA287_0 = LA(1);
            	                if ( (LA287_0 == LTERM) ) 
            	                {
            	                    alt287=1;
            	                }

            	            }
            	            switch (alt287) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM566 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral5622); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulepatternLiteralEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM566, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop287;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop287: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

            	default:
            	    goto loop288;	/* break out of the loop */
            	    break;
                }
            }
            loop288: ; /* Jump out to here if this rule does not match */

            char_literal567 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_patternLiteral5628); 
            if  (HASEXCEPTION())
            {
                goto rulepatternLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal567, NULL); }


             
            /* AST REWRITE
             * elements          : secondLiteral, firstLiteral
             * token labels      : 
             * rule labels       : secondLiteral, retval, firstLiteral
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_secondLiteral;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_firstLiteral;

            	stream_secondLiteral=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token secondLiteral", secondLiteral.tree != NULL ? secondLiteral.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_firstLiteral=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token firstLiteral", firstLiteral.tree != NULL ? firstLiteral.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 661:116: -> ^( PATTERN_LITERAL $firstLiteral ( $secondLiteral)* )
            	{
            	    // .//Emerson.g:661:119: ^( PATTERN_LITERAL $firstLiteral ( $secondLiteral)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_LITERAL, (pANTLR3_UINT8)"PATTERN_LITERAL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_firstLiteral == NULL ? NULL : stream_firstLiteral->nextTree(stream_firstLiteral));
            	        // .//Emerson.g:661:151: ( $secondLiteral)*
            	        {
            	        	while ( (stream_secondLiteral != NULL && stream_secondLiteral->hasNext(stream_secondLiteral))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_secondLiteral == NULL ? NULL : stream_secondLiteral->nextTree(stream_secondLiteral));

            	        	}
            	        	if (stream_secondLiteral != NULL) stream_secondLiteral->reset(stream_secondLiteral);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_secondLiteral != NULL) stream_secondLiteral->free(stream_secondLiteral);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_firstLiteral != NULL) stream_firstLiteral->free(stream_firstLiteral);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralEx; /* Prevent compiler warnings */
    rulepatternLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_patternLiteralInternal != NULL) stream_patternLiteralInternal->free(stream_patternLiteralInternal);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(99, patternLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end patternLiteral */

/** 
 * $ANTLR start patternLiteralInternal
 * .//Emerson.g:664:1: patternLiteralInternal : ( ( LTERM )* name= expression ( LTERM )* ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )? -> ^( PATTERN_LITERAL_INTERNAL $name ( $val ( $proto)? )? ) | ( LTERM )* name= expression ( LTERM )* ':' ( LTERM )* ':' ( LTERM )* proto= expression ( LTERM )* -> ^( PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL $name $proto) );
 */
static EmersonParser_patternLiteralInternal_return
patternLiteralInternal(pEmersonParser ctx)
{   
    EmersonParser_patternLiteralInternal_return retval;
    ANTLR3_UINT32 patternLiteralInternal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM568;
    pANTLR3_COMMON_TOKEN    LTERM569;
    pANTLR3_COMMON_TOKEN    char_literal570;
    pANTLR3_COMMON_TOKEN    LTERM571;
    pANTLR3_COMMON_TOKEN    LTERM572;
    pANTLR3_COMMON_TOKEN    char_literal573;
    pANTLR3_COMMON_TOKEN    LTERM574;
    pANTLR3_COMMON_TOKEN    LTERM575;
    pANTLR3_COMMON_TOKEN    LTERM576;
    pANTLR3_COMMON_TOKEN    LTERM577;
    pANTLR3_COMMON_TOKEN    char_literal578;
    pANTLR3_COMMON_TOKEN    LTERM579;
    pANTLR3_COMMON_TOKEN    char_literal580;
    pANTLR3_COMMON_TOKEN    LTERM581;
    pANTLR3_COMMON_TOKEN    LTERM582;
    EmersonParser_expression_return name;
    #undef	RETURN_TYPE_name
    #define	RETURN_TYPE_name EmersonParser_expression_return

    EmersonParser_expression_return val;
    #undef	RETURN_TYPE_val
    #define	RETURN_TYPE_val EmersonParser_expression_return

    EmersonParser_expression_return proto;
    #undef	RETURN_TYPE_proto
    #define	RETURN_TYPE_proto EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM568_tree;
    pANTLR3_BASE_TREE LTERM569_tree;
    pANTLR3_BASE_TREE char_literal570_tree;
    pANTLR3_BASE_TREE LTERM571_tree;
    pANTLR3_BASE_TREE LTERM572_tree;
    pANTLR3_BASE_TREE char_literal573_tree;
    pANTLR3_BASE_TREE LTERM574_tree;
    pANTLR3_BASE_TREE LTERM575_tree;
    pANTLR3_BASE_TREE LTERM576_tree;
    pANTLR3_BASE_TREE LTERM577_tree;
    pANTLR3_BASE_TREE char_literal578_tree;
    pANTLR3_BASE_TREE LTERM579_tree;
    pANTLR3_BASE_TREE char_literal580_tree;
    pANTLR3_BASE_TREE LTERM581_tree;
    pANTLR3_BASE_TREE LTERM582_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    patternLiteralInternal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(100)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM568       = NULL;
    LTERM569       = NULL;
    char_literal570       = NULL;
    LTERM571       = NULL;
    LTERM572       = NULL;
    char_literal573       = NULL;
    LTERM574       = NULL;
    LTERM575       = NULL;
    LTERM576       = NULL;
    LTERM577       = NULL;
    char_literal578       = NULL;
    LTERM579       = NULL;
    char_literal580       = NULL;
    LTERM581       = NULL;
    LTERM582       = NULL;
    name.tree = NULL;

    val.tree = NULL;

    proto.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM568_tree   = NULL;
    LTERM569_tree   = NULL;
    char_literal570_tree   = NULL;
    LTERM571_tree   = NULL;
    LTERM572_tree   = NULL;
    char_literal573_tree   = NULL;
    LTERM574_tree   = NULL;
    LTERM575_tree   = NULL;
    LTERM576_tree   = NULL;
    LTERM577_tree   = NULL;
    char_literal578_tree   = NULL;
    LTERM579_tree   = NULL;
    char_literal580_tree   = NULL;
    LTERM581_tree   = NULL;
    LTERM582_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:665:3: ( ( LTERM )* name= expression ( LTERM )* ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )? -> ^( PATTERN_LITERAL_INTERNAL $name ( $val ( $proto)? )? ) | ( LTERM )* name= expression ( LTERM )* ':' ( LTERM )* ':' ( LTERM )* proto= expression ( LTERM )* -> ^( PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL $name $proto) )
            
            ANTLR3_UINT32 alt302;

            alt302=2;

            alt302 = cdfa302.predict(ctx, RECOGNIZER, ISTREAM, &cdfa302);
            if  (HASEXCEPTION())
            {
                goto rulepatternLiteralInternalEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt302) 
            {
        	case 1:
        	    // .//Emerson.g:665:5: ( LTERM )* name= expression ( LTERM )* ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )?
        	    {

        	        // .//Emerson.g:665:5: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt289=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA289_0 = LA(1);
        	                if ( (LA289_0 == LTERM) ) 
        	                {
        	                    alt289=1;
        	                }

        	            }
        	            switch (alt289) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM568 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5654); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM568, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop289;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop289: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_patternLiteralInternal5659);
        	        name=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralInternalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, name.tree, NULL); }

        	        // .//Emerson.g:665:29: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt290=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA290_0 = LA(1);
        	                if ( (LA290_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA290_2 = LA(2);
        	                        if ( (synpred351_Emerson(ctx)) ) 
        	                        {
        	                            alt290=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt290) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM569 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5662); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM569, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop290;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop290: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:665:36: ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )?
        	        {
        	            int alt296=2;
        	            {
        	                int LA296_0 = LA(1);
        	                if ( (LA296_0 == 155) ) 
        	                {
        	                    alt296=1;
        	                }
        	            }
        	            switch (alt296) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:665:37: ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )?
        	        	    {
        	        	        char_literal570 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_patternLiteralInternal5666); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal570, NULL); }


        	        	        // .//Emerson.g:665:41: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt291=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA291_0 = LA(1);
        	        	                if ( (LA291_0 == LTERM) ) 
        	        	                {
        	        	                    alt291=1;
        	        	                }

        	        	            }
        	        	            switch (alt291) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM571 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5668); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepatternLiteralInternalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM571, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop291;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop291: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_expression_in_patternLiteralInternal5673);
        	        	        val=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, val.tree, NULL); }

        	        	        // .//Emerson.g:665:64: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt292=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA292_0 = LA(1);
        	        	                if ( (LA292_0 == LTERM) ) 
        	        	                {
        	        	                    {
        	        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                        */
        	        	                        int LA292_2 = LA(2);
        	        	                        if ( (synpred353_Emerson(ctx)) ) 
        	        	                        {
        	        	                            alt292=1;
        	        	                        }

        	        	                    }
        	        	                }

        	        	            }
        	        	            switch (alt292) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM572 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5676); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepatternLiteralInternalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM572, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop292;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop292: ; /* Jump out to here if this rule does not match */


        	        	        // .//Emerson.g:665:71: ( ':' ( LTERM )* proto= expression ( LTERM )* )?
        	        	        {
        	        	            int alt295=2;
        	        	            {
        	        	                int LA295_0 = LA(1);
        	        	                if ( (LA295_0 == 155) ) 
        	        	                {
        	        	                    alt295=1;
        	        	                }
        	        	            }
        	        	            switch (alt295) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:665:72: ':' ( LTERM )* proto= expression ( LTERM )*
        	        	        	    {
        	        	        	        char_literal573 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_patternLiteralInternal5680); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepatternLiteralInternalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal573, NULL); }


        	        	        	        // .//Emerson.g:665:76: ( LTERM )*

        	        	        	        for (;;)
        	        	        	        {
        	        	        	            int alt293=2;
        	        	        	            {
        	        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	        	                */
        	        	        	                int LA293_0 = LA(1);
        	        	        	                if ( (LA293_0 == LTERM) ) 
        	        	        	                {
        	        	        	                    alt293=1;
        	        	        	                }

        	        	        	            }
        	        	        	            switch (alt293) 
        	        	        	            {
        	        	        	        	case 1:
        	        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	        	    {
        	        	        	        	        LTERM574 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5682); 
        	        	        	        	        if  (HASEXCEPTION())
        	        	        	        	        {
        	        	        	        	            goto rulepatternLiteralInternalEx;
        	        	        	        	        }
        	        	        	        	        if (HASFAILED())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        } 
        	        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM574, NULL); }


        	        	        	        	    }
        	        	        	        	    break;

        	        	        	        	default:
        	        	        	        	    goto loop293;	/* break out of the loop */
        	        	        	        	    break;
        	        	        	            }
        	        	        	        }
        	        	        	        loop293: ; /* Jump out to here if this rule does not match */

        	        	        	        FOLLOWPUSH(FOLLOW_expression_in_patternLiteralInternal5687);
        	        	        	        proto=expression(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepatternLiteralInternalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, proto.tree, NULL); }

        	        	        	        // .//Emerson.g:665:100: ( LTERM )*

        	        	        	        for (;;)
        	        	        	        {
        	        	        	            int alt294=2;
        	        	        	            {
        	        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	        	                */
        	        	        	                int LA294_0 = LA(1);
        	        	        	                if ( (LA294_0 == LTERM) ) 
        	        	        	                {
        	        	        	                    {
        	        	        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	        	                        */
        	        	        	                        int LA294_1 = LA(2);
        	        	        	                        if ( (synpred355_Emerson(ctx)) ) 
        	        	        	                        {
        	        	        	                            alt294=1;
        	        	        	                        }

        	        	        	                    }
        	        	        	                }

        	        	        	            }
        	        	        	            switch (alt294) 
        	        	        	            {
        	        	        	        	case 1:
        	        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	        	    {
        	        	        	        	        LTERM575 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5689); 
        	        	        	        	        if  (HASEXCEPTION())
        	        	        	        	        {
        	        	        	        	            goto rulepatternLiteralInternalEx;
        	        	        	        	        }
        	        	        	        	        if (HASFAILED())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        } 
        	        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM575, NULL); }


        	        	        	        	    }
        	        	        	        	    break;

        	        	        	        	default:
        	        	        	        	    goto loop294;	/* break out of the loop */
        	        	        	        	    break;
        	        	        	            }
        	        	        	        }
        	        	        	        loop294: ; /* Jump out to here if this rule does not match */


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : val, name, proto
        	         * token labels      : 
        	         * rule labels       : val, retval, name, proto
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_val;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_proto;

        	        	stream_val=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token val", val.tree != NULL ? val.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_name=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token name", name.tree != NULL ? name.tree : NULL);
        	        	stream_proto=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token proto", proto.tree != NULL ? proto.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 665:114: -> ^( PATTERN_LITERAL_INTERNAL $name ( $val ( $proto)? )? )
        	        	{
        	        	    // .//Emerson.g:665:117: ^( PATTERN_LITERAL_INTERNAL $name ( $val ( $proto)? )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_LITERAL_INTERNAL, (pANTLR3_UINT8)"PATTERN_LITERAL_INTERNAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));
        	        	        // .//Emerson.g:665:150: ( $val ( $proto)? )?
        	        	        {
        	        	        	if ( (stream_val != NULL && stream_val->hasNext(stream_val)) || (stream_proto != NULL && stream_proto->hasNext(stream_proto))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_val == NULL ? NULL : stream_val->nextTree(stream_val));
        	        	        		// .//Emerson.g:665:156: ( $proto)?
        	        	        		{
        	        	        			if ( (stream_proto != NULL && stream_proto->hasNext(stream_proto))  )
        	        	        			{
        	        	        				ADAPTOR->addChild(ADAPTOR, root_1, stream_proto == NULL ? NULL : stream_proto->nextTree(stream_proto));

        	        	        			}
        	        	        			if ( stream_proto != NULL) stream_proto->reset(stream_proto);

        	        	        		}

        	        	        	}
        	        	        	if ( stream_val != NULL) stream_val->reset(stream_val);
        	        	        	if ( stream_proto != NULL) stream_proto->reset(stream_proto);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_val != NULL) stream_val->free(stream_val);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_name != NULL) stream_name->free(stream_name);
        	        	if (stream_proto != NULL) stream_proto->free(stream_proto);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:666:5: ( LTERM )* name= expression ( LTERM )* ':' ( LTERM )* ':' ( LTERM )* proto= expression ( LTERM )*
        	    {

        	        // .//Emerson.g:666:5: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt297=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA297_0 = LA(1);
        	                if ( (LA297_0 == LTERM) ) 
        	                {
        	                    alt297=1;
        	                }

        	            }
        	            switch (alt297) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM576 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5725); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM576, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop297;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop297: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_patternLiteralInternal5730);
        	        name=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralInternalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, name.tree, NULL); }

        	        // .//Emerson.g:666:29: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt298=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA298_0 = LA(1);
        	                if ( (LA298_0 == LTERM) ) 
        	                {
        	                    alt298=1;
        	                }

        	            }
        	            switch (alt298) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM577 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5733); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM577, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop298;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop298: ; /* Jump out to here if this rule does not match */

        	        char_literal578 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_patternLiteralInternal5736); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralInternalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal578, NULL); }


        	        // .//Emerson.g:666:40: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt299=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA299_0 = LA(1);
        	                if ( (LA299_0 == LTERM) ) 
        	                {
        	                    alt299=1;
        	                }

        	            }
        	            switch (alt299) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM579 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5738); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM579, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop299;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop299: ; /* Jump out to here if this rule does not match */

        	        char_literal580 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_patternLiteralInternal5742); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralInternalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal580, NULL); }


        	        // .//Emerson.g:666:52: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt300=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA300_0 = LA(1);
        	                if ( (LA300_0 == LTERM) ) 
        	                {
        	                    alt300=1;
        	                }

        	            }
        	            switch (alt300) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM581 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5744); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM581, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop300;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop300: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_patternLiteralInternal5749);
        	        proto=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralInternalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, proto.tree, NULL); }

        	        // .//Emerson.g:666:76: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt301=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA301_0 = LA(1);
        	                if ( (LA301_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA301_1 = LA(2);
        	                        if ( (synpred363_Emerson(ctx)) ) 
        	                        {
        	                            alt301=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt301) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM582 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteralInternal5751); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralInternalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM582, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop301;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop301: ; /* Jump out to here if this rule does not match */


        	         
        	        /* AST REWRITE
        	         * elements          : name, proto
        	         * token labels      : 
        	         * rule labels       : retval, name, proto
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_proto;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_name=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token name", name.tree != NULL ? name.tree : NULL);
        	        	stream_proto=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token proto", proto.tree != NULL ? proto.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 666:84: -> ^( PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL $name $proto)
        	        	{
        	        	    // .//Emerson.g:666:87: ^( PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL $name $proto)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL, (pANTLR3_UINT8)"PATTERN_MIDDLE_MISSING_LITERAL_INTERNAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_proto == NULL ? NULL : stream_proto->nextTree(stream_proto));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_name != NULL) stream_name->free(stream_name);
        	        	if (stream_proto != NULL) stream_proto->free(stream_proto);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralInternalEx; /* Prevent compiler warnings */
    rulepatternLiteralInternalEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(100, patternLiteralInternal_StartIndex); }
    return retval;
}
/* $ANTLR end patternLiteralInternal */

/** 
 * $ANTLR start propertyNameAndValue
 * .//Emerson.g:670:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static EmersonParser_propertyNameAndValue_return
propertyNameAndValue(pEmersonParser ctx)
{   
    EmersonParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM584;
    pANTLR3_COMMON_TOKEN    char_literal585;
    pANTLR3_COMMON_TOKEN    LTERM586;
    EmersonParser_propertyName_return propertyName583;
    #undef	RETURN_TYPE_propertyName583
    #define	RETURN_TYPE_propertyName583 EmersonParser_propertyName_return

    EmersonParser_assignmentExpression_return assignmentExpression587;
    #undef	RETURN_TYPE_assignmentExpression587
    #define	RETURN_TYPE_assignmentExpression587 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM584_tree;
    pANTLR3_BASE_TREE char_literal585_tree;
    pANTLR3_BASE_TREE LTERM586_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(101)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM584       = NULL;
    char_literal585       = NULL;
    LTERM586       = NULL;
    propertyName583.tree = NULL;

    assignmentExpression587.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM584_tree   = NULL;
    char_literal585_tree   = NULL;
    LTERM586_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:671:2: ( propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//Emerson.g:671:4: propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue5781);
            propertyName583=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName583.tree, NULL); }

            // .//Emerson.g:671:17: ( LTERM )*

            for (;;)
            {
                int alt303=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA303_0 = LA(1);
                    if ( (LA303_0 == LTERM) ) 
                    {
                        alt303=1;
                    }

                }
                switch (alt303) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM584 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue5783); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM584, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop303;	/* break out of the loop */
            	    break;
                }
            }
            loop303: ; /* Jump out to here if this rule does not match */

            char_literal585 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_propertyNameAndValue5786); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal585, NULL); }


            // .//Emerson.g:671:28: ( LTERM )*

            for (;;)
            {
                int alt304=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA304_0 = LA(1);
                    if ( (LA304_0 == LTERM) ) 
                    {
                        alt304=1;
                    }

                }
                switch (alt304) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM586 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue5788); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM586, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop304;	/* break out of the loop */
            	    break;
                }
            }
            loop304: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue5791);
            assignmentExpression587=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression587.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression, propertyName
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 671:56: -> ^( NAME_VALUE propertyName assignmentExpression )
            	{
            	    // .//Emerson.g:671:59: ^( NAME_VALUE propertyName assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(101, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start nameValueProto
 * .//Emerson.g:675:1: nameValueProto : ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )? -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? ) ;
 */
static EmersonParser_nameValueProto_return
nameValueProto(pEmersonParser ctx)
{   
    EmersonParser_nameValueProto_return retval;
    ANTLR3_UINT32 nameValueProto_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM589;
    pANTLR3_COMMON_TOKEN    char_literal590;
    pANTLR3_COMMON_TOKEN    LTERM591;
    pANTLR3_COMMON_TOKEN    LTERM592;
    pANTLR3_COMMON_TOKEN    char_literal593;
    pANTLR3_COMMON_TOKEN    LTERM594;
    EmersonParser_assignmentExpression_return a1;
    #undef	RETURN_TYPE_a1
    #define	RETURN_TYPE_a1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return a2;
    #undef	RETURN_TYPE_a2
    #define	RETURN_TYPE_a2 EmersonParser_assignmentExpression_return

    EmersonParser_propertyName_return propertyName588;
    #undef	RETURN_TYPE_propertyName588
    #define	RETURN_TYPE_propertyName588 EmersonParser_propertyName_return

    pANTLR3_BASE_TREE LTERM589_tree;
    pANTLR3_BASE_TREE char_literal590_tree;
    pANTLR3_BASE_TREE LTERM591_tree;
    pANTLR3_BASE_TREE LTERM592_tree;
    pANTLR3_BASE_TREE char_literal593_tree;
    pANTLR3_BASE_TREE LTERM594_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    nameValueProto_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(102)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM589       = NULL;
    char_literal590       = NULL;
    LTERM591       = NULL;
    LTERM592       = NULL;
    char_literal593       = NULL;
    LTERM594       = NULL;
    a1.tree = NULL;

    a2.tree = NULL;

    propertyName588.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM589_tree   = NULL;
    char_literal590_tree   = NULL;
    LTERM591_tree   = NULL;
    LTERM592_tree   = NULL;
    char_literal593_tree   = NULL;
    LTERM594_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:676:5: ( ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )? -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? ) )
        // .//Emerson.g:676:7: ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )?
        {
            // .//Emerson.g:676:7: ( propertyName ( LTERM )* )
            // .//Emerson.g:676:8: propertyName ( LTERM )*
            {
                FOLLOWPUSH(FOLLOW_propertyName_in_nameValueProto5817);
                propertyName588=propertyName(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulenameValueProtoEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName588.tree, NULL); }

                // .//Emerson.g:676:21: ( LTERM )*

                for (;;)
                {
                    int alt305=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA305_0 = LA(1);
                        if ( (LA305_0 == LTERM) ) 
                        {
                            alt305=1;
                        }

                    }
                    switch (alt305) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM589 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto5819); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenameValueProtoEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM589, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop305;	/* break out of the loop */
                	    break;
                    }
                }
                loop305: ; /* Jump out to here if this rule does not match */


            }

            char_literal590 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_nameValueProto5823); 
            if  (HASEXCEPTION())
            {
                goto rulenameValueProtoEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal590, NULL); }


            // .//Emerson.g:676:34: ( LTERM )*

            for (;;)
            {
                int alt306=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA306_0 = LA(1);
                    if ( (LA306_0 == LTERM) ) 
                    {
                        alt306=1;
                    }

                }
                switch (alt306) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM591 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto5826); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameValueProtoEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM591, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop306;	/* break out of the loop */
            	    break;
                }
            }
            loop306: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:676:41: (a1= assignmentExpression ( LTERM )* )?
            {
                int alt308=2;
                {
                    int LA308_0 = LA(1);
                    if ( (((LA308_0 >= Identifier) && (LA308_0 <= NumericLiteral)) || ((LA308_0 >= 135) && (LA308_0 <= 136)) || LA308_0 == 139 || ((LA308_0 >= 165) && (LA308_0 <= 166)) || LA308_0 == 190 || ((LA308_0 >= 198) && (LA308_0 <= 199)) || ((LA308_0 >= 203) && (LA308_0 <= 214))) ) 
                    {
                        alt308=1;
                    }
                }
                switch (alt308) 
                {
            	case 1:
            	    // .//Emerson.g:676:42: a1= assignmentExpression ( LTERM )*
            	    {
            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_nameValueProto5832);
            	        a1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameValueProtoEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, a1.tree, NULL); }

            	        // .//Emerson.g:676:66: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt307=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA307_0 = LA(1);
            	                if ( (LA307_0 == LTERM) ) 
            	                {
            	                    alt307=1;
            	                }

            	            }
            	            switch (alt307) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM592 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto5834); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulenameValueProtoEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM592, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop307;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop307: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }
            char_literal593 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_nameValueProto5839); 
            if  (HASEXCEPTION())
            {
                goto rulenameValueProtoEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, char_literal593, NULL); }


            // .//Emerson.g:676:79: ( LTERM )*

            for (;;)
            {
                int alt309=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA309_0 = LA(1);
                    if ( (LA309_0 == LTERM) ) 
                    {
                        alt309=1;
                    }

                }
                switch (alt309) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM594 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto5841); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameValueProtoEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM594, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop309;	/* break out of the loop */
            	    break;
                }
            }
            loop309: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:676:86: (a2= assignmentExpression )?
            {
                int alt310=2;
                {
                    int LA310_0 = LA(1);
                    if ( (((LA310_0 >= Identifier) && (LA310_0 <= NumericLiteral)) || ((LA310_0 >= 135) && (LA310_0 <= 136)) || LA310_0 == 139 || ((LA310_0 >= 165) && (LA310_0 <= 166)) || LA310_0 == 190 || ((LA310_0 >= 198) && (LA310_0 <= 199)) || ((LA310_0 >= 203) && (LA310_0 <= 214))) ) 
                    {
                        alt310=1;
                    }
                }
                switch (alt310) 
                {
            	case 1:
            	    // .//Emerson.g:676:88: a2= assignmentExpression
            	    {
            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_nameValueProto5848);
            	        a2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameValueProtoEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, a2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : a2, a1, propertyName
             * token labels      : 
             * rule labels       : retval, a1, a2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a2;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_a1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a1", a1.tree != NULL ? a1.tree : NULL);
            	stream_a2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a2", a2.tree != NULL ? a2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 676:115: -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? )
            	{
            	    // .//Emerson.g:676:118: ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE_PROTO, (pANTLR3_UINT8)"NAME_VALUE_PROTO"), root_1));

            	        // .//Emerson.g:676:137: ^( NAME propertyName )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME, (pANTLR3_UINT8)"NAME"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // .//Emerson.g:676:158: ( ^( VALUE $a1) )?
            	        {
            	        	if ( (stream_a1 != NULL && stream_a1->hasNext(stream_a1))  )
            	        	{
            	        		// .//Emerson.g:676:159: ^( VALUE $a1)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VALUE, (pANTLR3_UINT8)"VALUE"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_a1 == NULL ? NULL : stream_a1->nextTree(stream_a1));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_a1 != NULL) stream_a1->reset(stream_a1);

            	        }
            	        // .//Emerson.g:676:174: ( ^( PROTO $a2) )?
            	        {
            	        	if ( (stream_a2 != NULL && stream_a2->hasNext(stream_a2))  )
            	        	{
            	        		// .//Emerson.g:676:175: ^( PROTO $a2)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROTO, (pANTLR3_UINT8)"PROTO"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_a2 == NULL ? NULL : stream_a2->nextTree(stream_a2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_a2 != NULL) stream_a2->reset(stream_a2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_a1 != NULL) stream_a1->free(stream_a1);
            	if (stream_a2 != NULL) stream_a2->free(stream_a2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenameValueProtoEx; /* Prevent compiler warnings */
    rulenameValueProtoEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(102, nameValueProto_StartIndex); }
    return retval;
}
/* $ANTLR end nameValueProto */

/** 
 * $ANTLR start propertyName
 * .//Emerson.g:681:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static EmersonParser_propertyName_return
propertyName(pEmersonParser ctx)
{   
    EmersonParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set595;

    pANTLR3_BASE_TREE set595_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(103)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set595       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set595_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:682:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set595=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= NumericLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set595)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(103, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//Emerson.g:688:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static EmersonParser_literal_return
literal(pEmersonParser ctx)
{   
    EmersonParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set596;

    pANTLR3_BASE_TREE set596_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(104)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set596       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set596_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:689:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set596=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= StringLiteral) && (LA(1) <= NumericLiteral)) || ((LA(1) >= 212) && (LA(1) <= 214)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set596)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(104, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred1_Emerson
static void synpred1_Emerson_fragment(pEmersonParser ctx ) 
{
	pANTLR3_COMMON_TOKEN    a;

	a       = NULL;

    // .//Emerson.g:141:5: (a= LTERM )
    // .//Emerson.g:141:5: a= LTERM
    {
        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_synpred1_Emerson854); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_EmersonEx; /* Prevent compiler warnings */
rulesynpred1_EmersonEx: ;

}
// $ANTLR end synpred1_Emerson

// $ANTLR start synpred4_Emerson
static void synpred4_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:145:19: ( LTERM )
    // .//Emerson.g:145:19: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred4_Emerson888); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred4_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred4_EmersonEx; /* Prevent compiler warnings */
rulesynpred4_EmersonEx: ;

}
// $ANTLR end synpred4_Emerson

// $ANTLR start synpred8_Emerson
static void synpred8_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:155:33: ( LTERM )
    // .//Emerson.g:155:33: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred8_Emerson945); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred8_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred8_EmersonEx; /* Prevent compiler warnings */
rulesynpred8_EmersonEx: ;

}
// $ANTLR end synpred8_Emerson

// $ANTLR start synpred11_Emerson
static void synpred11_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:159:15: ( LTERM )
    // .//Emerson.g:159:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred11_Emerson982); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred11_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred11_EmersonEx; /* Prevent compiler warnings */
rulesynpred11_EmersonEx: ;

}
// $ANTLR end synpred11_Emerson

// $ANTLR start synpred14_Emerson
static void synpred14_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:159:45: ( LTERM )
    // .//Emerson.g:159:45: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred14_Emerson993); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred14_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred14_EmersonEx; /* Prevent compiler warnings */
rulesynpred14_EmersonEx: ;

}
// $ANTLR end synpred14_Emerson

// $ANTLR start synpred22_Emerson
static void synpred22_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:168:8: ( LTERM )
    // .//Emerson.g:168:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred22_Emerson1084); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred22_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred22_EmersonEx; /* Prevent compiler warnings */
rulesynpred22_EmersonEx: ;

}
// $ANTLR end synpred22_Emerson

// $ANTLR start synpred24_Emerson
static void synpred24_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:173:11: ( noOpStatement )
    // .//Emerson.g:173:11: noOpStatement
    {
        FOLLOWPUSH(FOLLOW_noOpStatement_in_synpred24_Emerson1117);
        noOpStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred24_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred24_EmersonEx; /* Prevent compiler warnings */
rulesynpred24_EmersonEx: ;

}
// $ANTLR end synpred24_Emerson

// $ANTLR start synpred25_Emerson
static void synpred25_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:174:11: ( msgSendStatement )
    // .//Emerson.g:174:11: msgSendStatement
    {
        FOLLOWPUSH(FOLLOW_msgSendStatement_in_synpred25_Emerson1129);
        msgSendStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred25_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred25_EmersonEx; /* Prevent compiler warnings */
rulesynpred25_EmersonEx: ;

}
// $ANTLR end synpred25_Emerson

// $ANTLR start synpred26_Emerson
static void synpred26_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:175:4: ( msgRecvStatement )
    // .//Emerson.g:175:4: msgRecvStatement
    {
        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_synpred26_Emerson1134);
        msgRecvStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonEx; /* Prevent compiler warnings */
rulesynpred26_EmersonEx: ;

}
// $ANTLR end synpred26_Emerson

// $ANTLR start synpred27_Emerson
static void synpred27_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:176:11: ( statementBlock )
    // .//Emerson.g:176:11: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred27_Emerson1146);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred27_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred27_EmersonEx; /* Prevent compiler warnings */
rulesynpred27_EmersonEx: ;

}
// $ANTLR end synpred27_Emerson

// $ANTLR start synpred29_Emerson
static void synpred29_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:178:11: ( emptyStatement )
    // .//Emerson.g:178:11: emptyStatement
    {
        FOLLOWPUSH(FOLLOW_emptyStatement_in_synpred29_Emerson1170);
        emptyStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred29_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred29_EmersonEx; /* Prevent compiler warnings */
rulesynpred29_EmersonEx: ;

}
// $ANTLR end synpred29_Emerson

// $ANTLR start synpred30_Emerson
static void synpred30_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:179:11: ( expressionStatement )
    // .//Emerson.g:179:11: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred30_Emerson1182);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred30_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred30_EmersonEx; /* Prevent compiler warnings */
rulesynpred30_EmersonEx: ;

}
// $ANTLR end synpred30_Emerson

// $ANTLR start synpred37_Emerson
static void synpred37_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:186:4: ( labelledStatement )
    // .//Emerson.g:186:4: labelledStatement
    {
        FOLLOWPUSH(FOLLOW_labelledStatement_in_synpred37_Emerson1238);
        labelledStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred37_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred37_EmersonEx; /* Prevent compiler warnings */
rulesynpred37_EmersonEx: ;

}
// $ANTLR end synpred37_Emerson

// $ANTLR start synpred43_Emerson
static void synpred43_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:196:8: ( LTERM )
    // .//Emerson.g:196:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred43_Emerson1312); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred43_EmersonEx; /* Prevent compiler warnings */
rulesynpred43_EmersonEx: ;

}
// $ANTLR end synpred43_Emerson

// $ANTLR start synpred45_Emerson
static void synpred45_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:205:5: ( LTERM )
    // .//Emerson.g:205:5: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred45_Emerson1386); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred45_EmersonEx; /* Prevent compiler warnings */
rulesynpred45_EmersonEx: ;

}
// $ANTLR end synpred45_Emerson

// $ANTLR start synpred55_Emerson
static void synpred55_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:221:15: ( LTERM )
    // .//Emerson.g:221:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred55_Emerson1508); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred55_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred55_EmersonEx; /* Prevent compiler warnings */
rulesynpred55_EmersonEx: ;

}
// $ANTLR end synpred55_Emerson

// $ANTLR start synpred57_Emerson
static void synpred57_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:225:15: ( LTERM )
    // .//Emerson.g:225:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred57_Emerson1537); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred57_EmersonEx; /* Prevent compiler warnings */
rulesynpred57_EmersonEx: ;

}
// $ANTLR end synpred57_Emerson

// $ANTLR start synpred72_Emerson
static void synpred72_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_whenCheckedListSubsequent_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_whenCheckedListSubsequent_return

    // .//Emerson.g:260:29: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )
    // .//Emerson.g:260:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
    {
         MATCHT(138, &FOLLOW_138_in_synpred72_Emerson1789); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred72_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:260:33: ( LTERM )*

        for (;;)
        {
            int alt321=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA321_0 = LA(1);
                if ( (LA321_0 == LTERM) ) 
                {
                    alt321=1;
                }

            }
            switch (alt321) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred72_Emerson1791); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred72_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop321;	/* break out of the loop */
        	    break;
            }
        }
        loop321: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_synpred72_Emerson1796);
        s2=whenCheckedListSubsequent(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred72_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred72_EmersonEx; /* Prevent compiler warnings */
rulesynpred72_EmersonEx: ;

}
// $ANTLR end synpred72_Emerson

// $ANTLR start synpred76_Emerson
static void synpred76_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:265:52: ( LTERM )
    // .//Emerson.g:265:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred76_Emerson1846); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred76_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred76_EmersonEx; /* Prevent compiler warnings */
rulesynpred76_EmersonEx: ;

}
// $ANTLR end synpred76_Emerson

// $ANTLR start synpred78_Emerson
static void synpred78_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:265:87: ( LTERM )
    // .//Emerson.g:265:87: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred78_Emerson1859); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred78_EmersonEx; /* Prevent compiler warnings */
rulesynpred78_EmersonEx: ;

}
// $ANTLR end synpred78_Emerson

// $ANTLR start synpred79_Emerson
static void synpred79_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_statement_return

    // .//Emerson.g:265:73: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//Emerson.g:265:73: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//Emerson.g:265:73: ( LTERM )*

        for (;;)
        {
            int alt322=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA322_0 = LA(1);
                if ( (LA322_0 == LTERM) ) 
                {
                    alt322=1;
                }

            }
            switch (alt322) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred79_Emerson1854); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred79_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop322;	/* break out of the loop */
        	    break;
            }
        }
        loop322: ; /* Jump out to here if this rule does not match */

         MATCHT(146, &FOLLOW_146_in_synpred79_Emerson1857); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred79_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:265:87: ( LTERM )*

        for (;;)
        {
            int alt323=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA323_0 = LA(1);
                if ( (LA323_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA323_2 = LA(2);
                        if ( (synpred78_Emerson(ctx)) ) 
                        {
                            alt323=1;
                        }

                    }
                }

            }
            switch (alt323) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred79_Emerson1859); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred79_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop323;	/* break out of the loop */
        	    break;
            }
        }
        loop323: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred79_Emerson1864);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred79_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred79_EmersonEx; /* Prevent compiler warnings */
rulesynpred79_EmersonEx: ;

}
// $ANTLR end synpred79_Emerson

// $ANTLR start synpred82_Emerson
static void synpred82_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:271:4: ( forStatement )
    // .//Emerson.g:271:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred82_Emerson1906);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred82_EmersonEx; /* Prevent compiler warnings */
rulesynpred82_EmersonEx: ;

}
// $ANTLR end synpred82_Emerson

// $ANTLR start synpred83_Emerson
static void synpred83_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:276:9: ( LTERM )
    // .//Emerson.g:276:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred83_Emerson1925); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred83_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred83_EmersonEx; /* Prevent compiler warnings */
rulesynpred83_EmersonEx: ;

}
// $ANTLR end synpred83_Emerson

// $ANTLR start synpred90_Emerson
static void synpred90_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:280:52: ( LTERM )
    // .//Emerson.g:280:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred90_Emerson1992); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred90_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred90_EmersonEx; /* Prevent compiler warnings */
rulesynpred90_EmersonEx: ;

}
// $ANTLR end synpred90_Emerson

// $ANTLR start synpred101_Emerson
static void synpred101_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:284:149: ( LTERM )
    // .//Emerson.g:284:149: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred101_Emerson2070); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred101_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred101_EmersonEx; /* Prevent compiler warnings */
rulesynpred101_EmersonEx: ;

}
// $ANTLR end synpred101_Emerson

// $ANTLR start synpred109_Emerson
static void synpred109_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:293:99: ( LTERM )
    // .//Emerson.g:293:99: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred109_Emerson2179); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred109_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred109_EmersonEx; /* Prevent compiler warnings */
rulesynpred109_EmersonEx: ;

}
// $ANTLR end synpred109_Emerson

// $ANTLR start synpred121_Emerson
static void synpred121_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:314:51: ( LTERM )
    // .//Emerson.g:314:51: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred121_Emerson2351); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred121_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred121_EmersonEx; /* Prevent compiler warnings */
rulesynpred121_EmersonEx: ;

}
// $ANTLR end synpred121_Emerson

// $ANTLR start synpred123_Emerson
static void synpred123_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:318:26: ( LTERM )
    // .//Emerson.g:318:26: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2382); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred123_EmersonEx; /* Prevent compiler warnings */
rulesynpred123_EmersonEx: ;

}
// $ANTLR end synpred123_Emerson

// $ANTLR start synpred137_Emerson
static void synpred137_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:330:40: ( LTERM )
    // .//Emerson.g:330:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred137_Emerson2532); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred137_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred137_EmersonEx; /* Prevent compiler warnings */
rulesynpred137_EmersonEx: ;

}
// $ANTLR end synpred137_Emerson

// $ANTLR start synpred140_Emerson
static void synpred140_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:334:25: ( LTERM )
    // .//Emerson.g:334:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred140_Emerson2567); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred140_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred140_EmersonEx; /* Prevent compiler warnings */
rulesynpred140_EmersonEx: ;

}
// $ANTLR end synpred140_Emerson

// $ANTLR start synpred145_Emerson
static void synpred145_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:347:22: ( LTERM )
    // .//Emerson.g:347:22: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred145_Emerson2676); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred145_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred145_EmersonEx; /* Prevent compiler warnings */
rulesynpred145_EmersonEx: ;

}
// $ANTLR end synpred145_Emerson

// $ANTLR start synpred156_Emerson
static void synpred156_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:369:4: ( callExpression )
    // .//Emerson.g:369:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred156_Emerson2907);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred156_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred156_EmersonEx; /* Prevent compiler warnings */
rulesynpred156_EmersonEx: ;

}
// $ANTLR end synpred156_Emerson

// $ANTLR start synpred159_Emerson
static void synpred159_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_memAndCallExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_memAndCallExpression_return

	EmersonParser_leftHandSideExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return




    // .//Emerson.g:374:4: (e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) )
    // .//Emerson.g:374:4: e1= memAndCallExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
    {
        FOLLOWPUSH(FOLLOW_memAndCallExpression_in_synpred159_Emerson2934);
        e1=memAndCallExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred159_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:374:28: ( LTERM )*

        for (;;)
        {
            int alt334=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA334_0 = LA(1);
                if ( (LA334_0 == LTERM) ) 
                {
                    alt334=1;
                }

            }
            switch (alt334) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred159_Emerson2936); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred159_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop334;	/* break out of the loop */
        	    break;
            }
        }
        loop334: ; /* Jump out to here if this rule does not match */

         MATCHT(164, &FOLLOW_164_in_synpred159_Emerson2938); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred159_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred159_Emerson2942);
        e2=leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred159_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        if ( LA(1) == LTERM || LA(1) == 141 )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred159_Emerson2944;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred159_Emerson2944);    goto rulesynpred159_EmersonEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred159_EmersonEx; /* Prevent compiler warnings */
rulesynpred159_EmersonEx: ;

}
// $ANTLR end synpred159_Emerson

// $ANTLR start synpred163_Emerson
static void synpred163_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:389:11: ( conditionalExpression )
    // .//Emerson.g:389:11: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred163_Emerson3069);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred163_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred163_EmersonEx; /* Prevent compiler warnings */
rulesynpred163_EmersonEx: ;

}
// $ANTLR end synpred163_Emerson

// $ANTLR start synpred166_Emerson
static void synpred166_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:394:4: ( conditionalExpressionNoIn )
    // .//Emerson.g:394:4: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred166_Emerson3116);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred166_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred166_EmersonEx; /* Prevent compiler warnings */
rulesynpred166_EmersonEx: ;

}
// $ANTLR end synpred166_Emerson

// $ANTLR start synpred169_Emerson
static void synpred169_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:400:4: ( callExpression )
    // .//Emerson.g:400:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred169_Emerson3164);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred169_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred169_EmersonEx; /* Prevent compiler warnings */
rulesynpred169_EmersonEx: ;

}
// $ANTLR end synpred169_Emerson

// $ANTLR start synpred170_Emerson
static void synpred170_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:405:4: ( memberExpression )
    // .//Emerson.g:405:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred170_Emerson3189);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred170_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred170_EmersonEx; /* Prevent compiler warnings */
rulesynpred170_EmersonEx: ;

}
// $ANTLR end synpred170_Emerson

// $ANTLR start synpred176_Emerson
static void synpred176_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:421:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:421:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:421:47: ( LTERM )*

        for (;;)
        {
            int alt335=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA335_0 = LA(1);
                if ( (LA335_0 == LTERM) ) 
                {
                    alt335=1;
                }

            }
            switch (alt335) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred176_Emerson3283); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred176_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop335;	/* break out of the loop */
        	    break;
            }
        }
        loop335: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred176_Emerson3286);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred176_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred176_EmersonEx; /* Prevent compiler warnings */
rulesynpred176_EmersonEx: ;

}
// $ANTLR end synpred176_Emerson

// $ANTLR start synpred178_Emerson
static void synpred178_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:421:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:421:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:421:136: ( LTERM )*

        for (;;)
        {
            int alt336=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA336_0 = LA(1);
                if ( (LA336_0 == LTERM) ) 
                {
                    alt336=1;
                }

            }
            switch (alt336) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred178_Emerson3303); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred178_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop336;	/* break out of the loop */
        	    break;
            }
        }
        loop336: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred178_Emerson3306);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred178_EmersonEx; /* Prevent compiler warnings */
rulesynpred178_EmersonEx: ;

}
// $ANTLR end synpred178_Emerson

// $ANTLR start synpred181_Emerson
static void synpred181_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:422:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:422:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:422:48: ( LTERM )*

        for (;;)
        {
            int alt340=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA340_0 = LA(1);
                if ( (LA340_0 == LTERM) ) 
                {
                    alt340=1;
                }

            }
            switch (alt340) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred181_Emerson3333); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred181_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop340;	/* break out of the loop */
        	    break;
            }
        }
        loop340: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred181_Emerson3336);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred181_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred181_EmersonEx; /* Prevent compiler warnings */
rulesynpred181_EmersonEx: ;

}
// $ANTLR end synpred181_Emerson

// $ANTLR start synpred183_Emerson
static void synpred183_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:422:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:422:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:422:136: ( LTERM )*

        for (;;)
        {
            int alt341=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA341_0 = LA(1);
                if ( (LA341_0 == LTERM) ) 
                {
                    alt341=1;
                }

            }
            switch (alt341) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred183_Emerson3352); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred183_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop341;	/* break out of the loop */
        	    break;
            }
        }
        loop341: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred183_Emerson3355);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred183_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred183_EmersonEx; /* Prevent compiler warnings */
rulesynpred183_EmersonEx: ;

}
// $ANTLR end synpred183_Emerson

// $ANTLR start synpred188_Emerson
static void synpred188_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:423:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:423:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:423:85: ( LTERM )*

        for (;;)
        {
            int alt345=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA345_0 = LA(1);
                if ( (LA345_0 == LTERM) ) 
                {
                    alt345=1;
                }

            }
            switch (alt345) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred188_Emerson3401); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred188_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop345;	/* break out of the loop */
        	    break;
            }
        }
        loop345: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3404);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred188_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred188_EmersonEx; /* Prevent compiler warnings */
rulesynpred188_EmersonEx: ;

}
// $ANTLR end synpred188_Emerson

// $ANTLR start synpred190_Emerson
static void synpred190_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:423:147: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:423:147: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:423:147: ( LTERM )*

        for (;;)
        {
            int alt346=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA346_0 = LA(1);
                if ( (LA346_0 == LTERM) ) 
                {
                    alt346=1;
                }

            }
            switch (alt346) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred190_Emerson3417); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred190_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop346;	/* break out of the loop */
        	    break;
            }
        }
        loop346: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred190_Emerson3420);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred190_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred190_EmersonEx; /* Prevent compiler warnings */
rulesynpred190_EmersonEx: ;

}
// $ANTLR end synpred190_Emerson

// $ANTLR start synpred194_Emerson
static void synpred194_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:432:82: ( ( LTERM )* arguments )
    // .//Emerson.g:432:82: ( LTERM )* arguments
    {

        // .//Emerson.g:432:82: ( LTERM )*

        for (;;)
        {
            int alt347=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA347_0 = LA(1);
                if ( (LA347_0 == LTERM) ) 
                {
                    alt347=1;
                }

            }
            switch (alt347) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred194_Emerson3504); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred194_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop347;	/* break out of the loop */
        	    break;
            }
        }
        loop347: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred194_Emerson3507);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred194_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred194_EmersonEx; /* Prevent compiler warnings */
rulesynpred194_EmersonEx: ;

}
// $ANTLR end synpred194_Emerson

// $ANTLR start synpred196_Emerson
static void synpred196_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:432:138: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:432:138: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:432:138: ( LTERM )*

        for (;;)
        {
            int alt348=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA348_0 = LA(1);
                if ( (LA348_0 == LTERM) ) 
                {
                    alt348=1;
                }

            }
            switch (alt348) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred196_Emerson3522); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred196_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop348;	/* break out of the loop */
        	    break;
            }
        }
        loop348: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred196_Emerson3525);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred196_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred196_EmersonEx; /* Prevent compiler warnings */
rulesynpred196_EmersonEx: ;

}
// $ANTLR end synpred196_Emerson

// $ANTLR start synpred198_Emerson
static void synpred198_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:432:207: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:432:207: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:432:207: ( LTERM )*

        for (;;)
        {
            int alt349=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA349_0 = LA(1);
                if ( (LA349_0 == LTERM) ) 
                {
                    alt349=1;
                }

            }
            switch (alt349) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred198_Emerson3540); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred198_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop349;	/* break out of the loop */
        	    break;
            }
        }
        loop349: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred198_Emerson3543);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred198_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred198_EmersonEx; /* Prevent compiler warnings */
rulesynpred198_EmersonEx: ;

}
// $ANTLR end synpred198_Emerson

// $ANTLR start synpred201_Emerson
static void synpred201_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:442:15: ( LTERM )
    // .//Emerson.g:442:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred201_Emerson3612); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred201_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred201_EmersonEx; /* Prevent compiler warnings */
rulesynpred201_EmersonEx: ;

}
// $ANTLR end synpred201_Emerson

// $ANTLR start synpred204_Emerson
static void synpred204_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:442:11: ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' )
    // .//Emerson.g:442:11: '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')'
    {
         MATCHT(136, &FOLLOW_136_in_synpred204_Emerson3610); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred204_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:442:15: ( LTERM )*

        for (;;)
        {
            int alt350=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA350_0 = LA(1);
                if ( (LA350_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA350_2 = LA(2);
                        if ( (synpred201_Emerson(ctx)) ) 
                        {
                            alt350=1;
                        }

                    }
                }

            }
            switch (alt350) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred204_Emerson3612); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred204_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop350;	/* break out of the loop */
        	    break;
            }
        }
        loop350: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:442:22: ( assignmentExpression )?
        {
            int alt351=2;
            {
                int LA351_0 = LA(1);
                if ( (((LA351_0 >= Identifier) && (LA351_0 <= NumericLiteral)) || ((LA351_0 >= 135) && (LA351_0 <= 136)) || LA351_0 == 139 || ((LA351_0 >= 165) && (LA351_0 <= 166)) || LA351_0 == 190 || ((LA351_0 >= 198) && (LA351_0 <= 199)) || ((LA351_0 >= 203) && (LA351_0 <= 214))) ) 
                {
                    alt351=1;
                }
            }
            switch (alt351) 
            {
        	case 1:
        	    // .//Emerson.g:442:23: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred204_Emerson3616);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred204_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:442:46: ( LTERM )*

        for (;;)
        {
            int alt352=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA352_0 = LA(1);
                if ( (LA352_0 == LTERM) ) 
                {
                    alt352=1;
                }

            }
            switch (alt352) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred204_Emerson3620); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred204_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop352;	/* break out of the loop */
        	    break;
            }
        }
        loop352: ; /* Jump out to here if this rule does not match */

         MATCHT(137, &FOLLOW_137_in_synpred204_Emerson3623); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred204_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred204_EmersonEx; /* Prevent compiler warnings */
rulesynpred204_EmersonEx: ;

}
// $ANTLR end synpred204_Emerson

// $ANTLR start synpred279_Emerson
static void synpred279_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:538:42: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression )
    // .//Emerson.g:538:42: ( LTERM )* relationalOps ( LTERM )* shiftExpression
    {

        // .//Emerson.g:538:42: ( LTERM )*

        for (;;)
        {
            int alt386=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA386_0 = LA(1);
                if ( (LA386_0 == LTERM) ) 
                {
                    alt386=1;
                }

            }
            switch (alt386) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred279_Emerson4639); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred279_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop386;	/* break out of the loop */
        	    break;
            }
        }
        loop386: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_relationalOps_in_synpred279_Emerson4642);
        relationalOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred279_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:538:63: ( LTERM )*

        for (;;)
        {
            int alt387=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA387_0 = LA(1);
                if ( (LA387_0 == LTERM) ) 
                {
                    alt387=1;
                }

            }
            switch (alt387) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred279_Emerson4644); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred279_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop387;	/* break out of the loop */
        	    break;
            }
        }
        loop387: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_shiftExpression_in_synpred279_Emerson4647);
        shiftExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred279_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred279_EmersonEx; /* Prevent compiler warnings */
rulesynpred279_EmersonEx: ;

}
// $ANTLR end synpred279_Emerson

// $ANTLR start synpred295_Emerson
static void synpred295_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:571:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//Emerson.g:571:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//Emerson.g:571:59: ( LTERM )*

        for (;;)
        {
            int alt392=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA392_0 = LA(1);
                if ( (LA392_0 == LTERM) ) 
                {
                    alt392=1;
                }

            }
            switch (alt392) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred295_Emerson4881); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred295_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop392;	/* break out of the loop */
        	    break;
            }
        }
        loop392: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred295_Emerson4884);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred295_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:571:73: ( LTERM )*

        for (;;)
        {
            int alt393=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA393_0 = LA(1);
                if ( (LA393_0 == LTERM) ) 
                {
                    alt393=1;
                }

            }
            switch (alt393) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred295_Emerson4886); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred295_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop393;	/* break out of the loop */
        	    break;
            }
        }
        loop393: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred295_Emerson4889);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred295_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred295_EmersonEx; /* Prevent compiler warnings */
rulesynpred295_EmersonEx: ;

}
// $ANTLR end synpred295_Emerson

// $ANTLR start synpred301_Emerson
static void synpred301_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:586:4: ( leftHandSideExpression '--' )
    // .//Emerson.g:586:4: leftHandSideExpression '--'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred301_Emerson4993);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred301_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(203, &FOLLOW_203_in_synpred301_Emerson4995); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred301_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred301_EmersonEx; /* Prevent compiler warnings */
rulesynpred301_EmersonEx: ;

}
// $ANTLR end synpred301_Emerson

// $ANTLR start synpred302_Emerson
static void synpred302_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:587:4: ( leftHandSideExpression '++' )
    // .//Emerson.g:587:4: leftHandSideExpression '++'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred302_Emerson5009);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred302_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(204, &FOLLOW_204_in_synpred302_Emerson5011); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred302_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred302_EmersonEx; /* Prevent compiler warnings */
rulesynpred302_EmersonEx: ;

}
// $ANTLR end synpred302_Emerson

// $ANTLR start synpred318_Emerson
static void synpred318_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:619:7: ( objectLiteral )
    // .//Emerson.g:619:7: objectLiteral
    {
        FOLLOWPUSH(FOLLOW_objectLiteral_in_synpred318_Emerson5234);
        objectLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred318_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred318_EmersonEx; /* Prevent compiler warnings */
rulesynpred318_EmersonEx: ;

}
// $ANTLR end synpred318_Emerson

// $ANTLR start synpred319_Emerson
static void synpred319_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:620:7: ( patternLiteral )
    // .//Emerson.g:620:7: patternLiteral
    {
        FOLLOWPUSH(FOLLOW_patternLiteral_in_synpred319_Emerson5242);
        patternLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred319_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred319_EmersonEx; /* Prevent compiler warnings */
rulesynpred319_EmersonEx: ;

}
// $ANTLR end synpred319_Emerson

// $ANTLR start synpred330_Emerson
static void synpred330_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:642:9: ( LTERM )
    // .//Emerson.g:642:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred330_Emerson5437); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred330_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred330_EmersonEx; /* Prevent compiler warnings */
rulesynpred330_EmersonEx: ;

}
// $ANTLR end synpred330_Emerson

// $ANTLR start synpred333_Emerson
static void synpred333_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:642:5: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' )
    // .//Emerson.g:642:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
    {
         MATCHT(166, &FOLLOW_166_in_synpred333_Emerson5435); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred333_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:642:9: ( LTERM )*

        for (;;)
        {
            int alt396=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA396_0 = LA(1);
                if ( (LA396_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA396_2 = LA(2);
                        if ( (synpred330_Emerson(ctx)) ) 
                        {
                            alt396=1;
                        }

                    }
                }

            }
            switch (alt396) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred333_Emerson5437); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop396;	/* break out of the loop */
        	    break;
            }
        }
        loop396: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:642:16: ( assignmentExpression )?
        {
            int alt397=2;
            {
                int LA397_0 = LA(1);
                if ( (((LA397_0 >= Identifier) && (LA397_0 <= NumericLiteral)) || ((LA397_0 >= 135) && (LA397_0 <= 136)) || LA397_0 == 139 || ((LA397_0 >= 165) && (LA397_0 <= 166)) || LA397_0 == 190 || ((LA397_0 >= 198) && (LA397_0 <= 199)) || ((LA397_0 >= 203) && (LA397_0 <= 214))) ) 
                {
                    alt397=1;
                }
            }
            switch (alt397) 
            {
        	case 1:
        	    // .//Emerson.g:642:17: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred333_Emerson5441);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:642:40: ( LTERM )*

        for (;;)
        {
            int alt398=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA398_0 = LA(1);
                if ( (LA398_0 == LTERM) ) 
                {
                    alt398=1;
                }

            }
            switch (alt398) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred333_Emerson5445); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop398;	/* break out of the loop */
        	    break;
            }
        }
        loop398: ; /* Jump out to here if this rule does not match */

         MATCHT(167, &FOLLOW_167_in_synpred333_Emerson5448); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred333_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred333_EmersonEx; /* Prevent compiler warnings */
rulesynpred333_EmersonEx: ;

}
// $ANTLR end synpred333_Emerson

// $ANTLR start synpred338_Emerson
static void synpred338_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:648:9: ( LTERM )
    // .//Emerson.g:648:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred338_Emerson5519); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred338_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred338_EmersonEx; /* Prevent compiler warnings */
rulesynpred338_EmersonEx: ;

}
// $ANTLR end synpred338_Emerson

// $ANTLR start synpred341_Emerson
static void synpred341_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:648:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//Emerson.g:648:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(139, &FOLLOW_139_in_synpred341_Emerson5517); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred341_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:648:9: ( LTERM )*

        for (;;)
        {
            int alt400=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA400_0 = LA(1);
                if ( (LA400_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA400_2 = LA(2);
                        if ( (synpred338_Emerson(ctx)) ) 
                        {
                            alt400=1;
                        }

                    }
                }

            }
            switch (alt400) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred341_Emerson5519); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred341_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop400;	/* break out of the loop */
        	    break;
            }
        }
        loop400: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:648:16: ( propertyNameAndValue )?
        {
            int alt401=2;
            {
                int LA401_0 = LA(1);
                if ( (((LA401_0 >= Identifier) && (LA401_0 <= NumericLiteral))) ) 
                {
                    alt401=1;
                }
            }
            switch (alt401) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred341_Emerson5522);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred341_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:648:38: ( LTERM )*

        for (;;)
        {
            int alt402=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA402_0 = LA(1);
                if ( (LA402_0 == LTERM) ) 
                {
                    alt402=1;
                }

            }
            switch (alt402) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred341_Emerson5525); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred341_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop402;	/* break out of the loop */
        	    break;
            }
        }
        loop402: ; /* Jump out to here if this rule does not match */

         MATCHT(140, &FOLLOW_140_in_synpred341_Emerson5528); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred341_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred341_EmersonEx; /* Prevent compiler warnings */
rulesynpred341_EmersonEx: ;

}
// $ANTLR end synpred341_Emerson

// $ANTLR start synpred347_Emerson
static void synpred347_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:661:58: ( LTERM )
    // .//Emerson.g:661:58: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred347_Emerson5615); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred347_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred347_EmersonEx; /* Prevent compiler warnings */
rulesynpred347_EmersonEx: ;

}
// $ANTLR end synpred347_Emerson

// $ANTLR start synpred351_Emerson
static void synpred351_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:665:29: ( LTERM )
    // .//Emerson.g:665:29: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred351_Emerson5662); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred351_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred351_EmersonEx; /* Prevent compiler warnings */
rulesynpred351_EmersonEx: ;

}
// $ANTLR end synpred351_Emerson

// $ANTLR start synpred353_Emerson
static void synpred353_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:665:64: ( LTERM )
    // .//Emerson.g:665:64: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson5676); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred353_EmersonEx; /* Prevent compiler warnings */
rulesynpred353_EmersonEx: ;

}
// $ANTLR end synpred353_Emerson

// $ANTLR start synpred355_Emerson
static void synpred355_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:665:100: ( LTERM )
    // .//Emerson.g:665:100: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred355_Emerson5689); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred355_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred355_EmersonEx; /* Prevent compiler warnings */
rulesynpred355_EmersonEx: ;

}
// $ANTLR end synpred355_Emerson

// $ANTLR start synpred358_Emerson
static void synpred358_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_expression_return name;
	#undef	RETURN_TYPE_name
	#define	RETURN_TYPE_name EmersonParser_expression_return

	EmersonParser_expression_return val;
	#undef	RETURN_TYPE_val
	#define	RETURN_TYPE_val EmersonParser_expression_return

	EmersonParser_expression_return proto;
	#undef	RETURN_TYPE_proto
	#define	RETURN_TYPE_proto EmersonParser_expression_return





    // .//Emerson.g:665:5: ( ( LTERM )* name= expression ( LTERM )* ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )? )
    // .//Emerson.g:665:5: ( LTERM )* name= expression ( LTERM )* ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )?
    {

        // .//Emerson.g:665:5: ( LTERM )*

        for (;;)
        {
            int alt413=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA413_0 = LA(1);
                if ( (LA413_0 == LTERM) ) 
                {
                    alt413=1;
                }

            }
            switch (alt413) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred358_Emerson5654); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred358_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop413;	/* break out of the loop */
        	    break;
            }
        }
        loop413: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_expression_in_synpred358_Emerson5659);
        name=expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred358_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:665:29: ( LTERM )*

        for (;;)
        {
            int alt414=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA414_0 = LA(1);
                if ( (LA414_0 == LTERM) ) 
                {
                    alt414=1;
                }

            }
            switch (alt414) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred358_Emerson5662); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred358_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop414;	/* break out of the loop */
        	    break;
            }
        }
        loop414: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:665:36: ( ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )? )?
        {
            int alt420=2;
            {
                int LA420_0 = LA(1);
                if ( (LA420_0 == 155) ) 
                {
                    alt420=1;
                }
            }
            switch (alt420) 
            {
        	case 1:
        	    // .//Emerson.g:665:37: ':' ( LTERM )* val= expression ( LTERM )* ( ':' ( LTERM )* proto= expression ( LTERM )* )?
        	    {
        	         MATCHT(155, &FOLLOW_155_in_synpred358_Emerson5666); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred358_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//Emerson.g:665:41: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt415=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA415_0 = LA(1);
        	                if ( (LA415_0 == LTERM) ) 
        	                {
        	                    alt415=1;
        	                }

        	            }
        	            switch (alt415) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred358_Emerson5668); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulesynpred358_EmersonEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop415;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop415: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_synpred358_Emerson5673);
        	        val=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred358_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // .//Emerson.g:665:64: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt416=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA416_0 = LA(1);
        	                if ( (LA416_0 == LTERM) ) 
        	                {
        	                    alt416=1;
        	                }

        	            }
        	            switch (alt416) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred358_Emerson5676); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulesynpred358_EmersonEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop416;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop416: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:665:71: ( ':' ( LTERM )* proto= expression ( LTERM )* )?
        	        {
        	            int alt419=2;
        	            {
        	                int LA419_0 = LA(1);
        	                if ( (LA419_0 == 155) ) 
        	                {
        	                    alt419=1;
        	                }
        	            }
        	            switch (alt419) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:665:72: ':' ( LTERM )* proto= expression ( LTERM )*
        	        	    {
        	        	         MATCHT(155, &FOLLOW_155_in_synpred358_Emerson5680); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulesynpred358_EmersonEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        // .//Emerson.g:665:76: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt417=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA417_0 = LA(1);
        	        	                if ( (LA417_0 == LTERM) ) 
        	        	                {
        	        	                    alt417=1;
        	        	                }

        	        	            }
        	        	            switch (alt417) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred358_Emerson5682); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulesynpred358_EmersonEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return ;
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop417;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop417: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_expression_in_synpred358_Emerson5687);
        	        	        proto=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulesynpred358_EmersonEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        // .//Emerson.g:665:100: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt418=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA418_0 = LA(1);
        	        	                if ( (LA418_0 == LTERM) ) 
        	        	                {
        	        	                    alt418=1;
        	        	                }

        	        	            }
        	        	            switch (alt418) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred358_Emerson5689); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulesynpred358_EmersonEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return ;
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop418;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop418: ; /* Jump out to here if this rule does not match */


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred358_EmersonEx; /* Prevent compiler warnings */
rulesynpred358_EmersonEx: ;

}
// $ANTLR end synpred358_Emerson

// $ANTLR start synpred363_Emerson
static void synpred363_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:666:76: ( LTERM )
    // .//Emerson.g:666:76: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred363_Emerson5751); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred363_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred363_EmersonEx; /* Prevent compiler warnings */
rulesynpred363_EmersonEx: ;

}
// $ANTLR end synpred363_Emerson
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred26_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred79_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred79_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred319_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred319_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred190_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred190_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred140_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred140_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred22_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred22_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred37_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred37_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred123_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred123_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred358_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred358_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred101_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred101_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred341_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred341_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred178_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred178_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred30_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred30_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred137_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred137_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred181_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred181_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred76_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred76_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred27_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred27_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred176_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred176_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred121_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred121_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred279_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred279_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred363_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred363_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred43_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred43_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred353_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred353_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred318_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred318_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred57_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred57_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred295_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred295_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred83_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred83_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred166_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred166_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred333_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred333_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred145_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred145_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred45_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred45_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred29_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred29_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred188_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred188_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred347_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred347_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred302_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred302_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred201_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred201_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred4_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred4_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred90_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred90_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred163_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred163_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred330_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred330_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred156_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred156_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred204_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred204_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred72_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred72_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred55_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred55_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred11_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred11_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred14_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred14_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred198_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred198_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred196_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred196_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred109_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred109_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred159_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred159_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred170_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred170_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred301_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred301_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred8_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred8_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred351_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred351_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred82_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred82_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred183_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred183_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred25_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred25_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred169_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred169_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred78_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred78_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred24_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred24_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred355_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred355_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred338_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred338_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred194_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred194_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
